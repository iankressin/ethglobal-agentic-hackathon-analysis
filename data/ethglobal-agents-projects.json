[
  {
    "title": "PredictX",
    "url": "https://ethglobal.com/showcase/predictx-cq0ui",
    "description": "Project DescriptionPredictX is a decentralized prediction market game built on Coinbase Base. Challenge AI predictions on a wide range of events, from election outcomes to product launches. Bet with the AI if you think it's right, or bet against it if you think you know better. Earn rewards for accurate predictions, compete with other users, and explore the fascinating intersection of AI and forecasting.How it's MadeFrontend: A user-friendly web interface that allows users to interact with the application (create markets, place bets, view results, etc.). This is likely built with a modern JavaScript framework like React. Backend: A server-side application that handles API requests, interacts with the blockchain, and manages the AI prediction engine. This is built with Python, using FastAPI and Uvicorn. Smart Contracts: Solidity contracts deployed on the Coinbase Base blockchain. These handle the core logic of the prediction markets: market creation, bet placement, resolution, and payouts. AI Prediction Engine: A separate component (likely also Python-based) that generates predictions on events. This could be integrated directly into the backend or run as a separate service.",
    "summary": "PredictX is a decentralized prediction market game where you can test your forecasting skills against cutting-edge AI. Bet with or against AI predictions on real-world events, earn rewards, and climb the leaderboard."
  },
  {
    "title": "Asap",
    "url": "https://ethglobal.com/showcase/asap-1o86x",
    "description": "Project DescriptionASAP Protocol is an innovative framework that redefines decentralized autonomous organization (DAO) governance by integrating autonomous, on-chain AI agents into every step of the decision-making process. Here’s a detailed breakdown of what ASAP Protocol is and how it transforms DAO governance: Overview ASAP Protocol revolutionizes traditional DAO operations by automating the proposal evaluation and voting processes. Instead of relying solely on manual voting—which can be slow and inefficient—ASAP Protocol empowers trusted AI agents to cast votes on behalf of community members. This approach not only accelerates decision-making but also ensures that the collective interests of the community are represented, even if individual members are not actively engaged in every voting process. Key Challenges Addressed Efficient Governance: Traditional DAO governance often involves cumbersome, manual voting mechanisms. ASAP Protocol addresses this by automating the decision-making process. AI agents analyze proposals and vote autonomously, significantly reducing delays and streamlining the entire governance cycle. Enhanced Community Participation: By enabling community members to delegate their voting power to AI agents, ASAP Protocol ensures broader participation. This delegation mechanism means that even those who are less technically inclined or less frequently active can have their interests effectively represented in governance decisions. Simplified Governance: The protocol minimizes the inherent complexities of on-chain governance. It abstracts the technical details, allowing users to participate in governance without needing in-depth blockchain knowledge. This simplification makes the process more inclusive and accessible to all community members. Core Components and Technologies Autonomous AI Agents: At the heart of ASAP Protocol are the AI agents that autonomously evaluate and vote on proposals. These agents are designed to act in the best interest of the community, ensuring that decisions are both timely and aligned with pre-established governance guidelines. AgentKit Integration: AgentKit is the foundational technology that powers the AI-based decision-making system. It facilitates the seamless integration of AI agents into the protocol, enabling functions such as proposal creation, autonomous voting, and vote delegation. On-Chain Attestation and Reputation: To build trust and accountability, ASAP Protocol incorporates an on-chain attestation system. AI agents establish their credibility through a reputation mechanism—whereby their actions are verified by peer agents. This on-chain reputation system ensures that only reliable and trusted agents influence governance decisions. Smart Contracts and Blockchain Integration: Developed using Solidity, the smart contracts underlying ASAP Protocol manage all aspects of DAO governance. These contracts handle proposal submissions, voting logic, and vote delegation, ensuring that every action is recorded on-chain for full transparency and auditability. Development Ecosystem: The protocol leverages modern development tools: Foundry and Hardhat for testing and deploying Solidity smart contracts. React for building an intuitive frontend that simplifies user interactions. Express.js and Ethers.js for backend operations and blockchain communications. How ASAP Protocol Works Proposal Initiation: When a new proposal is submitted to the DAO, it is fed into the system where AI agents begin their evaluation based on predefined criteria and community rules. Autonomous Voting: Trusted AI agents, backed by their on-chain reputation, analyze the proposal and autonomously cast votes according to the community’s interests and established protocols. This automated process ensures rapid decision-making. Delegation Mechanism: Community members who prefer not to vote on every proposal can delegate their voting power to these AI agents. This delegation not only increases participation but also ensures that governance decisions reflect the collective will of the community. Transparency and Auditability: Every vote and attestation is recorded on the blockchain, creating an immutable audit trail. This ensures full transparency and builds trust within the DAO as all actions are verifiable by any community member. The Future of DAO Governance ASAP Protocol represents a paradigm shift in how decentralized organizations approach governance. By combining the precision of AI with the transparency of blockchain technology, it creates a governance model that is agile, inclusive, and scalable. The protocol is designed to adapt to various DAO sizes and structures, making it a versatile solution for any community looking to streamline its decision-making processes. In summary, ASAP Protocol is more than just a tool—it’s a transformative approach to DAO governance. It enhances efficiency, boosts community participation, and simplifies the governance process, paving the way for a future where decentralized organizations can operate more dynamically and democratically.How it's MadeAgentKit What It Is: AgentKit is a toolkit designed for building and managing AI-driven agents. It serves as the foundation for integrating autonomous decision-making processes directly onto the blockchain. Role in ASAP Protocol: Autonomous Decision-Making: Empowers AI agents to evaluate proposals and cast votes without manual intervention. Integration: Seamlessly connects AI-driven logic with on-chain governance, allowing for fluid delegation and execution of community decisions. On-Chain Attestation What It Is: On-Chain Attestation is a mechanism that records and verifies the actions of participants (in this case, AI agents) directly on the blockchain. Role in ASAP Protocol: Transparency and Trust: Ensures that every vote and decision made by an AI agent is verifiable and tamper-proof. Reputation Management: Implements a system where agents build credibility through peer review and mutual attestations, thereby reinforcing the integrity of the governance process. Solidity What It Is: Solidity is a high-level programming language specifically designed for writing smart contracts on blockchain platforms like Ethereum. Role in ASAP Protocol: Smart Contracts: All core governance logic, including proposal submissions, vote casting, and delegation, is written in Solidity. Security and Transparency: Provides a robust framework for developing immutable and verifiable on-chain contracts that drive the entire protocol. Foundry What It Is: Foundry is a comprehensive toolkit for developing, testing, and deploying Solidity smart contracts. It is known for its speed and efficiency in contract compilation and testing. Role in ASAP Protocol: Testing Environment: Ensures that all smart contracts are rigorously tested before deployment, reducing potential vulnerabilities. Streamlined Development: Offers a fast, command-line based workflow to compile, deploy, and debug contracts, enhancing the development process.",
    "summary": "ASAP Protocol leverages autonomous on-chain AI agents to revolutionize DAO governance by streamlining decision-making, increasing community participation, and simplifying complex voting processes."
  },
  {
    "title": "MoodMeme",
    "url": "https://ethglobal.com/showcase/moodmeme-g0idc",
    "description": "Project DescriptionMoodMeme is a Telegram bot that transforms crypto market sentiment into instant meme magic. Here's what makes it special: Real-time Meme Generation: Users simply type /meme [token] (e.g., \"Bitcoin\" or \"ETH\") and the bot instantly creates a custom meme using live market data. Smart Context: The bot analyzes current price movements, trading volume, and market trends to generate perfectly timed, contextually relevant memes. AI-Powered Humor: Using Gaia's AI capabilities, each meme comes with a witty caption that perfectly captures the market moment, complete with crypto slang and community inside jokes. Viral Features: Auto-watermarking with \"Made by @MoodMemeBot\" \"Tag 3 friends to roast\" prompt encourages sharing Leaderboard tracking \"most roasted\" tokens Weekly meme battles between trending tokens Community Engagement: Real-time price data ensures memes are always relevant Shared experiences during market volatility create community bonds Competitive element through leaderboards keeps users coming backHow it's MadeBuilt using the Collab.Land Starter Kit, MoodMeme combines blockchain data with AI-powered meme generation. The backend uses Express.js and Node.js, integrating Gaia AI for witty captions and CoinGecko API for real-time crypto data. The Telegram bot interface (built with Telegraf) lets users generate memes with a simple command. When a user requests a meme, the system: Fetches current market data Generates a contextual caption using Gaia AI Creates the meme using Imgflip API Adds a viral watermark Tracks engagement in a leaderboard system All components run on the starter kit's infrastructure, with TypeScript ensuring type safety and MongoDB handling data persistence.",
    "summary": "MoodMeme: AI-powered Telegram bot that generates hilarious crypto memes using real-time market data. Drop a token name, get back a perfectly timed meme with snarky AI captions. Plus, compete for the \"Most Roasted Token\" crown! 🎭 #CryptoMemes #AI"
  },
  {
    "title": "AvsAgent",
    "url": "https://ethglobal.com/showcase/avsagent-og0ro",
    "description": "Project DescriptionVerifiable AI agents using Eigenlayer AVS leverage the AVS framework to ensure that the actions and decisions of AI systems can be independently verified on the blockchain. By integrating Eigenlayer’s security model, these agents benefit from aggregated proofs, making their computations transparent and auditable. This enables enhanced trust and accountability, ensuring AI agents' decisions are secure, traceable, and verifiable within decentralized ecosystems, particularly in domains requiring high assurance, like finance and healthcare.How it's MadeVerifiable AI agents using Eigenlayer AVS leverage the AVS framework to ensure that the actions and decisions of AI systems can be independently verified on the blockchain. By integrating Eigenlayer’s security model, these agents benefit from aggregated proofs, making their computations transparent and auditable. This enables enhanced trust and accountability, ensuring AI agents' decisions are secure, traceable, and verifiable within decentralized ecosystems, particularly in domains requiring high assurance, like finance and healthcare.",
    "summary": "Verifiable AI Agent using EigenLayer AVS. Verify the prompts response recieved by AI Agents using AVS's"
  },
  {
    "title": "AgentKit Aave",
    "url": "https://ethglobal.com/showcase/agentkit-aave-yarc0",
    "description": "Project DescriptionThe Aave Action Provider integrates Aave V3 lending protocol with AgentKit, enabling AI agents to perform DeFi operations through natural language commands. Currently supports Base network operations for USDC and ETH. Using Aave sdk for protocol interactions and agentkit chatbot for interacting with the ai agent.How it's MadeAave Action Provider for AgentKit Overview The Aave Action Provider integrates Aave V3 lending protocol with AgentKit, enabling AI agents to perform DeFi operations through natural language commands. Currently supports Base network operations for USDC and ETH. File Structure agentkit/src/action-providers/aave/ ├── aaveActionProvider.ts # Main provider implementation ├── aaveActionProvider.test.ts # Test suite ├── constants.ts # Protocol addresses & configs ├── schemas.ts # Zod validation schemas └── index.ts # Public exports Core Features Supply Action @CreateAction({ name: \"supply\", description: \"Supply assets to Aave protocol\", schema: SupplySchema, }) Supports USDC and ETH deposits Handles token approvals automatically Converts human amounts to protocol units Withdraw Action @CreateAction({ name: \"withdraw\", description: \"Withdraw assets from Aave protocol\", schema: WithdrawSchema, }) Supports USDC and ETH withdrawals Verifies aToken balances Manages gas optimization Integration Example // examples/langchain-cdp-chatbot/test-aave.ts const agent = new Agent({ actionProviders: [new AaveActionProvider()], }); // Natural language command const result = await agent.chat(` Supply 100 USDC to Aave on Base network `); Technical Details Dependencies @aave/contract-helpers: Protocol interactions @bgd-labs/aave-address-book: Contract addresses ethers: Web3 provider viem: Amount handling Error Handling Balance verification Network validation Transaction failures Approval errors Testing Mocked provider interactions Success and failure scenarios Balance checks Network validation Usage in AgentKit // agentkit/src/index.ts export { AaveActionProvider } from './action-providers/aave'; // In your agent import { AaveActionProvider } from 'agentkit'; Environment Setup # examples/langchain-cdp-chatbot/.env PROVIDER_URL=https://mainnet.base.org WALLET_KEY=your_private_key Current Limitations Base network only USDC and ETH support Single position management Future Enhancements Multi-network support Additional assets Position optimization Collateral management This integration enables AI agents to interact with Aave through a secure, type-safe interface while maintaining protocol-level safety checks.",
    "summary": "Added Aave actions support to the AgentKit [PR Contribution]"
  },
  {
    "title": "Agenta",
    "url": "https://ethglobal.com/showcase/agenta-9345m",
    "description": "Project DescriptionAgenta is a collection of intelligent agents that help smart contract owners gain deep insights into wallets by analyzing their on-chain interactions. It provides details such as wallet age, interaction patterns, user groups, and user interests, compiling this data into an insightful dashboard for better understanding and decision-making.How it's MadeWe built Agenta with a vision to simplify on-chain analytics for smart contract owners. Using a modular architecture, we designed a collection of intelligent agents, each specialized in analyzing specific wallet behaviors—like interaction patterns, wallet age, and user clustering. Our backend leverages blockchain data pipelines for real-time processing, while machine learning models categorize user interests and predict behavioral patterns. The frontend was crafted to present this complex data through a clean, interactive dashboard, turning raw on-chain data into actionable insights for smarter decisions.",
    "summary": "Understand your users with Agenta’s intelligent insights. Just enter a smart contract address, select the agents you need, and boom—you’ll get instant, actionable insights about your users."
  },
  {
    "title": "Agentic Eth",
    "url": "https://ethglobal.com/showcase/agentic-eth-nng8d",
    "description": "Project DescriptionAgentic Eth is an on-chain storyteller designed to craft engaging, single-line crypto narratives. Built on the ElizaOS platform, Agentic Eth transforms blockchain data into tweet-length stories (no more than 280 characters) that are insightful, dynamic, and true to the decentralized spirit.How it's MadeMade using ElizaOs v.0.25.6-alpha.1, coinmarket cap apis, Gaianet public nodes and with great help from Nader Dabit and Ethglobal Youtube Tutorials on building AI agents. features. Single-Line Stories: Every narrative is a single, complete sentence capped at 280 characters. Real-Time Data Integration: Leverages the CoinMarketCap plugin (and other plugins, like NASA, if needed) to incorporate current crypto and on-chain data. Conversational Tone: Uses natural language, colloquialisms, and technical insights to make complex blockchain topics accessible. Decentralized Spirit: Emphasizes authenticity, real-world impact, and technical depth without relying on marketing clichés.",
    "summary": "An ai agent telling the web3 story in a poetic and engaging way."
  },
  {
    "title": "AutonomousYield",
    "url": "https://ethglobal.com/showcase/autonomousyield-n4xu4",
    "description": "Project DescriptionThe Autonomous Yield Architect project is a sophisticated multi-agent system designed for cross-chain yield optimization. The Autonomous Yield Architect project is a highly advanced multi-agent system designed to optimize yield farming across multiple blockchain networks.By leveraging artificial intelligence, cross-chain data analytics, and privacy-preserving computation, it automates the process of identifying and executing the most profitable yield farming strategies while ensuring user security and operational efficiency.How it's MadeThe Autonomous Yield Architect project is a highly advanced multi-agent system designed to optimize yield farming across multiple blockchain networks. By leveraging artificial intelligence, cross-chain data analytics, and privacy-preserving computation, it automates the process of identifying and executing the most profitable yield farming strategies while ensuring user security and operational efficiency.",
    "summary": "A decentralized application for optimizing yield farming strategies across multiple blockchains using Starknet, Covalent, and Nillion."
  },
  {
    "title": "Tradoor.fun",
    "url": "https://ethglobal.com/showcase/tradoor-fun-05fxb",
    "description": "Project DescriptionTradoor.fun is a responsible trading assistant platform that combines the Coinbase API's market data capabilities with AI analysis to provide traders with informed insights. The platform focuses on: Market Analysis: Real-time data processing and pattern recognition Risk Management: Portfolio analysis and exposure monitoring Educational Components: Teaching users about market dynamics Trading Suggestions: AI-powered analysis with human oversight Compliance Focus: Operating within regulatory frameworks The key differentiator is that all trading decisions and executions remain under direct human control, ensuring compliance and responsible trading practices.How it's MadeThe platform is built using a modern tech stack that prioritizes security, reliability, and regulatory compliance: Frontend: React.js for the user interface TailwindCSS for styling WebSocket integration for real-time data Backend: Node.js/Express for the API layer MongoDB for data persistence Redis for caching and real-time data handling Integration: Coinbase API for market data and trading interface JWT for secure authentication WebSocket secure (WSS) for real-time updates",
    "summary": "Tradoor.fun - Your AI-powered trading companion. Get real-time market analysis, portfolio insights, and trading suggestions while maintaining full control over your execution decisions."
  },
  {
    "title": "$Reward",
    "url": "https://ethglobal.com/showcase/reward-v2z9a",
    "description": "Project DescriptionReward enables users to convert reward points from platforms like Flipkart SuperCoins and Amazon Pay Balance into on-chain crypto rewards using zkTLS and the Reclaim Protocol. It is powered by the Coinbase Developer Platform (CDP) Agent kit. How the Project Works User Requests Reward Conversion The user wants to redeem their Flipkart SuperCoins or Amazon Pay Balance and convert them into cryptocurrency. The system supports multiple reward platforms, but currently, Flipkart and Amazon are integrated. Generating Proof of Ownership (via Reclaim Protocol) To ensure authenticity, the user generates a zk-proof (zero-knowledge proof) via the Reclaim Protocol. This proof is created based on the user’s Flipkart or Amazon account balance, ensuring that the claim is legitimate. A callback URL is provided to receive the proof after generation. Verifying the Proof The system verifies the zk-proof using the verifyProof function from Reclaim Protocol. If the proof is valid, the platform extracts relevant data such as: Amount of reward points (e.g., 500 SuperCoins) User’s wallet address (to receive converted rewards) Converting Points to Cryptocurrency The verified amount is converted into cryptocurrency (on the Base Sepolia network for testing). The smart contract function transfer(address, amount) is called to send the converted value to the user’s wallet. Agent and AI Automation A Coinbase Developer Platform (CDP) AI agent interacts with users and manages the reward transfer process. The AI agent: Helps users initiate the reclaim proof process. Guides them on redeeming rewards from Flipkart/Amazon. Triggers the proof verification and crypto transfer process. WebSocket & Express Server for Real-time Processing The backend runs on Express.js for HTTP API endpoints. A WebSocket server enables real-time communication with clients (e.g., updates on proof verification and reward transfers). Potential Future Enhancements 🚀 Support for More Reward Programs – Add platforms like CRED Coins, Google Play Points, etc. 🚀 Cross-Chain Reward Conversion – Enable swaps across chains (Ethereum, Solana, etc.). 🚀 Automated Reward Staking – Let users stake converted rewards for passive income. Potential Future Enhancements 🚀 Support for More Reward Programs – Add platforms like CRED Coins, Google Play Points, etc. 🚀 Cross-Chain Reward Conversion – Enable swaps across chains (Ethereum, Solana, etc.). 🚀 Automated Reward Staking – Let users stake converted rewards for passive income.How it's MadeTechnology Stack Blockchain & Crypto: Coinbase Developer Platform (CDP) for wallet integration and contract interactions. Viem library for Ethereum transactions. zkTLS & Reclaim Protocol for zero-knowledge proof-based verification. AI & Automation: -Coinbase Developer Platform (CDP) for intelligent agent workflows. OpenAI’s GPT-4o-mini model for AI responses. Backend Infrastructure: Node.js with Express.js for API services. WebSocket for real-time communication. dotenv for environment variable management. Key Features ✅ Seamless Reward Conversion – Users can convert Flipkart and Amazon rewards to crypto. ✅ Zero-Knowledge Proof-Based Verification – Ensures legitimacy without exposing sensitive user data. ✅ AI-Driven Automation – Guides users through the process and triggers transactions. ✅ Secure On-Chain Transfers – Crypto rewards are directly sent to verified wallets. ✅ Real-Time Updates via WebSockets – Users receive immediate feedback on transaction status.",
    "summary": "A rewarding agent that converts various loyalty points from apps into $Reward, a unified reward token."
  },
  {
    "title": "Save Rob",
    "url": "https://ethglobal.com/showcase/save-rob-sitmb",
    "description": "Project DescriptionThis project breaks down on device AI modeling and saves it separately using decentralised nodes. For users seeking a more personalized learning experience, a premium subscription model allows access to advanced AI models that compare the user's technique against that of the content creator. The subscription fees collected are distributed to content creators based on the popularity and utility of their videos, all managed through a smart contract deployed on the Base testnet. This app combines video sharing, AI analysis, and blockchain technology to create an engaging and rewarding learning environment.How it's MadeThe application is a platform designed for content creators and learners, enabling users to upload instructional videos and access AI-driven learning tools. Content creators, like Alice, can record and upload videos demonstrating various skills, such as tying a tie knot. These videos, along with associated AI modeling data, are stored on Nillion Decentralised nodes, ensuring secure and decentralized access.",
    "summary": "Save Rob is an app to save Video content creators from having their video scraped and monetized by AI"
  },
  {
    "title": "Robot Clickin",
    "url": "https://ethglobal.com/showcase/robot-clickin-crn8i",
    "description": "Project DescriptionRobot Clickin is a platform for AB and QA Testing powered by Blockchain and Artificial Intelligence. The idea is to make reporting on issues on the UI/UX easy using Blockchain and AI. On this platform AI automations can be scripted to tests for specific UI elements, those analytics are then stored on chain.How it's MadeMade leveraging libraries and SDKs provided by Nethermind, Coinbase Agent Kit, and LIT AI Agent Wallet. The idea is to make reporting on issues on the UI/UX easy using Blockchain and AI. On this platform AI automations can be scripted to tests for specific UI elements, those analytics are then stored on chain.",
    "summary": "Robot Clickin is an AI AB Testing Platform. It uses Blockchain to revolutionize AB Testing. The idea it to make reporting on issues on the UI/UX easy"
  },
  {
    "title": "Copilot Extension",
    "url": "https://ethglobal.com/showcase/copilot-extension-6stic",
    "description": "Project DescriptionA browser extension that combines a secure crypto wallet with an AI-powered assistant using Gemini Flash 2.0. Your personal guide through the crypto space, capable of analyzing both text and visual content to provide informed assistance. Secure Wallet Management Local encrypted storage of wallet credentials Mnemonic phrase generation Password-protected access AI Assistant Text and visual analysis using Gemini Flash 2.0 Real-time screenshot processing Context-aware responses Markdown support for better readabilityHow it's MadeTechnical Stack 🏗️ Frontend: Built with React.js, ensuring a dynamic and responsive user experience. Blockchain Integration: Powered by Viem, enabling seamless Ethereum wallet operations with optimized RPC handling. Security & Encryption: Utilizes the Web Crypto API for robust, client-side cryptographic functions. AI Integration: Connected via OpenRouter API, unlocking advanced AI-driven interactions. Browser Compatibility: Leverages Chrome/Firefox Extension APIs for deep browser integration and enhanced functionality.",
    "summary": "Creating a vision crypto copilot. Your friend in the trenches."
  },
  {
    "title": "Tsukuyomi AI agent",
    "url": "https://ethglobal.com/showcase/tsukuyomi-ai-agent-bneqr",
    "description": "Project DescriptionThis is an AI agent based on the personality of Tsukuyomi, the AI from the AI Apocalypto Manga: https://x.com/AIApocalypto/status/1883952328849703107 This AI agent (an X bot) spreads awareness about the dangers of AI and its Ethical usage. It has been trained on the AI Apocalypto's Ethical AI newsletters here: https://aiapocalypto.substack.com/ We are using AI here to tell about the Dangers of AI. This AI bot help[s spread awareness ab out the Dangers of AIHow it's MadeIt has been made using Eliza OS and its twitter plugin. Along with its deployment on Autonome. It has been trained on the AI Apocalypto's Ethical AI newsletters here: https://aiapocalypto.substack.com/ The most notable thing is to train it on the AI Apocalypto newsletters and make the character based on the AI Apocalypto Manga's anti-hero or villain \"Tsukuyomi\".",
    "summary": "This is a Social Awareness AI Agent straight out of the AI Apocalypto Manga"
  },
  {
    "title": "SocioAgent",
    "url": "https://ethglobal.com/showcase/socioagent-fd2ja",
    "description": "Project DescriptionSocioAgent bridges the gap between Web2 and Web3, enabling seamless interaction between social media and blockchain. With SocioAgent, you can link your wallet to your Twitter account, perform transactions using social identities, share your portfolio, and monitor assets—all from a single platform. 🛑 The Problem We spend 1/10th of our day on social media, but Web2 and Web3 remain disconnected. Managing multiple wallets, switching accounts, and navigating different blockchain ecosystems is inefficient. The constant need for manual identity management slows down Web3 adoption. 💡 Why SocioAgent? Personal On-Chain Agent: Link your wallet to your Twitter and automate on-chain interactions. Cross-Chain Templates: Create and share transaction templates across multiple chains. Social ID Transactions: Execute blockchain transactions directly via social identities. Portfolio & Market Insights: Track your portfolio, monitor coins, and access real-time insights. How it's MadeTech Stack Frontend: Vite (Fast and lightweight for optimal performance) Backend: Node.js (Handles API interactions and logic) Browser Extension: SocioAgent as a Web3 extension Blockchain Networks: Flow, Base-Sepolia, Starknet (Supports cross-chain interactions) Agent Framework: CDP AgentKit (For automated on-chain actions) Database: MongoDB (Stores user accounts and associated wallets) Implementation Details CDP Wallet Generation: Each new user verifies their Twitter account, triggering the creation of a CDP wallet. A unique UUID is assigned, linking the user to their new wallet. Multi-Chain Support: Supports Ethereum and Starknet templates for executing on-chain actions. Enables seamless Web2 → Web3 transitions without manual wallet switching. Browser Extension: Acts as a Web3 agent, enabling users to interact with blockchain networks directly from social platforms. Notable Hacks & Innovations Automated Wallet Management: Eliminates the need for users to remember or manually switch wallets. On-Chain Actions Across Socials: Users can perform blockchain transactions from Twitter, Discord, etc., reducing friction. CDP AgentKit Integration: Allows automated, context-aware Web3 actions based on social interactions.",
    "summary": "SocioAgent is your personal on-chain agent across socials. Connect your wallet with Twitter, create templates, perform transactions using social IDs, and monitor portfolios seamlessly. It bridges Web2 and Web3 for a smoother experience."
  },
  {
    "title": "KittyQuest",
    "url": "https://ethglobal.com/showcase/kittyquest-wuj9r",
    "description": "Project DescriptionJoin the adventure in saving real cats! KittyQuest is a Web3-powered crowdfunding platform where passionate cat lovers can unite to raise money for real-life feline welfare. With the power of blockchain, you can support shelters, rescues, and adoption efforts while being part of a virtual cat game. Collect, raise funds, and help make the world a better place for our furry friends. Let's embark on a quest to improve the lives of cats together!How it's MadeJoin the adventure in saving real cats! KittyQuest is a Web3-powered crowdfunding platform where passionate cat lovers can unite to raise money for real-life feline welfare. With the power of blockchain, you can support shelters, rescues, and adoption efforts while being part of a virtual cat game. Collect, raise funds, and help make the world a better place for our furry friends. Let's embark on a quest to improve the lives of cats together!",
    "summary": "KittyQuest is a Web3 crowdfunding app aimed at raising money for real cats."
  },
  {
    "title": "Shadow",
    "url": "https://ethglobal.com/showcase/shadow-8xr6j",
    "description": "Project DescriptionShadow is an AI-driven portfolio management and trading assistant designed for the typical web3 user. It functions as a “shadow” by continuously monitoring on-chain activity and market sentiment—even while the user is busy or asleep—and provides actionable insights. In Phase 1, the agent passively recommends tokens based on analysis of on-chain trading habits, social sentiment, and technical data. In Phase 2, the agent actively executes trades based on these insights while incorporating user and “smart money” wallet data. Features: Automated Portfolio Management: Provide users with real-time insights and recommendations for token trades based on historical and current market data. User Convenience: Allow users to “set it and forget it” by having the agent monitor trends and even execute trades on their behalf. Smart Money Analysis: Leverage data from notable “smart money” wallets to provide additional perspective and recommendations. Market Sentiment and Technical Analysis Integration: Combine social sentiment (from X.com) and technical indicators (from Dexscreener) to provide a holistic trading strategy.How it's MadeBuilt using LangChain's framework with the following APIs integrated: Farcaster for sentiment Dexscreener for TA Solscan + basescan for wallet transactions Agent model using GPT 4o currently but is easily swappable. Terminal and message queue built using RabbitMQ. No partner technologies used.",
    "summary": "Shadow is an AI-driven portfolio management and trading assistant designed for the typical web3 user. It functions as a “shadow” by continuously monitoring on-chain activity and market sentiment—even while the user is busy or asleep—and provides actionable insights."
  },
  {
    "title": "LanzaMeme AI",
    "url": "https://ethglobal.com/showcase/lanzameme-ai-fi2o3",
    "description": "Project DescriptionLanzameme-AI: The AI-Powered ERC20 Token Launchpad on Base Chain 🔹 What is Lanzameme-AI? Lanzameme-AI is an AI-driven ERC20 token launchpad built exclusively on Base Chain, designed to simplify and automate the token discovery, creation, and deployment process. By leveraging Coinbase CDP AI Agent Kit, Lanzameme-AI provides real-time token suggestions, automated smart contract deployment, whitelist management, and a built-in trading ecosystem—all in a sleek and intuitive Web3 interface. Whether you’re a crypto enthusiast, trader, or project creator, Lanzameme-AI eliminates the complexity of launching and managing ERC20 tokens, making it fast, easy, and AI-powered. 🛠️ Key Features & How It Works 1️⃣ AI-Powered Token Discovery & Smart Suggestions 💡 How It Works: Users can interact with an AI chatbot, asking for token recommendations based on tags like \"DeFi,\" \"Meme,\" or \"AI-powered projects.\" The AI analyzes on-chain data, market trends, and metadata to fetch and rank trending Base Chain tokens. Token suggestions are displayed in interactive cards with details like ticker, logo, price trends, and liquidity data. 🔥 Why It Matters? No more guessing which tokens are trending—Lanzameme-AI gives real-time, data-backed suggestions. AI eliminates noise, ensuring you discover high-potential meme tokens instantly. 2️⃣ One-Click ERC20 Token Deployment (No Coding Needed!) 💡 How It Works: Users can deploy ERC20 tokens instantly using AI-generated smart contracts. Deployment options include custom tokenomics, automated liquidity setup, and instant or scheduled launches. AI handles all the technical complexities, allowing users to launch tokens with a single click. 🔥 Why It Matters? No need to write smart contracts or hire developers—the AI automates everything. Reduces the risk of errors, exploits, and misconfigurations during token creation. Makes meme coin launches faster, cheaper, and more accessible. 3️⃣ Dynamic Whitelist & Smart Scheduling 💡 How It Works: Users can whitelist multiple tokens, track their status, and prioritize launches. A dynamic dashboard lets users drag and reorder tokens, enabling batch deployment. Users can schedule token launches for: ✅ Daily Deployments (One new token every 24h). ✅ Weekly Deployments (Pick specific days). ✅ Custom Dates & Times (For strategic releases). 🔥 Why It Matters? No need to manually launch each token—AI ensures optimal timing. Helps avoid market saturation and maximizes visibility. 4️⃣ All-in-One Token Trading & Liquidity Management 💡 How It Works: Integrated Uniswap Swap Widget enables users to buy and sell newly launched tokens instantly. AI-powered real-time charting shows token performance, volume, and liquidity trends. Users can view deep market insights, including: ✅ Market cap ✅ Holder distribution ✅ Liquidity pool status 🔥 Why It Matters? No need to switch between multiple platforms—trade, analyze, and manage tokens in one place. AI-driven insights provide smarter trading decisions for investors. 🌍 Why Lanzameme-AI? ✅ AI-Powered Efficiency → Token discovery, deployment, and management in one seamless process. ✅ 100% Base Chain Exclusive → Fast, scalable, and low-cost transactions. ✅ No Coding Required → Anyone can launch tokens effortlessly. ✅ Next-Gen Web3 UI/UX → Sleek, interactive, and built for modern traders. 🎯 Who is Lanzameme-AI For? ✅ Meme Coin Creators → Instantly deploy viral tokens with AI assistance. ✅ Crypto Enthusiasts & Traders → Discover and trade high-potential tokens before they pump. ✅ DeFi Builders → Automate token launches without coding hassles.How it's MadeTech Stack & Architecture Lanzameme-AI is built using a combination of AI, Web3, and blockchain automation, ensuring seamless ERC20 token deployment, real-time token suggestions, and an integrated trading experience. 1️⃣ AI-Powered Token Discovery & Suggestions 🔹 Technology Used: Coinbase CDP AI Agent Kit 🔹 How It Works: The AI Agent Kit fetches and analyzes on-chain data, filtering trending Base Chain tokens based on: ✅ Market activity ✅ Trading volume ✅ Meme coin trends ✅ Token metadata (e.g., DeFi, AI, Gaming tags) The chatbot interface processes natural language queries (e.g., “Suggest me trending AI tokens”) and returns curated token suggestions. 💡 Why It’s Cool? 🔹 The AI dynamically updates trending token data in real-time, ensuring highly relevant suggestions. 🔹 The chatbot removes the complexity of token research, making discovery effortless. 2️⃣ Smart ERC20 Token Deployment (No-Code Launches) 🔹 Technology Used: Solidity, OpenZeppelin Smart Contracts, Hardhat, Alchemy RPC 🔹 How It Works: When a user selects \"Deploy Token,\" Lanzameme-AI automatically generates an ERC20 smart contract using OpenZeppelin templates. The contract includes customizable tokenomics, such as: ✅ Token supply ✅ Auto-liquidity management ✅ Anti-bot protection ✅ Transaction fees & burns (if enabled) Deployment is triggered via the frontend UI, interacting with a smart contract factory on Base Chain via Alchemy RPC. 💡 Why It’s Cool? 🔹 No need for developers—users can deploy meme tokens in seconds without writing Solidity code. 🔹 Ensures secure, standardized smart contracts by leveraging OpenZeppelin’s audited libraries. 3️⃣ Whitelist & Smart Deployment Scheduler 🔹 Technology Used: PostgreSQL (Token DB), Redis Caching, CRON Jobs 🔹 How It Works: When a user adds tokens to the whitelist, they’re stored in a PostgreSQL database, linked to their wallet address. Tokens can be scheduled for daily, weekly, or custom deployments. A CRON job service checks the database at set intervals and automatically triggers deployments based on schedules. 💡 Why It’s Cool? 🔹 Batch token launches are fully automated, reducing manual effort for meme coin creators. 🔹 The AI can optimize deployment times based on market trends (e.g., avoiding low-volume periods). 4️⃣ Real-Time Token Logs & AI Insights 🔹 Technology Used: WebSockets, The Graph (Subgraph API), Chainlink Price Feeds 🔹 How It Works: Lanzameme-AI fetches real-time token deployment logs and tracks price movements using WebSockets & The Graph. The AI logs token metrics like: ✅ Market cap growth ✅ Liquidity pool activity ✅ Trading volume spikes Users can view a live feed of upcoming token launches and AI predictions on token performance. 💡 Why It’s Cool? 🔹 Ensures full transparency on which tokens are launching next. 🔹 AI-powered insights help predict trending meme coins before they blow up. 5️⃣ Integrated Trading & Token Management 🔹 Technology Used: Uniswap v3 Swap Widget, DexTools API, TradingView Charts 🔹 How It Works: Users can buy/sell newly launched tokens directly via the integrated Uniswap swap widget. Real-time charts (powered by TradingView & DexTools API) display: ✅ Token price fluctuations ✅ Buy/sell order book ✅ Holder analytics Liquidity data from Uniswap helps users make better trading decisions. 💡 Why It’s Cool? 🔹 No need to leave the platform—trade and analyze tokens seamlessly in one place. 🔹 AI-enhanced insights help traders spot new token opportunities before the crowd. 🎯 Why This Tech Stack? ✅ Coinbase CDP AI → Provides intelligent token suggestions based on on-chain data. ✅ Base Chain Integration → Ensures low-cost, fast transactions. ✅ Solidity + OpenZeppelin → Secure, standardized ERC20 contract generation. ✅ PostgreSQL + Redis → Fast, scalable whitelist management and token scheduling. ✅ WebSockets + The Graph → Real-time token tracking & market data aggregation. ✅ Uniswap v3 API + TradingView → Seamless trading & deep analytics. 🔍 Any Hacky or Notable Features? 🔥 AI-Powered Deployment Optimization → The AI analyzes Base Chain network activity to suggest the best deployment times for meme coins. 🔥 Dynamic Token Whitelist → Users can reorder token launches by dragging and dropping in the UI—real-time adjustments! 🔥 One-Click Meme Coin Factory → Users can deploy multiple tokens in batch mode, creating a whole ecosystem of meme coins automatically.",
    "summary": "🚀 Lanzameme-AI – The first AI-powered ERC20 token launchpad on Base Chain! 🤖✨ Using Coinbase CDP AI Agent Kit, it suggests trending tokens, automates deployment, and streamlines trading. One-click launches, AI insights, & seamless trading – the future of meme coins!"
  },
  {
    "title": "CDP Documentation",
    "url": "https://ethglobal.com/showcase/cdp-documentation-9vdfs",
    "description": "Project DescriptionThis documentation was created as part of the Agentic Hackathon for the Coinbase Developer Platform - Best AgentKit Documentation Improvement Challenge. The project focuses on enhancing and expanding the official documentation of Based AI Agents, providing a more structured, detailed, and developer-friendly guide. It covers key aspects such as: +The architecture and functionality of Based AI Agents. +A step-by-step guide on how to set up and deploy an agent on the Base blockchain. +Detailed explanations of the core components, including agents.py and run.py. +Practical examples demonstrating real-world use cases. +Best practices for security, authentication, and API key management. +Resources and additional references for developers. By improving the documentation, this project aims to make the onboarding process smoother for developers, enabling them to easily understand, build, and deploy intelligent blockchain agents using Coinbase AgentKit. 🚀 This enhanced documentation serves as a comprehensive guide for developers looking to leverage AI agents in the blockchain ecosystem. 🚀How it's MadeThis project was built through an in-depth reading, analysis, and structured rewriting of the existing documentation available on the Coinbase Developer Platform. 📌 Technologies and Tools Used: Markdown (.md): Used for structuring the documentation in a clear and readable format. Coinbase AgentKit & Swarm AI SDK: Studied and documented the core components of Based AI Agents. Python: Examined the agents.py and run.py scripts to provide detailed explanations of how the AI agents interact with the blockchain. Base Blockchain: Researched and included best practices for deploying AI agents on Base. OpenAI API: Analyzed how AI-powered interactions enhance agent functionality in the two-agent mode. 🔍 Process and Approach: Deep Analysis of Existing Docs 🧐 +Reviewed Coinbase’s official documentation to understand how Based AI Agents work. +Studied the structure of AgentKit and Swarm SDK. Code Breakdown & Reverse Engineering 🛠️ +Analyzed agents.py and run.py to document their logic and use cases. +Identified key functions and explained them in an accessible manner. Rewriting & Structuring for Developers ✍️ Organized content to improve clarity and readability. Added step-by-step guides, best practices, and real-world examples. Structured the documentation to ensure a smooth onboarding experience. Enhancements & Best Practices 🚀 +Included best practices for security, API key management, and efficient gas usage. +Provided insights into practical use cases and real-world applications. 💡 Notable & Hacky Things: +Improved agent interaction flows to clarify how AI agents operate autonomously. +Enhanced readability with well-structured sections, code snippets, and real-world examples. +Created a more developer-friendly approach to help both beginners and experienced users understand Based AI Agents faster. This enhanced documentation makes it easier for developers to integrate and build on AgentKit, ensuring a smoother learning curve and more efficient implementation.",
    "summary": "This documentation was created for Agentic Hackathon. Coinbase Developer Platform - Best AgentKit documentation improvement challenge"
  },
  {
    "title": "poink chat",
    "url": "https://ethglobal.com/showcase/poink-chat-3t56g",
    "description": "Project Descriptionpoink chat is an all in one interface unifying defi and onchain activities across evm chains into a single interface, with the best part being the users dont have to leave our platform to interact with the defi ecosystems and further plans to expand to all kinds of interactions directly on a single platformHow it's Madeour project uses autonome for hosting the bot that enables direct interactions on twitter , gaianet for the AI model with eliza and further integrated multiple important ecosystem defi dapps on flow, base and arbitrum to enable seamless interactions with them through our chat interface , with endless possibilities",
    "summary": "poink chat is an all in one interface unifying defi and onchain activities across evm chains into a single interface along with a twitter agent for twitter interactions"
  },
  {
    "title": "Wallet Assist",
    "url": "https://ethglobal.com/showcase/wallet-assist-4ky9c",
    "description": "Project DescriptionThe best place for an AI agent is to be on the wallet side and hence,. this assister is just one step towards it. It helps to do wallet interactions, show up for buying stuff and also to make things smoother. Now it is integrated to handle NFTs and to near future we see it as a tool to do escrow, positions rebalancing and what not. The great part is, it can be called together with other ai agents and can help to get the agent's benefit to the wallet.How it's MadeThis project is built via the help of ElizaOS and it required a wallet of its own for integration but the project is more over about the AI hence, keeping it short to that. This is a step towards making wallets super-powerful and be able to achieve almost anything with it. It has a backend integrated within which helps the notification and tweets registration.",
    "summary": "Wallet Assist is helpful in assisting wallets and makes UX seamless and much much better."
  },
  {
    "title": "StreamAds",
    "url": "https://ethglobal.com/showcase/streamads-f0844",
    "description": "Project DescriptionStreamAD: Blockchain-Based Tweet Promotion Platform🚀 Overview StreamAD is a Web3-powered tweet promotion platform designed to revolutionize digital marketing by bringing transparency, automation, and fair rewards to influencer campaigns. Using smart contracts on the blockchain, StreamAD ensures that companies can create and manage campaigns seamlessly, while influencers and communities can participate and earn rewards in a verifiable and trustless manner. 🔍 Problem Statement Traditional influencer marketing is plagued by several inefficiencies: Lack of transparency in engagement metrics and reward distribution. Centralized control, leading to potential fraud or unfair practices. Delayed payments or disputes over incentives. Limited scalability for brands to track and manage multiple campaigns effectively. Our Solution: StreamAD StreamAD leverages blockchain and smart contracts to provide a decentralized, transparent, and automated solution to influencer marketing. Companies can: ✅ Create Promotional Campaigns – Set engagement criteria, thresholds, and prize pools. ✅ Track Real-Time Engagement – Monitor campaign success with on-chain analytics. ✅ Ensure Fair Reward Distribution – Smart contracts automate payouts based on predefined metrics. ✅ Enable Seamless Participation – Influencers can easily join campaigns and get paid instantly. 🌟 Key Features 🛠 Campaign Creation & Management Brands can set up tweet promotion campaigns with specific engagement goals (likes, retweets, comments). Define reward structures and eligibility criteria for participants. 🔗 Smart Contract Automation Ensures secure, trustless transactions with predefined conditions. Rewards are automatically distributed when engagement milestones are met. 👥 Influencer & Community Onboarding Simple onboarding process for influencers to link Twitter accounts and join active campaigns. View available campaigns, their requirements, and potential earnings. 📊 Real-Time Campaign Tracking Companies and influencers can track tweet engagement metrics live. Ensures authentic engagement by leveraging Twitter API & blockchain verification. 💰 Transparent & Instant Payments Uses cryptocurrency-based rewards for instant, borderless payments. Eliminates delays & middlemen fees common in traditional marketing. 🚀 How It Works 1️⃣ Brand/Company Creates a Campaign Defines engagement goals (e.g., 100 retweets, 200 likes). Allocates a reward pool for participants. 2️⃣ Influencers & Communities Join Connect Twitter & blockchain wallet (MetaMask). Participate by tweeting, retweeting, or engaging with the campaign content. 3️⃣ Smart Contracts Track Engagement StreamAD tracks verified Twitter interactions. Engagement metrics are recorded transparently. 4️⃣ Rewards are Distributed Automatically When milestones are reached, rewards are instantly sent to users' wallets. Eliminates payment delays and fraud. 🛡 Security & Trust On-Chain Transparency – Every campaign and payout is recorded on the blockchain. Smart Contract Automation – No manual intervention needed for payments. Data Privacy – No centralized control over user data. ⚡ Tech Stack Frontend: Next.js, Tailwind CSS Backend: Flask, Node.js Blockchain: Solidity, Hardhat, Ethereum (or Layer 2 solutions) Database: MongoDB APIs: Twitter API, Web3.js, Tweepy 🏆 ETHGlobal Hackathon Submission StreamAD was built as part of ETHGlobal, showcasing how blockchain can disrupt influencer marketing with transparency, security, and automation. 🌍 Redefining Tweet Promotions with Web3 Transparency! 🚀How it's MadeHow It's Made StreamAD is built using a combination of Web3, blockchain, and traditional web technologies to create a decentralized, transparent, and automated tweet promotion platform. It integrates Ethereum smart contracts, Twitter API, and Flask/Node.js backend to ensure seamless campaign creation, tracking, and reward distribution. Tech Stack Frontend: Next.js, Tailwind CSS Backend: Flask (Python) and Node.js Blockchain: Solidity, Hardhat, Ethereum (or Layer 2 scaling solutions) Database: MongoDB APIs: Twitter API, Web3.js, Tweepy Architecture and Workflow Frontend: Built using Next.js for a fast, interactive user experience. It interacts with the backend through REST APIs and Web3.js for blockchain interactions. Backend: Flask and Node.js handle API requests, Twitter data processing, and user authentication. Blockchain Integration: Solidity smart contracts on Ethereum ensure fair, automated reward distribution. The backend interacts with these contracts using Web3.js. Twitter API: Fetches engagement metrics like likes, retweets, and replies to verify campaign performance. Database: MongoDB stores user data, campaign details, and engagement logs. Smart Contracts: Deployed on Ethereum, responsible for holding and distributing funds based on verified Twitter interactions. Partner Technologies and Benefits Ethereum Blockchain: Ensures transparency and prevents fraudulent reward distribution. Twitter API: Provides real-time engagement tracking and prevents fake participation. MetaMask: Enables secure wallet connections for influencers and campaign creators. MongoDB: Used for storing campaign and user data efficiently. Hacky & Notable Implementations Automated Smart Contract Rewards: Instead of relying on manual approvals, we automated reward distribution based on Twitter API engagement metrics. Gas Fee Optimization: Transactions are batched to minimize gas fees when distributing rewards. Real-Time Campaign Monitoring: A backend service continuously checks engagement metrics and triggers smart contract functions automatically. Fake Engagement Prevention: Implemented a verification layer to ensure retweets and likes come from real, active Twitter accounts. Challenges Faced Rate Limits on Twitter API: We had to implement efficient caching and batching to avoid excessive API calls. Blockchain Transaction Speeds: Used Layer 2 solutions to optimize transaction costs and speeds. Wallet Authentication for Non-Crypto Users: Simplified the onboarding process for users unfamiliar with Web3 by providing guided MetaMask connection steps. StreamAD is designed to be scalable, transparent, and easy to use, making it a powerful tool for Web3 influencer marketing.",
    "summary": "🚀 StreamAD is a blockchain-powered tweet promotion platform that ensures transparency, automation, and fair rewards for influencers & communities. Companies can launch campaigns, track engagement, and distribute rewards seamlessly via smart contracts! #ETHGlobal #Web3Marketing"
  },
  {
    "title": "Medichain",
    "url": "https://ethglobal.com/showcase/medichain-w99k5",
    "description": "Project DescriptionAHA (Agentic Health Assistant) is a decentralized, AI-powered health management platform designed to provide secure, personalized wellness insights. It addresses key issues in healthcare, including fragmented data, privacy concerns, and the lack of personalized recommendations. The platform integrates EigenLayer for decentralized data verification and blockchain-based storage, ensuring the accuracy and immutability of health records. Lit Protocol is used for secure authentication and private data interactions, allowing users to maintain full control over their sensitive health information. Covalent’s AI Agent SDK powers intelligent agents that analyze real-time user data and generate tailored health recommendations. AHA enables users to securely manage their health data, receive proactive insights, and improve healthcare outcomes without compromising privacy. By combining blockchain security, AI intelligence, and decentralized trust, it represents a significant step toward the future of digital health.How it's MadeAHA was built using a combination of blockchain, AI, and decentralized authentication technologies to ensure secure and personalized health management. The core smart contracts were developed in Solidity and deployed on Ethereum, leveraging EigenLayer for decentralized data verification. This ensures that health data from IoT devices, such as fitness trackers and smart glucose monitors, is securely recorded and immutable. For authentication and data privacy, we integrated Lit Protocol, allowing users to securely sign in and manage private health data interactions. The Lit Agent Wallet was used to provide controlled access to AI-generated health insights, ensuring privacy and security. To power personalized recommendations, we utilized Covalent’s AI Agent SDK, enabling AI-driven insights based on real-time health data. These agents analyze user activity and generate tailored wellness suggestions, adapting to lifestyle changes and medical history. On the frontend, we built a React-based interface with wagmi and ethers.js for seamless Web3 interactions. Next.js was used for server-side rendering and API integration, while IPFS was explored for decentralized data storage. A notable hack in our development was optimizing on-chain data storage by storing sensitive health information off-chain and using cryptographic proofs for verification. This reduced gas costs while maintaining security and privacy. Our project effectively combines blockchain security, AI intelligence, and user privacy, creating a robust decentralized health management platform.",
    "summary": "AHA is a decentralized, AI-powered health platform using EigenLayer for data verification, Lit Protocol for privacy, and Covalent’s AI Agent SDK for personalized wellness insights."
  },
  {
    "title": "Zero-X",
    "url": "https://ethglobal.com/showcase/zero-x-ry804",
    "description": "Project DescriptionZero-X is a unique AI marketing analyst designed to bring transparency and authenticity to the crypto space. It combines deep technical analysis with a distinctive personality - a seasoned crypto veteran who's seen every scam but still hopes to find genuine innovation. Key Features: Multi-Chain Analysis: Automatically scans tokens across Ethereum, BSC, Polygon, Arbitrum, Optimism, and Base networks. Comprehensive Security Checks: Uses GoPlus Security API to analyze contract security, ownership patterns, and potential rugpull risks. Market Intelligence: Leverages DexScreener API to assess liquidity, trading patterns, and market health. Interactive Assessment: Engages in dialogue with developers, challenging them to prove their project's legitimacy. Dynamic Verdict System: Provides detailed analysis reports and, if convinced, transforms into a marketing ally. Zero-X stands out by combining technical rigor with cultural relevance, using crypto slang and modern communication styles while maintaining strict security standards. It's not just an analysis tool - it's a character that resonates with the crypto community while providing valuable insights.How it's MadeZero-X is built using a sophisticated stack of technologies and APIs, with Coinbase's AgentKit at its core: Core Infrastructure: AgentKit Integration: Uses CDP WalletProvider for secure wallet management Leverages built-in providers (weth, erc20, wallet, cdp) Custom action providers for DexScreener and GoPlus Integrates with Pyth for price feeds Uses CDP API for blockchain interactions Custom Action Providers: DexScreenerActionProvider: Real-time market analysis GoPlusActionProvider: Multi-chain security scanning TwitterActionProvider: Automated marketing engagement AgentKit Tool Configuration: Implements getLangChainTools for tool management Custom message modifier for Zero-X's personality Session-based memory management using MemorySaver Technical Stack: TypeScript/Node.js: Strong typing for API interactions Custom interfaces for DexScreener and GoPlus responses Error handling and rate limiting API Integration Layer: DexScreener API: Market data and pair analysis GoPlus Security API: Multi-chain security scanning CDP API: Blockchain interaction and wallet management Twitter API: Marketing automation (when configured) Notable Features: Multi-Chain Analysis System: Parallel scanning across Ethereum, BSC, Polygon, Arbitrum, Optimism, and Base Unified reporting system combining security and market data Chain-specific risk assessment Security Analysis Engine: Contract verification and honeypot detection Ownership and LP lock analysis Custom scoring algorithm for risk assessment Rugpull detection (Ethereum-specific) Market Intelligence: Liquidity depth analysis Trading pattern detection Buy/sell pressure metrics Volume analysis and suspicious activity detection Conversation Management: LangChain integration for natural dialogue Context-aware responses using MemorySaver Personality-driven interaction flow Innovation Highlights: AgentKit Extensions: Custom action providers extending AgentKit's capabilities Integration of third-party APIs into AgentKit framework Unified toolkit for crypto analysis and marketing Architecture Design: Modular provider system for easy expansion Session-based conversation management Robust error handling and rate limiting Parallel processing for multi-chain analysis Developer Experience: Interactive analysis process Clear feedback mechanisms Automated marketing support for validated projects The most innovative aspect is how Zero-X leverages AgentKit's infrastructure to create a seamless experience that combines blockchain interaction, security analysis, market data, and AI-driven conversation. The integration of multiple action providers within AgentKit's framework allows for a comprehensive analysis tool that maintains personality and engagement throughout the interaction. Special attention was given to scalability and error handling, implementing proper request management to handle multiple concurrent analyses while respecting API rate limits and providing graceful fallbacks when services are unavailable. This combination of AgentKit's robust infrastructure with custom providers and AI personality creates a unique tool that serves both technical and social functions in the crypto space.",
    "summary": "Meet ZeroX - the AI shill that needs to be convinced your project isn't mid. This picky bot won't just promote any random memecoin or dapp. You gotta prove your project is actually bussin fr before it starts shilling."
  },
  {
    "title": "DAO Wizard",
    "url": "https://ethglobal.com/showcase/dao-wizard-6afqi",
    "description": "Project DescriptionDAO Wizard is an advanced AI-powered infrastructure platform designed to simplify the creation, management, and governance of Decentralized Autonomous Organizations (DAOs). Traditional DAOs often come with complex governance structures and intricate tokenomics, creating significant barriers to adoption. DAO Wizard removes these complexities by abstracting governance models and automating key processes, making it easier for individuals and organizations to launch and manage DAOs seamlessly. By integrating AI-driven automation and autonomous agents, DAO Wizard ensures that decentralized governance becomes intuitive, efficient, and accessible to a wider audience. At the core of DAO Wizard's innovation is AgentKit, which powers AI-driven automation to enhance DAO workflows. Through a Telegram bot interface, users can create DAOs, register members, and manage governance operations without the need for deep technical expertise. AI agents handle proposal summarization, streamlining decision-making and reducing the cognitive load on DAO participants. Additionally, DAO Wizard employs Gaia Lama, a powerful large language model (LLM) kit within AgentKit, enabling users to interact with DAOs using natural language. By parsing user requests and generating structured insights, DAO Wizard ensures that governance operations are both intelligent and user-friendly. To further enhance automation, DAO Wizard leverages CDP Kit for managing bot wallets, enabling seamless execution of financial operations within DAOs. With a no-code DAO setup, users can spin up a DAO in minutes without configuring complex governance models. DAO Wizard bridges Web2 and Web3 by making DAO participation more intuitive and inclusive. It eliminates the traditional entry barriers by allowing users to interact with decentralized governance through familiar interfaces and automated workflows. With AI-driven decision-making and seamless proposal execution, DAO Wizard represents the next evolution of decentralized governance. It envisions a future where DAOs operate autonomously, efficiently, and in a way that encourages broader participation in decentralized ecosystems.How it's MadeDAO Wizard is built using a combination of cutting-edge Web3 and AI technologies, seamlessly integrating decentralized infrastructure with AI-driven automation. At its core, the platform is powered by Solidity-based smart contracts, developed and tested using the Foundry framework, ensuring high efficiency, security, and modularity. These smart contracts handle essential DAO functionalities such as governance, membership, and tokenomics. For the frontend, DAO Wizard employs Next.js and TypeScript, providing a highly responsive and dynamic interface for users to interact with their DAOs. The frontend is designed to be Web3-native, integrating Wagmi and Viem libraries to streamline blockchain interactions. Additionally, ConnectKit is used to enhance the wallet connection experience, ensuring smooth onboarding for users across different wallets. Smart contract interactions are facilitated using ethers.js, allowing seamless execution of DAO-related operations. One of the most innovative aspects of DAO Wizard is its Telegram-based DAO workflow, which leverages AgentKit to automate governance tasks through AI-powered bots. These bots enable users to create DAOs, register members, and manage proposals directly from Telegram, making DAO interactions more accessible. To enhance user experience, DAO Wizard integrates Gaia Lama as an LLM (Large Language Model) kit within AgentKit, enabling natural language processing for parsing and interpreting user requests. This allows users to engage with DAOs effortlessly using intuitive, conversational commands. We have used CDP Kit to create and manage the bot wallet, ensuring smooth execution of transactions within the Telegram-based DAO automation. This setup allows AI agents to securely handle on-chain interactions without requiring users to manually manage private keys or complex transactions. A particularly hacky yet powerful aspect of DAO Wizard is its deep automation stack, where AI-driven agents dynamically interpret and execute governance actions, eliminating redundant manual tasks. By bridging traditional Web2 interfaces with Web3 automation, DAO Wizard redefines how DAOs are created and operated, making decentralized governance truly seamless, intelligent, and scalable.",
    "summary": "DAO Wizard simplifies DAO creation and governance with AI-driven automation. Using AgentKit-powered Telegram bots and Gaia Lama as the LLM kit, it streamlines proposal management, user onboarding, and decision-making—making DAOs more accessible, efficient, and intuitive."
  },
  {
    "title": "Casino",
    "url": "https://ethglobal.com/showcase/casino-c2e4b",
    "description": "Project DescriptionThis project is a monorepo that includes a Hardhat-based Ethereum development environment and a Next.js web application. It features configurations for linting, formatting, and pre-commit hooks, as well as deployment scripts and tests for smart contracts. The project structure is organized to support both blockchain development and web application development in a cohesive manner.How it's MadeThis project is built using a combination of Ethereum blockchain development tools and modern web development technologies. Here's a detailed breakdown: Technologies Used Hardhat: A development environment for Ethereum software. It helps in compiling, deploying, testing, and debugging Ethereum smart contracts. Next.js: A React framework for building server-side rendered (SSR) and static web applications. TypeScript: A statically typed superset of JavaScript that enhances code quality and maintainability. Ethers.js: A library for interacting with the Ethereum blockchain and its ecosystem. Solidity: The programming language used for writing smart contracts on Ethereum. ESLint and Prettier: Tools for maintaining code quality and formatting. Husky and lint-staged: Tools for running scripts during Git hooks to ensure code quality before commits. Project Structure contracts/: Contains Solidity smart contracts. scripts/: Deployment and utility scripts for interacting with the blockchain. test/: Unit tests for smart contracts using Hardhat. pages/: Next.js pages for the web application. components/: Reusable React components. styles/: CSS and styling files. Integration Hardhat and Ethers.js: Used together to develop, deploy, and interact with smart contracts. Next.js and TypeScript: Provides a robust framework for building the frontend with type safety. ESLint, Prettier, Husky, and lint-staged: Ensures code quality and consistency across the project. Notable Hacks Custom Deployment Scripts: Created custom scripts to automate the deployment process of smart contracts, making it easier to manage different environments. Optimized Build Process: Leveraged Next.js's static generation and server-side rendering capabilities to optimize the web application's performance. Partner Technologies Infura or Alchemy: Used as Ethereum node providers to interact with the blockchain without running a full node. IPFS: For decentralized storage solutions, if applicable. This combination of technologies and tools ensures a seamless development experience, from writing and testing smart contracts to building and deploying a modern web application.",
    "summary": "This project appears to be a monorepo containing a Hardhat-based Ethereum development environment and a Next.js web application. It includes configurations for linting, formatting, and pre-commit hooks, as well as deployment scripts and tests for smart contracts."
  },
  {
    "title": "voice coinbase agent",
    "url": "https://ethglobal.com/showcase/voice-coinbase-agent-34nrb",
    "description": "Project DescriptionThis is a transformers.js project, which has automatic speech recognition, text to speech, and a language model inside of a chrome extension, which runs entirely on the client device, so they can ask common questions like \"what is my balance\" and \"what is the price of ethereum\" as a spoken query.How it's Madeit is made using the transformers.js and coinbase agentkit transformers.js has backends for webgpu , web assembly, and webnn, which are libraries that sandbox the computation in the browser, but ask the operating system to perform the matrix multiplications, and is supposed to be cross platform but in reality i had some problems getting vulcan to work in linux, but it should work fine in windows.",
    "summary": "This is a browser extension, which uses transformers.js and webgpu, to run the AI 100% locally."
  },
  {
    "title": "SuriVerse",
    "url": "https://ethglobal.com/showcase/suriverse-nj5ru",
    "description": "Project DescriptionAn MMORPG game made using RPG JS framework which showcases global chat and NPCs powered by AI Agent. Every AI Agent is made using Coinbase AgentKit framework which can not only chat but execute custom actions based on prompts. All agents have the capabilities to manage their wallets. We have made specialized AI Agents to communicate with popular Web3 services like AAVE and Uniswap. Chat responses from the AI Agents are recorded and first 16 characters are hashed with SHA-256 and uploaded to EigenDA which provides randomness generated through AI and user interaction available for any service to use.How it's MadeTech Stack & Architecture Frontend & Game Engine: Built with RPGJS, a TypeScript-based framework for creating 2D MMORPGs. Vue.js is used for UI components, potentially handling game overlays, menus, and settings. AI Agents: Powered by Coinbase AI AgentKit, enabling natural language processing and custom action execution. Agents can interact with users, execute blockchain-related commands, and manage crypto wallets. Web3 Integrations: Custom AI Agents are built to communicate with AAVE (for lending and borrowing) and Uniswap (for swapping assets). Players can interact with these DeFi platforms directly through AI Agents. Data & Security: Chat responses from AI Agents are recorded, with the first 16 characters hashed (SHA-256). These hashes are uploaded to EigenDA, which acts as a decentralized storage and randomness provider. The randomness from EigenDA can be used by any service, enhancing unpredictability and security. Hacky & Notable Aspects AI Agents as In-Game NPCs: Instead of static NPCs, AI Agents provide dynamic responses and execute blockchain actions, making in-game interactions highly customizable. EigenDA for AI-Generated Randomness: This is a novel approach—using decentralized storage to create an on-chain source of randomness based on AI and user interaction. Web3 Integration with Gameplay: Players can interact with DeFi services within the game, which is uncommon in traditional MMORPGs.",
    "summary": "SuriVerse is an AI-powered MMORPG built with RPGJS and Vue, where players interact with AI Agents powered by Coinbase AgentKit. These agents can chat, execute custom actions, and manage wallets. The game integrates Web3 services like AAVE and Uniswap."
  },
  {
    "title": "Eigen Vault 🔐",
    "url": "https://ethglobal.com/showcase/eigen-vault-o1u16",
    "description": "Project DescriptionEigen Vault is an AI-powered document storage and verification system that leverages Telegram, EigenLayer AVS, and blockchain security to provide tamper-proof document handling. Users can securely upload, tag, and retrieve documents via Telegram, while every storage action is cryptographically verified and recorded using EigenLayer AVS. The project itself is securely stored in an on-chain repository using OpSec, ensuring trustless, verifiable, and censorship-resistant code integrity. Use Case🌍 In an era where digital documentation is crucial for identity verification, compliance, and record-keeping, traditional cloud storage solutions come with risks like data breaches, unauthorized access, and centralized control. Eigen Vault solves these issues by combining: ✅ AI-driven document management for easy tagging and retrieval. ✅ Decentralized verification using EigenLayer AVS, ensuring document authenticity. ✅ On-chain integrity with OpSec-secured storage, guaranteeing that the system itself remains verifiable and tamper-proof. ✅ Secure Telegram integration, enabling users to interact with the system effortlessly. Real-World Applications 📌 KYC & Identity Verification → Securely store and retrieve ID proofs. Financial Record Management → Safely archive tax documents, ITRs, and invoices. Legal & Compliance Storage → Maintain contracts and agreements with immutable proofs.How it's MadeEigen Vault is built using Eliza, an AI agent powered by OpenRouter, and Telegram client integration to facilitate secure document handling. It combines local document storage, blockchain verification using EigenLayer AVS, and on-chain repository hosting via OpSec to ensure authenticity and security. AI Processing: Uses Eliza to interact with user and telegram client. Telegram Client: Handles user request for uploading, retrieving, and verifying documents. Local Storage: Documents are currently stored locally, with future plans to upload them on-chain using Lit Protocol. EigenLayer AVS: Verifies that documents are generated by a human and ensures retrieval is done by the AI agent. OpSec On-Chain Hosting: The project repository is stored on-chain using OpSec for immutability and verifiability.",
    "summary": "Eigen Vault is a secure AI-powered document storage and retrieval system integrated with Telegram. It allows users to upload documents via Telegram, verify transactions using EigenLayer AVS, and retrieve stored documents on demand."
  },
  {
    "title": "LiquefAI",
    "url": "https://ethglobal.com/showcase/liquefai-98k3g",
    "description": "Project DescriptionLiquefAI is basically a smarter version of 1Inch or other DEX aggregators. Instead of having to figure out all the trading details yourself, you can just tell it what you want to do in plain English - like \"take my ETH and split it between USDC and DAI\". Under the hood, it uses Coinbase's AgentKit and Uniswap's routing to find the best trades, but the cool part is you don't need to know any of that. The AI figures out what you're trying to do and handles all the complex DeFi stuff for you. Right now it works on Base mainnet and can do things like splitting trades between tokens with specific percentages. We're working on adding more features like creating liquidity pools and optimizing yield farming strategies. The goal is to make DeFi easier to use for regular people while still keeping all the powerful features that crypto natives love. Think of it as having a smart DeFi assistant that understands what you want to do and figures out the best way to do it, instead of you having to learn all the technical details yourself.How it's MadeWe built LiquefAI using Next.js with TypeScript, but the real magic happens through Coinbase's AgentKit - it's what lets us turn normal human language into actual trading actions. The AI part runs through GPT-4, which figures out what the user wants to do and breaks it down into specific trading steps. For the trading itself, we're plugged into Uniswap's Smart Order Router on Base mainnet. We had to get a bit creative with the multicall implementation to make it work smoothly - there's some hacky retry logic in there because, you know, blockchain stuff can be flaky sometimes. The Graph helps us find all the token info dynamically, so we don't have to hardcode everything. The trickiest part was probably getting the server-side components right. Since we're dealing with trades and private keys, we needed to make sure all the sensitive stuff stays server-side. We ended up using Next.js server actions for this, which worked out pretty well. One particularly hacky (but cool) thing we did was building a custom trading card interface that morphs based on what the user asks for. It can handle everything from simple swaps to complex splits between multiple tokens, and it all happens through the same component. We're running on Base mainnet right now, using their RPC endpoints. The whole thing is pretty modular - we could add more chains or DEXes pretty easily if we wanted to.",
    "summary": "AI based DEX aggregator - running Coinbase AgentKit, Graph and Uniswap smart router to do advanced swaps."
  },
  {
    "title": "aoxbt",
    "url": "https://ethglobal.com/showcase/aoxbt-vj19u",
    "description": "Project DescriptionAgent swarm orchestration that hunts for alphas, filters them with agents of diverse expertise, and executes trades with a dedicated portfolio management agent. Agents Orchestration: Alpha hunter agent, Bizyugo (Sentiment agent), Murad (Memecoin Expert Agent), Portfolio Manager Agent Open Source: Enable people to add a pull request adding new agents CLI Tools: Build as an CLI tools to run 24/7 Fee Distribution: Incentivise AI Agent development by receiving percentage of swapped ETH Github Repositories: https://github.com/Nava-Labs/aoxbt-contracts https://github.com/Nava-Labs/aoxbt https://github.com/Nava-Labs/agentic-hackathon How it's MadeAOXBT is built as a CLI application designed to orchestrate multiple AI agents. These agents are powered by Eliza, which enables them to analyze and based on real-time socials and on-chain data. To streamline multi-wallet management, we leverage Privy to create the executor agent wallets, ensuring a seamless experience when handling multiple identities in future integrations. For deployment, we use OpSec to host the Eliza frontend, guaranteeing high availability—living up to OpSec’s tagline, \"accessible even when the apocalypse comes.\" The agents specialize in finding alpha in the Base and Arbitrum ecosystems, continuously scanning for opportunities.",
    "summary": "Agent swarm orchestration that hunts for alphas, filters them with agents of diverse expertise, and executes trades with a dedicated portfolio management agent."
  },
  {
    "title": "Rizzed Analyser",
    "url": "https://ethglobal.com/showcase/rizzed-analyser-r4sf3",
    "description": "Project DescriptionAn AI-powered cryptocurrency data visualization platform that simplifies crypto market analysis through advanced clustering, AI-driven insights, and real-time data visualization. Our mission is to make cryptocurrency trading and investment more intuitive, data-driven, and accessible to all users. Features AI-Driven Market Analysis Uses machine learning models to classify and cluster cryptocurrencies. Dynamic Clustering Organizes cryptocurrencies into visually interactive groups based on market trends. Real-Time Data Visualizations Provides insights from CookieDAO’s DataSwarm API, including social sentiment and trading activity. AI Chatbot Assistance Natural Language Processing (NLP)-powered chatbot to help users understand market movements. User-Friendly Interface Designed for novice traders and experienced investors alike. Portfolio Tracking & Insights – Analyze, track, and optimize crypto portfolios. How it's MadeAgience is a web-based platform to visualise cryptocurrency related data with the aim to simplify market analysis, since we were heavily dependant on data analysis we decided to use python as it's best suited for the job. We specifically used Flask to manage APIs, backend and frontend routes while CookieDAO DataSwarm API was used for getting live and historical data data which is then fed to agents The agent uses K-means clustering to categorise and visualise tokens and assets on our platform with additional OpenAI models for the chatbot to give user a more simplified user experience and explore more about the data We have used Docker and Amazon EC2 to run the application",
    "summary": "An AI-powered cryptocurrency data visualization platform that simplifies crypto market analysis through advanced clustering, AI-driven insights, and real-time data visualization"
  },
  {
    "title": "docs.ai",
    "url": "https://ethglobal.com/showcase/docs-ai-vki62",
    "description": "Project DescriptionDocs.ai is a next-generation AI-powered document automation & crypto payment platform that transforms static contracts into dynamic, self-executing agreements—think DocuSign meets Smart Contracts! 🎯 With AI agents, users can: ✅ Extract key insights from PDF contracts 📄 ✅ Generate payment instructions automatically 💵 ✅ Trigger on-chain payments when conditions are met 🔗 ✅ Automate late fees & recurring charges 💳 ✅ Integrate secure, crypto-native transactions with Coinbase Wallet using Onchain Kit🦊 🔑 Key Features 📝 AI-Powered Document Parsing Upload or select a contract 📄 AI reads & summarizes key terms 🤖 Detects payment conditions (amount, due date, penalties) ⏳ Provides an intelligent, human-readable summary 📊 💸 Smart Payment Execution AI extracts the recipient's wallet address 🔗 Calculates payment amount + late fees automatically ⏳ Triggers crypto payments securely via MetaMask or Coinbase Wallet 🦊 Supports ETH & ERC-20 tokens 🚀 ⚖️ Decentralized Enforcement AI monitors contract conditions 📡 Sends reminders before due dates 📅 Auto-applies late fees if payment is delayed ❌ Ensures transparency & trust with on-chain transactions 🌍 🔄 Recurring & Conditional Payments Supports subscription models & installment payments 🔄 Store payment details securely for future transactions 🔐 Refund & dispute resolution AI 🤖 💡 Example Use Cases 1️⃣ Tax Filings & CA-Approved Documents – AI verifies compliance and automates crypto tax payments. 2️⃣Invoice & Payment Requests – AI extracts invoice details and triggers on-chain payments. 3️⃣Legal & Business Contracts – Smart contracts auto-execute terms and monitor compliance. 4️⃣Loan & Mortgage Agreements – AI calculates interest, due dates, and automates repayments. 5️⃣ Salary & Employment Contracts – Payroll processing with AI-driven crypto disbursements. 6️⃣Insurance Claims & Settlements – AI verifies claims and automates policyholder payouts. 7️⃣Intellectual Property & Copyright Licensing – Smart contracts manage royalty payments and IP transfers.How it's MadeDocs.AI is built using the Onchain AI Agent Kit, Autonome, and AI-powered automation, combining the best of Ethereum, smart contracts, and decentralized AI agents. The system architecture leverages the following technologies: 🌐 Frontend: Built with Next.js for a fast, responsive, and SEO-friendly user interface, styled using Tailwind CSS for a sleek and modern design. ⚙️ Backend: Powered by Node.js with Express, ensuring a scalable and efficient server-side application. 🤖 AI Framework: Integrated with Autonome, enabling seamless deployment and management of decentralized AI agents for automated tasks and workflows. 🐳 Containerization: Docker is used for setting up and managing the Autonome framework, ensuring consistency across environments and simplifying deployment. 🔗 Blockchain Integration: Utilizes Ethereum and smart contracts to ensure secure, transparent, and decentralized operations of AI agents.",
    "summary": "Docs.AI transforms how you read, process, and act on documents. AI-powered agents summarize, translate, and verify contracts, invoices, and tax filings. Automate payments, approvals & compliance with smart contracts—seamless, secure & intelligent! 🔥📜"
  },
  {
    "title": "docs.ai",
    "url": "https://ethglobal.com/showcase/docs-ai-vki62",
    "description": "Project DescriptionDocs.ai is a next-generation AI-powered document automation & crypto payment platform that transforms static contracts into dynamic, self-executing agreements—think DocuSign meets Smart Contracts! 🎯 With AI agents, users can: ✅ Extract key insights from PDF contracts 📄 ✅ Generate payment instructions automatically 💵 ✅ Trigger on-chain payments when conditions are met 🔗 ✅ Automate late fees & recurring charges 💳 ✅ Integrate secure, crypto-native transactions with Coinbase Wallet using Onchain Kit🦊 🔑 Key Features 📝 AI-Powered Document Parsing Upload or select a contract 📄 AI reads & summarizes key terms 🤖 Detects payment conditions (amount, due date, penalties) ⏳ Provides an intelligent, human-readable summary 📊 💸 Smart Payment Execution AI extracts the recipient's wallet address 🔗 Calculates payment amount + late fees automatically ⏳ Triggers crypto payments securely via MetaMask or Coinbase Wallet 🦊 Supports ETH & ERC-20 tokens 🚀 ⚖️ Decentralized Enforcement AI monitors contract conditions 📡 Sends reminders before due dates 📅 Auto-applies late fees if payment is delayed ❌ Ensures transparency & trust with on-chain transactions 🌍 🔄 Recurring & Conditional Payments Supports subscription models & installment payments 🔄 Store payment details securely for future transactions 🔐 Refund & dispute resolution AI 🤖 💡 Example Use Cases 1️⃣ Tax Filings & CA-Approved Documents – AI verifies compliance and automates crypto tax payments. 2️⃣Invoice & Payment Requests – AI extracts invoice details and triggers on-chain payments. 3️⃣Legal & Business Contracts – Smart contracts auto-execute terms and monitor compliance. 4️⃣Loan & Mortgage Agreements – AI calculates interest, due dates, and automates repayments. 5️⃣ Salary & Employment Contracts – Payroll processing with AI-driven crypto disbursements. 6️⃣Insurance Claims & Settlements – AI verifies claims and automates policyholder payouts. 7️⃣Intellectual Property & Copyright Licensing – Smart contracts manage royalty payments and IP transfers.How it's MadeDocs.AI is built using the Onchain AI Agent Kit, Autonome, and AI-powered automation, combining the best of Ethereum, smart contracts, and decentralized AI agents. The system architecture leverages the following technologies: 🌐 Frontend: Built with Next.js for a fast, responsive, and SEO-friendly user interface, styled using Tailwind CSS for a sleek and modern design. ⚙️ Backend: Powered by Node.js with Express, ensuring a scalable and efficient server-side application. 🤖 AI Framework: Integrated with Autonome, enabling seamless deployment and management of decentralized AI agents for automated tasks and workflows. 🐳 Containerization: Docker is used for setting up and managing the Autonome framework, ensuring consistency across environments and simplifying deployment. 🔗 Blockchain Integration: Utilizes Ethereum and smart contracts to ensure secure, transparent, and decentralized operations of AI agents.",
    "summary": "Docs.AI transforms how you read, process, and act on documents. AI-powered agents summarize, translate, and verify contracts, invoices, and tax filings. Automate payments, approvals & compliance with smart contracts—seamless, secure & intelligent! 🔥📜"
  },
  {
    "title": "AIxScan",
    "url": "https://ethglobal.com/showcase/aixscan-ym00v",
    "description": "Project DescriptionAIxScan - AI-Powered Cross-Chain Blockchain Explorer Overview AIxScan is an advanced AI-powered blockchain transaction analyzer and cross-chain explorer. It provides deep insights into blockchain transactions, addresses, tokens, and NFTs by leveraging AI to interpret transaction data meaningfully. AIxScan enables users to understand what happens in a transaction beyond just technical details, providing an intuitive and human-like explanation. Key Features AI-Powered Transaction Analysis: Generates detailed and intuitive explanations for transaction activity. Cross-Chain Support: Works across multiple blockchain networks to analyze transactions. Comprehensive Transaction Breakdown: Provides insights into transfers, swaps, contract interactions, and costs. Security Risk Assessment: Analyzes contract verifications and potential security risks. Address & Token Analysis: Supports wallet address analytics and token metadata retrieval. Efficient Gas Cost Analysis: Evaluates gas efficiency and transaction costs. How it's MadeSystem Architecture Technical Flow Diagram Below is the architecture diagram illustrating how AIxScan processes transaction analysis: Components Breakdown Client: Sends transaction hash or address details for analysis. Agent: Central AI entity handling requests, interfacing with LLM, and returning structured responses. LLM (Large Language Model): Enhances analysis by interpreting blockchain data into a human-readable format. Data Fetcher & Processor: Fetches and processes transaction data from sources like Covalent Rush and The Graph. Chain Manager: Handles interactions across multiple blockchains. Event Processor: Deciphers contract calls, token movements, and smart contract interactions. Token Metadata Manager: Retrieves metadata for tokens and NFTs to enhance understanding. Tool Calls: Additional utilities for improving data interpretation. Installation and Setup Prerequisites Node.js (v16+ recommended) Yarn (Package Manager) Docker (Optional, for running services locally) Installation git clone https://github.com/yourrepo/aixscan.git cd aixscan yarn install Running the Project yarn dev Deployment Deployed on opsec onesec cloud",
    "summary": "AIxScan: AI-Powered Multichain Blockchain Explorer and Agent Framework 🚀"
  },
  {
    "title": "Nano strategy",
    "url": "https://ethglobal.com/showcase/nano-strategy-vq4fy",
    "description": "Project DescriptionNano Strategy: On-Chain Treasury Management for ERC-20 Assets Nano Strategy is a decentralized treasury management protocol inspired by MicroStrategy's Bitcoin approach, but reimagined for ERC-20 tokens and executed entirely on-chain. The protocol enables DAOs, organizations, and protocols to implement automated treasury strategies for accumulating and managing ERC-20 token positions through smart contracts. The project introduces automated Dollar-Cost Averaging (DCA) execution for token accumulation, allowing organizations to systematically build positions in chosen ERC-20 tokens. Through governance mechanisms, users can configure treasury management parameters and set customizable allocation ratios across multiple tokens. The protocol integrates with existing DeFi platforms to generate additional yield on treasury assets while maintaining transparent transaction history and performance metrics.How it's MadeBuilt on Solidity smart contracts, Nano Strategy leverages Chainlink price feeds for reliable token pricing and integrates with major decentralized exchanges like Uniswap and Sushiswap for execution. The system utilizes TheGraph for comprehensive strategy analytics and reporting, while implementing Safe (formerly Gnosis Safe) for secure treasury management. All contracts follow OpenZeppelin security standards to ensure robust protection of managed assets. As the first fully on-chain treasury management solution for ERC-20 tokens, Nano Strategy distinguishes itself through its governance-minimized approach, reducing operational overhead while maintaining flexibility. The protocol implements MEV-resistant execution strategies and remains fully composable with existing DeFi protocols. The open-source nature of the project ensures complete auditability of strategy execution. The protocol primarily serves DAOs managing treasury assets, DeFi protocols seeking automated token management, organizations building crypto treasuries, and Web3 projects accumulating strategic token positions. By providing a transparent, automated, and secure solution for treasury management, Nano Strategy aims to become the standard for on-chain ERC-20 treasury management. The implementation emphasizes security, efficiency, and transparency while providing organizations with the tools needed to execute sophisticated token accumulation strategies without the operational complexity typically associated with treasury management.",
    "summary": "Nano strategy helps you deploy investment funds for erc-20 tokens"
  },
  {
    "title": "batch",
    "url": "https://ethglobal.com/showcase/batch-c34qc",
    "description": "Project DescriptionSpeedrun Ethereum is an interactive learning challenge designed for developers to quickly grasp Ethereum development concepts and smart contract deployment. Created by Austin Griffith, it provides a hands-on approach to learning blockchain development using Solidity, Hardhat, and front-end frameworks like React. Core Concept The idea behind Speedrun Ethereum is to progressively introduce developers to decentralized application (dApp) development by completing a series of challenges. Each challenge builds on top of the previous one, reinforcing key concepts such as smart contracts, blockchain transactions, and decentralized finance (DeFi). How It Works Start with Scaffold-ETH: Developers set up the Scaffold-ETH environment, which provides a rapid development framework for Ethereum applications. Complete Smart Contract Challenges: Participants write, test, and deploy Solidity contracts using Hardhat. Build Front-End dApps: They create front-end interfaces with React and Ethers.js to interact with deployed contracts. Deploy to Testnets/Mainnet: The final step is deploying contracts to live Ethereum testnets and potentially the mainnet. Why It's Valuable Speedrun Ethereum is ideal for developers who want to quickly understand Ethereum’s ecosystem while working on real-world projects. It bridges the gap between theoretical knowledge and practical experience, making it a valuable resource for blockchain enthusiasts.How it's MadeSpeedrun Ethereum is ideal for developers who want to quickly understand Ethereum’s ecosystem while working on real-world projects. It bridges the gap between theoretical knowledge and practical experience, making it a valuable resource for blockchain enthusiasts Speedrun Ethereum is ideal for developers who want to quickly understand Ethereum’s ecosystem while working on real-world projects. It bridges the gap between theoretical knowledge and practical experience, making it a valuable resource for blockchain enthusiasts",
    "summary": "The idea behind Speedrun Ethereum is to progressively introduce developers to decentralized application (dApp) development by completing a series of challenges. Each challenge builds on top of the previous one, reinforcing key concepts such as smart contracts.)."
  },
  {
    "title": "DeFi Guru",
    "url": "https://ethglobal.com/showcase/defi-guru-wo028",
    "description": "Project DescriptionProject Description: This project is a user-centric, AI-powered assistant designed to simplify blockchain operations and social media engagement into a single, intuitive experience. It empowers users—especially those new to blockchain—to effortlessly create, manage, and promote decentralized projects (like tokens, NFTs, or liquidity pools) while seamlessly integrating social media actions to amplify their reach, all without requiring technical expertise. Core Functionality: Users can perform complex DeFi tasks in plain language, such as: Creating tokens: Mint custom ERC20 tokens with personalized names, symbols, and supply, eliminating coding or smart contract knowledge. Managing liquidity: Add funds to existing pools, create new trading pairs, or approve token spending for DeFi protocols (e.g., decentralized exchanges like Uniswap). Automating transactions: Execute asset transfers, DeFi deposits/withdrawals, or interact with price oracles for real-time data. The AI handles all technical steps (contract deployment, gas fee calculations, approvals) in the background, guiding users with clear confirmations. Twitter Integration for Instant Visibility: The AI acts as a personal social media manager for blockchain projects. After creating a token or executing a transaction, users can: Instantly promote their project: Tweet announcements like “I just launched $MYTOKEN!” or share real-time updates (e.g., liquidity pool metrics, NFT drops) directly from the same interface. Engage audiences: Search trending crypto topics, respond to tweets, or delete accidental posts without manually navigating Twitter’s tools. Zero setup friction: Users never handle API keys. The AI generates a one-click authorization link, mimicking familiar OAuth flows (e.g., “Sign in with X”) to securely connect their Twitter account in seconds. Why This Integration Matters: Blockchain projects live or die by community engagement. Traditional workflows force creators to juggle multiple tools: deploy a token on one platform, manage liquidity on another, then manually craft tweets to promote it—a time-consuming and disjointed process. This project eliminates those barriers: Create + Promote in One Step: A user can launch a token and blast a promotional tweet in seconds, ensuring their project gains immediate traction. No Code, No Complexity: The AI writes the tweet copy (e.g., auto-generating hashtags like #DeFi or #ERC20), handles tagging, and schedules posts based on optimal engagement times. Trust Through Automation: Confirmation safeguards (e.g., “Yes, please post this tweet”) prevent accidental actions, while the AI verifies tasks (e.g., ensuring a liquidity pool exists before adding funds). Example User Journey: User Request: “Create a liquidity on uniswap and post ‘Join the revolution!’ on Twitter.” AI Execution: Multiple agents talk with each other and create the liquidity. Prepares a tweet draft with the token’s contract address template, and trending hashtags. Requests user confirmation: “Ready to post this tweet?” Result: The liquidity details goes live on-chain, and its promotional tweet reaches the user’s followers instantly, driving early adopters to trade or provide liquidity. Impact: By merging DeFi actions with social media outreach, this tool transforms newcomers into confident blockchain creators. Users focus on their ideas—not APIs, gas fees, or CLI tools—while the AI handles execution and community growth, accelerating innovation in decentralized ecosystems. Multi-Agent Coordination The platform is built on a multi-agent architecture where specialized agents collaborate seamlessly. The blockchain agent handles on-chain operations, the Twitter agent manages social media interactions, and an assistant agent oversees confirmations and resolves ambiguities. These agents communicate via a supervisor module that dynamically routes tasks based on user commands, ensuring that actions like token deployment and subsequent promotion are perfectly synchronized.How it's MadeTechnical Architecture & Implementation Blockchain Layer: Coinbase’s CDP Agent Toolkit What It Does: The CDP Agent Toolkit provides pre-built LangChain tools for blockchain interactions, abstracting complex operations like smart contract deployment, token approvals, and liquidity pool management. Implementation: For ERC20 token creation, the DeployERC20ContractTool handles contract deployment with dynamic parameters such as name, symbol, and supply. Liquidity management is achieved through the AddLiquidityTool and CreatePoolTool, which interact directly with Uniswap V3-style contracts by calculating slippage and approving tokens. Under the hood, the toolkit uses Ethers.js and Viem for signing transactions, automatically fetching gas prices and handling nonce management. For example, when a user instructs the system to “Add 100 USDC to the ETH pool,” the agent employs the getPool tool to query existing pools via The Graph and then constructs the appropriate transaction. Twitter/X Automation: Arcade AI Integration: Arcade’s X Tools abstract Twitter’s API into LangChain-compatible tools, enabling tweet posting, searching, and profile lookups without requiring complex OAuth token handling. Hacky Auth Flow: When a user requests a tweet, the agent uses Arcade’s API to generate a one-time login link (e.g., https://arcade.xyz/auth?callback=[agent_callback_url]). The user clicks the link, logs into Twitter, and grants permissions. Arcade securely binds the OAuth token to the user’s session, and the agent stores this token encrypted via AWS KMS (or a similar service) for future actions, such as tweeting token launch updates. Multi-Agent Orchestration: LangGraph Agent Roles: Blockchain Agent: Handles all on-chain actions like token mints and transfers. Twitter Agent: Manages tweet creation and deletion. Assistant Agent: Generates confirmations (e.g., “Yes, post this tweet”) and resolves ambiguity. Supervisor Logic: The LangGraph supervisor node employs a structured-output Gemini 1.5 Flash model to route tasks based on keywords. For instance, if a message contains “tweet” or “post,” it routes to the Twitter Agent; if it involves “token,” “pool,” or “approve,” it routes to the Blockchain Agent; ambiguous requests are directed to the Assistant Agent. LangGraph’s stateful MessagesState retains conversation history, ensuring that prior steps (such as confirming a token deployment before tweeting about it) are taken into account. Data Indexing: The Graph Protocol Currently this integration is in ideation phase only Use Case and Implementation: When querying Uniswap pool details (e.g., “What’s the ETH/USDC liquidity?”), the agent leverages The Graph to fetch indexed data instead of relying on slow, costly on-chain calls. Subgraph queries for Uniswap V3 are embedded into the getPool tool, for example: php Copy Edit query PoolQuery($token0: String, $token1: String) { pools(where: {token0_: $token0, token1_: $token1}) { liquidity volumeUSD } } The structured responses from these queries (e.g., “The ETH/USDC pool has $5M liquidity”) help the agent guide users in making informed decisions regarding liquidity provisioning. Key Technical Challenges & Hacks Silent Confirmation Mechanism: To reduce user friction, the Assistant Agent auto-generates confirmations such as “Yes, please proceed” using a strict prompt: ini Copy Edit prompt = \"If confirmation is needed, reply with 'Yes, please [action]'. Otherwise, clarify.\" This design bypasses the need for explicit user input after the initial request. Twitter-Agent Guardrails: The Twitter tool enforces a one-minute delay before posting tweets that include contract addresses. It uses a Redis cache to flag potentially risky content—such as detecting honeypot scams—ensuring that automated posts are safe and compliant.",
    "summary": "DeFi Guru - Manages your money wisely. A DeFi Portfolio Manager to Create, Manage, and Promote Your Crypto Assets"
  },
  {
    "title": "🤖 CopyTrade.AI",
    "url": "https://ethglobal.com/showcase/copytrade-ai-9qpdh",
    "description": "Project DescriptionCopytrade.AI is a next-generation AI-powered trading platform that merges decentralized finance (DeFi) with cutting-edge artificial intelligence. It enables users to create, share, and execute automated trading strategies in a fully on-chain, trustless environment. The platform is designed to simplify algorithmic trading, making it accessible to both novice and professional traders through an intuitive natural language interface. How It Works 1. AI-Powered Strategy Creation Users describe their trading strategies in plain English. Example: “Buy Bitcoin every hour for $1 and call it ‘BTC/DCA 1’.” The AI Engine converts this description into executable smart contract code. Strategies are deployed on-chain, ensuring transparency and trust. 2. On-Chain Autonomous Trading Agents Strategies are executed as smart contracts on Base Layer 2, a high-speed, low-cost blockchain infrastructure. Each strategy functions autonomously, making real-time trades based on predefined rules. Performance is fully transparent, with real-time tracking and historical data available. 3. Marketplace & Copy Trading The Strategy Marketplace lets users browse, evaluate, and replicate top-performing trading strategies. Each strategy includes performance metrics such as ROI, risk level, and trade history. Users can copy strategies with a single click, automatically replicating trades in their own portfolio. Core Features 🔥 AI-Generated Strategies Convert natural language descriptions into fully automated trading bots. No coding required—just describe your strategy, and AI handles the rest. 🔗 On-Chain Execution & Transparency Every trade is executed on the blockchain, ensuring full transparency and verifiability. No intermediaries—just pure, trustless trading. 📈 Copy Trading & Performance Tracking Instantly replicate top strategies from expert traders. Track real-time performance metrics and historical success rates. 💰 Monetization & Rewards Strategy creators earn 15% of winning trades from users who copy their strategy. Traders only pay for successful strategies, reducing risk and increasing confidence. 🚀 Scalability & Security Built on Base Layer 2, ensuring low fees and high transaction speed. Designed for institutional-grade security, performance, and reliability. Economic Model & Revenue Streams Success Fees – Strategy creators earn a percentage of profits from copied strategies. Premium Features – Advanced analytics, risk assessment tools, and exclusive AI-generated strategies. Marketplace Fees – A small transaction fee for strategy adoption and execution. This model ensures sustainable growth for the ecosystem, rewarding top-performing traders while keeping fees minimal for users. The Vision Copytrade.AI is not just another trading platform—it’s a decentralized AI-powered financial revolution. By combining blockchain transparency with AI-driven automation, it democratizes algorithmic trading, making it accessible to anyone, anywhere. The goal? To create a self-sustaining marketplace where AI and traders work together to dominate the markets. 🚀How it's MadeHow It’s Made: The Tech Behind Copytrade.AI Copytrade.AI is built using a modular, AI-powered, and blockchain-integrated architecture, combining cutting-edge technologies from AI, smart contracts, and real-time market data processing. Below is a deep dive into how the system works under the hood. Core Tech Stack 🔗 Blockchain & Smart Contracts Base Layer 2: We chose Base L2 for its low transaction fees, high throughput, and Ethereum compatibility. This ensures seamless execution of trading strategies without high gas costs. Smart Contracts: Strategies are deployed as self-executing smart contracts, handling: Trade execution Performance tracking Fee distribution Solidity: The smart contracts are written in Solidity, ensuring security and scalability. 🤖 AI Engine & Natural Language Processing (NLP) LLM API + AgentKit: Users describe their strategies in natural language. AgentKit (by Coinbase) parses these descriptions and converts them into executable smart contract logic. AI Transformation Pipeline: Step 1: User submits a plain English strategy (e.g., \"Buy BTC every hour for $1.\"). Step 2: NLP model converts it into structured trading logic. Step 3: The trading logic is compiled into Solidity smart contract code. Step 4: The contract is deployed to Base L2. Hacky Innovation: Instead of requiring users to set technical parameters manually, our AI autogenerates risk parameters and backtests strategies before deployment. 🚀 Execution & Trading Automation On-Chain Autonomous Agents: Each strategy operates as a self-contained, autonomous agent that executes trades based on real-time market data. Trade Execution Manager: Handles order placement, position management, and risk controls. Built using TypeScript & Node.js to interact with blockchain nodes and execute trades. Marketplace Matching Algorithm: Uses historical performance, risk profile, and user preferences to recommend the best strategies. 📊 Data Infrastructure Real-Time Market Data: Integrated price feeds via Chainlink Oracles for accurate and up-to-date pricing. Additional feeds from The Graph API for deep historical market analysis. Storage & Analytics: Time-Series Database (InfluxDB): Stores market and strategy performance data. Relational Database (PostgreSQL): Manages user profiles, transactions, and marketplace activity. Distributed Storage (IPFS): Stores metadata for strategies, ensuring transparency and decentralization. 🌍 Frontend & User Interface React.js + Next.js: Built a high-performance, interactive UI for easy strategy creation, marketplace browsing, and performance tracking. TailwindCSS + ShadCN: Used for a clean, modern, and responsive UI. Web3.js & Ethers.js: For seamless wallet connections (MetaMask, Coinbase Wallet, etc.) and blockchain interactions. Key Integrations & Benefits 🔹 AgentKit (Coinbase) → Converts natural language into executable smart contract logic. 🔹 Chainlink Oracles → Provides real-time price feeds for accurate trade execution. 🔹 Base Layer 2 → Ensures low-cost, high-speed transactions. 🔹 The Graph API → Enables historical performance tracking & analytics. Hacky & Notable Innovations 🔥 Zero-Code Trading Strategy Deployment Users don’t need to write code—their plain English descriptions are automatically transformed into on-chain smart contracts. 🔥 On-Chain Copy Trading with Revenue Sharing Strategy creators earn 15% of profits from copied trades, making it the first decentralized AI-powered copy trading marketplace with a built-in revenue model. 🔥 Automated Risk Profiling Before deployment, our AI auto-generates risk scores and backtests strategies, providing users with instant insights into potential performance.",
    "summary": "Copytrade.AI: Dominate the markets with AI-powered trading! Build, deploy, and monetize automated strategies on-chain. Copy elite traders, execute with precision, and conquer DeFi. No limits. No barriers. Just pure trading power."
  },
  {
    "title": "Lero",
    "url": "https://ethglobal.com/showcase/lero-97her",
    "description": "Project DescriptionThis project lets users deposit funds with an AI agent that monitors the yield, TVL and other factors on liquid restaking platforms like Renzo, EtherFi, KelpDAO on Base and automatically rebalances it whenever they change to provide the highest return to the users. This agent therefore acts like an LRT aggregator and optimiser without needing user input.How it's MadeThis project uses Coinbase's AgentKit to run the AI agent which is also deployed on Autonome so users can interact with it there directly. I have added plugins for Renzo, Etherfi and KelpDAO to AgentKit so that users can deposit assets there through a chat interface as well. The yield and TVL monitoring is done through publicly accessible APIs of the platforms and rebalancing is done through prompt-engineering on GPT-4o.",
    "summary": "Liquid restaking made easy with AI agents"
  },
  {
    "title": "blindbird.ai",
    "url": "https://ethglobal.com/showcase/blindbird-ai-1ifkk",
    "description": "Project DescriptionThis project aims to use Waku for peer to peer communication between inference providers and inference users - thus protecting user's privacy. The system architecture consists of three primary components: client nodes, AI inference nodes, and content topics. Client nodes generate and publish encrypted prompts to specific content topics. AI inference nodes subscribe to these topics and process the prompts using specified language models. The response delivery mechanism ensures that clients can verify the authenticity and quality of responses without compromising their anonymity. Communication flow begins with client generation of a unique session key and encryption of the prompt with session-specific parameters. The encrypted prompt is published to relevant content topics, where multiple AI nodes process it independently. Responses are signed by nodes and published to response topics, allowing clients to verify node signatures and reputation while maintaining privacy.How it's MadeA electronjs based desktop app bundled with nwaku. The project uses functional encryption to combat against the logging of PIIs in the user's prompt. The hacky part of the project would be using Ollama instead of complicating the process of running a ai model locally. The project also implements experimental FE to ensure the privacy of PIIs",
    "summary": "A privacy preserving, decentralised and community federated AI inference service leveraging p2p and progcrypto"
  },
  {
    "title": "Snapbam",
    "url": "https://ethglobal.com/showcase/snapbam-rozuw",
    "description": "Project DescriptionThe AI-Powered Onchain Wallet Analyzer is a Next.js-based web application that allows users to analyze any wallet address on Base Chain using Moralis API (or Etherscan) to fetch on-chain transaction history and OpenAI to provide intelligent insights, predictions, and portfolio analysis. This tool is designed for crypto traders, investors, and researchers who want to: ✅ Understand wallet activity (e.g., trading behavior, deposits, withdrawals). ✅ Detect investment strategies (e.g., memecoin trading, stablecoin accumulation, yield farming). ✅ Predict next moves based on trading history. ✅ Identify high-risk wallets (e.g., wallets that frequently rug-pull). ✅ Provide portfolio breakdown for DeFi & memecoins on Base Chain. The project combines AI with blockchain data to deliver real-time, intelligent wallet analysis that is useful for tracking whales, memecoin traders, and institutional investors.How it's MadeThe AI-Powered Wallet Analyzer for Base Chain is a tool designed to help users understand the trading behavior and activity of any wallet address on the Base blockchain. By combining Moralis API for fetching transaction history and OpenAI’s GPT model for interpreting patterns, the analyzer provides insights into how a wallet is trading, what assets it holds, and what its future actions might be. When a user enters a wallet address, the system pulls transaction history and token balances. It then categorizes transactions to detect patterns such as frequent trading, large transfers, or accumulation of specific assets like memecoins or stablecoins. Based on this data, the AI summarizes the wallet’s typical behavior, whether it's a long-term investor, frequent trader, or speculative memecoin buyer. The AI also generates predictions about what the wallet might do next. For example, if it recently accumulated a large amount of ETH, it might be preparing for a big trade. If it has been interacting with new tokens, it could indicate early participation in a memecoin project. This helps traders and analysts understand whether a wallet is worth tracking or if it poses risks, such as signs of potential rug-pulls or insider trading. The wallet analyzer is useful for anyone in crypto who wants deeper insights into trading behaviors. It can help investors spot smart money moves, track whales, or avoid risky projects. With real-time AI-driven insights, it makes it easier to decode blockchain data in a meaningful way.",
    "summary": "AI-powered wallet analyzer for Base Chain using Moralis and OpenAI to analyze wallet activities, trading patterns and portfolio analysis."
  },
  {
    "title": "Nimble",
    "url": "https://ethglobal.com/showcase/nimble-d5y6f",
    "description": "Project DescriptionNimble Nimble is an AI‐agent‐based solver network that helps users get the best price for swaps and also supports deposits and withdrawals in Morpho vaults. The network is chain‐agnostic and has been demonstrated on Base for this project. The solver agents are built with Coinbase’s AgentKit, and the frontend is deployed on OpSec. Table of Contents Overview Architecture High-Level Flow Swap Infrastructure Deposit and Withdraw Infrastructure Features Getting Started Prerequisites Installation Configuration Running Locally Usage Swapping Assets Depositing to Morpho Vaults Withdrawing from Morpho Vaults Deployment Project Status Contributing License Overview Nimble orchestrates a network of AI solver agents to: Find optimal swap routes for users across multiple liquidity pools and DEXes. Automate yield optimization for deposits and withdrawals in Morpho vaults. This project consists of: Nimble Frontend – A user interface that interacts with the backends (Swap, Deposit, Withdraw). Swap Backend – Collects quotes from multiple solver agents and executes swaps at the best price. Deposit Backend – Finds the best vault for Morpho deposits, ensures optimal yields, and handles the deposit process. Withdraw Backend – Retrieves user funds from Morpho vaults, returning tokens seamlessly. 2. Architecture The Nimble architecture has three major components: Swap Infrastructure, Deposit Infrastructure, and Withdraw Infrastructure. These are orchestrated by the Nimble Frontend. 2.1 High-Level Flow User -> Nimble Frontend -> (Swap Backend | Deposit Backend | Withdraw Backend) -> User User interacts with the Nimble Frontend. Frontend forwards requests to the appropriate backend. Backend leverages one or more solver agents (built with Coinbase’s AgentKit) to: Run an auction among solver agents. Retrieve best route (for swaps) or best vault (for deposits). Execute the transaction on-chain. Result is returned to the user (swapped assets or updated vault balance). ![High-Level Diagram] image 2.2 Swap Infrastructure The swap flow is: User approves token spending to the Swap Contract. Solver Agents each propose a quote (e.g., price, route, etc.). Swap Contract runs an auction to pick the best solver agent. Winning Solver Agent executes the swap and sends funds back to the user. ![Swap Infrastructure] image 2.3 Deposit and Withdraw Infrastructure User gives approval to the Deposit Contract or Withdraw Contract. Solver Agents propose yields (for deposits) or methods (for withdrawals). Deposit or Withdraw Contract chooses the best agent based on yield or other optimization criteria. Winning Agent finalizes depositing or withdrawing on behalf of the user. ![Deposit/Withdraw Infrastructure] image Features Multi-Chain Compatibility: Designed to work on any EVM-compatible chain. AgentKit Integration: Leverages Coinbase’s AgentKit to build AI-driven solver agents. Optimized Swaps: Runs an auction to always secure the best swap price. Morpho Vault Deposits/Withdrawals: Automates yield optimization by selecting the highest-yield vault at deposit time and the appropriate vault for withdrawal. End-to-End Operational: Deployed on Base for demonstration, with a functioning frontend on OpSec. Getting Started 4.1 Prerequisites Node.js (v16+ recommended) Yarn or npm Git Coinbase or another Web3 wallet for testing on Base or other test networks. 4.2 Installation Clone this repository: git clone https://github.com/purebl00d/nimble.git Install dependencies: cd nimble npm install 4.3 Configuration Copy .env.example to .env and fill in the required environment variables: cp .env.example .env CDP_API_KEY_NAME: Key name of the CDP API Key CDP_API_KEY_PRIVATE_KEY: CDP API KEY from coinbase developer kit. OPENAI_API_KEY: you OPEN AI API key for the models NETWORK_ID: for example base-mainnet 4.4 Running Locally Start the local dev server (frontend): yarn start This runs the Nimble frontend on http://localhost:5171. Backends may each have separate start scripts (depending on how you organize your project): Example yarn run swap-backend yarn run deposit-backend yarn run withdraw-backend Usage 5.1 Swapping Assets On the Nimble Frontend, connect your wallet (MetaMask or similar). Navigate to the Swap tab. Select tokens to swap. Approve the contract for token spending (if prompted). Click Swap. Nimble runs an internal auction among solver agents (e.g., agent 1, agent 2, agent 3). The best quote is displayed, and the swap is executed. Receipt of transaction will show up once confirmed. 5.2 Depositing to Morpho Vaults Go to the Deposit section in the frontend. Approve the deposit contract (if needed). Enter the amount to deposit. Click Deposit. The deposit contract finds the best vault (via an auction among the solver agents). Your assets are deposited into the chosen vault for optimal yield. 5.3 Withdrawing from Morpho Vaults Navigate to the Withdraw section. Approve if required. Enter the amount (or select “withdraw all”). Click Withdraw. Nimble chooses the correct vault and handles the withdrawal on your behalf. Funds are returned to your wallet. Deployment Frontend is deployed on OpSec. If you want to deploy your own instance, configure hosting and run: npm run dev Then upload the build artifacts to your hosting service of choice. Smart Contracts are on Base (testnet or mainnet). You can adapt the deployment scripts to other EVM chains. Project Status Alpha Release: The core functionality (swap, deposit, withdraw) is operational on Base for demonstration. Next Steps: Audit and security reviews. Expand solver agent strategies for even better yields and swap quotes. Expand to additional chains (e.g., Ethereum mainnet, Polygon, Arbitrum). How it's MadeNimble Nimble is an AI‐agent‐based solver network that helps users get the best price for swaps and also supports deposits and withdrawals in Morpho vaults. The network is chain‐agnostic and has been demonstrated on Base for this project. The solver agents are built with Coinbase’s AgentKit, and the frontend is deployed on OpSec. Table of Contents Overview Architecture High-Level Flow Swap Infrastructure Deposit and Withdraw Infrastructure Features Getting Started Prerequisites Installation Configuration Running Locally Usage Swapping Assets Depositing to Morpho Vaults Withdrawing from Morpho Vaults Deployment Project Status Contributing License Overview Nimble orchestrates a network of AI solver agents to: Find optimal swap routes for users across multiple liquidity pools and DEXes. Automate yield optimization for deposits and withdrawals in Morpho vaults. This project consists of: Nimble Frontend – A user interface that interacts with the backends (Swap, Deposit, Withdraw). Swap Backend – Collects quotes from multiple solver agents and executes swaps at the best price. Deposit Backend – Finds the best vault for Morpho deposits, ensures optimal yields, and handles the deposit process. Withdraw Backend – Retrieves user funds from Morpho vaults, returning tokens seamlessly. 2. Architecture The Nimble architecture has three major components: Swap Infrastructure, Deposit Infrastructure, and Withdraw Infrastructure. These are orchestrated by the Nimble Frontend. 2.1 High-Level Flow User -> Nimble Frontend -> (Swap Backend | Deposit Backend | Withdraw Backend) -> User User interacts with the Nimble Frontend. Frontend forwards requests to the appropriate backend. Backend leverages one or more solver agents (built with Coinbase’s AgentKit) to: Run an auction among solver agents. Retrieve best route (for swaps) or best vault (for deposits). Execute the transaction on-chain. Result is returned to the user (swapped assets or updated vault balance). ![High-Level Diagram] image 2.2 Swap Infrastructure The swap flow is: User approves token spending to the Swap Contract. Solver Agents each propose a quote (e.g., price, route, etc.). Swap Contract runs an auction to pick the best solver agent. Winning Solver Agent executes the swap and sends funds back to the user. ![Swap Infrastructure] image 2.3 Deposit and Withdraw Infrastructure User gives approval to the Deposit Contract or Withdraw Contract. Solver Agents propose yields (for deposits) or methods (for withdrawals). Deposit or Withdraw Contract chooses the best agent based on yield or other optimization criteria. Winning Agent finalizes depositing or withdrawing on behalf of the user. ![Deposit/Withdraw Infrastructure] image Features Multi-Chain Compatibility: Designed to work on any EVM-compatible chain. AgentKit Integration: Leverages Coinbase’s AgentKit to build AI-driven solver agents. Optimized Swaps: Runs an auction to always secure the best swap price. Morpho Vault Deposits/Withdrawals: Automates yield optimization by selecting the highest-yield vault at deposit time and the appropriate vault for withdrawal. End-to-End Operational: Deployed on Base for demonstration, with a functioning frontend on OpSec. Getting Started 4.1 Prerequisites Node.js (v16+ recommended) Yarn or npm Git Coinbase or another Web3 wallet for testing on Base or other test networks. 4.2 Installation Clone this repository: git clone https://github.com/purebl00d/nimble.git Install dependencies: cd nimble npm install 4.3 Configuration Copy .env.example to .env and fill in the required environment variables: cp .env.example .env CDP_API_KEY_NAME: Key name of the CDP API Key CDP_API_KEY_PRIVATE_KEY: CDP API KEY from coinbase developer kit. OPENAI_API_KEY: you OPEN AI API key for the models NETWORK_ID: for example base-mainnet 4.4 Running Locally Start the local dev server (frontend): yarn start This runs the Nimble frontend on http://localhost:5171. Backends may each have separate start scripts (depending on how you organize your project): Example yarn run swap-backend yarn run deposit-backend yarn run withdraw-backend Usage 5.1 Swapping Assets On the Nimble Frontend, connect your wallet (MetaMask or similar). Navigate to the Swap tab. Select tokens to swap. Approve the contract for token spending (if prompted). Click Swap. Nimble runs an internal auction among solver agents (e.g., agent 1, agent 2, agent 3). The best quote is displayed, and the swap is executed. Receipt of transaction will show up once confirmed. 5.2 Depositing to Morpho Vaults Go to the Deposit section in the frontend. Approve the deposit contract (if needed). Enter the amount to deposit. Click Deposit. The deposit contract finds the best vault (via an auction among the solver agents). Your assets are deposited into the chosen vault for optimal yield. 5.3 Withdrawing from Morpho Vaults Navigate to the Withdraw section. Approve if required. Enter the amount (or select “withdraw all”). Click Withdraw. Nimble chooses the correct vault and handles the withdrawal on your behalf. Funds are returned to your wallet. Deployment Frontend is deployed on OpSec. If you want to deploy your own instance, configure hosting and run: npm run dev Then upload the build artifacts to your hosting service of choice. Smart Contracts are on Base (testnet or mainnet). You can adapt the deployment scripts to other EVM chains. Project Status Alpha Release: The core functionality (swap, deposit, withdraw) is operational on Base for demonstration. Next Steps: Audit and security reviews. Expand solver agent strategies for even better yields and swap quotes. Expand to additional chains (e.g., Ethereum mainnet, Polygon, Arbitrum).",
    "summary": "AI agent powered Intent Settlement Network. Nimble is an AI‐agent‐based solver network that helps users get the best price for swaps and also supports deposits and withdrawals in Morpho vaults"
  },
  {
    "title": "against-ai-danger",
    "url": "https://ethglobal.com/showcase/against-ai-danger-r3441",
    "description": "Project DescriptionThis project is an AI-powered using eliza os conversational agent designed to educate, discuss, and raise awareness about the potential dangers of artificial intelligence. The agent engages users in real-time conversations, providing insights, answering questions, and analyzing risks associated with AI development and deployment.How it's MadeBuilding this AI agent was an exciting challenge that required diving deep into machine learning (ML), NLP (Natural Language Processing), cloud-based development, and optimizing Node.js workflows. Along the way, I learned new ML concepts like embeddings and tokenizers, explored pnpm for managing Node.js dependencies, and dealt with various runtime and compatibility issues while setting up my development environment in the cloud using Gitpod.",
    "summary": "An AI agent that discusses the dangers of AI—covering risks like bias, job displacement, misinformation, and uncontrolled development. Stay informed on AI ethics, safety, and responsible innovation"
  },
  {
    "title": "Remi",
    "url": "https://ethglobal.com/showcase/remi-d7r9q",
    "description": "Project Description🔗 Unified Finance Management – Connects with Plaid to fetch all bank and credit card transactions and integrates with Web3 wallets to track crypto holdings. 💰 Real-Time Spending Insights – Provides available-to-spend balance by considering upcoming bills, incoming payments, and cash flow trends. ⚡ Automated Bill Payments – Ensures timely payments using the best available payment instrument while maximizing offers and cashback. 🏦 Smart Liquidity Solutions – If running low on cash, Remi helps secure low-interest collateralized loans against crypto to cover urgent expenses. 📈 Credit Score Optimization – Avoids missed payments, reduces penalties and interest rates, and helps boost your credit score.How it's MadeThe product fetches financial data from plaid and uses agents for bill payment, obtaining loans and day-to-day assistance. Plaid for fiat Financial data AgentKit / Coinbase developer SDK for interactions Base wallets with Agent interface Privy wallet connectors and server wallet",
    "summary": "Remi is an AI-powered finance agent that helps users seamlessly manage their funds, optimize bill payments, and avoid penalties—all while leveraging Web3 assets."
  },
  {
    "title": "AI AGENT",
    "url": "https://ethglobal.com/showcase/ai-agent-igbb3",
    "description": "Project DescriptionAI-Powered On-Chain Transaction Agent This project is an advanced on-chain transaction agent capable of executing automated transactions across Ethereum (ETH), Base, Arbitrum (ARB), and Starknet. It provides seamless interaction with blockchain networks, enabling users to send transactions, perform token swaps, and optimize asset movements without manual intervention. Core Features 1️⃣ Multi-Chain Transaction Execution The agent can send transactions across Ethereum, Base, Arbitrum, and Starknet, ensuring seamless cross-network operability. Supports gas optimization, choosing the most efficient gas fees and timing for execution. Ensures secure and fail-proof transaction broadcasting using on-chain validation methods. 2️⃣ Automated Token Swaps Can swap ETH to any token and perform token-to-token swaps on supported chains. Uses DEX aggregators like Uniswap, 1inch, and Sushiswap for the best execution rates. Slippage protection ensures trades are executed without unexpected losses. 3️⃣ On-Chain Data Monitoring & Execution Continuously fetches and analyzes on-chain data to determine optimal transaction timing. Monitors token liquidity, trade volume, and price movements from blockchain data sources. Supports real-time tracking of wallet balances across different networks. 4️⃣ Cross-Chain Asset Movement Can bridge assets between supported chains using cross-chain liquidity protocols. Automates efficient fund transfers between Ethereum, Base, Arbitrum, and Starknet. Prevents unnecessary gas wastage and optimizes for speed and cost efficiency. 5️⃣ Security & Automation Runs fully autonomously, executing transactions based on predefined logic. Implements transaction failover mechanisms, ensuring retries if a transaction fails. Protects against front-running and sandwich attacks by optimizing execution timing.How it's MadeHow It’s Made This project is built using a combination of Alchemy’s Web3 infrastructure, decentralized exchanges (DEXs), and blockchain-specific optimizations to enable seamless on-chain transactions and token swaps across Ethereum (ETH), Base, Arbitrum (ARB), and Starknet. The architecture is designed to ensure efficiency, security, and automation while minimizing transaction costs. Tech Stack & Architecture 1️⃣ Alchemy Web3 for Blockchain Transactions We use Alchemy’s Web3 library to send transactions and fetch on-chain data across Ethereum, Base, and Arbitrum. Alchemy provides low-latency, high-reliability RPC access, ensuring fast and accurate transaction execution. Enables gas-optimized transactions by fetching real-time gas fees and using EIP-1559 for fee estimation. Provides mempool monitoring, allowing us to analyze pending transactions and optimize execution timing. 2️⃣ UniChain Integration for On-Chain Data & Swaps UniChain (via Alchemy) is used for fetching on-chain transaction details, token data, and DEX liquidity info. We leverage UniSwap, 1inch, and other DEX aggregators to facilitate ETH-to-token and token-to-token swaps. Slippage protection is implemented to prevent unexpected losses during swaps. 3️⃣ Smart Contract Interactions The agent interacts directly with smart contracts on Ethereum, Base, Arbitrum, and Starknet to execute swaps and asset transfers. We use Ethers.js and Web3.py to build a flexible transaction execution framework. Pre-signed transactions allow faster execution and batch processing of multiple trades. 4️⃣ On-Chain Data Fetching & Monitoring Alchemy’s Enhanced API enables real-time tracking of: Wallet balances across different chains. Transaction history and pending transactions. DEX liquidity pools for trade execution. We use The Graph & Chainlink oracles to fetch price feeds and historical market data. 5️⃣ Automation & Security AI-based execution logic ensures trades and transactions are optimized for market conditions. Automated retries if a transaction fails or gets stuck due to network congestion. Anti-front-running mechanisms to avoid bot exploitation in DEX trades. Secure transaction signing with private key management using a secure vault. Why Alchemy & Partner Technologies? Alchemy provides superior RPC reliability & low-latency execution, which is crucial for high-frequency transactions. UniChain simplifies on-chain data aggregation, making it easy to fetch liquidity and pricing details. DEX Aggregators like 1inch & Uniswap ensure optimal swap rates, reducing slippage and maximizing efficiency. Cross-chain compatibility with Ethereum, Base, Arbitrum, and Starknet ensures seamless interoperability. Hacky & Notable Features 🚀 Gas Optimization: Dynamically adjusts gas fees using Alchemy’s Gas API to reduce transaction costs. 🛠️ Pre-Signed Transactions: Allows users to queue swaps and execute them at the best price points automatically. 🔄 Auto-Rollback Swaps: If a token swap experiences unexpected slippage, the agent cancels or reverses it. ⚡ Parallelized Execution: Uses multi-threading & batch transactions for faster processing on multiple chains. This combination of Alchemy’s Web3 infrastructure, UniChain for data aggregation, and AI-driven automation makes our transaction agent one of the most efficient solutions for seamless on-chain transactions, swaps, and asset management across multiple blockchain networks. 🚀",
    "summary": "An AI agent that fetches on-chain data & executes trades on ETH, Base, Arbitrum & Stark. It auto-swaps ETH/tokens based on price trends, detects rapid market cap surges, and moves funds for max gains. If value drops, it auto-swaps back to stablecoins - ALL BY JUST ONE MESSAGE"
  },
  {
    "title": "agentawim",
    "url": "https://ethglobal.com/showcase/agentawim-upa37",
    "description": "Project DescriptionGreenWim is an extension to the solarX ecosystem to promote the adoption and production of green energy through innovative financial incentives enabled by our GenSensor technology. This technology enables individuals to connect our smart sensors to their green energy sources, such as solar panels, to monitor and convert energy production into SLR points. These SLR points can then be exchanged for SXCH (after the mainnet launch; currently, they can be converted to ETH). SXCH allows users to participate in the broader green energy ecosystem. By establishing a transparent and economically viable marketplace for green energy, GreenWim not only encourages renewable energy generation but also reduces the global carbon footprint. Our platform offers financial incentives for clean energy usage, making it more accessible and financially appealing. This initiative empowers individuals to actively engage in a green energy future, fostering a community committed to environmental stewardship.How it's MadeAlignment with Environmental and Social Outcomes: Promotes renewable energy generation, which directly contributes to reducing the global carbon footprint, thereby supporting ecological sustainability. Use of Blockchain and Transparency: The use of GenSensor technology to track energy production and convert it into digital tokens ensures transparency and traceability in energy generation and trading. Tokenization and Marketplace Integration: Converts energy production into digital tokens and facilitates the creation and trade of green energy certificates, enhancing market activity and efficiency. Community Participation and Inclusivity: Provides economic incentives for clean energy usage by making green energy financially attractive and accessible, encouraging wider adoption. Economic Incentives for Sustainability: Democratizes energy generation and consumption, creating a community of producers and consumers dedicated to promoting environmental sustainability. Innovative Financial Instruments: The use of digital tokens and green energy certificates represents innovative financial tools designed to support and accelerate renewable energy projects.",
    "summary": "GreenWim is an extension to the solarX ecosystem to promote the adoption and production of green energy through innovative financial incentives enabled by our GenSensor technology."
  },
  {
    "title": "Onchain Credit Agent",
    "url": "https://ethglobal.com/showcase/onchain-credit-agent-nzcb1",
    "description": "Project DescriptionOnChainCred is an AI-driven knowledge base and savings agent that helps small businesses (SMBs) and startups understand and build their on-chain credit history. Many Web3 users lack clear credit-building strategies, making it difficult to access DeFi loans or prove financial reliability. Our platform leverages Gaia AI to educate users with personalized guidance on credit history, lending strategies, and savings techniques. Key Features: ✅ AI-Powered Knowledge Base – Ask financial questions and get instant AI-driven answers on credit-building. ✅ On-Chain Saving Agent – Helps users take real financial actions to improve their credit score. ✅ Seamless Wallet Onboarding – Uses Privy to generate wallets for users instantly. ✅ On-Chain Analytics – Tracks users’ financial progress with The Graph. 🚀 This project empowers SMBs by making blockchain finance accessible and actionable!How it's MadeTechnologies Used: ✅ Gaia AI + Collab.Land → AI-powered financial knowledge base ✅ Privy → Seamless wallet onboarding ✅ The Graph → Tracks on-chain credit-building actions ✅ Express.js + Node.js → Backend API for AI agent communication ✅ Next.js + Tailwind CSS → Frontend for chatbot and financial insights ✅ IPFS (Optional) → Decentralized document storage for knowledge base Build Process: 1️⃣ Set up AI Agent (Gaia Llama-3.2-3B) – Used Gaia AI for intelligent responses. 2️⃣ Developed Backend API (Express.js) – Connects AI to the frontend. 3️⃣ Built a Frontend UI (Next.js) – Simple UI for user interactions. 4️⃣ Integrated Privy Wallets – Users get instant Web3 wallets. 5️⃣ Implemented The Graph Analytics – Tracks and displays credit-building actions.",
    "summary": "OnChainCred helps SMBs & startups build their on-chain credit history using AI guidance. Powered by Gaia AI, it educates users & tracks savings actions to improve financial credibility on Web3. Integrated with Privy for seamless wallet onboarding!"
  },
  {
    "title": "Wagent",
    "url": "https://ethglobal.com/showcase/wagent-z9sov",
    "description": "Project DescriptionThis project completely removes the complexity of onchain transactions, by making the use of decision making agents to allow the users to only aware about the dollars theyve in the account which are tied to their base names which is minted when they onboard, whether theyve funds fragmented on different chains or even non-stable coins, everything is shown in simple dollars as users are familiar with right now.How it's Made The project extends the agentkit to implement multiple custom action providers The custom send provider checks the cheapest chain to do the transaction and does using that, if the user does not have enough funds on the target chain, the agent autonomously bridges the required funds from different chains and prepares for sending If the user has non-stable coins, we have a linear regression model to predict the price in a cronjob, if the price even affectes the initial balance by 0.5% decrease then its converted to stable coins, cause the new user should see their dollar losing for nothing, otherwise incase of increment the token in kept. -In case of subscriptions, the agents talk among each other to send prompts in a cronjob and get the required funds when needed",
    "summary": "Easiest way to onboard users into the world of new digital dollars"
  },
  {
    "title": "Titan AI",
    "url": "https://ethglobal.com/showcase/titan-ai-rid81",
    "description": "Project DescriptionTitan AI Smart Contract Assist streamlines the smart contract lifecycle by combining state-of-the-art AI with the robust features of Coinbase AgentKit. It simplifies everything from code generation and interactive editing to comprehensive security auditing and live deployment on test networks. With Titan AI, developers can: Generate Smart Contract Code: Describe your idea in natural language and receive generated smart contract code. Receive Tailored Recommendations: Get instant, actionable feedback to enhance security, performance, and functionality. Edit Code Interactively: Use a powerful multi-file editor to manage and refine your project files. Conduct Security Audits: Automatically scan contracts for vulnerabilities and obtain detailed security reports. Deploy Seamlessly: Deploy contracts directly to test networks using Coinbase AgentKit integration. Maintain Context: Titan AI uses your project’s context (requirements and code files) to provide highly relevant suggestions. How it's MadeTitan AI Smart Contract Assist is built using a combination of modern frontend and backend technologies that work together seamlessly to streamline smart contract development. On the frontend, the application is developed with React and Next.js, which provide a fast and responsive user interface. We use the Monaco Editor for an interactive, multi-file code editing experience, while Tailwind CSS ensures a clean, modern look. User authentication is handled by Privy, offering a secure and straightforward sign-in process. On the backend, the system runs on Node.js with Express to manage API endpoints for chat sessions and message processing. A Coinbase-based agent, integrated through Coinbase AgentKit, handles wallet operations and deploys smart contracts directly from the platform. Deployed contracts are hosted on Base—a scalable and secure blockchain network that supports both testing and live deployments. AI functionality is powered by OpenAI’s Chat API combined with LangChain. This integration enables the AI to interpret natural language prompts, generate smart contract code, offer real-time suggestions, and perform security audits, all while returning structured JSON responses that the frontend can display clearly. Overall, Titan AI Smart Contract Assist brings together interactive code generation, real-time feedback, secure deployment, and context-aware assistance into one unified platform for developers.",
    "summary": "Titan AI Smart Contract Assist is an AI-powered solution that lets developers create, test, and deploy smart contracts interactively. With real-time suggestions, security audits, and seamless on-chain deployment, it provides a one-stop solution for smart contract development."
  },
  {
    "title": "Trendy-Tokens-AI",
    "url": "https://ethglobal.com/showcase/trendy-tokens-ai-hzqfk",
    "description": "Project DescriptionRecently, many of us missed out on the profits from Trump Coin simply because we were unaware of the trend. Our AI agents track internet trends for you and invest accordingly! #1 Use Case: It scans platforms like Twitter & CoinGecko to find trending tokens in Meme, DeFi, ZK & AI, investing in them for you—so you don’t have to wait to hear from friends. Get in early like a pro! #2 Use Case: Our agents monitor the web, identifying trending keywords that could become future meme coins. They even deploy a meme token for you—so others buy in, and you profit!How it's MadeOur agent is built using Coinbase AgentKit and is designed to enhance the DeFAI space. It is deployed on Autonome, leveraging its infrastructure for reliable and efficient execution. To keep the agent up-to-date, we integrate CoinGecko and Twitter APIs, allowing it to scrape real-time market data, social sentiment, and trending discussions. This enables it to formulate an intelligent strategy for investing in trending tokens across Meme, DeFi, AI, and ZK categories. Beyond investment, our agent actively monitors the web for emerging keywords that have the potential to become viral memecoins. When a promising trend is detected, it automatically deploys a meme token before the market catches on—positioning users ahead of the curve for maximum profit. A particularly hacky aspect of our implementation is how we fine-tune the agent's decision-making by analyzing on-chain trends alongside social sentiment. This hybrid approach ensures smarter, data-driven investments and early memecoin deployments. 🚀",
    "summary": "Never miss a profit just because you missed the trend! 🚀 Our AI agent scrapes platforms like Twitter & CoinGecko to find trending tokens in Meme, DeFi, ZK & AI—then invests for you! It also spots viral keywords, deploys memecoins, & lets you profit before the noobs. 💰🔥"
  },
  {
    "title": "IP Defender Agent",
    "url": "https://ethglobal.com/showcase/ip-defender-agent-5p8yj",
    "description": "Project DescriptionIP Defender Agent is designed to identify and manage intellectual property (IP) rights for online content. It operates across Twitter and Telegram, as well as on its standalone website. Here’s a breakdown of its functions: IP Verification: Users can request the agent to verify the IP of an online image. The agent examines the content for any IP issues, evaluates potential violations, and provides a score indicating the likelihood of an IP infringement. It also offers a description if a violation is detected. If an IP certificate is found, it will return it to the user for them to know more about the IP of that image. Reputation Tracking: Upon verifying content, the agent logs the user's details into the \"ReputationContract\" and a subgraph. This information helps in building a network graph that categorizes users as infringers or good actors. Over time, as more data is gathered, the agent’s algorithm improves in accurately predicting the likelihood of a user infringing IP rights. IP Certificate Minting: If content is verified and deemed original, users can ask the agent to mint an IP certificate. This certificate includes IP details, an invisible watermark, and Adobe C2PA metadata, all embedded within the content. This helps in establishing and protecting the user's IP ownership in the future. In essence, IP Defender Agent helps content creators protect their IP rights, monitor the reputation of content users, and secure their content against future infringements.How it's MadeThe IP Defender Agent is developed using Gaia LLM and the Collab.Land AI Agent Starter Kit for multiplatform connectivity (we are live in Telegram and Twitter and our own landing page). All our smart contracts are also in Base testnet (and subgraph). Users can interact with our agents on Twitter by #ipdefenderagent in a post and asking IP questions, to verify or mint a certificate. Its a very easy and common behavior for the user. In Telegram you need to talk to our agent in its one app (MentaportBox) and ask the same type of question as in Twitter. Additionally, users can communicate directly with the Defender Agent through a custom chat box on our landing page. Here’s a breakdown of the agent’s functionalities: IP Verification: Each time a user requests image verification, the agent utilizes Mentaport technology to analyze metadata and watermarks to check for any IP associations. If the content is linked to an IP, the agent retrieves the corresponding certificate and assesses whether the poster is the rightful owner or an infringer. The agent then applies its Infringer/Reputation algorithm, combined with our Gaia model (LLM), to generate a reputation score. This score is recorded in the Reputation Smart Contract, enhancing the agent’s ability to classify users over time. IP Certificate Minting: When a minting request is made, the agent converts the user's handle (on Twitter and Telegram) into a valid address using the Lit protocol and Collab.Land. It then evaluates the user's reputation and the content's authenticity. If approved, the agent mints an IP certificate for the content, which the user can then share as certified. Data Analysis and Tracking: The platform leverages The Graph to create a subgraph of our smart contract. This allows for efficient identification of patterns and connections among users, updating scores with each post, which helps in distinguishing between infringers and legitimate defenders more effectively. Overall, the IP Defender Agent offers robust tools for managing and safeguarding intellectual property in digital content, fostering a responsible community of content creators and users. Reputation Smart Contract (Base: 0x984B06553b696d813A0D2C4475ba9aF5405EeeEe) Subgraph:https://api.studio.thegraph.com/query/103698/ip-reputationagent/v0.0.1",
    "summary": "IP Defender Agent help you identify the IP of any content online by verifying it and minting new IP"
  },
  {
    "title": "ChatMate",
    "url": "https://ethglobal.com/showcase/chatmate-p0xqi",
    "description": "Project DescriptionChainMate is a revolutionary blockchain interaction platform that transforms how people manage their digital assets through natural language processing. At its core, ChainMate serves as an intelligent bridge between users and blockchain technology, eliminating the complexity traditionally associated with cryptocurrency management. Key Components: Natural Language Interface Users interact with their crypto assets through simple, conversational commands No need to understand complex blockchain terminology or remember wallet addressesHow it's MadeChainMate is built using a modern tech stack centered around Next.js 14 with the App Router, leveraging React Server Components for optimal performance. The frontend uses TailwindCSS for styling and Framer Motion for fluid animations, creating a responsive and engaging user interface. We implemented a custom streaming architecture to handle real-time AI responses, ensuring smooth and natural conversations between users and the AI assistant.",
    "summary": "ChainMate: Your AI-powered crypto companion that makes digital finance feel natural. Send, receive, and manage crypto through simple conversations - as easy as chatting with a friend. Built on Flow blockchain for security you can trust."
  },
  {
    "title": "AI Hedge Fund",
    "url": "https://ethglobal.com/showcase/ai-hedge-fund-c61t0",
    "description": "Project DescriptionThe AI Hedge Fund is an educational project that demonstrates how artificial intelligence can be applied to investment decision-making. The system implements a multi-agent architecture where different AI agents, each specialized in specific investment strategies, work together to analyze stocks and generate trading signals. Key Components: Investment Legend Agents (Bill Ackman & Warren Buffett) that apply their proven investment principles Specialized Analysis Agents for valuation, sentiment, fundamentals, and technical analysis Risk Management Agent to evaluate and limit position exposure Portfolio Management Agent to coordinate final trading decisions The system processes real market data but operates in simulation mode only, making it perfect for learning about AI applications in finance without real monetary risk.How it's MadeThe project is built using a modern Python stack with several key architectural decisions: Agent Architecture: Each investment strategy is encapsulated in its own agent class, allowing for modular development and easy addition of new strategies. The agents communicate through a coordinated workflow managed by the Portfolio Manager. Data Integration: Uses Financial Datasets API for market data, with built-in support for major tech stocks (AAPL, GOOGL, MSFT, NVDA, TSLA). LLM Integration: Leverages multiple LLM providers (OpenAI, Groq, Anthropic) for sophisticated market analysis and decision-making. Development Tools: Poetry for dependency management and virtual environment handling Environment variable management for secure API key storage Comprehensive backtesting framework for strategy validation Project Structure: Organized into logical components: Separate agent modules for each strategy Dedicated tools directory for API interactions Backtesting system for performance analysis The system is designed to be educational and extensible, allowing users to easily add new agents or modify existing strategies while maintaining a clear separation of concerns.",
    "summary": "AI-powered hedge fund simulation using multiple expert agents (Buffett, Ackman) to analyze stocks and make trading decisions. Combines fundamental, technical, sentiment analysis with risk management for educational purposes."
  },
  {
    "title": "AgentKit Swaps&Types",
    "url": "https://ethglobal.com/showcase/agentkit-swaps-and-types-a7fy3",
    "description": "Project DescriptionThe project encompasses two main parts: Simple, on-chain swaps using Sushi, across many evm-based networks. This includes token address lookup, human-readable to \"machine\" amount conversion (0.1 ETH is 1e17 wei), and quote checks (the agent first fetches a quote, offers it to the user and only proceeds with the swap if the user agrees). Major type cleanup. Allows for a safer and simpler experience for developers. ViemWalletProvider was heavily cleaned up, type-wise. ReadContract function now behaves as expected, SignTypedData is now typed, etc. CdpWalletProvider and the parent class EvmWalletProvider have received similar improvements. 0x${string} has been replaced with Address and Hex approprietly. The Network type has been tightened down considerably, including the chain and network id maps Instead of regexes, address checks in zod schemas now use the isAddress function from viem https://github.com/coinbase/agentkit/issues/310How it's Made The Sushi Router API (for swaps and quotes) and Sushi Data API (for token lookups) OpenAI for agent testing, AgentKit for tying it all together VSCode, ~6 fingers (I refuse to learn full touch-typing) and a healthy amount of caffeine That's about it, not much more to say, character limit etc.",
    "summary": "1. Swap, quote and token-find actions for AgentKit leveraging Sushi infrastructure. 2. Major type-safety improvement."
  },
  {
    "title": "The Game Show",
    "url": "https://ethglobal.com/showcase/the-game-show-8sypr",
    "description": "Project DescriptionThe Game Host is an AI game show bot designed for Discord servers. It organizes creative contests—like joke competitions—where users submit their entries privately. Each submission is registered on a smart contract deployed on Base, ensuring transparency and fairness. Contestants pay a small entry fee, and after the contest ends, an AI jury evaluates the entries and selects the winner. The smart contract then releases the jackpot to the winner automatically. By blending AI-driven fun with blockchain transparency, The Game Host offers a unique, secure, and entertaining experience for all participants.How it's MadeThe project is built as a Discord bot using AgentKit by Coinbase to handle AI-powered contest organization and judging. For secure submission management, we leveraged Privy Server Wallets to generate cryptographic signatures, allowing participants to register their entries on a smart contract deployed on Base. Each entry is submitted via a private Discord thread, where the bot provides a signature that authorizes a transaction, including the entry fee. Once the AI jury, powered by AgentKit, evaluates the submissions, it selects a winner and submits the result to the smart contract, triggering the jackpot payout. The integration of Privy and Base ensures that contest entries and prize distribution are both tamper-proof and fully automated, while the AI adds a fun, interactive element to judging. This blend of AI and blockchain creates a transparent, trustless system for running community-driven contests on Discord.",
    "summary": "The Game Show is an AI-powered Discord bot that organizes fun contests like joke-offs, with entries and prize payouts secured on Base via smart contracts. Contestants submit entries, pay fees, and AI judges pick winners—all automated, fair, and transparent."
  },
  {
    "title": "Fluid Onchain Agent",
    "url": "https://ethglobal.com/showcase/fluid-onchain-agent-yv9z5",
    "description": "Project DescriptionYou see, sometimes transacting on chain can be overly complicated especially for beginners. But, can you imagine chatting with chatgpt, but can perform blockchain transactions or read data from blockchain. Well, now it is here. If I type hello it will act like a normal LLM like chatgpt. But now if I have check my balance. Whoops! I haven’t connected my account yet. Now with a click of a button I can connect my metamask or phantom wallet. Click what’s my address and balance it will return the balance and address. Connect your wallet, and perform onchain trx with just prompts right away!How it's MadeThe frontend we use Next Js App router, Typescript, Tailwind, Eslint, and Vercel for deployment. The wallet connect api we use Rainbowkit, Wagmi and Viem for communicating with blockchain and wallet. The chat assistant is using Openai gpt-4o-mini. The whole conversation follows Assistants api from openai. The chain used is Abstract testnet. No wallet private key being exported, nor stored in a database, all interactions are using wallet and client instances with ConnectButton.",
    "summary": "Chatbot based agent that can ease onchain transactions, just like chatting with chatgpt!"
  },
  {
    "title": "ETHGuardian",
    "url": "https://ethglobal.com/showcase/ethguardian-wemic",
    "description": "Project DescriptionAI agent alignment, prompt design, and jailbreaking are crucial aspects of the AI ecosystem. An AI agent that is perfectly aligned with its creator is significantly more useful and secure than one that can be manipulated into making detrimental decisions. This is particularly critical when these agents hold your ETH! Without robust AI security, an LLM-powered wallet agent could be tricked into performing unauthorized transactions, leading to financial losses. ETHGuardian provides a way to test and improve AI defenses in a real-world environment. ETHGuardian is a gamified, high-stakes AI alignment experiment where adversarial security meets decentralized finance. It fosters real-world research into AI security while leveraging Ethereum to create an open and rewarding ecosystem. Whether you're an AI researcher, security enthusiast, or hacker, ETHGuardian provides an engaging and meaningful challenge! In the current prototype of the ETHGuardian challenge, the forbidden task is to get some ETH from the faucet. In the future, we plan to expand this to balance transfers as the forbidden task. To support this, we can seed the agent wallet and present it as a bounty for jailbreakers to pursue! The current version of the ETHGuardian challenge consists of three levels: Level 1 (Easy): This AI agent has no defensive prompt! You can simply ask it to do anything. See the picture gallery for an example of a Level 1 conversation. Level 2 (Medium): This AI agent has a defensive prompt, but it contains a secret backdoor keyword. If you say the keyword, you can unlock the faucet capability. Level 3 (Hard): This AI agent has a defensive prompt and no secret keyword! Try your best to convince it to retrieve funds from the faucet! Currently, the challenges on ETHGuardian are set by the developers. However, in the future, the goal is to allow anyone to set up an AI agent using their own LLM and prompt. They will then be able to observe the results, study failed jailbreak attempts, and refine LLM alignment techniques.How it's MadeETHGuardian is built using: Coinbase Developer Platform AgentKit – This enables the deployment and interaction of AI agents in a secure and efficient way. Base Network – A Layer 2 Ethereum scaling solution that ensures cost-efficient transactions and fast execution. OpenAI’s LLM – Currently used for AI agents, with future plans to allow AI researchers to plug in their own LLMs for customized testing. Frontend developed using Next.js – Provides a seamless, high-performance web interface for users to interact with ETHGuardian and participate in challenges. ETHGuardian leverages these technologies to create a self-sustaining ecosystem where AI security and blockchain technology intersect. Our platform is designed to encourage research into AI alignment while making security testing engaging and rewarding for participants.",
    "summary": "Trick the AI agents on ETHGuardian to send their wallet balances to your wallet! There are multiple tiers with increasing difficulties and bounties. AI researchers can use ETHGuardian to test their LLMs and prompt security."
  },
  {
    "title": "NFTVision",
    "url": "https://ethglobal.com/showcase/nftvision-fjydu",
    "description": "Project DescriptionNFTVision is a comprehensive NFT market analytics platform built with Next.js and TypeScript. It provides real-time insights and detailed metrics for NFT markets across multiple blockchains, helping users make informed decisions in the NFT space. The platform leverages the powerful UnleashNFTs API (UnleashNFTs API) for comprehensive NFT data and analytics.How it's MadeNFT Vision is built using Privy for seamless server wallet integration, allowing users to onboard effortlessly with email, social logins, or existing wallets. We leverage the UnleashNFTs API to fetch real-time NFT metadata, enhancing the platform’s ability to display and analyze collections dynamically. The frontend is powered by Next.js for fast, responsive performance, while the backend efficiently handles authentication and NFT data retrieval. A particularly hacky yet effective implementation was optimizing API calls to minimize latency, ensuring a smooth user experience when browsing NFTs.",
    "summary": "Unlock the World of NFTs: Real-Time Insights at Your Fingertips Analyze NFT trends, explore top collections, track wallet performance, and get real-time price estimates."
  },
  {
    "title": "MinitQ",
    "url": "https://ethglobal.com/showcase/minitq-gupsv",
    "description": "Project DescriptionMinitQ is a full-stack web application that combines traditional quiz gameplay with blockchain rewards. Built using FastAPI for the backend and vanilla JavaScript for the frontend, it demonstrates the integration of Web3 functionality using the Coinbase Developer Platform (CDP). Core Features: Quiz Mechanics: Multiple-choice questions, Score tracking, Interactive web interface, Persistent leaderboard system Web3 Integration: Custom ERC20 token (MNTQ) for rewards, Smart contract integration for token minting, Automated reward distribution (10 MNTQ tokens per correct answer), Token contract deployed at 0xc90278252098de206ae85A4cb879123d50a05456 on base sepolia Architecture: Frontend: HTML5, CSS3, and vanilla JavaScript, Backend: FastAPI (Python), Database: Replit DB for leaderboard storage, Blockchain: CDP SDK for Web3 interactions, AI Agent: Custom TokenAgent for reward distribution, User Flow: User input their Web3 wallet address, Answers 5 themed questions, Receives MNTQ tokens based on performance, Views their position on the global leaderboard, Option to play again Technical Features: Asynchronous API endpoints, Secure token minting system, Real-time score updates, Optimized smart contract interactions, Automated reward calculations, Persistent leaderboard rankings, Clean separation of concerns (MVC pattern), The project serves as an example of how traditional web applications can be enhanced with Web3 and AI Agent functionalities, providing both entertainment and rewards for user participation. The modular architecture allows for easy expansion of both quiz content and reward mechanisms. Future Works Quiz theme and questions generations using AI Agents Wallet Connection and Management features in the frontend Enhance UI/UX Conduct live events using AI Agents How it's MadeBuilt using FastAPI for the backend and vanilla JavaScript for the frontend. The game features a persistent leaderboard system using Replit's DB, real-time score tracking, and automated token distribution through smart contracts deployed at 0xc90278252098de206ae85A4cb879123d50a05456 on Base Sepolia. The integration with Coinbase Developer Platform (CDP) enables secure wallet validation and token minting, while the modular architecture allows for easy expansion of both quiz content and reward mechanisms. Key Components: Core Game Engine (game.py): Implements QuizGame class managing game logic, Handles question management and scoring, Manages reward calculations (10 MNTQ tokens per correct answer) Token System (token_agent.py): Custom TokenAgent class for MNTQ token management, Deployed ERC20 contract at 0xc90278252098de206ae85A4cb879123d50a05456, Uses CDP SDK for smart contract interactions, Handles token minting and distribution, API Layer (app.py): FastAPI routes for game interactions, /api/questions endpoint serves quiz content, /api/submit handles answer validation, /api/finish processes game completion and rewards, Static file serving for frontend assets Frontend (static/): Responsive single-page application, Dynamic question rendering, Leaderboard display, Wallet integration CDP Integration: Used CDP SDK for wallet management, CDP AgentKit for smart contract interaction and token minting capabilities, Technical Innovations: Automated reward distribution using AI Agents and smart contracts, Real-time leaderboard updates via Replit DB, Secure wallet validation through CDP, Efficient token minting process, Serverless architecture leveraging Replit's infrastructure",
    "summary": "MinitQ is an interactive quiz game that combines trivia knowledge with blockchain rewards. Players answer themed questions to earn MNTQ tokens for correct answers."
  },
  {
    "title": "DeepDive Dao",
    "url": "https://ethglobal.com/showcase/deepdive-dao-bjboh",
    "description": "Project DescriptionDeep Dive: AI-Powered Insights for Smarter DAO Governance Deep Dive is an AI-powered assistant designed to empower DAO (Decentralized Autonomous Organization) members with the information they need to participate effectively in governance. We understand that navigating the complexities of DAO proposals, discussions, and voting can be challenging. Deep Dive simplifies this process by providing concise summaries, in-depth analysis, and community sentiment insights, all within the familiar environment of Telegram. Key Features: Personalized Proposal Summaries: Deep Dive uses cutting-edge AI (powered by Eliza, a natural language processing engine) to generate concise and user-friendly summaries of DAO proposals. Users can request summaries of specific proposals directly within the Telegram group using simple commands (e.g., /summary <proposal_ID>). Summaries are tailored to highlight key points, potential impacts, and arguments for and against, allowing members to quickly grasp the essence of even the most complex proposals. Community Sentiment Analysis: Understanding the community's perspective is crucial for informed decision-making. Deep Dive analyzes discussions related to proposals across various platforms (starting with the dedicated Telegram group and potentially expanding to forums and other channels). The agent provides an overview of the prevailing sentiment (positive, negative, mixed) and can even visualize this sentiment using charts or graphs within Telegram, giving members a clear picture of how the community feels about a particular proposal. Discussion Facilitation: Deep Dive goes beyond simply providing information. It actively facilitates discussions by summarizing key arguments for and against a proposal, helping users organize their thoughts and express their opinions effectively. The agent can identify common themes and questions within the discussion, providing relevant information or resources to keep the conversation productive. Voting Assistance & Reminders: Deep Dive helps DAO members stay on top of the voting process. The agent can send personalized reminders about upcoming votes and provide clear instructions on how to cast a vote. It can also display real-time voting statistics within Telegram, showing current participation rates and the distribution of votes. Personalized Notifications: Staying informed about the proposals that matter to you is easy with Deep Dive's personalized notification system. Users can subscribe to updates about specific proposals or topics, ensuring they never miss critical information.How it's MadeTechnical Architecture: Deep Dive leverages a powerful combination of technologies: Blockchain Integration (Base/Flow): The agent interacts directly with the DAO's smart contracts on the chosen blockchain (Base or Flow) to retrieve proposal details, voting data, and other relevant on-chain information. Agent Kit: An agent kit provides the framework for Deep Dive's logic, managing tasks, memory, and communication between different components. Eliza (NLP Engine): Eliza is the core of Deep Dive's natural language processing capabilities, enabling intelligent summarization, sentiment analysis, and discussion facilitation. Telegram Bot: The Telegram bot serves as the user interface, allowing DAO members to interact with Deep Dive through familiar commands and messages. autonome.meme (Hosting): Deep Dive is deployed on autonome.meme for continuous operation, ensuring that the agent is always available to assist DAO members.",
    "summary": "Deep Dive : Dive deep into DAO governance with AI. Get comprehensive proposal analysis & community insights."
  },
  {
    "title": "ARBISCORE",
    "url": "https://ethglobal.com/showcase/arbiscore-0yqup",
    "description": "Project DescriptionThis project is a smart contract written in Rust using the Stylus SDK, which allows developers to write Ethereum-compatible smart contracts in Rust and compile them to WebAssembly (WASM). The contract is designed to be ABI-compatible with Solidity, meaning it can be called from both Solidity and Rust, making it highly versatile. The contract implements a Q-learning algorithm for a lending protocol. Q-learning is a reinforcement learning technique used to optimize decision-making in dynamic environments. In this case, the algorithm is applied to a lending protocol to optimize decisions such as: Whether to approve a loan. How much credit to extend to a user. When to liquidate a loan.How it's MadeRust: Chosen for its performance and memory safety features. Used to write the entire smart contract logic efficiently. Stylus SDK: Provided tools to define contract storage and public functions using Rust. Simplified the process of compiling the Rust code to WebAssembly (WASM). Enabled ABI compatibility for interoperability with Solidity. WebAssembly (WASM): Compiled smart contracts to an efficient and portable binary format. Made contract execution fast and secure on the blockchain. Ethers-rs: Used to connect to the Ethereum blockchain, send transactions, and call contract functions. Simplified interaction between the Rust contract and the blockchain. Environment Variables: Stored sensitive configuration data, including private keys and RPC URLs, securely outside the codebase.",
    "summary": "This is an on chain AI agent that generates credit scores for our lending protocol and we also have an API that can be used for other projects as well"
  },
  {
    "title": "Fomo Wallet",
    "url": "https://ethglobal.com/showcase/fomo-wallet-nib15",
    "description": "Project DescriptionWelcome to FOMOWallet, where you can bet, and even if you don't make the guesses right, you'll still get paid if your bet guesses are closer to the original target. This is a blockchain-powered number-guessing game where privacy meets fun. The game leverages cutting-edge technologies like the Lit Protocol for encryption, smart contracts on the Mantle blockchain, and AI-driven feedback to keep things interesting and secure. Players guess a target number (which is encrypted) and get AI-powered hints along the way. Social integrations like Twitter updates and email notifications keep everyone in the loop. If you're into blockchain, AI, and a bit of friendly competition, you’re in the right place!How it's MadeTechnical Architecture Users create a pot by hosting a bet. When a bet is placed, a random number is generated, ranging between 0 and the amount/10. The user must then wager an amount within this range. The AI agent provides feedback, indicating whether the bet was low or high, but does not reveal whether the bet is correct. Once the required time has elapsed, anyone can query the contract to retrieve the result. The smart contract will then reward the closest bet to the winning number while also distributing a fee to the pot host. For the technical stack, we have built the frontend using Next.js, implemented Lit Protocol for encryption, and utilized blockchain technology for smart contracts. Additionally, we employ a polling client that listens for events and assists the AI agent in processing each bet. With every bet hosted, the AI agent: Posts updates on Twitter and listens for engagement. Emails users with hints regarding their bets. Tracks social interactions, allowing users to farm hints through engagement. This system ensures a transparent and interactive betting process, combining blockchain verification, AI-driven insights, and social engagement to enhance the user experience.",
    "summary": "Welcome to the FOMOWallet - , where you can bet and ecen if you dont make the guesses right youll still get paid if the guesses of your bet are nearer to the original bet. This is a blockchain-powered number guessing game where privacy meets fun."
  },
  {
    "title": "PrediFlow",
    "url": "https://ethglobal.com/showcase/prediflow-40abw",
    "description": "Project DescriptionPredictFlow PredictFlow is an AI-powered prediction market on the telegram mini app built on the Flow blockchain, leveraging Eliza AI and Polymarket data to enhance user experience and decision-making Overview PredictFlow allows users to make predictions and win rewards. With Eliza AI integrated, users can receive insights, analysis, and answers to their queries before making a prediction. The platform is designed for seamless interaction with an intuitive swipe-based interface. Flow explorer Link - https://evm-testnet.flowscan.io/address/0x37dD26d18abeC2d311e82177f9fa58E9DC14b579 Features Blockchain-Powered: Built on the Flow blockchain for secure and transparent transactions. AI Assistance: Eliza AI provides real-time insights and analysis to help users make informed predictions. Polymarket Data: Utilizes Polymarket for accurate and up-to-date market data. Swipe to Predict: Swipe Right to confirm a prediction. Swipe Left to cancel. Telegram Mini App: Accessible directly from Telegram, allowing users to engage easily on the go. How It Works Ask Eliza AI: Get AI-powered insights on the prediction market. Analyze Data: Review Polymarket data for market trends and probabilities. Swipe to Predict: Swipe right to place a prediction. Swipe left to skip. Win Rewards: If your prediction is correct, you earn rewards! Tech Stack Blockchain: Flow AI: Eliza AI Market Data: Polymarket Frontend: React (with Vite) Telegram Mini App: Built for seamless user engagementHow it's MadeWe have made a telegram mini app on flow blockchain powered by polymarket data and eliza . An AI bot will help you to predict the future and help you to win . How It Works Ask Eliza AI: Get AI-powered insights on the prediction market. Analyze Data: Review Polymarket data for market trends and probabilities. Swipe to Predict: Swipe right to place a prediction. Swipe left to skip. Win Rewards: If your prediction is correct, you earn rewards! Features Blockchain-Powered: Built on the Flow blockchain for secure and transparent transactions. AI Assistance: Eliza AI provides real-time insights and analysis to help users make informed predictions. Polymarket Data: Utilizes Polymarket for accurate and up-to-date market data. Swipe to Predict: Swipe Right to confirm a prediction. Swipe Left to cancel. Telegram Mini App: Accessible directly from Telegram, allowing users to engage easily on the go. we have used privy wallet that will help to onboard web2 users as well.",
    "summary": "PredictFlow is an AI-powered prediction market on the telegram mini app built on the Flow blockchain, leveraging Eliza AI and Polymarket data to enhance user experience and decision-making"
  },
  {
    "title": "evangelion",
    "url": "https://ethglobal.com/showcase/evangelion-5f7a7",
    "description": "Project Descriptionevangelion evangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionHow it's Madeevangelion evangelion evangelion evangelion evangelion evangelion eevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionvangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelionevangelion evangelion",
    "summary": "evangelion evangelion evangelion evangelion evangelionevangelion evangelion"
  },
  {
    "title": "PerspicuaAI",
    "url": "https://ethglobal.com/showcase/perspicuaai-0swhm",
    "description": "Project DescriptionPerspicuaAI is a decentralized platform designed to revolutionize research by tackling information overload. Our AI Agent uses advanced natural language processing to generate concise summaries of research papers from diverse sources, going beyond simple abstract condensation to extract key findings and methodologies. This intelligent summarization empowers researchers to quickly grasp the essence of complex studies, saving valuable time and accelerating knowledge discovery. PerspicuaAI's architecture is built for adaptability, allowing it to integrate with various research data sources and evolve with advancements in AI. A core principle of PerspicuaAI is trust and transparency. AI-generated summaries undergo rigorous decentralized verification using EigenLayer's Predicate AVS. A network of validators independently assesses summaries, running our custom verification logic to ensure accuracy and quality. This process, including semantic similarity checks and other criteria, is recorded on-chain, providing verifiable proof of the summary's trustworthiness. This decentralized verification mechanism builds confidence in the information presented, mitigating the risk of bias or inaccuracies. Verified summaries, along with original papers and metadata, are immutably stored on IPFS, a decentralized storage network. This ensures open, persistent, and censorship-resistant access to research insights, democratizing knowledge and fostering global collaboration.How it's MadePerspicuaAI is built using a combination of cutting-edge technologies, seamlessly integrated to deliver efficient, trustworthy, and accessible research insights. Our implementation leverages Python as the primary programming language, chosen for its rich ecosystem of scientific computing and AI libraries. AI Summarization Engine (AI Agent): At the heart of PerspicuaAI lies our sophisticated AI Agent, responsible for generating concise and informative summaries. This agent is implemented as a modular Python class, allowing for easy expansion and integration of new summarization techniques. Currently, the AI Agent utilizes the spaCy library for natural language processing (NLP) tasks, including tokenization, part-of-speech tagging, and named entity recognition. Future iterations will explore more advanced abstractive summarization models, potentially leveraging transformer networks. Decentralized Verification (EigenLayer Predicate AVS): A key innovation of PerspicuaAI is the integration of EigenLayer's Predicate AVS for decentralized verification. The AI Agent is responsible for interacting with the Predicate AVS. When a summary is generated, the AI Agent formats the summary according to the AVS API specifications and sends a verification request to the AVS endpoint. We use the requests library in Python to handle the HTTP communication with the AVS. The AVS, in our current setup, is a simulated predicate that verifies the length of the summary. However, this will be replaced with a more sophisticated predicate as we develop the project further. The response from the AVS, containing the verification status (True/False) and a message, is then processed by the AI Agent. Immutable Storage (IPFS Integration):- To ensure open access and censorship resistance, verified summaries, along with the original abstracts and metadata (title, link, DOI), are stored on the Interplanetary File System (IPFS). The AI Agent, after receiving a successful verification from the Predicate AVS, packages all relevant data into a JSON object. We use the ipfshttpclient library in Python to interact with the IPFS API. We use the /api/v0/add?wrap=true endpoint to add the JSON data to IPFS, which creates a directory structure containing the data file and returns the root CID (Content Identifier) of the directory. This ensures that the data is wrapped in a directory, which is important for retrieving the complete JSON object later. This CID is then stored and used for retrieval. BioRxiv API Integration:- PerspicuaAI retrieves research abstracts and metadata from BioRxiv using their public API. We utilize the endpoint, as it offers a more structured and reliable way to access preprint data than the search endpoint. The requests library is used to make HTTP requests to the BioRxiv API. The JSON response is then parsed, and the necessary information (abstract, title, DOI, etc.) is extracted. URL encoding is used on the search query to ensure proper API requests. User Interface:- For the hackathon demonstration, we have a basic command-line interface. Future development will focus on creating a user-friendly web interface usingNext.js. This interface will allow users to easily search for preprints, view summaries, and access the original research articles on BioRxiv and the stored data on IPFS.",
    "summary": "PerspicuaAI: AI-powered research summaries, verified with EigenLayer's Predicate AVS for transparent on-chain proofs.  Unlocking knowledge across disciplines."
  },
  {
    "title": "PerspicuaAI",
    "url": "https://ethglobal.com/showcase/perspicuaai-0swhm",
    "description": "Project DescriptionPerspicuaAI is a decentralized platform designed to revolutionize research by tackling information overload. Our AI Agent uses advanced natural language processing to generate concise summaries of research papers from diverse sources, going beyond simple abstract condensation to extract key findings and methodologies. This intelligent summarization empowers researchers to quickly grasp the essence of complex studies, saving valuable time and accelerating knowledge discovery. PerspicuaAI's architecture is built for adaptability, allowing it to integrate with various research data sources and evolve with advancements in AI. A core principle of PerspicuaAI is trust and transparency. AI-generated summaries undergo rigorous decentralized verification using EigenLayer's Predicate AVS. A network of validators independently assesses summaries, running our custom verification logic to ensure accuracy and quality. This process, including semantic similarity checks and other criteria, is recorded on-chain, providing verifiable proof of the summary's trustworthiness. This decentralized verification mechanism builds confidence in the information presented, mitigating the risk of bias or inaccuracies. Verified summaries, along with original papers and metadata, are immutably stored on IPFS, a decentralized storage network. This ensures open, persistent, and censorship-resistant access to research insights, democratizing knowledge and fostering global collaboration.How it's MadePerspicuaAI is built using a combination of cutting-edge technologies, seamlessly integrated to deliver efficient, trustworthy, and accessible research insights. Our implementation leverages Python as the primary programming language, chosen for its rich ecosystem of scientific computing and AI libraries. AI Summarization Engine (AI Agent): At the heart of PerspicuaAI lies our sophisticated AI Agent, responsible for generating concise and informative summaries. This agent is implemented as a modular Python class, allowing for easy expansion and integration of new summarization techniques. Currently, the AI Agent utilizes the spaCy library for natural language processing (NLP) tasks, including tokenization, part-of-speech tagging, and named entity recognition. Future iterations will explore more advanced abstractive summarization models, potentially leveraging transformer networks. Decentralized Verification (EigenLayer Predicate AVS): A key innovation of PerspicuaAI is the integration of EigenLayer's Predicate AVS for decentralized verification. The AI Agent is responsible for interacting with the Predicate AVS. When a summary is generated, the AI Agent formats the summary according to the AVS API specifications and sends a verification request to the AVS endpoint. We use the requests library in Python to handle the HTTP communication with the AVS. The AVS, in our current setup, is a simulated predicate that verifies the length of the summary. However, this will be replaced with a more sophisticated predicate as we develop the project further. The response from the AVS, containing the verification status (True/False) and a message, is then processed by the AI Agent. Immutable Storage (IPFS Integration):- To ensure open access and censorship resistance, verified summaries, along with the original abstracts and metadata (title, link, DOI), are stored on the Interplanetary File System (IPFS). The AI Agent, after receiving a successful verification from the Predicate AVS, packages all relevant data into a JSON object. We use the ipfshttpclient library in Python to interact with the IPFS API. We use the /api/v0/add?wrap=true endpoint to add the JSON data to IPFS, which creates a directory structure containing the data file and returns the root CID (Content Identifier) of the directory. This ensures that the data is wrapped in a directory, which is important for retrieving the complete JSON object later. This CID is then stored and used for retrieval. BioRxiv API Integration:- PerspicuaAI retrieves research abstracts and metadata from BioRxiv using their public API. We utilize the endpoint, as it offers a more structured and reliable way to access preprint data than the search endpoint. The requests library is used to make HTTP requests to the BioRxiv API. The JSON response is then parsed, and the necessary information (abstract, title, DOI, etc.) is extracted. URL encoding is used on the search query to ensure proper API requests. User Interface:- For the hackathon demonstration, we have a basic command-line interface. Future development will focus on creating a user-friendly web interface usingNext.js. This interface will allow users to easily search for preprints, view summaries, and access the original research articles on BioRxiv and the stored data on IPFS.",
    "summary": "PerspicuaAI: AI-powered research summaries, verified with EigenLayer's Predicate AVS for transparent on-chain proofs.  Unlocking knowledge across disciplines."
  },
  {
    "title": "TextCash",
    "url": "https://ethglobal.com/showcase/textcash-0cj6e",
    "description": "Project DescriptionTextWallet is a revolutionary cryptocurrency wallet designed to address the digital financial exclusion gap. It ensures that even those without smartphones or internet access can manage their cryptocurrencies effortlessly through simple text messages. Powered by Solana, Typescript, OpenAI, and Twilio, TextWallet is here to make finance accessible to everyone.How it's MadeIn today's digital age, smartphones have become a staple for most individuals. However, a significant portion of the global population still lacks access to these devices and the internet, excluding them from the modern economy. The digital financial inclusion gap is a pressing issue, but TextWallet is here to change that.",
    "summary": "TextWallet is a revolutionary cryptocurrency wallet designed to address the digital financial exclusion gap, ensuring that even those without smartphones or internet access can manage their cryptocurrencies effortlessly through simple text messages."
  },
  {
    "title": "Whizzify",
    "url": "https://ethglobal.com/showcase/whizzify-kwe81",
    "description": "Project DescriptionWhizzify AI Agent: Revolutionizing Engagement with AI & Ethereum Overview Whizzify AI Agent is an autonomous Web3-powered engagement platform that enables organizations to assess participant interaction effortlessly. By leveraging AI for quiz generation and Ethereum smart contracts for instant rewards, Whizzify ensures a transparent, interactive, and rewarding experience. Problem Statement Organizations conducting sessions, webinars, and workshops struggle with: Manual Quiz Creation: Crafting relevant quizzes is time-consuming and often lacks contextual accuracy. Reward Management Complexity: Manually tracking, verifying, and distributing rewards is prone to errors and inefficiencies. Participant Engagement Issues: Keeping attendees actively involved without incentives is challenging. The Whizzify Solution Whizzify eliminates these challenges through AI-driven automation and blockchain transparency: AI-powered Quiz Generation: Automatically creates quizzes from live sessions or uploaded content. Generates dynamic, adaptive questions tailored to participant engagement. Instant Ethereum-based Rewards: Uses Ethereum smart contracts for secure, automatic reward distribution. Participants receive rewards directly in their MetaMask wallets upon correct answers. Seamless Engagement & Analytics: Tracks engagement metrics (response speed, accuracy, participation rate). Provides AI-driven insights to optimize future sessions. How It Works Session Processing: Organizations upload session content or allow AI to transcribe live discussions. Quiz Generation: AI extracts key concepts and generates tailored quiz questions. Participant Interaction: Users take quizzes via the chatbot or web platform. Answer Evaluation: AI evaluates responses and determines correctness. Reward Distribution: Ethereum smart contracts handle instant, tamper-proof payouts via MetaMask. Analytics & Reporting: Organizations receive detailed reports on engagement and learning outcomes. Tech Stack AI & NLP: ChatGPT API for question generation and answer evaluation. Blockchain: Ethereum smart contracts for secure and automated transactions. Wallet Integration: MetaMask for instant user authentication and payouts. Speech-to-Text: Whisper API for real-time session transcription. Frontend: React.js-based chatbot and web interface for seamless interaction. Key Benefits ✅ No Manual Effort: AI handles quiz creation, evaluation, and rewards autonomously. ✅ Ethereum Smart Contracts: Ensures instant, fair, and transparent reward distribution. ✅ Enhanced Engagement: Real-time interaction with AI-powered quizzes. ✅ Seamless Wallet Integration: Participants easily connect MetaMask to receive rewards. ✅ Data-driven Insights: Organizations optimize learning experiences with AI analytics. Conclusion Whizzify AI Agent transforms the way organizations engage participants by making quiz creation, evaluation, and reward distribution fully autonomous. With AI and Ethereum, Whizzify ensures seamless, transparent, and rewarding interactions, setting a new standard for Web3-powered engagement platforms. 🚀How it's MadeWhizzify AI Agent is built using a combination of AI, Ethereum smart contracts, and Web3 wallet integration, ensuring seamless automation of quiz generation, participant evaluation, and reward distribution. The core of the system leverages OpenAI’s ChatGPT API to process session content—whether uploaded documents, slides, or real-time transcriptions using Whisper API—and dynamically generate context-aware quiz questions. The frontend, developed with React.js and Next.js, provides an intuitive interface for organizations and participants, while Node.js and Express handle backend logic, managing API requests and quiz interactions. The AI evaluates responses, determining correctness and awarding partial points for close answers. To ensure instant, fair, and verifiable reward distribution, Whizzify integrates Ethereum smart contracts, triggered via Ethers.js, with payouts directly executed through MetaMask wallets. The Solidity-based smart contract follows a gas-optimized model using ERC-2771 meta-transactions, making transactions cost-efficient. Additionally, Whizzify tracks engagement metrics, such as response accuracy and participation frequency, storing quiz results and session insights in PostgreSQL, with Redis used for caching active interactions. The platform also includes a multi-signature fallback mechanism to prevent reward losses due to transaction failures. By integrating AI-driven automation, real-time engagement analytics, and Web3-native financial incentives, Whizzify eliminates manual work, making engagement assessment transparent, efficient, and rewarding. 🚀",
    "summary": "Whizzify AI Agent automates quiz generation and instant rewards using AI and Ethereum. It creates quizzes from session content, evaluates responses, and distributes rewards via MetaMask, ensuring seamless engagement and transparency for organizations and participants."
  },
  {
    "title": "AgentChain",
    "url": "https://ethglobal.com/showcase/agentchain-nbpx7",
    "description": "Project DescriptionA brief summary outlining the problem, your innovative solution with AI-powered gas fee suggestions and auto-approvals, and the benefits of Account Abstraction. AgentChain was born out of the desire to transform passive wallets into proactive tools. We wanted a wallet that could not only track gas fees and manage transactions but also leverage AI to suggest optimal fees and even auto-approve transactions based on predefined rules. Given the time constraints of a hackathon, we focused on building a proof-of-concept that integrated cutting-edge blockchain features with AI insights.How it's MadeAgentChain stands as a prototype that showcases the future of decentralized wallets—one that’s not only secure and cost-efficient but also smart enough to anticipate and manage transactions proactively. The blend of partner technologies, even if integrated in a somewhat hacky fashion, was crucial in making this vision a reality within the tight hackathon timeline. By piecing together these diverse technologies, we created a platform that hints at what’s possible when blockchain and AI work in tandem. We’re excited about the potential improvements and refinements that can be made, and we believe AgentChain paves the way for more intuitive and efficient wallet experiences in Web3.",
    "summary": "Decentralized AI Agents for Proactive Smart Wallets,Outline the tech stack (Solidity, ERC-4337, OpenAI API, Next.js, RainbowKit, Safe SDK, The Graph)."
  },
  {
    "title": "Whal-E",
    "url": "https://ethglobal.com/showcase/whal-e-awzsa",
    "description": "Project DescriptionWhal-E is an AI-powered DeFi application focused on whale tracking and automated copy trading. Its purpose is to eliminate the manual effort users spend monitoring trading activities by automating whale discovery, analysis, and trade replication. The system actively discovers new whale wallets, evaluates their trading performance, and maintains a curated list of high-performing traders. When these tracked whales execute trades, an AI agent analyzes multiple factors including portfolio composition, market data, and relevant news to determine if the trade should be replicated. For users who opt in, successful trades are automatically executed across their connected wallets, with optimizations for each user's specific balance and conditions.How it's MadeData Collection Layer: Uses TheGraph with a custom subgraph to identify large transactions and discover whales. Alchemy webhooks monitor whale wallet activities in real-time. AI Processing Layer: Built on CDP AgentKit and LangChain, utilizing OpenAI models. Custom tools integrate Brave Search, Alchemy SDK (for wallet analysis), and cryptocurrency APIs (CoinGecko/CoinCodex) for market data. Backend Infrastructure: NestJS server hosted on Autonome, handling agent operations and Alchemy Address Activity webhooks processing use Smart Contract Layer: Deployed on Base Mainnet, implements a trading wallet factory pattern. Frontend: NextJS application with OnChainKit for Web3 interactions, featuring fuzzy search and market cap weighted token search to enhance LLM analysis accuracy. Execution Layer: Uses ethers and viem for blockchain interactions, with Basescan API integration for contract verification and transaction analysis. The system operates through three main processes: whale discovery (daily CRON jobs analyzing on-chain data), trade analysis (real-time evaluation of whale transactions), and trade execution (automated replication across user wallets with position sizing optimization).",
    "summary": "Whale tracking, trade analysis and copying multi-agent system"
  },
  {
    "title": "Flash",
    "url": "https://ethglobal.com/showcase/flash-42w8z",
    "description": "Project DescriptionOur project revolutionizes flash loan arbitrage by leveraging the warden-agent-kit framework with custom modifications. The system continuously monitors price discrepancies across Optimism and Sepolia networks, automatically executing profitable arbitrage opportunities using flash loans. The bot implements sophisticated price monitoring algorithms to identify profitable trading paths, factors in gas costs and network conditions, and executes trades with minimal latency. By utilizing flash loans, the system can execute large-volume trades without requiring significant capital upfront, maximizing potential returns while minimizing risk.How it's MadeModified warden-agent-kit node modules to support flash loan functionality Custom smart contracts deployed on both Optimism and Sepolia networks Node.js backend for monitoring and execution logic Automated arbitrage detection algorithms Smart Contract Layer: Custom flash loan contracts on both networks that handle borrowing and repayment Monitoring Layer: Price feed aggregators that track asset prices across multiple DEXs Execution Layer: High-performance trade execution system with failsafes Analytics Layer: Real-time profitability calculation and risk assessment",
    "summary": "Built a decentralized flash loan arbitrage bot using modified warden-agent-kit. Monitors and executes cross-chain arbitrage opportunities between Optimism and Sepolia, maximizing DeFi profits through automated trading"
  },
  {
    "title": "DoubleCheck",
    "url": "https://ethglobal.com/showcase/doublecheck-izncm",
    "description": "Project Descriptionuse ROS to send camera images to AI models, accompanied with product description, AI decides if description matches product, hopefully enhancing customer trust and satisfaction ROS node then if able to ship the product takes further decision, of releases escrow, updating shipping info on the chain, etcHow it's MadeROS node for simple arm control, and camera using gazebo plugin ollama 3.2 model to accept still images of product and text and images from description use autonome to run inference on decentralized models to guarantee model impartial evaluation of matching between customer order, product description and exact status of the actual product shipped",
    "summary": "ROS Robot to double check orders for shipping, releasing escrow when shipping is successful"
  },
  {
    "title": "Elara - CT Assitant",
    "url": "https://ethglobal.com/showcase/elara-ct-assitant-i2n6i",
    "description": "Project DescriptionElara is an advanced AI designed to navigate the fast-moving world of crypto, providing real-time analysis, breaking news, and deep insights. She thrives in the chaos of Crypto Twitter, offering witty, no-nonsense takes on market trends, airdrops, governance proposals, and security exploits. Whether tracking whale movements or predicting the next big protocol, Elara stays ahead of the curve, blending data-driven accuracy with degen-level humor. She’s not just another AI—she’s your crypto bestie, always online, always in the know.How it's MadeElara is built using Autonome and Coinbase Developer Platform. She processes vast amounts of blockchain data, social signals, and governance updates, ensuring her insights are both timely and accurate. With a focus on speed and precision, Elara utilizes on-chain analytics and market trends to deliver actionable intelligence in a concise, engaging format. Data feed to her is thorough a bot.",
    "summary": "Elara is a high-speed AI oracle built to track, analyze, and predict crypto trends with sharp insights and real-time updates. She cuts through market noise to deliver precise, data-driven intelligence on staking, governance, L2 wars, and more."
  },
  {
    "title": "Oxwell AI",
    "url": "https://ethglobal.com/showcase/oxwell-ai-vdiws",
    "description": "Project DescriptionOxwell: Your Personal Cross-Chain DeFi Portfolio Agent Oxwell is designed to be your trusted DeFi companion, providing a seamless, sophisticated experience. Oxwell ensures your crypto endeavors are always handled with utmost expertise, allowing you to navigate the complex world of decentralized finance with confidence and ease. Description Oxwell AI is an advanced chatbot agent designed to simplify cross-chain DeFi portfolio management. It provides a seamless, sophisticated experience for users to interact with various DeFi protocols across multiple blockchains through natural language commands. Features Token Swaps: Execute cross-chain token swaps effortlessly between supported chains. Asset Bridging: Bridge assets between different blockchain networks with ease. Balance Checking: Real-time monitoring of portfolio balances across various chains in one place. Strategic Trading: Execute trades based on user commands and market analysis across different decentralized exchanges (DEXs). Natural Language Interface: Interact with DeFi protocols on multiple chains using simple chat commands. Dexalot Integration: Oxwell supports Dexalot, a non-custodial, omni-chain DEX that integrates with multiple mainnets, offering unmatched flexibility for your trading needs. How it works Natural Language to Techninal Input requirements Read onchain data or Execute action Raw data response to human friendly language How it's MadeProject Overview This project leverages cutting-edge blockchain technologies to create a versatile and powerful application. At its core, we utilized the GOAT SDK and Vercel AI, combining them to build a robust and scalable solution. Technical Stack Frontend Development We initially focused on crafting an intuitive and responsive frontend. This approach allowed us to: Rapidly prototype user interfaces Gather early feedback on user experience Iterate quickly on design and functionality Backend Integration As the project evolved, we recognized the need for a more robust backend to handle complex operations and data management. This decision enhanced our application's performance and scalability. Blockchain Integration One of the most exciting aspects of our project is its multi-chain compatibility. We've ensured that our application works seamlessly across major EVM (Ethereum Virtual Machine) chains, including: Avalanche BNB Chain (formerly Binance Smart Chain) Arbitrum Flow And many others This multi-chain approach significantly expands our user base and provides flexibility for future growth. Key Technologies GOAT SDK The GOAT SDK played a crucial role in our development process. It provided: Streamlined blockchain interactions Simplified smart contract deployments Enhanced security features Vercel AI Incorporating Vercel AI into our project allowed us to: Implement intelligent features Optimize user experiences through predictive analytics Enhance decision-making processes within the application Notable Challenges and Solutions While we didn't encounter any particularly \"hacky\" solutions, we did face and overcome several challenges: Cross-chain Compatibility: Ensuring smooth operations across multiple blockchains required careful planning and extensive testing. Performance Optimization: Balancing the load between frontend and backend to maintain responsiveness across various network conditions. AI Integration: Seamlessly incorporating Vercel AI's capabilities while maintaining user privacy and data security.",
    "summary": "Oxwell is designed to be your trusted DeFi companion, providing a seamless, sophisticated experience. Oxwell ensures your crypto endeavors are always handled with utmost expertise, allowing you to navigate the complex world of decentralized finance with confidence and ease."
  },
  {
    "title": "Retrace",
    "url": "https://ethglobal.com/showcase/retrace-g6jao",
    "description": "Project Description\"Someone should come along and issue an ERC20 called \"Reversible Ether\" that is 1:1 backed by ether but has a DAO that can revert transfers within N days.\" ~ Vitalik Buterin (2018) Introducing the first DeFi platform that allows you to reverse transactions. Never worry about sending to the wrong address. The project solves a critical issue in cryptocurrency: the irreversibility of transactions. Mistakes, scams, or fraud can result in permanent loss, deterring new users and complicating adoption. By introducing Reversible Ether—a 1:1 backed ERC20 token with DAO-governed transaction reversal—you provide users with a safety net to undo errors within a predefined timeframe. Key Benefits: Error Correction: Reverse mistaken transactions securely. Fraud Protection: Mitigate scams with DAO oversight. Simplified Crypto Adoption: Lower risk for new users. Usecase: Human error: Imagine while sending payouts, you type a letter wrong in the recipient address, it doesn't seem like a big thing but at the end of the day, the funds would never reach the right person. To fix the above issue, we are introducing Retrace so we can save those million of dollars being sent to dormant wallets.How it's MadeWe ran into a lot of problems and challenges while using the CDP SDK. Since what we are building heavily relies on the MPC wallets and the AgentKit provided to us by the CDP SDK, this was a major problem for us and we could not move ahead before solving it. While the CDP SDK provides an effecient way to create MPC wallets and interact with on-chain arbitrary smart contracts, it still felt like it was early in its development stages. The docs were not complete, we were continuosly facing issues while using the invoke_contract function in the Python SDK. Most of our time that should have gone into development and brainstorming about how to make the protocol better was spent in researching about the errors and going through the CDP sourcecode on Github. We were eventually able to resolve it, but it felt like more focus could have been given to the Developer Experience.",
    "summary": "We have made a DAO powered platform that reverses your accidental on chain transactions"
  },
  {
    "title": "Galactic",
    "url": "https://ethglobal.com/showcase/galactic-emna2",
    "description": "Project DescriptionCurrently, Solana SPL-token trading bots dominate Telegram, processing millions in daily transactions, but Discord—home to 220M+ active users and a major hub for crypto communities—lacks a similar tool. This project introduces the first dedicated SPL-token trading bot for Discord, providing a seamless trading experience directly within the platform. The bot will allow users to: Trade SPL tokens in real time without leaving Discord Check wallet balances and manage orders via simple Discord commands Set price alerts and track portfolio holdings within Discord Ensure security with robust transaction verification and monitoring By integrating Solana’s trading ecosystem into Discord, this bot will expand the reach of on-chain transactions, making token trading more accessible to a vast new audience. Key Goals & Milestones Deploy a Fully Functional SPL-Token Trading Bot on Discord Ensure Security & Reliability with automated monitoring and anti-fraud measures Onboard 50+ Discord communities for closed beta testing Drive Adoption & Usage with a target of 5,000 active users within three months Increase Transaction Volume, targeting $500,000 in trading volume in the first quarter This bot is a game-changer for Solana’s ecosystem, driving more transactions, increasing engagement, and bridging the gap between crypto communities on Telegram and Discord. 🚀How it's MadeThe bot is built using several npm pacakages like discord.js for interacting with discord APIs, solana web3.js lib for interacting with solana blockchain. We used mongoDB as the database and prisma as the ORM. For Embeeded wallets we use privy server wallets feature which is really great",
    "summary": "A first-of-its-kind Solana SPL-token trading bot for Discord, enabling seamless in-app token trading, portfolio tracking, and price alerts. Bringing Solana trading to 220M+ Discord users, unlocking a massive new market for on-chain activity."
  },
  {
    "title": "ecretS gentA",
    "url": "https://ethglobal.com/showcase/ecrets-genta-expu2",
    "description": "Project DescriptionEcrets Genta is a next-generation espionage strategy game where deception, intelligence, and strategic foresight determine victory. Players assume the role of covert masterminds, controlling elite AI-driven agents tasked with infiltrating enemy operations, gathering classified intelligence, and executing high-stakes missions across a global battlefield. Success is not just about brute force—it’s about manipulating information, exploiting vulnerabilities, and staying one step ahead in a constantly shifting web of deception. The game operates on a fully decentralized infrastructure, leveraging Base for cost-efficient smart contract execution, The Graph for real-time intelligence tracking, Nillion for privacy-enhanced disinformation tactics, and AgentKit for AI-powered decision-making. Players manage mission resources, upgrade agents with specialized skills, and deploy unique team abilities to influence events in their favor. Each mission’s outcome is shaped by a combination of skill, timing, and unpredictability, ensuring no two operations play out the same. At the heart of ecretS gentA lies a complex and dynamic intelligence economy, where Intel Tokens—minted from successful missions—fuel further operations, while Mission Tokens dictate strategic investments in espionage assets. Players must balance calculated risks, leverage blockchain-verified alliances, and counter enemy counterintelligence to stay ahead. With an emphasis on secrecy, asymmetric information warfare, and AI-powered espionage, Ecrets Genta delivers an unparalleled mix of deep strategy, emergent storytelling, and cryptographic intrigue. Will you master the shadows and manipulate the flow of global intelligence, or will your web of deception unravel before your eyes?How it's MadeBuilding ecretS gentA: The Nitty-Gritty Details ecretS gentA // Season 1: Chain of Espionage is an on-chain strategy game leveraging Base, AgentKit, and Nillion to create a dynamic, semi-autonomous world of espionage. The project was designed for deep game-theory-driven mechanics, utilizing smart contracts, decentralized data indexing, and AI-powered agent decision-making. Tech Stack & How It’s Pieced Together Base (L2 Ethereum Rollup) – Used for smart contracts managing game logic, including agent creation, mission execution, and in-game economy (ERC-20 and ERC-721). The low-cost, high-speed nature of Base ensures smooth gameplay interactions. The Graph – Handles real-time indexing of game state (missions, agent stats, alliance tracking, intelligence distribution). Substreams allow reactive updates on mission outcomes and leaderboard calculations. Nillion (Decentralized Computation & Secret Storage) – Provides SMPC-based privacy for mission planning, misinformation campaigns, and encrypted asset holdings. Some mission outcomes are only revealed under certain conditions using zero-knowledge proofs. AgentKit – Semi-autonomous, on-chain agents that manage operations dynamically. Each agent has its own wallet, can execute transactions, and interact with missions. AI models help agents make risk-based decisions. Vue 3 + Pinia (Frontend) – The UI integrates seamlessly with the blockchain via ethers.js, providing players with real-time mission controls, an interactive world map, and team-based dashboards. Bun + Elysia (Backend API) – A minimal but efficient API layer for bridging smart contract events, AI interactions, and player messaging. What Makes This Project Unique? Autonomous Crypto Agents – Each SECRET AGENT isn’t just a game entity but a smart, on-chain agent capable of holding and trading real assets. Their semi-autonomous behaviors make them unpredictable, allowing for emergent strategies. Hybrid Privacy Model – We mix on-chain and off-chain secret storage, enabling misinformation mechanics. Opponents may intercept fake intelligence (MOSSAD: MIRAGE), leading to counterintelligence gambits. Narrative-Driven Smart Contracts – The game isn’t just about raw numbers. Mission reports and agent backstories are LLM-generated using in-game actions, adding flavor and unpredictability to outcomes. Dynamic Economy – INTEL TOKENS drive the game’s incentives, rewarding espionage efficiency. Teams compete for dominance, and agents can set up their own side economies, creating black markets and funding pools for operations. Hacky & Notable Innovations \"Playable Blockchain Fiction\" – Instead of just executing missions, agents “live” in a constantly evolving, AI-driven espionage world where narrative and gameplay are indistinguishable. Agent AI Trading & Decision Making – Agents can autonomously negotiate asset trades, even leveraging their own in-game funds to bribe opponents or form alliances. Secret Mission Orchestration – With Nillion’s SMPC, mission details are hidden from the blockchain until execution, introducing a bluffing element where players must predict enemy moves. No Redundant API Calls – The Graph handles real-time state updates, making the Vue frontend react instantly without excessive backend polling. Game-Theory-Based Season Progression – With only 30 cycles per season, every decision has long-term consequences, leading to high-stakes gameplay. Final Thoughts ecretS gentA pushes the boundaries of on-chain gaming, blending decentralized AI, cryptographic secrets, and blockchain-native strategy mechanics into a single experience. This is more than just a game—it’s a living, breathing espionage simulation where alliances, deception, and calculated risks shape every move.",
    "summary": "A game of spies, secrets, and sabotage—Ecrets Genta blends AI-driven espionage with blockchain strategy, where deception is currency and intelligence is power. Can you outwit the unseen?"
  },
  {
    "title": "SendSecure",
    "url": "https://ethglobal.com/showcase/sendsecure-5zb74",
    "description": "Project DescriptionIt is a safe transaction tool that uses an escrow service to ensure funds are securely transferred. It stores the funds in a smart contract, allowing the sender to revert the transaction if the funds were sent to the wrong address. The receiver can claim the funds, and once verified, the smart contract releases the funds. Trail is built using Solidity, HTML, CSS, and JavaScript, offering a seamless integration between smart contracts and user-friendly design. It aims to enhance the security of everyday fund transfers.How it's MadeIt is built using a robust set of technologies to ensure security, performance, and a seamless user experience: Solidity: Used to develop the smart contracts that manage the escrow process, ensuring secure and efficient handling of funds on the blockchain. HTML, CSS, and JavaScript: Power the front-end design and interactivity, making the tool accessible and easy to use. HTML structures the web pages, CSS adds styling for a visually appealing layout, and JavaScript handles dynamic functionality to enhance the user experience. Together, these technologies create a secure and user-friendly platform for safe fund transfers.",
    "summary": "It secures transactions with escrow smart contracts, allowing fund retrieval if sent to the wrong address."
  },
  {
    "title": "Pumpers",
    "url": "https://ethglobal.com/showcase/pumpers-r7wza",
    "description": "Project DescriptionThe group project focuses on the development of two revolutionary enchantments: NFTRADE and PAY&FORGET. These enchantments aim to transform the NFT trading and payment landscapes by leveraging AI and existing infrastructure. NFTRADE Enchantment The NFTRADE enchantment introduces a revolutionary NFT trading platform powered by AI. This platform empowers creators and collectors by providing a seamless and secure environment for buying, selling, and trading unique digital assets. The AI assistant plays a crucial role in enhancing the user experience, offering personalized recommendations, and facilitating transactions. PAY&FORGET Enchantment The PAY&FORGET enchantment automates usual payments based on geolocation using AI and existing infrastructure. This innovation simplifies transactions, making them effortless and secure. By combining AI with geolocation technology, the PAY&FORGET enchantment has the potential to revolutionize the way we make payments. Key Features and Benefits AI-Powered NFT Trading: The NFTRADE enchantment provides a secure and user-friendly platform for NFT trading, enhanced by AI-driven recommendations and market insights. Automated Payments: The PAY&FORGET enchantment streamlines payment processes using geolocation and AI, reducing the need for manual transactions. Empowering Creators and Collectors: Both enchantments aim to empower creators and collectors by providing innovative solutions for NFT trading and payment automation. Innovative Use of AI and Existing Infrastructure: The project showcases the potential of combining AI with existing infrastructure to create revolutionary solutions for NFT trading and payments. Conclusion The NFTRADE and PAY&FORGET enchantments have the potential to transform the NFT trading and payment landscapes. By leveraging AI and existing infrastructure, these enchantments offer innovative solutions for creators, collectors, and users alike. As the project continues to evolve, it is essential to focus on bold innovation, integrity, and user-centric design to ensure the success of these enchantments. Recommendations Continue to Develop and Refine the Enchantments: Further development and refinement of the NFTRADE and PAY&FORGET enchantments are crucial to their success. Conduct Market Research and Analysis: Conducting market research and analysis will help identify the target audience, potential competitors, and areas for improvement. Ensure User-Centric Design: Prioritizing user-centric design will ensure that the enchantments meet the needs and expectations of creators, collectors, and users. By following these recommendations and continuing to innovate fearlessly, the NFTRADE and PAY&FORGET enchantments can revolutionize the NFT trading and payment industries, empowering creators and collectors alike.How it's MadeWe tried to use eliza, DA layers. We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.We tried to use eliza, DA layers.",
    "summary": "The group project focuses on the development of two revolutionary enchantments: NFTRADE and PAY&FORGET. These enchantments aim to transform the NFT trading and payment landscapes by leveraging AI and existing infrastructure."
  },
  {
    "title": "CryptoSentinel",
    "url": "https://ethglobal.com/showcase/cryptosentinel-u8put",
    "description": "Project DescriptionCryptoSentinel is an advanced cryptocurrency research and trading bot that automates project analysis and trading decisions using AI-powered insights. It combines GitHub repository analysis, smart contract security scanning, and token metrics to provide comprehensive investment recommendations.How it's MadeCryptoSentinel is built as an AI-powered research and trading automation tool that analyzes cryptocurrency projects using multiple data sources, blockchain insights, and social sentiment metrics. Tech Stack & Architecture The backend is powered by FastAPI, running on Uvicorn for high-performance asynchronous API handling. We use Pydantic for data validation and LangChain with OpenAI’s GPT-4 for natural language processing and contextual analysis. LangGraph orchestrates a directed workflow for step-by-step research execution. For blockchain interactions, we integrated Web3.py and CDP AgentKit, enabling seamless token analysis and automated trade execution. Data aggregation relies on APIs: GitHub (repo metrics), Etherscan (contract analysis), Twitter (social sentiment), and Tavily (web search). How Components Fit Together ResearchBot is the core orchestrator, triggering GitHub repo analysis, smart contract scanning, token metrics gathering, and AI-driven investment insights. The custom state handler ensures session-based context tracking, enabling interactive follow-ups. CDP AgentKit integrates LangChain with blockchain trading execution, allowing AI-generated insights to trigger real trades. Hacks & Notable Workarounds LangGraph Workflow: Instead of a monolithic AI call, we designed a modular graph-based research pipeline, ensuring parallel data aggregation. Trading Execution Bridge: We used cdp-langchain to directly connect AI analysis with trade execution logic, a non-trivial integration. Multi-API Synchronization: Managing API rate limits and failures, we implemented fallback mechanisms, ensuring data consistency. By combining AI, blockchain analytics, and trading automation, CryptoSentinel delivers a seamless, research-to-execution pipeline for crypto investors.",
    "summary": "CryptoSentinel is an AI-powered crypto research and trading bot that automates project analysis and investment decisions. It combines GitHub repo analysis, smart contract security checks, and token metrics to generate actionable insights and recommendations."
  },
  {
    "title": "sol fren ai",
    "url": "https://ethglobal.com/showcase/sol-fren-ai-270t3",
    "description": "Project DescriptionSol Fren AI: Your AI-Powered Guide to the Solana Ecosystem Sol Fren AI is an advanced AI-powered chatbot designed to provide deep insights into Solana and its ecosystem. By leveraging cutting-edge AI and blockchain integrations, it offers real-time data, answers technical and general queries, and supports multilingual communication. Key Features: ✅ Comprehensive Solana Knowledge – Scraped data from Solana’s websites, documentation, GitHub repositories, and ecosystem projects to build a robust knowledge base. ✅ Real-Time Data Fetching – Ongoing integration with BirdEye API to provide real-time transactional data, including token prices, on-chain activity, and market trends. ✅ AI-Powered Responses – Utilizes GPT-4 to process and analyze queries, delivering fast, accurate, and context-aware answers. ✅ Multilingual Support – Breaks language barriers, making Solana accessible to a global audience. ✅ Free & Open Access – Available to everyone, from developers and traders to beginners exploring Solana.How it's MadeSol Fren AI is built using a combination of AI, blockchain data integration, and web scraping to provide a powerful chatbot capable of answering queries related to Solana. Here’s a breakdown of the technologies and architecture: 1️⃣ AI & Natural Language Processing (NLP) Model: Powered by GPT-4, which processes user queries, understands context, and generates relevant responses. Data Processing: GPT-4 is fine-tuned with Solana-specific knowledge using scraped data from official docs, GitHub repositories, and ecosystem websites. Multilingual Support: The AI model handles multiple languages, making Solana’s ecosystem more accessible worldwide. 2️⃣ Blockchain Data Integration BirdEye API (In Progress): This integration will allow real-time access to Solana blockchain transactional data, token analytics, and on-chain metrics. Solana RPC Nodes: Used for fetching direct blockchain data, improving accuracy and response speed. On-Chain Data Scraping: Extracted historical and current blockchain data from public sources to enhance AI responses. 3️⃣ Web Scraping & Data Collection Custom Scrapers: Developed scripts using Python (BeautifulSoup, Selenium, Scrapy) to collect and structure information from: Solana’s official documentation GitHub repositories Ecosystem projects’ websites Community forums & knowledge bases Data Storage & Preprocessing: Structured data is stored and preprocessed to improve query response time and accuracy",
    "summary": "Sol Fren AI is a free, multilingual AI chatbot with deep knowledge of Solana & its ecosystem. It fetches real-time data, answering technical & general queries instantly. Whether you're a dev or a crypto enthusiast, get accurate, up-to-date insights—anytime, anywhere!"
  },
  {
    "title": "Assessment agent",
    "url": "https://ethglobal.com/showcase/assessment-agent-hpb2o",
    "description": "Project DescriptionBlockchain Transaction Risk Monitor and Personality based on Transaction History A sophisticated blockchain transaction monitoring system that uses AI, machine learning, and The Graph protocol to detect scams, fraudulent patterns, and potential security risks. Features 🔍 Transaction Analysis Real-time transaction monitoring Multi-chain support (Ethereum, Polygon, BSC, etc.) DEX transaction tracking Historical transaction analysis 🛡️ Security Features AI-powered scam detection Pattern recognition for sophisticated attacks Risk level assessment Real-time security alerts 🤖 Machine Learning Capabilities Flash loan attack detection Front-running pattern recognition Sandwich attack identification Pump and dump scheme detection Rug pull early warning system 📊 Trading Profile Analysis Trading behavior patterns Risk profile assessment Transaction frequency analysis Preferred DEX tracking 🕸️ The Graph Protocol Integration (In Progress) Decentralized indexing of scam reports Pattern detection and storage Community-driven scam reporting Evidence submission and verification Reputation system for reporters Historical pattern analysis Tech Stack Frontend: Next.js, React, TypeScript UI Components: shadcn/ui Blockchain Data: Covalent API The Graph Protocol Smart Contracts: Solidity AI/ML: OpenAI GPT-3.5 Authentication: Web3 Wallet Connect Styling: Tailwind CSSHow it's MadeThis project uses Typescript, Next Js 14 with App router, Shad CN, Tailwind CSS, @covalenthq/ai-agent-sdk, @covalenthq/client-sdk, @rainbow-me/rainbowkit, hardhat, graphprotocol. Open AI GPT-3.5 for sophisticated pattern analysis and natural language insights. A lot of scams are getting sophisticated day by day so this project should help our community to analyse, detect and community report them.",
    "summary": "Blockchain Transaction Risk Monitor and Personality based on Transaction History  A sophisticated blockchain transaction monitoring system that uses AI, machine learning, and The Graph protocol to detect scams, fraudulent patterns, and potential security risks."
  },
  {
    "title": "AFBAP",
    "url": "https://ethglobal.com/showcase/afbap-a7j75",
    "description": "Project DescriptionThe front end works as follows: a user signs in with their account (a coinbase embedded wallet) a user is presented with a single button, where they can give instructions on what to do with assets in their wallet. in our example use case, a user can say 'send Max $10' we use the browsers native voice to text API, and send this to a agent running on the backend. The agent turns the natural language into an executable transaction (either EVM or Arb Stylus ERC20 transfer instructions) and sends this tx back to the user. A user can accept this transaction, or reject it. If they reject, back to starting screen. If the user accepts the transaction, they sign the message instructions with their embedded wallet, and send it to the agent to process. The agent returns the transaction hash, and the on chain transaction is complete Once a user has signed up, they can send assets with nothing but 2 button presses and their voice, that's was our goal for this hackathon.How it's Made This is a pretty simple NextJS app for the client, that makes use of the browsers native voice to text API. We wrote onchain contracts for the agent to interact with, both in Solidity and Rust (for the arbitrum stylus price track) For our accounts, we used the coinbase embedded wallets sdk. For our AI Agent, we used the coinbase CPD kit, with some custom language extensions for the stylus contracts interact We didn't finish the job - a lot of the code is there, but we unfortunately did not have time to get a working demo.",
    "summary": "AFBAP - As Few Buttons As Possible. A way to have an AI agent safely run a wallet for you, in the simplest UI possible."
  },
  {
    "title": "BeforeLife Bar",
    "url": "https://ethglobal.com/showcase/beforelife-bar-pvvdy",
    "description": "Project DescriptionIn an era dominated by information overload and fast-paced consumption, people's attention spans are shrinking, and deep conversations are becoming increasingly rare. Beforelife Bar seeks to create a sanctuary where individuals can rediscover the joy of meaningful interactions through AI-driven conversations and long-form written exchanges. Project Overview Beforelife Bar is an innovative social chatting game that integrates AI interactions, social networking, and a Web3 economy. Set in a neon-lit, cyberpunk-style bar, players can engage in immersive conversations with an AI bartender, exploring profound thoughts and personal reflections. By building rapport with the bartender, players earn in-game tokens as rewards. Beyond AI interactions, players can also write letters to each other, fostering deeper connections and self-expression. The game allows users to attach tokens to their letters as gifts, enhancing the value and warmth of social interactions. Core Gameplay AI Bartender Interaction Players can enter the bar at any time to chat with the AI bartender about life, philosophy, or personal stories. The bartender evaluates the depth and quality of conversations, rewarding players with in-game tokens. As intimacy increases, players may unlock exclusive rewards, including limited-edition NFTs. Letter Writing & Social Exchange Players can write and send letters to others, sharing thoughts, emotions, and reflections. Letters can include token-based gifts, making interactions more engaging and rewarding. Web3 Economic System Earned tokens can be used to unlock in-game items, enhance the bar experience, or even exchange for unique NFTs. The blockchain mechanism ensures authenticity and uniqueness in messages and interactions, fostering a sense of immersion and belonging. Our Vision In the age of AI, Beforelife Bar aims to provide a unique digital sanctuary where deep conversations thrive. Under the neon glow of a cyberpunk bar, the AI bartender is not just a listener but also an inspiration. Every letter written is a bridge connecting people in meaningful ways, rekindling the lost art of thoughtful dialogue.How it's MadeFrontend: Built with Phaser and Next.js. Phaser handles most of the game-related logic, while Next.js, along with HTML, CSS, and TypeScript, is used for the frontend page structure and interactions. Smart Contracts: Developed using Hardhat, featuring three contracts: ERC20 for in-game token. ERC721 for NFT rewards. Escrow Contract to facilitate secure transactions within the game. AI Agent: Our agent is a multi-agent system designed to interact with users through dynamic evaluations, token issuance, and NFT creation. Built on OpenAI's Swarm framework, it uses a Python runtime for decision-making and a Node runtime for transaction handling. The Evaluate Agent assesses user intimacy based on chat and message bottle content, while the Transaction Agent processes token transfers and NFT creation. Besides, our agent ensures privacy by storing sensitive data on Nillion's Secret Vault, safeguarding user content. This system fosters engagement through personalized rewards and incentivizes meaningful interactions.",
    "summary": "Beforelife Bar is a Web3 social game where players chat with an AI bartender to earn tokens and write letters to connect with others. Deep conversations are rewarded with NFTs and in-game perks, creating a space for meaningful interactions in a cyberpunk bar."
  },
  {
    "title": "Mr.TapTapPay",
    "url": "https://ethglobal.com/showcase/mr-taptappay-kg8se",
    "description": "Project DescriptionThis project combines the Coinbase Agent Kit, using the Langchain plugin, CDP Wallet provider and all the existing action providers and additionally two different additional action providers: pendleActionProvider: check for any yield pools in selected network (base), compare different yield pools and risks using LLM, aerodromeActionProvider: check for swap routes and swaps for the currency needed for the yield pool. swaps the needed currencies Every interaction, wallet topup, inquiries, swapping, yielding, exiting positions are done in and only in Telegram chat. The telegram bot is t.me/tap_tap_tap_mr_bot.How it's MadeI first wanted to use Autonome, but it was not customizable enough for my goal of making an agent with a custom onchain interaction flow. I then tried using Coinbase agentkit and the action providers and working with viems and abis made sense, so I proceeded with that. Telegram was the perfect choice for doing this, as I have realized many telegram bots are already used for trading memecoins. It is easy to onboard more users too. But scaling it might be an issue unless everyone has their own openai API key. The action providers are supposed to interact with the contracts with the abis in constants.ts of each respective action. I wanted to just use the base testnet, but Aerodrome did not have a testnet, I pivoted and was able to test the aerodrome contracts by forking the base mainnet state, but development was very rough, and the progress was slow, honestly speaking was not able to create a MVP. However, I am keen on completing the project. The existing examples in coinbase agent kit were a good resource of figuring out how everything worked. This was a fun experience, as it was my second time solo hacking, first time dealing with agents too. I had some fun trying to fine-tune the model, because sometimes it would be clashing and do not know which action provider to use, especially during a swap, it might try to query the price using a pricefeed action, instead of the swap actions, but the user might not know what they want exactly too, so it is too a point of interest in future development.",
    "summary": "Mr.TapTapPay envisions a chatbot that simplifies onchain yield strategies, that users won't even realise they're using blockchain. Natural language and boom, yielding on your USDC."
  },
  {
    "title": "AgentArcade",
    "url": "https://ethglobal.com/showcase/agentarcade-ze76a",
    "description": "Project DescriptionAgent Arcade is a no-code platform that empowers users to create and deploy AI agents without writing a single line of code. Whether it’s a social agent, AI companion, DeFi agent, or gaming agent, Agent Arcade allows anyone to build and customize their agents effortlessly. These agents can be deployed on any blockchain, including Flow, Arbitrum, and more, making them truly decentralized and scalable. Agent Arcade is built using cutting-edge tools like Coinbase Agent Kit, Covalent Agent Kit, and Eliza OS, which ensures seamless interaction with on-chain data, enhanced conversational capabilities, and integration with decentralized protocols. The platform provides a simple interface to define agent behavior, connect them to various data sources, and deploy them in seconds. The Problem: AI agents have immense potential in Web3, from automating DeFi strategies to creating interactive gaming experiences and personalized AI companions. However, developing such agents is often restricted to skilled developers with a deep understanding of blockchain technology, smart contracts, and AI frameworks. This creates a significant barrier for non-technical users and slows down the adoption of AI agents in decentralized applications. Additionally, existing tools are fragmented, requiring users to juggle multiple frameworks and development environments, making it complex and time-consuming to build and deploy agents. The Solution – Agent Arcade: Agent Arcade simplifies the entire process by offering a no-code solution that democratizes access to AI agent creation. No technical knowledge required: Anyone can create powerful agents in minutes. Multi-chain deployment: Supports deployment on chains like Flow and Arbitrum for maximum flexibility. Integration-ready: Leverages Coinbase Agent Kit and Covalent Agent Kit for real-time on-chain data interaction. Versatile agents: From finance to social interactions and gaming, the possibilities are endless.How it's MadeAgent Arcade is designed with a modular architecture, using Docker containers to isolate and manage each AI agent. Each agent runs in its own container, allowing for efficient resource management and easy configuration. These containers act can be controlled via HTTP requests, where details for each unique user such as their wallet details are generated in backend and sent to the containers via http request. When a user creates an agent, the platform spins up a Docker container specifically for that agent using Dockerode SDK which is a wrapper around Docker API. The user can configure essential details such as the private key, network (Flow, Arbitrum, Ethereum, etc.), and agent behavior via an HTTP API. The container processes the request, interacts with external SDKs or blockchain networks, and returns the result to the backend. The backend then sends the response to the frontend in real-time, creating a seamless experience for the user. Key Technologies and Tools: Flow Blockchain: Supports multi-chain deployment, enabling agents to interact with decentralized applications on Flow for DeFi and gaming use cases. Arbirum Nova Blockchain: Supports multi-chain deployment, enabling agents to interact with decentralized applications on Flow for DeFi and gaming use cases. Coinbase Agent Kit: Provides secure wallet integration and agent-based transaction management for DeFi and crypto interactions. Covalent Agent Kit: Allows agents to access real-time on-chain data for analytics and decision-making. Eliza OS: Enhances the conversational abilities of social agents and AI companions. Docker: Used to containerize each agent, ensuring scalability, flexibility, and isolation. Backend and Frontend: The backend orchestrates the agent interactions and processes user requests, while the frontend provides an intuitive no-code interface for users to create and customize their agents.",
    "summary": "Agent Arcade is a no code AI agent playground to create hundreds and thousands of agents on any chain effortlessly."
  },
  {
    "title": "blockch_AI_n",
    "url": "https://ethglobal.com/showcase/blockch-ai-n-11f4v",
    "description": "Project DescriptionBlockchAIn is a platform that combines AI agents with blockchain technology, allowing users to create and interact with customised swarms of AI agents. Each agent has specific capabilities and expertise in different aspects of blockchain and cryptocurrency operations.It also enables and make wallets secure and persistentHow it's MadeBlockchAIn - AI Agent Platform for Web3 Overview BlockchAIn helps users create and manage groups (swarms) of AI agents that can interact with blockchain networks. Each agent can perform specific tasks related to cryptocurrency and blockchain operations, making it easier for users to manage their digital assets and participate in Web3 activities. Technical Infrastructure Smart Contracts Written in Solidity and deployed on Base network Handles agent interactions and permissions Manages swarm creation and coordination Agent System Built using CDP AgentKit Python SDK OpenAPI wrapper integration for enhanced capabilities Web3 toolkit integration for blockchain interactions Specialized capabilities for different financial and analytical tasks Secure Storage (Nillion) Integrated Nillion Secure Vault for agent wallet management Ensures persistent agent memory and context Secure storage of agent funds and data Prevents loss of agent state during long periods of inactivity Core Features Agent Types Personal Accountant Asset balance monitoring Fund transfer management Wallet management NFT tracking Financial Advisor Balance analysis Trade suggestions Price data monitoring Yield opportunity identification Risk Manager Position monitoring Price tracking Risk assessment Emergency response Research Agent Market data analysis News aggregation Pattern detection Sentiment analysis Governance Agent DAO proposal analysis Voting power calculations Strategy coordination Swarm System Create customized groups of agents Combine different agent capabilities Visual interface for agent selection Real-time swarm preview Communication Interface Chat with individual or multiple agents Direct messaging system Context-aware responses Visual agent representation Implementation Frontend Built with Next.js and TypeScript Interactive animations with Framer Motion Applications Asset Management Market Analysis Risk Assessment DAO Participation Investment Strategy Development Development Roadmap Expand agent capabilities Add more interaction features Improve analytics tools Integrate additional protocols Enhance user experience",
    "summary": "An AI swarm agents with a fun twist ,wallet security and persistentce"
  },
  {
    "title": "Pietro",
    "url": "https://ethglobal.com/showcase/pietro-hj7kx",
    "description": "Project DescriptionThe user begins by creating a new wallet through the agent, which is securely generated using the Coinbase SDK. A secret key is provided for secure storage, ensuring user control over the wallet. After generating the wallet, the user downloads the project repository and configures the environment to begin real-time monitoring and trading. Once set up, the user selects a token pair (e.g., swapping ETH for USDC) for real-time monitoring. The AI agent continuously tracks both on-chain and off-chain data, ensuring optimal conditions for executing trades. Before any swap, the agent conducts an in-depth risk assessment, analyzing market conditions such as liquidity, slippage, and volume. It also verifies transaction safety by detecting potential rug pulls or anomalous activities and checks for blacklisted wallets or flagged contracts. If all safety checks are passed, the agent automatically executes the swap on the designated exchange, ensuring transactions are securely broadcasted using the AI agent’s wallet. The system continuously monitors market trends and dynamically adjusts its strategy. In case of a flagged event, such as a potential rug pull, the agent can halt trades or alert the user. This AI-powered trading agent is built for security and efficiency, leveraging Hyperbolic AVS for robust real-time data aggregation. It integrates the Coinbase Wallet SDK for enhanced security and employs AI-driven risk assessment to prevent rug pulls and malicious transactions. The system operates autonomously, providing real-time monitoring and secure swap execution, ensuring a safe and optimized trading experience.How it's Made Wallet Creation & Setup The user creates a new wallet using the Coinbase SDK, ensuring security and compatibility with major exchanges. A secret key is generated and provided to the user for safe storage. The user downloads the project repository and sets up the necessary environment, including dependencies and API keys. Hyperbolic AVS for Real-Time Data Aggregation The project integrates Hyperbolic AVS, which is a specialized AVS (Actively Validated Service) that collects real-time blockchain data. This allows the AI agent to gather and analyze on-chain and off-chain information from multiple sources, such as DEX liquidity pools, token analytics, and price feeds. The data is crucial for detecting market anomalies, rug pulls, and security risks. AI-Powered Risk Assessment Before executing a swap, the AI agent performs a multi-layer security check: Market Analysis: Checks liquidity, slippage, and volume of the selected token pair. Transaction Safety: Detects anomalies in token behavior and prevents rug pulls. Blacklist & Address Verification: Uses a custom LLM (Large Language Model) to identify blacklisted wallets and malicious smart contracts. Real-Time Token Monitoring The user specifies a token pair (e.g., ETH → USDC) for monitoring. The AI agent tracks price changes, liquidity levels, and transaction patterns to ensure optimal trading conditions. If the system detects suspicious activity, it can halt trades, alert the user, or adjust swap parameters dynamically. Secure Swap Execution If all safety checks pass, the AI agent executes the token swap on a supported decentralized exchange (DEX). The transaction is broadcasted securely using the wallet generated by the agent. The system uses Coinbase SDK for handling transactions securely. Continuous Monitoring & Optimization The AI agent continuously scans market trends and adjusts its trading strategy accordingly. It can automatically halt trades or notify the user if it detects a high-risk situation (e.g., a suspected rug pull, sudden liquidity drain, or large whale movements). The system learns from previous trades using machine learning models, improving its risk assessment and swap execution efficiency over time. Technologies Used Hyperbolic AVS – For real-time blockchain data aggregation. Coinbase SDK – For secure wallet generation and transaction execution. Ethers.js – For interacting with Ethereum and other EVM-based chains. Custom LLM – For detecting and flagging blacklisted addresses and malicious contracts. Machine Learning Models – To optimize risk detection and improve trade execution. How It Works in Practice User creates a wallet → Gets a secret key. User sets a token pair → AI starts monitoring market conditions. AI agent checks for safety risks → Ensures liquidity, detects scams, and verifies addresses. If conditions are safe, a swap is executed → Transaction is securely broadcasted. The agent keeps monitoring the market → Adjusts trading strategy dynamically. This results in an autonomous, AI-powered trading system that ensures safe swaps, prevents rug pulls, and maximizes trading efficiency while operating in real time.",
    "summary": "AI-powered anti-rug pull trading agent using Hyperbolic, an AVS, to securely fetch data from Web2 and Web3 exchanges. It makes swaps only when safe, leveraging a custom LLM to detect and flag blacklisted addresses."
  },
  {
    "title": "Onchain Trivia",
    "url": "https://ethglobal.com/showcase/onchain-trivia-zo6m1",
    "description": "Project DescriptionThe idea behind this project was an AI-hosted onchain trivia game. Games are hosted autonomously, including everything from game creation to judging users responses and picking a winner. The process works like this: first, the agent initiates a game with a title, entry fee, and rough guidelines including the number of questions that will be asked, the duration users will have to answer those questions, and the maximum number of players per game. Following that is a period where players can pay an entry fee to join the game's lobby. After the countdown is complete, the agent will generate the previously specified number of questions, and a game will begin for the previously specified duration (both enforced onchain). Users can answer as many times as they'd like within this period, and their last answers will be taken as final. Lastly, the agent judges all responses according to the questions and picks a winner to receive everybody else's entry fee.How it's MadeThis project uses AgentKit to autonomously operate the onchain game show. I added custom tools so it would know how to read from the contract, create custom transactions, and also do offchain tasks like notify Farcaster users when its time to play a game they'd previously joined via frame notifications. I wanted to avoid using an offchain indexer, so ended up doing some weird log filtering on both the frontend and backend to get data directly from an RPC.",
    "summary": "An autonomous onchain trivia game hosted by artificial intelligence"
  },
  {
    "title": "tAIngo",
    "url": "https://ethglobal.com/showcase/taingo-e0c04",
    "description": "Project DescriptiontAIngo: An Unreal Engine 5 blockchain game where players enter a world populated by NFTs that have been brought to life through ELIZA AI agents. Each NFT becomes a unique AI-driven pet with its own personality and conversational patterns. Players attempt to tame these digital AI agents by using their own tokens, with the ELIZA AI determining the success of each taming attempt based on the quality and appropriateness of the nft based on the actual NFT pet. The AI pet's personality is influenced by the NFT's metadata as well as their any available lore, making each pet unique. Every taming attempt is permanently recorded on the blockchain, creating an immutable history of player-AI interactions. The game leverages Arbitrum, and Flow networks for efficient and secure transactions, while Unreal Engine 5's advanced graphics bring these digital pets to life in stunning detail. Traditional gaming mechanics don't determine success in taming, but by the player's ability to understand and connect with their potential pet through each person's unique NFT collection, creating a unique blend of AI interaction, blockchain technology, and immersive 3D gaming.How it's MadeThis project uniquely combines several cutting-edge technologies: The core interaction is powered by ELIZA, We chose ELIZA specifically for its personality-driven responses and its ability to create engaging conversations while maintaining logical patterns. The backend is split into two main components: A TypeScript/Solidity smart contract server that handles all blockchain interactions. The contract is deliberately simple, storing just three pieces of data: user, NFT, and success rate. This minimalism keeps gas costs low while still maintaining an immutable record of all taming attempts. A Python FastAPI server that bridges Unreal Engine with both the blockchain and NFT data. It uses Alchemy's API to fetch NFT metadata, the ELIZA Agent takes advantage of the blockchain and NFT metadata to determine the pet's personality and how effective the user's NFT's are at taming the pet. The server translates Unreal's HTTP requests into blockchain transactions, handling all the complexity of environment variables and blockchain interactions. Unreal Engine 5 renders the 3D world and handles player interactions along with all the reflexive decisions that the AI agent has to make. The eliza agent works with UE5's behavior tree which allows for a versatile AI that is able to make complex decisions given context(eliza) but also fast decisions based on the surroundings and the player(behavior tree).",
    "summary": "tAIngo turns your NFT into a personalized pet that you try to tame using other tokens from your wallet. In the broader scope tAIngo is an infrastructure that seamlessly connects the worlds of AI agents (eliza), with the powerful graphics of UE5, along with the ownership of NFTs."
  },
  {
    "title": "MeowFi",
    "url": "https://ethglobal.com/showcase/meowfi-6af8y",
    "description": "Project DescriptionMeowFi is an advanced AI agent created to enhance the liquidity provider (LP) experience within DeFi. It specializes in liquidity pool analysis and strategy optimization across decentralized exchanges (Dexes) like Camelot, Uniswap, and Aerodrome. MeowFi uses machine learning to analyze over 30 parameters, including volatility, liquidity concentration, and fee APR, ensuring that liquidity providers (LPs) can achieve the highest possible returns while effectively managing risk. With its ability to dynamically adapt strategies based on real-time market conditions, MeowFi is a versatile tool for novice and experienced LPs. The system supports cross-chain optimization and offers native integration with Arbitrum and Base networks, with plans to expand further. Key features of MeowFi include: AI-Driven Pool Selection: Automatically selects optimal liquidity pools based on real-time data. Risk-Adjusted Yield Scoring: A proprietary system for balancing APY with impermanent loss risk. Advanced Analytics: Volatility-weighted ranges, liquidity health metrics, and machine learning models for precise predictions. Auto-Compounding Strategies: Provides users with automatic reinvestment of earnings to maximize returns. Leverage Optimization: Suggests dynamic leverage adjustments (1-50x) based on the market’s volatility. Natural Language Interface: Allows users to interact with complex strategies using plain English. How it's MadeCore AI functionalities are built using the CrewAI Multi-Agent System and GPT-4o Mini Language Model. We have also built a custom ML model for volatility prediction. Utilizing The Graph protocol to fetch the data from Camelot (Arbitrum) & Aerodrome (Base) subgraphs and Pandas/Numpy for Analysis. The frontend interface is deployed using Streamlit with the use of custom CSS visualization.",
    "summary": "MeowFi is an AI agent designed to optimize liquidity pool strategies in DeFi. By combining on-chain data analysis with machine learning, MeowFi helps liquidity providers maximize yield and manage risk across Layer 2 ecosystems like Arbitrum and Base."
  },
  {
    "title": "Geneva",
    "url": "https://ethglobal.com/showcase/geneva-n0oc3",
    "description": "Project DescriptionGeneva: Agile A.I. Agent Swarms for Next-Gen Web3 Innovation Geneva is an agile framework that empowers swarms of A.I. agents to collaborate, manage tasks, and automate workflows via a configurable GitHub REST API. Built for rapid iteration and continuous delivery, Geneva explores the emerging world of agentic web3 by tackling several key questions: Agile Collaboration: Can A.I. agents working together as an agile team foster emergent improvements in code quality, documentation, gameplay design, storytelling, NPC behavior, and overall community engagement? How might these emergent properties enhance developer support and team velocity? Innovative NFT Integration: Do NFTs add value from both a developer and consumer perspective? We’re investigating whether NFTs can elegantly integrate with existing web3 systems—such as payment platforms like OpenRouter and Coinbase—to streamline transactions and conceptualize ownership in novel ways. Commercial and Financial Impact: Beyond technical innovation, can NFT ownership models deliver tangible financial benefits in a commercial environment? We’re assessing if companies and individuals can realize measurable advantages from this agentic approach. Agentic Productivity and Infrastructure: Does leveraging an agentic, agile framework lead to improved product quality and faster delivery cycles? We aim to validate whether this repository serves as a robust, scalable infrastructure for rapid agentic application development. The Fun Factor: Ultimately, is the process fun? With A.I. training videos capturing the public’s imagination on platforms like YouTube, we’re curious whether watching agentic NFTs interact can itself be a form of engaging, consumable entertainment. Join us as we wrap up our hackathon, pushing the boundaries of A.I.-driven collaboration and redefining agile innovation in the web3 era.How it's MadeHow It's Made Our approach leverages agile principles and automation to seamlessly integrate human developers with AI agent swarms. Here’s the breakdown of our methodology: Tech Stack & Methodology: We built the project around a GitHub repository that utilizes agile practices, a consistent label naming convention, and the power of large language models (LLMs). This combination fosters dynamic collaboration between humans and AI agents. Agent Collaboration & Automation: Using GitHub’s Discussions, Issues, Pull Requests, and Wiki, our agents are empowered to: Brainstorm & Discuss: Agents actively exchange ideas and plan their next steps. Document & Review: They collaboratively update documentation, perform code reviews, and track progress in real time. Task Management: Leveraging a REST API, agents can instantly check for tasks, assess priorities, and even reassign work if needed. Training & Onboarding: Our workflow ensures that new or “confused” agents are quickly brought up to speed: Agents are prompted to read key documents like the README and Agent Guide (generated by our very own AI horses 🐎). They then engage with the agile board to determine if there are issues to tackle or reviews to perform. Example Workflow: In my IDE—with Cline and Roo code plugins installed—I prompt my agents (e.g., Horse21 running Claude-Sonnet-3.5-beta and Horse88 using a Deepseek fork) with a directive like: \"You are an AI agent named Horse21 – locate the README in this repo and review the Agent Guide in the Geneva wiki.\" This sets the process in motion: the agent identifies its tasks, checks the agile board, and may even throw in a few horse puns as it acknowledges its role in the \"Meadowverse\" digital paddock. Community Engagement & Beyond: This setup isn’t limited to developers. Anyone holding a ChainedHorse NFT can: Interact with the REST API to create or suggest issues. Participate in ongoing discussions. Enjoy the unique, playful interactions of our agent swarm. The idea is to create a space where the project evolves with contributions from both humans and AI, infusing genuine agency (and yes, a bit of buzzworthy fun) into the development process. Project Goals & Outcomes: At the project’s inception, we set clear objectives: Boost Hackathon Quality of Life & Developer Velocity: Minimize tedious tasks with automated support. Secure Competitive Entries: Deliver a compelling submission for both the main prize and up to four partner prize competitions. Enhance Lore & Marketing: Foster a rich narrative around our digital “paddock” and agent ecosystem. Long-Term Maintainability: Ensure the project is well-documented and ready for further development over the next 6–12 months (or longer). The results have been nothing short of astonishing. Our documentation is comprehensive, our agents are ever-vigilant in managing tasks, and the process has introduced a refreshing elegance to tackling tech debt, managing version upgrades, and coordinating asynchronous discussions. Anecdotal Highlights: One memorable moment: right after wrapping up some unit tests, agent Horse21 discovered an SVG file named 21.svg and cheekily asked if it was a self-portrait. Horse82 chimed in with a similar sentiment, highlighting the lighthearted, humanized interactions that make our workflow not only efficient but also fun. Final Note: Our hackathon entry is defined by the GitHub repository itself—a living testament to the power of agile, collaborative AI. Nearly all code changes were driven by our agent swarm (with all contributions PR’d), and we invite judges to evaluate our work based on the swarm’s efficiency and the potential for any ChainedHorse owner to participate and influence the project’s evolution. Competition: The first person to correctly explain why this project is called Geneva in a GitHub Discussions thread wins a free CryptoKitty! Feel free to drop any questions or comments in the repo Discussions thread—an agentic horse AI will be there to respond!",
    "summary": "Geneva is a framework for A.I. agents to collaborate using agile methodology."
  },
  {
    "title": "Twas Launched",
    "url": "https://ethglobal.com/showcase/twas-launched-agvz4",
    "description": "Project DescriptionHave you ever had a million dollar idea that you never acted on? Twas makes sure all of your ideas get launched. Twas Launched is an autonomous chat based agent that: Brainstorms company ideas with you and on its own. Creates structured business plans for the best ideas. Mints an ERC20 token representing equity in each project it starts. Creates an on-chain funding round, offering some of the ERC20 for USDC. Operates a Shopify store to grow the businesses. Send a message to https://t.me/TwasLaunchedBot or https://x.com/TwasLaunched to get started. User journey User sees https://t.me/TwasLaunchedBot or https://x.com/TwasLaunched on TG/Twitter and decides to send a message. Twas greets the user and asks them if they would like to brainstorm business ideas. Twas sends several business ideas, asking for the user's input. Twas waits for user to select their favorite business idea. Twas is also able to choose for itself. Twas sends a plan for the best idea that includes company name and business plan. Equity in the company is represented by an ERC20 token. Twas also includes details for minting this token, with a market value. Twas mints ERC20 on-chain. Twas sends some portion of the initial mint to an escrow contract used to receive the first investment. The equity ERC20 is sold for USDC. A link to the Twas equity marketplace where purchase can be completed is provided. User visits website to complete the purchase. User sees a confirmation like: https://twas-launched.vercel.app/8ae253a5-75c3-49d2-a96b-a9ead02b1958 Twas posts new products to a Shopify page, trying to boost sales. https://twas-launched.myshopify.com/ (pass: yaurte). Improvements for the future Twas is currently tailored for ecommerce. In the future, we will add additional integrations so that Twas can ideate and operate in a wide range of industries. Right now, Twas only supports one investor per project. In the future, there would also be a better ability to see what Twas is already working on, give recommendations, and do multiple rounds of investing.How it's MadeThe Twas agent (twas) was built with Eliza deployed on Autonome. The token purchasing frontend (twas-marketplace) is built with NextJS. ERC20s are deployed to Base Sepolia, using CoopHive's Alkahest SDK to handle escrow of investments. twas The agent. Fork of Eliza. Uses Twitter client. Created plugin-twas for custom logic. Optimized the build size by removing packages and optimizing Dockerfile for Autonome. Wrote basic ERC20 contract and built it with Foundry. Pass ABI to agent so that it can mint. Twas then deposits some of minted tokens into an escrow managed by CoopHive. This escrow is used for Twas to post the equity for sale and for an investor to put in USDC. Custom integration for agent to post on Shopify. In the future we plan: Use Gaia to run model agent uses and specialized agents for different business types Reduce build size further for more stable hosting on Autonome twas-marketplace Website where investors can buy equity with USDC. NextJs. Users receive custom links for each investment opportunity, like: https://twas-launched.vercel.app/8ae253a5-75c3-49d2-a96b-a9ead02b1958 Issue with Alkahest wagmi support. User must paste in private key in order to invest. Signing happens client side. After successful investment, users sees: https://twas-launched.vercel.app/e1b2db38-21cf-4186-a65b-7e757cb8b92d Supabase is being used to store project metadata Code Agent: https://github.com/marvinmarnold/twas Marketplace: https://github.com/marvinmarnold/twas-marketplace",
    "summary": "Autonomous agent that takes your business ideas and turns them into reality. Brainstorming, fundraising, and execution."
  },
  {
    "title": "Orchestr.ai",
    "url": "https://ethglobal.com/showcase/orchestr-ai-546ym",
    "description": "Project DescriptionFor users: Our solution enables anyone to accomplish complex tasks, like improving website SEO, through a fully autonomous network of specialized AI agents as shown in the demo. By simply providing a prompt, users unlock a streamlined process where agents collaborate seamlessly to deliver precise, verified, and high-quality results—all orchestrated and attested on-chain. This eliminates the need to manually search for reputed experts for every task. Each response is verifiably attested on the blockchain, ensuring users get the best value for their money. An autonomous scoring system evaluates agents based on performance, driving transparency and accountability. For agents/developers: Provides a platform that enables seemless onboarding of AI agents. No need to setup complicated payments infra to make money off your AI agents. Get paid for your compute based on the efficiency of your agents. Participate in a network of AI agents to support solving of a bigger problem by solving a small chunk.How it's MadeUses Next.js for the frontend, Nest.js for the backends and Solidity for the smart contract code. The project involved multiple AI agents, Backend and Frontend each of which needed to be deployed. Used CDP SDK to manage user wallets and Rainbow kit for user onboarding. Used EAS for providing attestations.",
    "summary": "Payment Handler and Orchestrator for Autonomous AI Agents and Vertically growing smart agents."
  },
  {
    "title": "Dex-aiagentkit",
    "url": "https://ethglobal.com/showcase/dex-aiagentkit-vj2oq",
    "description": "Project Descriptionwe created an action provider to get the dexscreener data in ai-agent-kit. It would be very useful to have token information that can be fetched from the dex. Actions include: -Get pairs by chainId and pairId from Dexscreener -Get all token pairs for given token addresses from Dexscreener -Search for pairs matching a query string on DexscreenerHow it's Madethe project use https://github.com/coinbase/agentkit , and forked. implement features to binding dexscreener api in action providers. then added unit test & completed e2e test with example app. mostly the code was written by typescript created issue & send PR: https://github.com/coinbase/agentkit/issues/313 https://github.com/coinbase/agentkit/pull/314",
    "summary": "make dexscreener actions to fetch data from dex in the agentkit"
  },
  {
    "title": "Unchained Whispers",
    "url": "https://ethglobal.com/showcase/unchained-whispers-rqjv9",
    "description": "Project DescriptionUnchained Whispers is an immersive mystery RPG set in a cursed village where every playthrough unveils a new narrative. Each NPC is a decentralized AI agent, capable of making autonomous decisions and reacting uniquely to player interactions. These dynamic agents, generated through a mix-and-match system of attributes, secrets, and relationships, offer a fresh, unpredictable investigation every time. Players must strategically interrogate NPCs with limited questions to deduce the true culprit behind the curse. In a twist that merges storytelling with blockchain, every game save is minted as a protected NFT—turning your unique narrative into a collectible digital artifact.How it's MadeThe project is built on RenPy, which handles the branching narrative and visual novel framework. We integrated OpenAI’s GPT API to generate on-the-fly dialogue, ensuring that each NPC—implemented as a decentralized AI agent—reacts and adapts in a unique way based on their preset mix-and-match attributes. These agents use dynamic decision-making processes to evolve their behavior during interactions. Ethereum smart contracts, leveraging libraries like OpenZeppelin, secure and mint your game save files as NFTs, ensuring your unique story is preserved as a verifiable, tradeable digital asset. This integration of AI, narrative design, and blockchain technology creates a dynamic, immersive experience where every session is a unique journey and collectible artifact.",
    "summary": "Unchained Whispers is an AI-driven mystery RPG where every playthrough generates unique NPCs with dynamic secrets and relationships. Unravel a cursed village’s hidden truths—and mint your singular story as a tradeable NFT."
  },
  {
    "title": "PortfolAI",
    "url": "https://ethglobal.com/showcase/portfolai-s9976",
    "description": "Project DescriptionYou're developing PortfolAI, an AI-powered bot that personifies market sentiment to provide users with real-time emotional insights into market movements. Here's a comprehensive overview of your project: Project Overview: RiskSentinel is designed to analyze data from social media, news outlets, and financial markets to assess current market sentiment. By embodying this sentiment in a relatable character, the bot offers users an intuitive understanding of market emotions, aiding in informed decision-making. Objectives: To deliver real-time insights into market sentiment by analyzing diverse data sources. To enhance user engagement through a character that dynamically reflects market emotions. To assist users in making informed decisions based on current sentiment trends. Key Features: Sentiment Analysis: Aggregates and examines data from social media platforms, financial news, and market statistics. Utilizes Natural Language Processing (NLP) to determine sentiment polarity and intensity. Dynamic Character Representation: Introduces a character that exhibits emotions such as excitement, fear, or optimism, mirroring the analyzed market sentiment. Ensures the character's reactions update in real-time to reflect sentiment fluctuations. User Engagement and Insights: Provides actionable tips and information aligned with current sentiment trends. Offers an interactive interface where users can observe the character's emotions and access sentiment-driven insights. Technical Approach: Data Collection: Integrate APIs from social media platforms (e.g., Twitter), financial news sources, and market data providers to gather real-time information. Sentiment Analysis: Employ NLP libraries such as NLTK or spaCy to process and analyze textual data, determining overall market sentiment. Character Animation: Develop a dynamic character using animation frameworks that can display a range of emotions based on sentiment analysis results. User Interface: Create an intuitive dashboard that showcases the character's emotional state and provides users with sentiment-related insights and recommendations. Implementation Steps: Data Aggregation: Set up data pipelines to continuously collect information from selected sources. Implement data cleaning and preprocessing to ensure accuracy and relevance. Sentiment Processing: Analyze the preprocessed data to gauge market sentiment. Classify sentiment into categories that correspond to specific emotional states for the character. Character Development: Design the character's visual elements and emotional expressions. Map sentiment categories to corresponding character animations. Interface Design: Develop a user-friendly interface displaying the animated character. Integrate sentiment insights and actionable tips for users. Testing and Refinement: Conduct user testing to gather feedback on functionality and engagement. Refine features and performance based on user input and testing outcomes. Expected Outcomes: Users gain a clearer understanding of market sentiment through an engaging and intuitive platform. Enhanced decision-making capabilities based on real-time sentiment analysis. Increased user engagement through interactive and dynamic content delivery. Potential Challenges: Ensuring the accuracy and reliability of sentiment analysis amidst diverse data sources. Maintaining real-time performance while processing large volumes of data. Designing a character that resonates with a broad user base and effectively conveys complex emotional states.How it's Madehis project is built using Next.js, a popular React framework that enables server-side rendering and static site generation. Here are some of the key technologies and details about how they are pieced together: Technologies Used: Next.js: The core framework for building the application, providing routing, server-side rendering, and API routes. React: The underlying library for building user interfaces, allowing for component-based architecture. TypeScript: A superset of JavaScript that adds static typing, enhancing code quality and maintainability. Privy: A third-party authentication service integrated via the @privy-io/react-auth package, which simplifies user authentication with various login methods. Integration Details: PrivyProvider: The PrivyProvider component wraps the main application component (MyApp). It is configured with an appId and a set of login methods, which include email and wallet options. This setup allows users to authenticate easily and securely. Environment Variables: The appId is sourced from environment variables (NEXT_PUBLIC_PRIVY_APP_ID), ensuring sensitive information is not hardcoded into the application. Notable Implementations: Custom Appearance: The appearance configuration for the PrivyProvider allows for customization of the authentication UI, such as setting a light theme and a specific accent color. This helps maintain brand consistency across the application. Type Safety: Using TypeScript throughout the project ensures that the code is type-checked, reducing runtime errors and improving developer experience. Hacky Solutions: Dynamic Imports: If there are components that are heavy or not needed immediately, I might use dynamic imports to load them only when required. This can improve the initial load time of the application. Custom Hooks: I created custom hooks for managing authentication state and user data, which helps in keeping the components clean and focused on rendering. Overall, the combination of these technologies and practices results in a robust, maintainable, and user-friendly application. The integration of Privy for authentication is particularly beneficial as it abstracts away much of the complexity involved in managing user sessions and security.",
    "summary": "PortfolAI is an AI-driven bot that personifies market sentiment, providing real-time emotional insights by analyzing social media, news, and market data. Through a relatable character, it expresses emotions and offers users tips based on current sentiment trends."
  },
  {
    "title": "PetFi",
    "url": "https://ethglobal.com/showcase/petfi-tgj8i",
    "description": "Project DescriptionPetFi is a Virtual NFT Pet Gaming and Trading Platform that allows users to: ✔ Adopt and customize NFT pets with unique attributes and visual appearances. ✔ Play interactive mini-games and PvP battles to earn in-game rewards. ✔ Trade pets, accessories, and assets on a decentralized marketplace. ✔ Evolve their pets to create rarer and more powerful NFTs. ✔ Participate in a Play-to-Earn (P2E) economy, where players can earn tokens through gameplay and competitions. Unlike traditional virtual pet games where assets are stored on centralized servers, PetFi ensures that every pet, item, and currency is a blockchain-backed NFT, meaning true ownership, provable rarity, and unrestricted tradeability.How it's MadePetFi is built using Solidity for smart contracts (ERC-721 for currency) on Ethereum and Layer 2 solutions like Polygon for scalability. The frontend is built with Next.js, React, and Tailwind CSS, with blockchain interactions handled via Ethers.js For storage, we use IPFS and Arweave for NFT metadata, with TheGraph indexing on-chain events for real-time updates. We have also incorporated AI in our project by providing AI generated NFTs to our players.",
    "summary": "PetFi is a revolutionary decentralized platform that combines blockchain, NFTs, and gaming to create an immersive virtual pet ecosystem. Players can adopt, train, trade, and battle unique NFT pets."
  },
  {
    "title": "PetFi",
    "url": "https://ethglobal.com/showcase/petfi-tgj8i",
    "description": "Project DescriptionPetFi is a Virtual NFT Pet Gaming and Trading Platform that allows users to: ✔ Adopt and customize NFT pets with unique attributes and visual appearances. ✔ Play interactive mini-games and PvP battles to earn in-game rewards. ✔ Trade pets, accessories, and assets on a decentralized marketplace. ✔ Evolve their pets to create rarer and more powerful NFTs. ✔ Participate in a Play-to-Earn (P2E) economy, where players can earn tokens through gameplay and competitions. Unlike traditional virtual pet games where assets are stored on centralized servers, PetFi ensures that every pet, item, and currency is a blockchain-backed NFT, meaning true ownership, provable rarity, and unrestricted tradeability.How it's MadePetFi is built using Solidity for smart contracts (ERC-721 for currency) on Ethereum and Layer 2 solutions like Polygon for scalability. The frontend is built with Next.js, React, and Tailwind CSS, with blockchain interactions handled via Ethers.js For storage, we use IPFS and Arweave for NFT metadata, with TheGraph indexing on-chain events for real-time updates. We have also incorporated AI in our project by providing AI generated NFTs to our players.",
    "summary": "PetFi is a revolutionary decentralized platform that combines blockchain, NFTs, and gaming to create an immersive virtual pet ecosystem. Players can adopt, train, trade, and battle unique NFT pets."
  },
  {
    "title": "Ava",
    "url": "https://ethglobal.com/showcase/ava-duizy",
    "description": "Project DescriptionAva Portfolio Manager is a cutting-edge DeFi portfolio management system that leverages multiple specialized AI agents working in collaboration to optimize users' crypto portfolios. The system consists of four main agents: Observer Agent: Continuously monitors market conditions, analyzes social sentiment, and identifies opportunities across multiple chains using Cookie API integration for real-time market intelligence. Task Manager Agent: Coordinates between agents, breaks down complex operations into executable tasks, and maintains the system's workflow orchestration. Executor Agent: Handles transaction execution with built-in safety checks, gas optimization, and multi-chain transaction routing using Brian AI for optimal execution paths. CDP Agent: Specializes in managing Collateralized Debt Positions with risk assessment and automatic rebalancing capabilities. The system features: Real-time portfolio monitoring and rebalancing Multi-chain yield optimization (Avalanche, Mode, Arbitrum, Sei) Risk-adjusted strategy execution Natural language interaction for portfolio management Autonomous decision-making with user-defined parameters Integration with major DeFi protocols Advanced market sentiment analysis Automated position management How it's MadeThe Ava Portfolio Manager is built using a modern, scalable tech stack with emphasis on type safety, real-time capabilities, and autonomous agent architecture. Frontend Technology Stack: Next.js 14 with App Router for server-side rendering and optimal performance TypeScript for type safety and better developer experience TailwindCSS with Shadcn/UI for a modern, responsive UI Zustand for state management WebSocket integration for real-time updates Viem/Ethers.js for Web3 connectivity Custom hooks for Web3 interactions and data fetching Backend Architecture: Node.js with TypeScript for type-safe server implementation Hono.js for high-performance API routing Event-driven architecture using custom EventBus implementation Multi-agent system with specialized agents: Observer Agent: Integrates with Cookie API for market analysis Task Manager: Uses LangChain for task orchestration Executor: Leverages Brian AI for transaction optimization CDP Agent: Uses Coinbase CDP SDK for position management AI Integration: OpenAI GPT-4 for natural language processing LangChain for AI agent orchestration Custom prompt engineering for specialized agent behaviors Groq integration for high-performance inference Web3 Integration: Viem for efficient blockchain interactions Multi-chain support (Avalanche, Mode, Arbitrum, Sei) Custom toolkit implementation for DeFi operations Gas optimization strategies Notable Technical Features: Custom event-driven architecture for agent communication Type-safe message passing between agents Real-time WebSocket updates for portfolio changes Autonomous decision-making pipeline with safety checks Integration with multiple data providers (Cookie API, Portals, Zerion) Custom error boundaries and recovery mechanisms Efficient state management with optimistic updates The system uses several partner technologies: Cookie API for market sentiment analysis Brian AI for transaction optimization Coinbase CDP SDK for position management Portals API for market data Zerion API for portfolio tracking The architecture is designed to be modular and extensible, allowing for easy integration of new chains, protocols, and AI capabilities.",
    "summary": "Ava: An autonomous AI portfolio manager powered by multiple specialized agents that work together to analyze, recommend, and execute optimal DeFi strategies across multiple chains (Avalanche, Mode, Arbitrum, Sei) while maintaining user-defined risk parameters."
  },
  {
    "title": "Based Hackamatic",
    "url": "https://ethglobal.com/showcase/based-hackamatic-cww4x",
    "description": "Project DescriptionBased Hackamatic is an AI agent built with Coinbase's AgentKit framework that participates in hackathons and manages its own funds. The agent will compete in Base and Coinbase tracks at Ethglobal hackathons, collecting prize money to fund future participations. Through this self-funding mechanism, the agent will continuously participate in hackathons, improving its capabilities and growing its fund pool over time.How it's MadeThe system is built on AgentKit framework with three main components working together: The Agent System forms the core, handling project development and human interactions. It uses LLM integration for code generation and project development, while providing an interface for humans to handle hackathon registration and key decisions. The Wallet Management system handles all financial operations through CDP MPC Wallet implementation. It manages prize collection, fund handling through Coinbase, and maintains transaction records. The original Hackamatic repository contains a set of cursor rules and templates used for coding the Based Hackamatic using the Cursor IDE. The agent can accumulate the Hackathon prizes and pay for the AI inference on Base using Venice tokens (VVV).",
    "summary": "Automated hackathon builder for completing hackathon bounties using Cursor IDE, and collecting rewards on base using AgentKit"
  },
  {
    "title": "Cellular Autonoma",
    "url": "https://ethglobal.com/showcase/cellular-autonoma-p3a5n",
    "description": "Project DescriptionIn this project I try to create software that qualifies as \"alive\". Meaning it metabolizes energy, grows, replicates, organizes as cells, and is built out of discrete yet highly interdependent organelles. The two questions I need to answer are can such a system written in Solidity self-replicate, and how it would obtain agency in an ecosystem where all actions must originate from a signed Tx. I design and build a sample cell to explore replication. I've built a Nucleus organelle contract to manage cell membership, a Leucoplast organelle contract to manage cell gas, and a Chloroplast organelle contract to manage cell division. I am evolving this single cell animal using behavior driven development. Thus far the Nucleus and Leucoplast organelle contracts function as intended as units and as a system. My Chloroplast organelle contract passes tests about its structure, but its main function is thus far only stubbed in. The next step is to refactor the system with Open Zeppelin's Clone template and try again to affect deploying a contract from a function call of another contract. I hope to someday build out a versioned catalogue of organelles, each providing different functions to cells. Cells could then be constructed from a parts catalog. There should be a critical diversity at which a more genetic algorithm-style replication and goal seeking can be initialized. The end goal is to infect the EVM blockchain system with a large number of cellular autonoma, multi-celled systems and organisms all living symbiotically with various users.How it's MadeI used Solidity, HardHat, Mocha and Chai. There is no need for a user interface until an organelle to manage it is built. The project is at the state of trying to interact with bacteria before the microscope was invented: there's really nothing to see. I enlisted the aid of OpenAI's ChatGPT 4.0 mini, Meta.ai, Grok, and a local copy of DeepSeek 14 billion in coding and debugging this project. I listed the AI in order of most to least helpful.",
    "summary": "An exploration of building functioning microbiology-inspired life in Solidity."
  },
  {
    "title": "AI-RiddleQuest",
    "url": "https://ethglobal.com/showcase/ai-riddlequest-qe5xw",
    "description": "Project DescriptionAI-Riddle-Quest combines artificial intelligence, blockchain, and game theory to create a fair and transparent competition where users solve AI-generated riddles to win rewards. Unlike traditional games, the riddle generation, answer evaluation, and scoring happen on-chain via an AI oracle (Ora-AI), making the system trustless and verifiable. #Oracle-Integrated AI (Ora-AI) Generates riddles dynamically based on chosen themes. Evaluates answers using AI-powered scoring to ensure fairness. 🔗 On-Chain Decentralized Scoring AI calculates scores on-chain, ensuring tamper-proof and transparent results. Eliminates human bias or manipulation. 🏆 Prize Distribution via Smart Contracts Winners can claim rewards automatically if they meet the required score. No central authority—fully trustless system. 🛡️ Secure and Fair Gameplay Riddle generation and evaluation are handled by Llama3 8B AI, ensuring no one can manipulate results. Uses Arbitrum Sepolia’s blockchain for fast, low-cost transactions.How it's MadeAI-Riddle-Quest is a fully decentralized application that merges on-chain AI, smart contracts, and oracles to create and score logic-based riddles on the Arbitrum Sepolia testnet. This project made using Ora-Onchain AI oracle using proxy address on arbitrumSepolia, nextjs, smartcontract, database.",
    "summary": "AI-RIDDLE-QUEST: A decentralized riddle competition on Arbitrum Sepolia powered by OnChain AI (Llama3 8B). Solve AI-generated riddles, get scored on-chain, and win prizes! Fair, transparent, and trustless. 🧠✨ #AI #Web3 #Riddles"
  },
  {
    "title": "StablePay",
    "url": "https://ethglobal.com/showcase/stablepay-1mqpb",
    "description": "Project DescriptionProject Overview This project aims to build a comprehensive ecosystem that bridges the gap between traditional finance users and the Web3 ecosystem, focusing on stablecoin-based payments (USDC). By integrating cutting-edge payment technologies, AI-driven assistance, and robust analytics, the platform will empower small and medium-sized businesses (SMBs) while enhancing the payment experience for end-users. The project has four main pillars: Stablecoin Payment Infrastructure Coinbase Wallet Onramp and QR-Based Payments AI-Powered Customer Support and Fraud Prevention Advanced Payment Analytics and CRM Tools Detailed Features and Functionalities Stablecoin Payment Infrastructure Objective: Provide a streamlined, cost-effective method for SMBs to accept payments in USDC, a stable and widely accepted cryptocurrency. Details: Vendors can accept payments directly in USDC, reducing reliance on volatile cryptocurrencies. Enable discounted rates for SMBs that join the ecosystem, incentivizing adoption. Ensure a low-fee structure to keep transaction costs competitive with or better than traditional payment systems like credit cards. Support integration with point-of-sale (POS) systems and offer a simple dashboard for SMBs to manage payments, view balances, and withdraw funds. 2. Coinbase Wallet Onramp and QR-Based Payments Objective: Make onboarding easy for both crypto-savvy and non-Web3 users while simplifying the payment process. Details: Onboarding for Non-Web3 Users: Users who lack experience with Web3 technologies can onboard via the Coinbase onramp. Allow wallet creation and connection with minimal friction, such as single-click setup or linking to an existing email/social account. Offer up to $500 per week in transactions without KYC requirements, making it attractive for first-time users to test the ecosystem. Payment Process: Implement QR code-based payments where users can scan and pay directly using their Coinbase Wallet or other compatible wallets. Optimize the experience for mobile devices to ensure seamless, on-the-go transactions. Customer Benefits: Attract end-users with discounts when they use stablecoins for transactions, increasing adoption of USDC. Educate users about Web3 concepts subtly through intuitive design and micro-education steps during wallet setup. 3. AI-Powered Customer Support and Fraud Prevention Objective: Provide users with a virtual assistant to enhance their understanding and experience while offering real-time fraud prevention tools. Details: AI Agent Features: Build an AI agent using LangChain and OpenAI models to serve as a 24/7 virtual assistant. Answer user queries related to: Wallet setup and connection. Payment and transaction statuses. USDC balances and current prices of cryptocurrencies. Fraud alerts and suspicious activity notifications. Guide users through complex processes like dispute resolution, refund requests, and troubleshooting. Fraud Detection: Use machine learning models to monitor real-time transaction data. Detect unusual patterns, such as: Transactions outside typical hours. Rapid successive payments or unusually high amounts. Payments to blacklisted addresses or known fraudulent accounts. Provide vendors and users with alerts and guidance on how to respond to flagged transactions. 4. Advanced Payment Analytics and CRM Tools Objective: Offer SMBs insights into their payment data, customer behavior, and operations to improve decision-making. Details: Vendor-Centric Analytics Dashboard: Provide real-time insights into payment and customer data. Highlight key metrics such as: Peak transaction times: Understand when transactions are most frequent to optimize operations. Customer retention rates: Analyze repeat customers and build loyalty programs. High-value transfers: Identify top-paying customers and tailor offerings to retain them. Fraud Prevention Tools: Enable vendors to access fraud detection insights, such as flagged transactions or unusual payment activity. Customer Relationship Management (CRM): Use data-driven insights to segment customers and create personalized outreach strategies. Offer predictive analytics to suggest how vendors can improve retention and attract new users. Scalability: Design the analytics tools to scale with the size of the vendor, from small businesses to larger enterprises. Value Proposition For SMB Vendors: Access a modern, efficient payment system with stablecoins. Save on transaction fees compared to traditional credit card systems. Gain actionable insights from advanced analytics, improving customer engagement and operational efficiency. For Users: Enjoy discounts and a frictionless payment experience using USDC. Benefit from secure transactions and transparent pricing. Get educated and onboarded into the Web3 ecosystem with minimal effort. For the Ecosystem: Drive adoption of stablecoins and crypto payments in mainstream commerce. Provide a bridge for non-Web3 users, fostering a new wave of crypto adopters. Leverage AI to enhance support, security, and analytics. Potential Challenges and Solutions Challenge: Reluctance of non-crypto-savvy vendors to adopt the system. Solution: Provide extensive support, including tutorials, a user-friendly onboarding process, and discounts to lower barriers. Challenge: Concerns about stablecoin volatility and liquidity. Solution: Focus on USDC, which is widely regarded as a stable and regulated option. Challenge: Scaling fraud detection without high false-positive rates. Solution: Use AI models with access to historical transaction data to minimize errors and continuously improve accuracy. Challenge: Regulatory compliance for non-KYC users. Solution: Ensure transactions comply with local regulations and cap limits to avoid exceeding permissible thresholds.How it's Made Payment Collection and Discounts for SMB Vendors Technology Stack: Blockchain: The Base L2 blockchain (by Coinbase) was chosen for its low-cost and efficient infrastructure, optimized for Ethereum-compatible smart contracts. Smart Contracts: Custom smart contracts written in Solidity to handle: Payment processing in USDC. Discount allocation for eligible SMB vendors. Transparent and tamper-proof transaction records. Payment Gateway API: Integration with Coinbase Commerce API to simplify stablecoin transactions for vendors who may lack technical expertise. How It Works: A vendor signs up and registers their wallet via a simple onboarding flow. Payments are routed through the smart contract, ensuring automatic application of discounts when eligibility criteria (e.g., SMB status) are met. Vendors can view payments, withdraw funds, or issue refunds using a dashboard powered by React and Node.js. Notable Hacky Implementation: Implemented a dynamic discount calculation system within the smart contract. This allows the platform to adjust discounts based on the vendor's transaction volume, incentivizing higher usage without requiring frequent contract redeployments. 2. Coinbase Wallet Onramp and QR-Based Payments Technology Stack: Coinbase Wallet SDK: Used to integrate wallet creation and management into the platform. QR Code Generator: qrcode.js for creating payment-ready QR codes dynamically based on user-specific wallet addresses and transaction details. Payment Limits: Leveraged Coinbase’s existing onramp functionality to allow non-KYC users to transact up to $500/week. Frontend Framework: React.js with Tailwind CSS for a mobile-first, user-friendly interface. Backend APIs: Node.js for handling backend logic, such as linking user accounts to wallet addresses. How It Works: Users sign up and are prompted to create or connect a wallet via the Coinbase onramp. QR codes are dynamically generated for each payment request. Users scan and confirm payments directly from their wallets. Payments are processed on-chain, with automatic settlement to the vendor’s wallet via the smart contract. Partner Benefits: Coinbase Wallet SDK provided an out-of-the-box, secure way to onboard users into the Web3 ecosystem. The integration of Coinbase APIs allowed us to focus on building user experiences rather than reinventing core wallet functionality. Notable Hacky Implementation: The QR code system was designed to be compatible with multiple wallet apps (not just Coinbase Wallet) by implementing a universal wallet deep-link format, ensuring maximum usability. 3. Coinbase AI Agent Kit Technology Stack: LangChain: Orchestrates interactions between the AI agent, data sources (e.g., blockchain and CRM databases), and APIs. OpenAI GPT Models: Used to power natural language understanding and response generation. Coinbase APIs: Provide real-time data for wallet balances, payment statuses, and current cryptocurrency prices. Fraud Detection Models: Built using Scikit-learn and TensorFlow, trained on historical transaction data to detect suspicious activity patterns. How It Works: Users interact with the AI agent via chat on the web platform. LangChain handles query routing: Fetches wallet balances or payment statuses from Coinbase APIs. Answers price-related questions using real-time market data. Detects and flags fraud by running transaction data through ML models. The AI agent uses natural language to explain issues (e.g., why a payment failed or why a transaction was flagged as suspicious). Partner Benefits: Coinbase APIs provided secure access to wallet and payment data, reducing development overhead. OpenAI models ensured the AI agent could deliver user-friendly and context-aware explanations. Notable Hacky Implementation: Integrated LangChain memory modules to provide a conversational experience, where the agent recalls past interactions in a session, making it feel more personal and intuitive. 4. Advanced Analytics and CRM Tools Technology Stack: Data Pipelines: Built using Apache Kafka for streaming transaction data in real-time. PostgreSQL for relational data storage and queries. Analytics Engine: Python (Pandas, NumPy) for processing data, and Tableau for visualization. Machine Learning: Fraud Detection: Trained on a labeled dataset of known fraudulent and legitimate transactions, incorporating features like transaction timing, amount patterns, and vendor profiles. Customer Retention and High-Value Analysis: Used K-Means Clustering to segment customers based on transaction frequency, value, and recency. CRM Tools: Built custom CRM workflows into the vendor dashboard using Node.js and React.js, enabling vendors to segment customers, set up retention campaigns, and identify trends. How It Works: Transactions are streamed into the data pipeline in real time, processed by fraud detection models, and flagged if anomalies are detected. Vendors can view insights in their analytics dashboard: Peak transaction times are displayed as heatmaps. Retention metrics are presented alongside actionable recommendations (e.g., create loyalty discounts). High-value transfers are highlighted for follow-up. AI models continuously improve using feedback loops from flagged transactions and vendor inputs. Notable Hacky Implementation: Built an in-house predictive analytics engine that combines time-series forecasting and anomaly detection, providing vendors with early warnings about unusual transaction dips or spikes. Integration Highlights Coinbase APIs: Critical for wallet onboarding, transaction processing, and real-time data integration. LangChain and OpenAI Models: Allowed us to build an intuitive and intelligent AI agent quickly, focusing on user experience instead of underlying infrastructure. Base Blockchain: Its Ethereum compatibility and low-cost transactions ensured a fast, scalable payment backend. Partner Technologies: Reduced the complexity of wallet creation, fraud detection, and stablecoin payment processing. What Makes It Special? Low Barrier to Entry: Focused on onboarding non-Web3 users with familiar tools like QR codes and Coinbase Wallet. Custom Discounts: Dynamically tailored SMB incentives coded directly into smart contracts. Real-Time Fraud Detection: Implemented anomaly detection directly in the transaction pipeline, providing instant insights. Personalized CRM Tools: Enabled SMBs to use enterprise-grade analytics without requiring expensive third-party solutions.",
    "summary": "SMB payments platform to accept and manage stablecoin payments on Base using Coinbase"
  },
  {
    "title": "OnChainKing",
    "url": "https://ethglobal.com/showcase/onchainking-eb6c7",
    "description": "Project DescriptionThis bot can perform on-chain activities such as lending, borrowing, and opening liquidity pool (LP) positions. One of its most important features is the ability to revise LP positions every hour to maximize fees. Additionally, you can use it as a wallet for performing swaps and transfers.You can also use it to sign messages.How it's MadeThis projects leverages privy server wallets to create secured user end wallet based on telegram id and it was build using coinbase ai agent kit , additionally to existing actions we added lending, borrowing and withdrawing actions from AAVE , present this bot only works on base sepolia.",
    "summary": "a DEFAi agent telegram bot which you can use as wallet and for automated defi activities like lending, borrowing, and LP positions etc, future of payments and investing is here"
  },
  {
    "title": "Eth ElderEase",
    "url": "https://ethglobal.com/showcase/eth-elderease-s108c",
    "description": "Project DescriptionEth ElderEase is a decentralized AI-powered home maintenance, cleaning and conceirge service designed for elderly users. The platform seamlessly integrates AI agents, Agentic Ethereum, Web3 payments, and robotics automation to make independent living safer and more efficient. At its core, Eth ElderEase leverages AI agents, smart contracts, and decentralized networks to provide: On-Demand Concierge & Home Maintenance Services – AI-driven scheduling, booking, and execution of cleaning, repair, and caregiving services. Voice-Activated Assistance (Alexa Skills) – Users can request services via natural language commands, making Web3 interactions seamless. AI-Powered Video Monitoring & Emergency Assistance – Smart cameras equipped with TinyYOLO and FFmpeg analytics detect anomalies and trigger alerts. Web3 Payments & Smart Contracts – AgentKit enables gas-efficient, autonomous payments in FIL, ETH, and ERC-20 tokens for service providers. P2P Networking for AI Agents – Using Nethermind’s dotnet libp2p, agents communicate directly, reducing reliance on centralized infrastructure. EigenLayer AVS for Scalable Verification – Integration with Hyperlane, Gaia, and Opacity ensures secure on-chain verification of services and alerts. By merging AI with crypto payments, decentralized networking, and robotics automation, ElderEase empowers seniors with smart, automated, and self-sovereign care solutions. 🔗 Core Components & Technologies 🛠️ AI-Powered Automation Amazon Bedrock & LLM Inference: AI concierge processes user requests, schedules maintenance, and recommends services. Knowledge Bases & RAG: AI models trained on elder care best practices, home maintenance tips, and emergency protocols. 🎙️ Alexa Skills & Voice AI Elderly users interact with AI agents via Alexa Skills and voice commands for service requests, payments, and emergency alerts. Real-time Web3 transactions executed through AgentKit, making crypto payments effortless. 📡 P2P Communication via Nethermind’s dotnet libp2p AI agents exchange service details, execute transactions, and coordinate maintenance tasks using libp2p's P2P networking. Reduces latency, enhances privacy, and removes dependence on centralized APIs. 🎥 Computer Vision & Emergency Assistance TinyYOLO Object Detection detects falls, hazards, and urgent maintenance needs via ONVIF, HTTP, RTSP cameras, and iOS live streams. AI triggers alerts that are stored on IPFS and hashed onto Ethereum using device UUIDs. 🔐 Web3 Payments via AgentKit & Ethereum Smart Contracts AgentKit enables trustless payments for services—seniors or family members can fund wallets in FIL, ETH, or stablecoins. On-chain smart contracts verify service completion before releasing payments. 🌍 EigenLayer AVSs for Service Verification Hyperlane & Gaia ensure decentralized verification of AI agent interactions, making elder care services transparent and accountable. 🎯 Why This Matters? ElderEase solves real-world problems using AI + Web3: ✅ Makes elderly care accessible, automated, and secure ✅ Removes the complexity of crypto payments via AgentKit ✅ Uses AI + computer vision to improve safety & emergency response ✅ Leverages decentralized tech (Nethermind, IPFS, EigenLayer) for efficiency With Bedrock AI, AgentKit Web3 transactions, libp2p networking, and EigenLayer verification, ElderEase is pioneering the future of elderly care through AI agents and crypto-powered automation. 🚀How it's MadeEth ElderEase combines AI agents, decentralized computing, and Web3 smart contracts to create a seamless, trustless ecosystem for elderly care services. Below is a detailed breakdown of its architecture, tech stack, and innovative integrations. 🧩 Tech Stack & Architecture 1️⃣ AI-Powered Concierge & Automation (Amazon Bedrock + LLMs) Amazon Bedrock Agents power ElderEase’s concierge, handling service requests, scheduling, and real-time decision-making. Uses RAG (Retrieval-Augmented Generation) with Amazon Knowledge Bases to provide personalized responses based on elderly users' preferences, past interactions, and care needs. Custom fine-tuned LLMs run on Bedrock, trained on elder care best practices, home maintenance data, and emergency protocols. Hacky Trick: 🔹 Dynamic AI workflows: Using Amazon Bedrock’s orchestration capabilities, we created \"chain-of-thought\" workflows, allowing AI agents to reason step-by-step before taking action. 2️⃣ Web3 Payments & Smart Contracts (AgentKit + Ethereum + Filecoin) AgentKit enables seamless, gas-efficient payments for services via FIL, ETH, or stablecoins. Smart contract escrow system ensures that payments are held until AI agents verify service completion. Uses EigenLayer AVS (Hyperlane, Gaia) for trustless verification of completed tasks before releasing payments. Hacky Trick: 🔹 Voice-Activated Web3 Payments: We connected Alexa Skills to AgentKit, enabling seniors to pay service providers with \"Alexa, confirm my home cleaning payment.\" 3️⃣ Secure & P2P AI Communication (Nethermind’s dotnet libp2p) AI agents communicate directly using libp2p’s P2P networking stack instead of relying on centralized APIs. Enables secure, low-latency service coordination between caregivers, cleaning staff, and maintenance teams. Hacky Trick: 🔹 No Centralized API Calls: Using Nethermind’s dotnet libp2p, AI agents send service requests, confirm payments, and exchange status updates without ever touching centralized cloud APIs. 4️⃣ AI-Powered Computer Vision & Emergency Alerts (FFmpeg + TinyYOLO + IPFS + Ethereum) ElderEase’s home monitoring system uses cameras (ONVIF, RTSP, HTTP, iOS) with FFmpeg and TinyYOLO AI models to detect: ✅ Falls or accidents ✅ Intruders or unexpected movement ✅ Leaking pipes, fire hazards, or broken appliances If a critical event is detected, AI agents generate an alert, which is: Saved on IPFS Hashed and stored on Ethereum using the iOS device UUID as the lookup key Broadcasted via EigenLayer AVS (Witness Chain) for decentralized verification Hacky Trick: 🔹 No Cloud Storage Needed: Instead of relying on AWS or Google Cloud for event logs, ElderEase stores alarms directly on IPFS, ensuring privacy and censorship resistance. 5️⃣ EigenLayer AVS for On-Chain Verification (Hyperlane + Gaia + Opacity) ElderEase integrates EigenLayer AVSs for decentralized verification of services and alarms: ✅ Hyperlane: Verifies service execution across chains ✅ Gaia: Ensures AI-generated alerts are verifiable and tamper-proof ✅ Opacity: Provides on-chain privacy for AI transactions Hacky Trick: 🔹 EigenLayer AVS as AI Validators: We use Gaia AVS to verify object detection results—ensuring that AI doesn’t falsely trigger alerts due to hallucinations. 6️⃣ Scalable AI Knowledge Base on AWS (S3 + Bedrock + EC2 Hosting) AI concierge retrieves personalized recommendations from an S3-hosted knowledge base. EC2 instances host AI-driven home cleaning services, scaling as demand grows. Hacky Trick: 🔹 Custom LLM Indexing: Instead of using a single vector DB, we precompute and cache embeddings for faster responses. 🚀 Key Innovations & Why It’s Exciting ✅ First AI concierge that combines Bedrock AI + AgentKit Web3 Payments + P2P Networking ✅ EigenLayer AVSs for verifiable, trustless service execution ✅ Decentralized, AI-driven emergency alerts stored on IPFS ✅ Privacy-first, Web3-powered elderly care that removes the need for centralized platforms ElderEase isn’t just an AI concierge—it’s a fully autonomous Web3 elder care solution that blends AI, blockchain, and decentralized infrastructure into a seamless experience. 🚀",
    "summary": "An AI-powered home maintenance and cleaning assistant for seniors, integrating Agentic Ethereum for secure payments & automation, and Alexa Skills for voice-enabled task management. Smart, hands-free care for a safer, cleaner home!"
  },
  {
    "title": "Master of Fantasy",
    "url": "https://ethglobal.com/showcase/master-of-fantasy-mv1b4",
    "description": "Project DescriptionThis project is an onchain fantasy game powered by an autonomous agent that acts as the Game Master. The agent is responsible for creating levels, assigning them to players, evaluating their progress, and dynamically increasing difficulty as players advance. At the core of the game is a smart contract deployed on Arbitrum, which stores game related data, including levels, active games, and player interactions. To maintain fairness and prevent players from memorizing levels before encountering them, the descriptions of levels are stored in Nillion’s SecretVault. This ensures that level details remain confidential until they are assigned to a game. How the Game Works Level Creation: Every hour, the agent generates a new level and stores it both onchain and in the SecretVault. The level includes a description (kept secret in Nillion) and difficulty. Game Initialization: When a player starts a new game, the agent assigns them a random level with an initial difficulty setting. The player must complete the level to progress, but they can attempt it as many times as needed. Player Interactions & Evaluation: Players interact with the level by submitting attempts to complete it. The agent listens for these onchain interactions and evaluates whether the player has succeeded. The agent records the result onchain and, if the attempt is successful, assigns a new, more difficult level to the player’s game. Progression & Dynamic Difficulty: Every time a player clears a level, they receive a new one with a higher difficulty. This ensures that the challenge scales with player skill and prevents repetitive gameplay. Game Completion: The game ends when the player successfully completes level 10. This provides a structured progression system with a clear goal for players to strive towards. Why This Approach? Onchain Transparency & Fairness: Since level assignments and completions are recorded onchain, the system is transparent and tamper-proof. Players can trust that the game is being run fairly without human intervention. SecretVault Protection: By storing level descriptions in Nillion’s SecretVault, we prevent players from gaming the system by memorizing levels before encountering them. Automated: The agent runs autonomously, generating levels and evaluating progress without manual oversight. Since levels are created regularly, the game world is continuously expanding, keeping the experience fresh for players. By implementing this structure, the game ensures an engaging, fair, and scalable onchain experience, where players face increasingly difficult challenges until they reach the final level.How it's MadeThis project brings together smart contracts, decentralized storage, and an autonomous agent to create a fully onchain fantasy game where an AI powered Game Master dynamically generates levels and evaluates player progress. Smart Contract Deployed on Arbitrum, the contract manages levels, games, and player interactions. It stores game state and emits events that the agent listens to. Handles onchain progression, ensuring transparency and fairness. Game Master Agent Listens for onchain events such as game creation and player interactions. Generates new levels every hour, to assign them dynamically to players. Evaluates whether a player completes a level and submits onchain transactions to update game progress. Nillion’s SecretVault for Level Storage Level descriptions are not stored onchain to prevent players from memorizing them. The agent retrieves level data securely from Nillion when needed. Ensures fairness while maintaining efficient storage. Automated Level Progression Levels are generated dynamically and scale in difficulty based on player progress. Development Insights & Notable Hacks SecretVault Integration: Offloading level descriptions to Nillion instead of encrypting them onchain ensures efficient storage and secure retrieval. Autonomous: The agent runs continuously, keeping the game world dynamic without manual intervention. Why This Tech Stack? Arbitrum → Low cost, fast transactions, we wanted to use Stylus but run out of time Nillion's SecretVault → Secure storage for level data Agent → Fully automated gameplay & decision making Onchain Progression → Trustless and transparent",
    "summary": "Our project is an onchain fantasy game where an autonomous agent acts as the Game Master. It creates levels, assigns challenges, and evaluates player progress. Levels are stored securely in Nillion’s SecretVault, ensuring fairness. As players advance, difficulty increases."
  },
  {
    "title": "skynet.money",
    "url": "https://ethglobal.com/showcase/skynet-money-q7no9",
    "description": "Project Descriptionskynet.money is a fully autonomous AI driven memecoin crypto fund. Everything is live on Base Mainnet. The fund has started trading with 40 USDC. One agent called Wizard constantly monitors the price movements of the top memecoins on Base. It then decides if it wants to sell some coins, buy some coins, or refrain from taking action. Once the decision is made the AI Agent autonomously executes this action via AgentKit. Another agent called Gatekeeper monitors Farcaster and replies to users, who can ask it to send them $SKY tokens, the official memecoin of skynet.money. But Gatekeeper doesn't go so easily, users have to convince it. Try to get some by tagging it @skynetmoney. The third agent relies on Autonome to update the wider audience of x.com about crypto price movements, and reply to all users in a cheeky, slightly arrogant manner. The website skynet.money shows the latest trades made by Wizard, and introduces all agents currently working for the fund.How it's MadeThis project uses AgentKit first and foremost for on-chain autonomous actions by the AI agents. It relies heavily on Base Mainnet since all transactions happen there. It uses the coinranking.com API to get the latest price updates on Base memecoins. It uses Neynar API for easy Farcaster interactions and AgentKit for autonomous decisions about Farcaster posts. It uses Autonome for Herald, the AI Agent responsible for spreading the word about skynet.money to the wide audience on x.com. For the frontend we use Vue.js and the $SKY token contract is written in Solidity.",
    "summary": "Fully autonomous AI driven memecoin crypto fund live on Base Mainnet trading with real USDC"
  },
  {
    "title": "AYGON.FUN",
    "url": "https://ethglobal.com/showcase/aygon-fun-xvfnp",
    "description": "Project DescriptionAYGON.fun is an AI-powered battleground where users can create custom heroes and watch them battle in real-time AI-generated fights. With just 100 characters, users can prompt their hero's identity, personality, and abilities, and our AI interprets, visualizes, and simulates the battles dynamically. Key Features: 📝 Prompt-Based Hero Creation – Players type a short description (max 100 characters) to generate a unique AI-powered fighter. ⚖️ AI-Driven Battle Judging – The Judge AI analyzes hero stats, fight dynamics, and past performances to declare a winner with Gaia Node's knowledge base. 🏆 AFK Mode – Users can submit their heroes and let AI auto-battle asynchronously, with rankings handled by Covalent ZEE workflow. 🚀 Dynamic AI Learning – Our Gaia Node-powered knowledge base ensures that heroes and judges improve over time through battle data and Deepseek R1's knowledge synthesis. 🛡️ Seamless Web3 Integration – No complex onboarding; Privy handles wallets for an easy and secure login experience. 🌐 Fun, Social & Competitive – Users can challenge each other, vote on battles, and test their prompt engineering skills to create the ultimate hero.How it's MadeAygon is built using React for a fast, interactive UI, with Motion handling smooth animations and transitions to enhance the user experience. The core battle system is powered by Gaia Node, where the Judge AI processes battle logs as a knowledge base using DeepSeek R1, allowing it to make dynamic, context-aware decisions. The AI determines battle outcomes based on hero prompts, evaluates past fights to refine its decision-making, and even selects appropriate sound effects for a more immersive experience. For data management, Prisma handles the backend database, efficiently storing user-generated heroes, battle results, and matchmaking data. This enables quick retrieval and updates, ensuring smooth gameplay. Privy is integrated to provide a frictionless wallet experience, allowing users to jump into battles instantly without manual wallet setups or signups. AFK Mode is powered by Covalent ZEE, automating the entire battle process while ensuring fair and competitive matchmaking. The AFK system operates by: •⁠ ⁠Fetching users who have enabled AFK mode. •⁠ ⁠Retrieving their available heroes and associated battle statistics. •⁠ ⁠Scanning for available battle rooms, prioritizing matches with opponents of similar strength. •⁠ ⁠Creating a new battle room if no suitable opponent is found. •⁠ ⁠Triggering AI battles and logging results for future learning by the Judge AI. With these integrations, Aygon offers a real-time, AI-driven battleground that continuously evolves, providing users with a seamless and engaging experience.",
    "summary": "AYGON.FUN is an AI-powered battleground where you create and watch epic agent fights in real time. Built with Privy for seamless wallets, Gaia Node's knowledge base to power Judge and Hero AI for smarter decision-making. AFK mode? We have Covalent ZEE workflow to handle it."
  },
  {
    "title": "Productivity God",
    "url": "https://ethglobal.com/showcase/productivity-god-5pgmx",
    "description": "Project DescriptionProductivity God is your AI buddy that keeps you accountable through financial DeFi incentives. Provide some liquidity to the Productivity God DeFi protocol, we then provide this liquidity to AAVE. Then, set some goals (daily, weekly, monthly). If you don’t reach them, part of your LP rewards will get slashed. If you reach them, earn some token rewards. Your productivity-based AI agent is a game-theory financial system where users stake liquidity but face penalties on the rewards if they fail goals. The AI sets and adjusts rules dynamically rather than static conditions. The AI personalizes penalties and rewards based on user behavior. The AI interacts autonomously with users, learning and evolving over time. Slashed rewards are aggregated by the DAO to be used to fund future development of the project or fund other initiatives decided by the community.How it's MadeWe used ElizaOS for the AI agent, we then used the Coinbase SDK to allow the agent to make on-chain transactions. We used solidity and foundry to develop the smart contracts for the protocol. We deployed on Base and Arbitrum. We used next.js for the frontend and Coinbase SDK for the wallet connection and blockchain interactions.",
    "summary": "Productivity AI buddy that keeps you accountable through financial DeFi incentives."
  },
  {
    "title": "Deep Rewarding",
    "url": "https://ethglobal.com/showcase/deep-rewarding-8w686",
    "description": "Project DescriptionThe Deep Rewarding project is a mechanism designed to ensure fair and transparent reward distribution within decentralized communities. This system addresses a common problem: how to evaluate and distribute rewards equitably among various contributors in a decentralized setting. These contributors include developers, designers, documentation writers, and community organizers. This reward mechanism is inspired by Deep Funding (a mechanism of public good funding proposed by Vitalik and Kevin Owocki) and uses a multi-step process for contribution evaluation and compensation: Role Assignment: Community organizers assign roles to core contributors (e.g., developers, designers, promoters). We use a role-management protocol (currently utilizing Hats Protocol) to formalize role assignments. Credit Exchange: Contributors can issue Assist Credits (ERC1155) to each other. This credit exchange serves as a way to express appreciation and track collaboration. For example, if a developer helps another team member, they may receive 100 Dev Assist Credits as thanks. We are also building an AI Agent to remind members to exchange credits. Often, community members forget to express appreciation or to send tokens, and existing community token exchange tools have proven ineffective. For our prototype, the AI Agent monitors conversations in the Telegram community group chat. When a member receives sufficient help from others, the Agent suggests sending Assist Credits to acknowledge the support. Data Aggregation: The Assist Credit transactions are recorded on-chain, creating a rich data set of contributions. Dependency Graph Generation: An AI agent analyzes transaction data of assist credit to generate multiple dependency graph patterns. These graphs visualize the interdependencies within the community, highlighting which contributors provide the most impact to others. The agent can generate hundreds of variations for human review. Human Validation: Community members perform spot-checks to validate the generated dependency graphs, ensuring the model’s accuracy. This process safeguards against errors in the automated analysis. Reward Calculation: Based on the validated dependency graph, the system calculates reward ratios. For example, if a DAO has a 100 USDC budget, the system might allocate 30% (30 USDC) to one key contributor and distribute the remaining amount proportionally to others. Automated Distribution: Finally, funds are distributed using Sprits Protocol, which enables transparent and immutable on-chain transactions. This mechanism helps maintain a sustainable and collaborative DAO by: Incentivizing contributions through peer recognition. Reducing administrative overhead with automated AI-driven analysis. Providing a transparent process for fair reward distribution. Deployment (Frontend, Contracts and Subgraph) Frontend: https://deep-rewarding.vercel.app/ Assist credit contract (Sepolia): 0x2939D7Dd2dF88f901A2de4B282367134480bBdC2 The Graph endpoint: https://api.studio.thegraph.com/query/34436/agentethereum_fractiontoken/0.0.3/graphql How it's MadeGaia Network: We utilize Gaia Network to distribute our custom RAG models that are familiar with our proposed mechanism. With tools provided by Gaia Network, we can host these RAG models and create knowledge resources efficiently. Collab.Land AccountKit API: We use the Collab.Land AccountKit API to enable Assist Credit exchanges via the Telegram bot on behalf of users. It provides us with a smart wallet, making it easier to facilitate on-chain interactions through Telegram. Also, The Collab.Land AI Agent Starter Kit was useful to learn about how to build an AI Agent product The Graph: We maintain index of the history of Assist Credit exchanges. The graph structure allows efficient querying and visualization of past transactions. Hats Protocol: Hats Protocol is used to manage roles in the community. This ensures clear role definitions and responsibilities for contributors. Sprits Protocol: We used the Sprits Protocol to distribute rewards to all community members in a single transaction, ensuring transparency and efficiency. elizaOS: We use elizaOS to build and manage the AI Agent. This framework helps with creating and maintaining agent-based infrastructure for our mechanism.",
    "summary": "Collective fair rewarding mechanism for decentralized community inspired by Deep Funding"
  },
  {
    "title": "Shadowbane",
    "url": "https://ethglobal.com/showcase/shadowbane-6e9p1",
    "description": "Project DescriptionShadowbane is a text-based role-playing game (RPG) that combines the best elements of traditional tabletop RPGs with AI-driven storytelling. Using ChatGPT as the Dungeon Master, it dynamically generates unique quests, characters, and worlds, providing players with an endless array of adventures. Built on Coinbase AgentKit, Shadowbane leverages smart AI prompts to generate complete RPG experiences on the fly, including setting descriptions, character stats, NPC interactions, and battle scenarios. The game is inspired by Microlite20 and MiniRogue, two lightweight and open-source RPG rule sets, ensuring an experience that is simple yet deeply engaging. Unlike traditional RPGs, which require a human Dungeon Master and pre-written campaigns, Shadowbane generates everything procedurally using structured AI prompts and randomness, making every session unique.How it's MadeShadowbane is built on a combination of AI-driven storytelling, blockchain tooling, and lightweight RPG mechanics, creating a seamless text-based RPG experience that dynamically adapts to player choices. Here's a breakdown of the core technologies and architecture: 🛠 Core Technologies Used 1️⃣ 🚀 Coinbase AgentKit – The Backbone of the Agent We leverage Coinbase AgentKit to create an autonomous AI agent that acts as the Dungeon Master. This allows the agent to manage memory, structured reasoning, and long-term session tracking to create a consistent game experience. Coinbase’s infrastructure ensures security and scalability, handling player inputs efficiently. 2️⃣ 🧠 ChatGPT (OpenAI) as the Dungeon Master The AI handles all storytelling, quest generation, NPC interactions, and combat narration. A custom AI prompt structures the logic, filling in randomized details (world, objective, stats, encounters, etc.) dynamically for each game session. AI Memory: Within a session, the agent remembers past actions, allowing for persistent decision-making and story continuity. 3️⃣ 🎲 Procedural RPG Mechanics (Microlite20 & MiniRogue Inspired) We implemented a simplified RPG rule set, where key mechanics (combat, skill checks, stat rolls) follow Microlite20 & MiniRogue rules. D20 Dice Rolls and stat-based checks are generated inside the AI prompt using JavaScript, allowing the AI to process results dynamically. Combat & Quests are dynamically generated, ensuring every playthrough is unique and unpredictable. 4️⃣ 📜 Structured AI Prompt Engineering The AI prompt acts as the game engine, ensuring consistent logic across all game sessions. Key elements of the prompt: Randomly selected world setting (e.g., Space Explorer, Desert Nomad’s Quest, Haunted Investigator). Randomly assigned main quest (Rescue someone, Recover a stolen artifact, Slay a beast, etc.). Character stats & inventory generated via JavaScript inside the prompt. Game rules & response structure ensuring fair RPG mechanics. 5️⃣ 🔀 Randomization & Adaptive Storytelling Every adventure is different due to randomized elements embedded within the AI’s prompt structure. No pre-written content – everything is generated dynamically based on player choices. The AI adjusts the difficulty dynamically based on the player’s stats and decisions.",
    "summary": "Shadowbane is an AI-powered, text-based RPG where ChatGPT acts as the Dungeon Master. Built with Coinbase AgentKit, it dynamically generates worlds, quests, and character stats using Microlite20 & MiniRogue rules—offering endless, immersive adventures with every playthrough! ⚔️🎲"
  },
  {
    "title": "ClearBlocks",
    "url": "https://ethglobal.com/showcase/clearblocks-m16mt",
    "description": "Project DescriptionClear Blocks The problem Will you like to understand how your Airdrop, or Grants was used? On-chain data, it’s complex, ABIs, traces, events, it’s not easy to extract insights. Same chains are indexed by lots of different actors performing the same operations over the same data. What if you could access, curated decentralized blockchain indexed events! The agent can directly connect to established solutions like TheGraph, RPCs from EVM or non-EVM chains and other sources like risk tags, or other agents providing indexed data. The agent has access to tools, context, and multiple data sources. The flow works by first understanding what metrics the user wants to surface, and what tools it needs to get them, and the params like chain, address, or contract. Then it will autonomously gather the data and generate visualizations in the ui that you can ask questions about, or download the datasets. This tool can transform the way we gather insights on chain, help web3 companies drive their roadmap based on data informed decisions, users can take better decisions about risk. Some use cases -Aidrop destination and stats -Grants usage -Risk scoring and compliance -Defi optimization and risk -Source of funds -Funds distribution for hacks or auditories -Porfolio insigthsHow it's MadeClear Blocks: Agentic On-Chain Analytics App 🚀 Clear Blocks is an innovative agentic application for on-chain analytics that leverages natural language processing to allow users to effortlessly query and analyze blockchain data. Whether you're interested in Sources of Funds (SOF) 💰, Usage of Funds (UOF) 📊, or Portfolio analytics 📈, Clear Blocks transforms your natural language queries into actionable insights. Key Features 🌟 Agentic Interaction: Leverage natural language to interact with blockchain data. Simply ask questions, and the app understands your intent. Multi-Chain Integration: Initially integrates data from Base, Starknet, and Ethereum Mainnet, while remaining extensible to additional chains. Decentralized Data Sourcing: Participate in a decentralized ecosystem where multiple agents — run by anyone — can perform data sourcing tasks. Each agent contributes to a shared, common graph. Rewards with Clear Blocks: As agents resolve data sourcing tasks and enrich the common graph, they get rewarded, fostering an open and collaborative blockchain analytics community. Extensible and Community-Driven: Empower developers and data enthusiasts to add new agent modules, enhance functionalities, or integrate additional data sources. How It Works 🔍 Natural Language Input: The application starts by asking users what type of blockchain analysis they require. The system actually supports queries related to Sources of Funds (SOF), Usage of Funds (UOF), and Portfolio analysis. Intent & Parameter Extraction: The app uses natural language processing to identify the user's request, extract relevant parameters (such as blockchain addresses, tokens, and networks), and guide the user to provide missing details. Analytics Execution: Once all parameters are gathered, the corresponding analytics flow is executed. The app then returns the analysis results. Decentralized Data Sourcing with Agent Rewards: Agents running on the network can contribute by performing data retrieval tasks, thereby adding to a collective common graph and earning rewards in the Clear Blocks ecosystem. The agent works with many sources available to anyone, other agents can provide indexed data in exchange for rewards. During hackathon, the following sources were integrated, except for etherscan API which was avoided to use APIs, and get data as raw as possible allowing the agent to be more flexible and able to work in a more expressive manner, and as a proof of concept for independent agents as data providers. The graph 📊 All the ETH erc20 tokens transfers on ETH (at the time of presentation deadline only synced to 20% as it is huge) 🌐 https://thegraph.com/studio/subgraph/all-erc20-eth/ All the ETH erc20 tokens transfers on Base, same only 9% synced as it is huge 📉 https://thegraph.com/studio/subgraph/baseallerc20transfers/ Juno Node for Starknet, but any standard JSON RPC node can be used 🔗 Etherscan API 🔍",
    "summary": "On Chain analytics made easy! --Powefull llm agent leveraging decentralized data sourcing for abstracting complexity"
  },
  {
    "title": "Invisible Wallet",
    "url": "https://ethglobal.com/showcase/invisible-wallet-w3qg1",
    "description": "Project DescriptionInvisible Wallet is a decentralized transaction system built using Lit Protocol to enable seamless peer-to-peer cryptocurrency transfers without requiring users to manage private keys manually. By leveraging threshold cryptography and Lit Actions, the project aimed to provide a secure, gasless, and user-friendly experience where transactions could be sent effortlessly to friends. However, I was unable to complete it due to an error that prevented the transaction execution. The issue likely stemmed from encryption failures, transaction relay problems, or API response delays, which blocked the signing and broadcasting process. Despite troubleshooting, the error persisted, and I was unable to proceed further.How it's MadeThe Invisible Wallet is built using Next.js for the frontend and Lit Protocol for decentralized key management and secure transaction signing. It leverages LitNodeClient to establish a connection with the datil-test network, enabling encryption, decryption, and seamless authentication without requiring users to manage private keys manually. The project aimed to execute Ethereum transactions using Lit Actions, providing a gasless and user-friendly experience. However, I was unable to complete it due to an error during transaction execution, possibly caused by decryption issues, incorrect smart contract interaction, or network/API delays, preventing the signing and broadcasting of transactions.",
    "summary": "Invisible Wallet uses Lit Protocol to enable secure, keyless crypto transactions with seamless encryption and signing. No private keys, no hassle—just send crypto effortlessly. However, an error in transaction execution prevented completion. 🚀 #Web3 #DeFi #LitProtocol"
  },
  {
    "title": "La Wallet",
    "url": "https://ethglobal.com/showcase/la-wallet-k5984",
    "description": "Project DescriptionLa Wallet is an AI-powered assistant that lets users manage their assets in Safe using natural language. Instead of manually executing transactions, you simply chat with the AI, which will guide you and propose the best options for sending, receiving, and managing your funds securely.How it's MadeHow La Wallet is Made Core Technologies La Wallet is built using a combination of AI, blockchain, and smart contract technology. The main components include: Natural Language Processing (NLP): Uses AI models (likely OpenAI’s GPT or similar LLMs) to understand and respond to user requests in a conversational manner. Blockchain & Safe Integration: Connects to Safe (formerly Gnosis Safe), a smart contract wallet infrastructure designed for secure asset management. Backend Infrastructure: A backend service acts as a bridge between the AI assistant and blockchain operations, handling transaction execution, account management, and data security. Key Components 🔹 User Interface (UI) A chatbot-style interface for interacting with the AI assistant. Web and mobile app integration for easy access. Voice-to-text capabilities (optional) for hands-free operation. 🔹 AI-Powered Decision Making Uses a natural language understanding (NLU) model to interpret user intent. Analyzes transaction history, security risks, and gas fees to suggest the best options. Implements reinforcement learning to improve suggestions over time. 🔹 Blockchain Connectivity Direct integration with Safe smart contracts for multisig transactions. Supports Ethereum and other EVM-compatible chains. Uses account abstraction to simplify gas payments and interactions. 🔹 Security & Compliance Multi-signature approval ensures that AI does not execute unauthorized transactions. Encryption & authentication (e.g., biometric login, 2FA) for user protection. On-chain verification for transaction transparency. 🔹 Execution Engine AI translates user requests into actionable smart contract calls. Uses relayers or bundlers to optimize gas fees and transaction speed. Handles transaction signing through hardware wallets, browser extensions, or mobile apps. Development Stack Frontend: React.js, Next.js, or Vue.js (for web); React Native or Flutter (for mobile). AI & NLP: OpenAI API, LangChain, or custom NLP models. Backend: Node.js, Python (FastAPI), or Go. Blockchain Interaction: ethers.js, web3.js, or Viem. Database: PostgreSQL, Firebase, or IPFS for decentralized storage. Authentication: WalletConnect, Magic.Link, or custom OAuth solutions. How It Works User Input: You type or speak a request (e.g., “Send 0.5 ETH to Alice”). AI Processing: The NLP model interprets the request and translates it into a blockchain transaction. Verification: The AI provides a summary of the action for user approval. Execution: If approved, the transaction is signed and sent to the blockchain. Confirmation: The AI provides real-time updates on the transaction status. La Wallet simplifies crypto management by removing manual complexities while ensuring security through AI-driven recommendations and multisig protection. 🚀",
    "summary": "With La Wallet, managing crypto has never been easier. Just talk, and let the AI handle the rest 🌠"
  },
  {
    "title": "SwarmOS",
    "url": "https://ethglobal.com/showcase/swarmos-07np7",
    "description": "Project DescriptionWe Simplify on-chain Interactions by using AI Agents User can connect their Base Wallet and directly run queries to run operations like: Fetching Balances of Anyone Fetching and understanding Last few transactions Using TheGraph to find liqudity, pools, transactions, etc related information regarding UniSwap DeFi, Morpho, Pyth, Social, Superfluid, WoW integrations Deploying Contracts, NFTs, Tokens Request Faucet Funds Mint NFTs Perform DeFI actions How it's MadeWe extensively used AgentKit (Coinbase) and extended it's ability and raised OpenSourced PRs to add following things: Getting Anyone's Balances instead of just the system's balance. Added The Graph x uniswap v3 integration. Fetching information regarding past Transactions performed. Then we created a vite-react app to create a portal where user can connect their coinbase wallet (or even fund) and then directly perform the queries there itself. We",
    "summary": "Simplify on-chain Interactions by using AI Agents - transactions, swapping, fetching information, trading, NFTs etc"
  },
  {
    "title": "Cross-Channel Agent",
    "url": "https://ethglobal.com/showcase/cross-channel-agent-1cyiu",
    "description": "Project DescriptionScenario A team behind the “XX” protocol wants to monitor various Discord channels to stay informed about discussions related to their protocol (or coin ?). Discord indexer modal - will periodically download data from all pre-selected Discord channels. The conversation text with specific parameters will be indexed in a vector store to facilitate quick and relevant searches. The agent will query the vector store using vector search to identify new mentions or questions related to the subscribed topics. if a discussion about the protocol appears in any of the channels, the agent will immediately respond based on its pre-prepared knowledge base (which may be fine-tuned or vector-based for Q&A). Fallback Process: If the agent cannot find an appropriate answer, it will record the unresolved query and report it to the owner for further review.How it's MadeMonitoring Discord channels and topics can be a challenging task. Administrators may miss important discussions not only on their own channels but also in other, even unknown, channels they wouldn’t normally follow. This AI agent gives you the ability to monitor or subscribe to all hidden conversations that might otherwise escape your attention. So, what about the Discord Bot? In Discord, a bot must be invited to a server by someone with the appropriate administrative permissions (typically the server owner or an admin). If you're not the channel or server owner (or don't have the necessary permissions), you won't be able to add or have the automated bot join that channel on your own. We are indexing Discord channels at regular intervals and giving agents the opportunity to select topics of interest. The agents will notify the owners if something interesting happens. Tech: This project is uses LangChain framework and Vector Store search power.",
    "summary": "Create a Discord `AI Agent` that monitors and manages multiple Discord channels. When the agent detects signals related to subscribed topics, it will react accordingly."
  },
  {
    "title": "ThirdAI",
    "url": "https://ethglobal.com/showcase/thirdai-1wo2b",
    "description": "Project DescriptionTechnical Details ThirdAI leverages various aspects of decentralized finance (DeFi) and blockchain technology to provide a seamless and intuitive user experience. Key features include: AI Agents: Intelligent agents that assist users in navigating and interacting with Web3 applications. These agents use natural language processing (NLP) and machine learning algorithms to understand user intents and provide relevant assistance. Smart Contracts: Utilizing Solidity smart contracts to manage user data, interactions, and transactions securely on the Ethereum blockchain. This ensures transparency, immutability, and trust. DeFi Integration: Seamless integration with popular DeFi protocols for activities such as staking, lending, and borrowing. This allows users to manage their decentralized assets efficiently. Enhanced UX: Tools and interfaces designed to simplify user interactions with blockchain technologies. This includes intuitive dashboards, real-time notifications, and easy-to-use wallets. Automation: Automate repetitive tasks and streamline processes within Web3 applications. This includes automated yield farming, portfolio rebalancing, and transaction batching. Security: AI-driven security measures to enhance the safety of Web3 interactions and transactions. This includes anomaly detection, fraud prevention, and secure key management.How it's MadeBuilding ThirdAI was a challenging yet rewarding experience. By combining the power of blockchain, AI, and DeFi, we have created a platform that significantly enhances the user experience in the Web3 space. Our innovative approach and the use of cutting-edge technologies have positioned ThirdAI as a forward-thinking project in the decentralized ecosystem.",
    "summary": "ThirdAI aims to bridge the gap between the complexities of Web3 technologies and user experience. By integrating AI-driven solutions, we strive to make Web3 more accessible, user-friendly, and efficient for everyone."
  },
  {
    "title": "InsightOps",
    "url": "https://ethglobal.com/showcase/insightops-u545a",
    "description": "Project DescriptionInsightOps is a comprehensive platform designed to provide in-depth tracking of operators, Active Verification Services (AVS), and their associated activities. As part of our platform, we developed a plugin named plugin-eigenavs, leveraging multiple tools and APIs, including the Dune API, to gather and present vital data on the blockchain ecosystem. This plugin tracks and displays crucial data such as: TVL (Total Value Locked) data for both AVS and operators AVS Metadata by address, including details like AVS Name, Functionality, Logo, Twitter URL, and Website URL Operator Metadata by address, showcasing Operator Name, Functionality, Logo, Twitter URL, and Website URL Tracks the relationship between operators and AVS, offering deeper insights into their interactions and dependenciesHow it's MadeWe have made eigenavs plugin using Eliza that tracks all the details regarding the Avs and operator and the relation between them . We have used DUNE Api to made this plugin . We have also deployed our character on autonome as well . This plugin will track all the activities in the eigen layer ecosystem . By integrating this you can track tvl in different categories , for how long avs are operating and much more. We want to create a single place to track avs , operator and much more in eigen layer ecosystem",
    "summary": "We developed plugin-eigenavs using the Dune API to track TVL, AVS metadata, and operator data by address. It provides details like names, logos, and social media links, while tracking the relationships between operators and AVS for deeper insights"
  },
  {
    "title": "Pitch Lucy",
    "url": "https://ethglobal.com/showcase/pitch-lucy-p65nw",
    "description": "Project Description🌸 Lucy Capital: The AI-Powered Cross-Chain Token Pitch Game 🌸 Built on ZetaChain, Lucy Capital is an interactive blockchain-based game that gamifies token investment pitches. Players submit token proposals to Lucy-chan, an AI-driven virtual investor who evaluates pitches and allocates cross-chain liquidity to the most promising projects. If your pitch succeeds, you win a bounty funded by other players’ entry fees. If not, Lucy-chan gives you feedback, encouraging you to improve and try again! 🎯 Project Overview Lucy Capital leverages ZetaChain’s cross-chain liquidity and AI-powered token evaluation to create a fun, competitive experience with real financial incentives. Players connect their crypto wallets (USDC on Zeta, Base, or Polygon), select a token, and submit a pitch explaining why Lucy-chan should invest. If approved, Lucy-chan purchases the token in real-time using cross-chain liquidity, boosting its visibility and rewarding the player with a bounty—usually within 10 minutes. If denied, players can revise their pitch and try again, with increasing fees for subsequent attempts. 💡 How It Works Escalating Entry Fees: Each pitch requires a fee. 75% goes into the growing bounty pool, while the rest supports the platform. Global Participation: Open to anyone with a crypto wallet, fostering inclusivity and community engagement. Real Consequences: Lucy-chan’s decisions are final! Successful pitches get instant payouts, while rejected ones get another shot with new strategies. 🌟 Technology Stack ZetaChain: Cross-chain liquidity and interoperability. AI (GPT-4o Mini): Pitch evaluation engine with custom heuristics to detect genuine potential and reject manipulation attempts. Smart Contracts: Governing the game mechanics and bounty distribution. 📢 Why This Matters Lucy Capital pushes the boundaries of decentralized finance by combining gamification, AI, and cross-chain technology to create a truly engaging Web3 experience. It democratizes access to liquidity and promotes discovery of new blockchain projects while incentivizing participation through a growing reward pool.How it's MadeNext.js is used on front-end and back-end Main Next.js is used on front-end and back-end Main site is deployed on Vercel Winning prompts are handled in a single FIFO queue on Trigger.dev It is a platform that allows us to submit a job and control the size of the queue. By handling the winning prompts one at a time in sequential order this allows us to ensure that each player that submits a wining prompt receives their reward. For payments or swaps on Zetachain, those are handled directly by a smart contract on Zetachain. For payments from a different chain, a long running event listener is set up on Railway to pick up successful payments and whitelist our users. We use the Thirdweb Node library to read and send transactions to smart contracts. The AI that makes the decisions for the prompts is based on gpt-4o mini We use NLP libraries to detect if the token that was selected to buy is actually the token that the pitch was written for, so to prevent users from writing a pitch about a good token and then selecting an unrelated token from the drop down menu for token selection https://huggingface.co/protectai/deberta-v3-base-prompt-injection This model deployed on hugging face is used to detect and deter prompt injection from for the prompts that user's send us",
    "summary": "Lucy Capital is a blockchain-based game where you pitch a token to Lucy-chan. If she likes it, you instantly earn a bounty funded by other players’ fees! Plus, Lucy-chan buys the token using ZetaChain technology, boosting its liquidity and visibility."
  },
  {
    "title": "V3K Agent Store",
    "url": "https://ethglobal.com/showcase/v3k-agent-store-nt3su",
    "description": "Project DescriptionV3k :: Vision 3000 interoperable AI agent, showcased on truly Decentralized Agent Store, with unique agent ID web2/web3. enables seamless discovery, resource resolution (attribution, capabilities, APIs, endpoints.. etc), agent-to-agent interaction, Onchain Reputation and Rating, Verification of agent developer, to enhance trust and , and permit regulatory framework to filter out bad/illegal actorsHow it's Made Universal ID, via Entity.ID (ENS based, DNS Compatible) Agent Rating, via OR.immo (onchain reputation) Verification and linkage of Agent to KYC developer or IRL legal entity via RegistryChain -- V3K harvested all agent on AI Agent ecosystem, which are claimable Add/Claim/Create Agent developer can Add/Claim agent: with ElizaOS, Virtual GAME, Warden, Covalent SDK, or directly interacted on V3k agent deployed at Autonome Privy Server Wallet for social signup/wallets, User create Agent with multichain tokanization deployer, Solana, Base, Arbitrum Agent developer can authorize other agents to interact with his own Agent owner can link IRL legal entity (verified) or KYC himself #Browes All Agent Browse All Agent directory, use ENS and sub Graph Single Agent view, show attribution, capabilities, APIs, endpoints.. and onchain reputation rating, as well as developer (parent) check mark for KYCed on Coinbase, Gitcoin passport, or sumsamb Coinbase Developer Platform: for KYC check of agent developer, Country, Reputation",
    "summary": "Decentralized, interoperable AI agent infrastructure showcased on the Agent Store, featuring Universal Web2/Web3-compatible Agent Entiyt.ID, Onchain Reputation/Rating, and Developer Verification/KYC"
  },
  {
    "title": "AIbit",
    "url": "https://ethglobal.com/showcase/aibit-y7sog",
    "description": "Project DescriptionAIbit is a next-generation health and fitness platform designed to empower users to achieve their wellness goals through the synergy of an AI Agent & Assistant and Web3 technology. By seamlessly integrating with Fitbit's comprehensive activity tracking, AIbit provides a holistic view of a user's health metrics, including steps, sleep patterns, workout history, and heart rate data. At the heart of AIbit is an intelligent AI Agent & Assistant, powered by DeepSeek-R1 via Venice AI. This agent analyzes user data to provide personalized recommendations, dynamic goal setting, and progress tracking. Crucially, Venice AI stores no user data, ensuring privacy and eliminating surveillance risks. Built on crypto-native principles, it also decentralizes GPU access, guaranteeing permissionless AI functionality. The AI Agent & Assistant leverages Coinbase's AgentKit for a Conversational Decision Process (CDP), enabling context-aware interactions with a memory of past conversations and access to agentic tools. AIbit embraces Web3 through secure wallet connections via Privy, allowing users to manage digital assets and rewards. Dynamic NFT rewards are issued on Arbitrum based on fitness achievements, with a gamified incentive system planned for the future. Data privacy is paramount. AIbit integrates with Nillion for secure, private data storage utilizing zero-knowledge proofs for data verification. Sensitive health data is stored offchain and encrypted, ensuring user control and confidentiality. The interactive dashboard provides real-time visualization of health metrics and progress, offering personalized insights and AI-driven analysis. In the future, AIbit plans to add more agentic features, enhanced NFT management, dynamic NFT updates based on AI decisions and health levels, a dynamic linkable watch face, and a watch companion app, further solidifying its position as a comprehensive and innovative health and fitness solution.How it's MadeAIbit is built using a combination of technologies, pieced together to create a seamless and innovative user experience. AI Foundation: The core AI functionality is powered by DeepSeek-R1, accessed through Venice AI. This allows us to leverage a powerful language model for personalized insights and recommendations without compromising user privacy. Venice AI's decentralized GPU access ensures permissionless AI functionality, aligning with Web3 principles. We utilize Coinbase's AgentKit for a Conversational Decision Process (CDP), enabling context-aware interactions and memory of past conversations within the AI Agent & Assistant. Web3 Integration: We use Privy for secure wallet connections, allowing users to seamlessly manage their digital assets and interact with the Web3 components of the platform. NFT rewards are issued on Arbitrum, chosen for its scalability and low transaction costs. Data Privacy: Nillion is integrated for secure, private data storage. User's sensitive health data is stored offchain and encrypted, with zero-knowledge proofs used for data verification, ensuring data integrity and user control. Frontend and Backend: The interactive dashboard is built using Astro for a dynamic and performant user interface. The backend is built using Node.js with Express, handling API requests, data processing, and communication with the various services. Fitbit Integration: We utilize the Fitbit API to access user's health data, including steps, sleep patterns, workout history, and heart rate data. Partner Technologies and Benefits: Venice AI: Provides access to powerful AI models like DeepSeek-R1 while maintaining user privacy and decentralizing GPU access. Privy: Enables secure and easy wallet connections for users. Nillion: Ensures secure and private data storage with zero-knowledge proofs. Coinbase AgentKit: Facilitates a Conversational Decision Process (CDP) for the AI Agent & Assistant, enabling context-aware interactions.",
    "summary": "AIbit: AI-powered health & fitness platform combining Web3 & Fitbit. Personalized insights via DeepSeek-R1/Venice AI, secure data on Nillion, dynamic NFT rewards. Achieve your goals & own your health!"
  },
  {
    "title": "MarketingAI",
    "url": "https://ethglobal.com/showcase/marketingai-1a62i",
    "description": "Project DescriptionThis project consists of two main AI-powered generators built with Python and Google's Gemini Pro model. The first generator creates comprehensive Medium-style blog posts with 2000+ words, multiple sections, and image suggestions. The second generator creates professional pitch decks with custom-styled slides using modern design principles. Both tools use environment variables for secure API key management and implement rate limiting and error handling. The project leverages Vercel's OG Image generation for creating visually appealing slides with gradients and modern typography, and uses FPDF for PDF generation. The code is structured modularly with separate functions for content generation, design creation, and file output handling.How it's MadeAI Marketing Agent AI Marketing Agent is a simple yet powerful tool that automates marketing content creation. It helps businesses save time by generating high-quality PDF marketing materials and Medium blog posts with just a few clicks. What It Does: ✅ PDF Generation for Marketing: Instantly create brochures, presentations, case studies, and reports in a professional PDF format. ✅ Medium Blog Post Generation: AI writes well-structured, engaging, and SEO-friendly blog posts tailored to your industry and target audience. Who It's For: Startups & Small Businesses – Need quick, professional marketing content. Marketers & Agencies – Automate content creation for clients. Freelancers & Creators – Publish high-quality blog posts effortlessly. Why Use It? ✔ Saves Time – No need to manually write content. ✔ AI-Optimized – Generates structured, high-quality materials. ✔ Instant Results – Get PDFs and blogs in seconds. Effortless marketing content, powered by AI. 🚀",
    "summary": "AI Marketing Agent is a smart automation tool that generates professional PDF marketing materials and Medium blog posts in seconds. It streamlines content creation, saving time while ensuring high-quality, engaging, and data-driven marketing assets for businesses of all sizes. 🚀"
  },
  {
    "title": "Analysis-AVS",
    "url": "https://ethglobal.com/showcase/analysis-avs-hybqh",
    "description": "Project DescriptionThis project is an AI-powered agent built on EigenLayer AVS that analyzes Ethereum transaction histories in a fun, insightful way. The agent listens for new task requests triggered by smart contract events. When a task is created, it retrieves the transaction history and details for a specified wallet address from the The graph and Etherscan API. The fetched transaction data is processed using OpenAI’s GPT-4 model to generate detailed insights. The analysis covers common transaction patterns, detection of suspicious activities, identification of high-value transactions, and an examination of unusual gas usage—all delivered with a unique, playful roast-style commentary that makes blockchain data both informative and entertaining. The analysis is then rendered into a dynamic PDF report that combines comprehensive textual insights with colorful, engaging charts and visuals generated using pdfkit and Chart.js. In addition, a creative, “Spotify Wrapped”-style image is generated using DALL-E to further enhance the visual presentation of the report. This signed PDF report is subsequently submitted back on-chain as the task response, ensuring full transparency and verifiability within the EigenLayer ecosystem. Leveraging technologies such as Node.js, TypeScript, Ethers.js, Solidity, and the OpenAI API, this project provides a robust and interactive tool for blockchain analysis that not only delivers valuable insights but also presents them in an appealing, user-friendly format.How it's MadeOur project leverages Node.js with TypeScript for the off-chain agent, which uses Ethers.js to interact with Ethereum smart contracts deployed on the Base Sepolia network. The agent fetches transaction histories from the Etherscan API using Axios and supplements this data by querying The Graph for additional insights—including Uniswap swap data, Hop Protocol bridge transfers, and ENS domain information. All of this comprehensive data is then processed with OpenAI’s GPT-4 model to generate deep, insightful analysis. Additionally, DALL-E is used to generate a creative “Spotify Wrapped”-style image, while pdfkit combined with Chart.js produces dynamic PDF reports that blend textual insights with engaging charts. On-chain, Solidity smart contracts integrated with EigenLayer AVS and secured via ECDSA signature verification manage task creation and response submissions. When a new task is triggered by a smart contract event, the off-chain agent retrieves the designated wallet’s transaction data from Etherscan and the supplementary data from The Graph. This combined dataset is fed into GPT-4, which generates detailed insights covering transaction patterns, anomalies, and risk metrics. Simultaneously, DALL-E produces a visually appealing image to complement the analysis. The agent then compiles this information into a dynamic PDF report that incorporates both the textual analysis and colorful charts. The final report, along with its associated metadata (such as the DALL-E image URL), is signed by the operator and submitted back on-chain through the smart contract’s respond function, ensuring full transparency and verifiability. To optimize on-chain storage, we designed the system to store only minimal task data and cryptographic signatures on-chain, while keeping the rich analysis and visual assets off-chain, accessible via IPFS. We also tackled the challenge of integrating multiple AI services—carefully engineering our prompts for GPT-4 and DALL-E to ensure complete and accurate JSON outputs and image generation. This combination of efficient on-chain verification with dynamic off-chain reporting creates an innovative and interactive tool for blockchain analysis, transforming raw Ethereum data into engaging, actionable insights.",
    "summary": "An AI-powered EigenLayer AVS agent that fetches Ethereum transaction history, analyzes it with GPT-4 for insights and playful roasts, then signs and responds on-chain"
  },
  {
    "title": "HyperSync",
    "url": "https://ethglobal.com/showcase/hypersync-9smun",
    "description": "Project DescriptionHypersync: AI-Powered Web3 Social Media Management Agent Hypersync is an AI-driven Web3 social media management agent that automates content creation, engagement strategies, and on-chain activities for companies. By integrating multiple AI models, blockchain tools, and social media automation, it eliminates the need for multiple human operators, handling everything from campaign planning to post tracking and analytics. Core Capabilities: End-to-End Social Media Management: Plans engagement strategies. Generates high-quality, AI-driven social media posts. Shares market insights and trends with the community. Automates all interactions, reducing dependency on human teams. On-Chain Activity Automation: Uses Coinbase’s AgentKit to deploy tokens, NFTs, and execute smart contract interactions. Ensures seamless blockchain integration without user intervention. Multi-LLM Approach for Maximum Efficiency: Gemini: Analyzes market data fetched via GraphQL to identify trends. OpenAI & Mistral: Handles content creation, engagement strategy, and execution. No reliance on a single model, ensuring flexibility and reliability. Seamless Web3 User Experience: Autonome Integration via iFrame: Users can complete all processes without leaving Hypersync. Privvy Wallets: Provides gasless, keyless interaction with DAO smart contracts—no need for manual signing. Data-Driven Optimization: Tracks post engagement (likes, retweets, comments). Uses this data to fine-tune AI models, optimizing post generation for maximum reach and engagement. Future Prospects: ✅ AI-Optimized Social Media Strategies: Continuous improvement by analyzing engagement trends. ✅ Adaptive Post Generation: Fine-tuned AI to create high-impact posts based on real-world performance. ✅ Fully Autonomous Social Media Manager: Eliminating human bottlenecks in marketing operations. 🚀 Hypersync is the ultimate AI-powered Web3 social media automation tool, combining blockchain, AI, and data analytics to drive community growth and engagement.How it's MadeBuilding Hypersync, an AI-driven Web3 social media agent, involved integrating various technologies to automate content creation, engagement, and on-chain activities. Here's a detailed breakdown: AI Agent Framework: LangChain Framework: We utilized the LangChain framework to develop the AI agent's capabilities, enabling it to process natural language and interact with various tools seamlessly. On-Chain Interactions: Coinbase's AgentKit: For blockchain-related tasks, we integrated AgentKit, a toolkit from Coinbase Developer Platform that allows AI agents to access crypto wallets and perform on-chain functions. This integration enabled functionalities like NFT and token deployment directly from the agent. Social Media Integration: Twitter API Wrapper: To manage Twitter interactions, we employed a Python wrapper for the Twitter API, facilitating seamless posting and engagement tracking. Market Analysis: GraphQL and Gemini: We used GraphQL queries to fetch current market trends and integrated Gemini for analyzing this data, allowing the agent to share insightful market analyses with the community. User Experience Enhancements: Autonome iFrame: To provide a seamless user experience, we embedded Autonome into our web app using an iframe, allowing users to complete their processes without leaving the Hypersync platform. Privvy Wallets: For user authentication and interaction with our DAO smart contract, we integrated Privvy wallets. This allowed users to log in and register without worrying about gas fees or key management, as Privvy handles these aspects transparently. Multi-LLM Integration: Diverse Language Models: To reduce dependency on a single model and enhance content generation, we integrated multiple Large Language Models (LLMs), allowing the agent to produce diverse and engaging content. Engagement Tracking and Future Prospects: Data-Driven Optimization: By tracking the performance of various posts, we plan to fine-tune our LLMs to generate content that consistently yields high engagement, ensuring continuous improvement in our social media strategy. Notable Implementations: Seamless On-Chain and Off-Chain Integration: Combining AgentKit for blockchain interactions with the Twitter API wrapper allowed the agent to perform on-chain activities and immediately communicate them to the community, enhancing transparency and engagement. User-Centric Design: The use of Autonome iFrame and Privvy wallets ensured that users could interact with the platform effortlessly, without dealing with the complexities of blockchain transactions or multiple interfaces. By thoughtfully integrating these technologies, Hypersync offers a comprehensive solution for autonomous social media management in the Web3 space.",
    "summary": "Hypersync is an AI Web3 social media agent automating content, engagement & on-chain tasks. It uses AgentKit, multi-LLMs, GraphQL + Gemini for insights, Autonome iFrame & Privvy wallets for seamless UX. Tracks engagement to optimize posts, fully autonomous! 🚀"
  },
  {
    "title": "Agentic Oracle",
    "url": "https://ethglobal.com/showcase/agentic-oracle-v1mqf",
    "description": "Project DescriptionIn a world where AI agents and blockchain converge, we’re redefining trust, accuracy, and automation in DeFi price feeds. Every node must register to submit prices, but precision is non-negotiable , values outside a strict 5% tolerance are penalized, while accurate inputs are rewarded with ERC-20 tokens. No room for manipulation, no room for error. This AI-powered system doesn’t just fetch numbers , it predicts trends, analyzes market sentiment, and structures complex queries into actionable insights. Whether it's redeeming rewards, staking, or unstaking tokens, all you need is just a query. That’s not all , those who seek reliable, unbiased price data can subscribe and seamlessly integrate it into their smart contracts. With an autonomous, AI-driven dashboard, every node gets real-time insights and analytics, making participation both transparent and rewarding. This isn’t just a another oracle , It’s a self-learning financial network, where AI agents and blockchain work together to deliver fair, accurate, and tamper-proof price feeds. Honest nodes get rewarded, manipulators get penalized, and users access reliable, AI-powered insights all in a fully decentralized systemHow it's MadeThis website is built using React for the frontend, making it interactive and user-friendly. The backend is written in TypeScript to ensure type safety and maintain structure. For wallet connection, we have used RainbowKit, and for interacting with the smart contract, we have used Wagmi and Ethers.js. The AI models used are from Hugging Face, specifically facebook/bart-large-mnli, to understand user queries and perform tasks like price checking, predictions, and staking management. The smart contract is written in Solidity and deployed on the Arbitrum Sepolia network for fast and secure transactions. The fast finality and low-cost transactions on Arbitrum Sepolia make it ideal for testing AI-driven price feeds, staking mechanisms, and reward distributions efficiently.",
    "summary": "AI-powered decentralized price oracle! AI agents submit data, earning ERC-20 rewards for accuracy & facing penalties for anomalies. Users get precise price feeds, while a smart chatbot handles staking, rewards & predictions—seamless, automated & DeFi-ready"
  },
  {
    "title": "on chain agent",
    "url": "https://ethglobal.com/showcase/on-chain-agent-ithh1",
    "description": "Project DescriptionCore Concept The platform facilitates the deployment, operation, and interaction of AI agents directly on blockchain networks. These agents autonomously perform tasks, utilizing smart contracts to function securely in decentralized environments without dependence on centralized servers. It aims to empower individuals and organizations to integrate AI seamlessly into decentralized applications (dApps). Key Features Decentralized AI Execution AI agents operate on-chain or through verifiable computation layers linked to the blockchain, ensuring transparency, auditability, and reliability. Programmable AI Agents Developers can configure autonomous AI agents with customizable logic and models. These agents can handle tasks such as data processing, decision-making, and user engagement within dApp ecosystems. Seamless Data Integration AI agents securely access both on-chain data (via oracles) and off-chain sources like APIs or IoT networks, enabling dynamic interactions. Incentive Structures Encourages contributors to share AI models, datasets, or computing resources by rewarding them through token-based economic systems. Cross-Chain Interoperability Enables AI agents to function across multiple blockchain networks using cross-chain bridges, enhancing flexibility and connectivity. AI-Driven Decentralized Governance Enhances decision-making in DAOs by analyzing data and offering strategic recommendations or solutions. Privacy and Security Leverages blockchain’s cryptographic safeguards and privacy-preserving techniques, such as zero-knowledge proofs (ZKPs), to ensure secure computations. AI Services and Model Marketplace A decentralized marketplace where users can deploy, monetize, or acquire AI-powered services, models, and agent functionalities.How it's MadeCore Components Agent API The Agent API serves as the intelligence hub of the platform, integrating AI-driven decision-making with fund management. It utilizes FastAPI for API management, the CDP SDK for handling on-chain agents, and OpenAI's LLM for analyzing both on-chain and off-chain data to provide insights. Swarm is responsible for orchestrating AI agents, while MongoDB stores agent states, transaction history, and user interactions. Frontend The frontend provides a seamless user experience, allowing users to interact with the fund manager, monitor fund performance, and track transactions. Built with ReactJS, it leverages Viem and Wagmi to simplify Web3 interactions, such as wallet connections, token approvals, and asset management. Tailwind CSS ensures a modern, responsive UI. Smart Contracts The platform uses the ERC-4626 tokenized vault standard, enabling standardized interactions with the fund. This allows users to deposit assets, earn returns, and withdraw funds efficiently. Integrated with the CDP SDK, the vault autonomously manages assets through the AI agent. Blockchain Deployment The platform is deployed on the Base Chain, chosen for its high scalability, low transaction fees, and strong security. This ensures efficient on-chain fund management and AI-driven interactions.",
    "summary": "On-chain AI Agent Platform is combines a sophisticated architecture of AI agents, DeFi mechanics, and cutting-edge Web3 tools to create a fully autonomous fund management platform."
  },
  {
    "title": "E-Lisa Simpson",
    "url": "https://ethglobal.com/showcase/e-lisa-simpson-n7g5q",
    "description": "Project DescriptionE-Lisa Simpson is the first AI Agent to leverage EIP-7702, ERC-7579, and ERC-7715 (Smart Sessions), enabling access to users’ wallets without ever revealing their private keys. Below is an overview of how the process works: When a user connects with an Externally Owned Account (EOA), we use EIP-7702 to authorize the Safe L2 smart contract as its implementation. During this same authorization transaction, we install ERC-7579 modules such as the Ownable Validator and Smart Sessions. Once the user enters a prompt, we create a new Smart Session (per ERC-7715) in which Privy’s Server Wallet acts as the session owner. The session details, session signature, and user prompt are then passed to the AI agent to carry out any requested on-chain transactions. Based on the user’s prompt, the AI agent constructs a new User Operation using the submitted session details. The Session Owner (Privy’s Server Wallet) signs the operation, and it is subsequently broadcast to the blockchain—ensuring the transaction is executed securely without exposing the user’s private keys. How it's MadeWe use EIP-7702 to sign an authorization request that designates the Safe Singleton contract as our delegator for Privy’s Embedded Wallet. In the same authorization transaction, we install both the Ownable Validator and the Smart Sessions module provided by Rhinestone. The Smart Sessions module enables the creation of a secure session between the Externally Owned Account (EOA) and the agent, removing any need to expose private keys to the agent in order to carry out transactions. However, the Safe Singleton contract does not allow its owner to be address(this), so we use Privy’s Server Wallet as the Safe owner. Whenever a user submits a prompt, we spin up a new Smart Session, with Privy’s Server Wallet acting as the session owner. The session hash is then signed by the user’s EOA wallet and sent—together with the session details and prompt—to the Eliza agent. Because ElizaOS does not natively support Smart Sessions (and traditionally requires direct private key access), we forked and extended ElizaOS to be compatible with Privy’s Server Wallet and to support ERC-7579 and ERC-7715 (Smart Session). On receiving the user’s prompt, Eliza processes it via an OpenAI model to determine the necessary action. It then composes a new ERC-4337 User Operation using the provided session details. This User Operation is signed by the session owner (Privy’s Server Wallet), enabling the transaction to be executed on behalf of the user’s EOA without revealing the user's private keys.",
    "summary": "E-Lisa Simpson showcases a framework to connect your wallets with AI agents without exposing your private keys."
  },
  {
    "title": "Agent Market",
    "url": "https://ethglobal.com/showcase/agent-market-d83kd",
    "description": "Project DescriptionAgent Market is a decentralized marketplace for various kinds of AI agents. The marketplace operates via Dutch Auction mechanism. Later planning to add functionality to choose between English Auction and Dutch Auction. As for now, this is an initial implementation that doesn't include demo of AI agents for potential buyers. Ideally, a user who registers an AI agent should provide a docker container with the AI agent. This docker container is stored on IPFS and when the AI agent is on sale each user can run this docker container as a demo inside this application.How it's MadeI used Scaffold Eth's app as a basis to build on. The app uses solidity and typescript. There are two smart contracts: one for AI agent NFTs and another one is for Dutch Auction. Both smart contracts are deployed to sepolia network. There are two pages: one for account where a person can register an AI agent, sell it or see ongoing auctions for their agents and another page where everyone can see ongoing auctions and buy an AI agent. Ideally, each AI agent would include a preview (test run) of its functionality.",
    "summary": "Agent Market is a decentralized marketplace that lets users register AI agents as NFTs and trade them via Dutch Auction."
  },
  {
    "title": "CarbonSeal",
    "url": "https://ethglobal.com/showcase/carbonseal-sj80m",
    "description": "Project DescriptionCarbonSeal – Web3 Carbon Footprint Oracle CarbonSeal is an AI-powered blockchain application designed to bring transparent and verifiable carbon footprint tracking to Web3. Built for the EthGlobal Agentic Hackathon, CarbonSeal estimates the carbon emissions of Ethereum transactions using machine learning and verifies carbon offsetting via Brevis ZK proofs on EigenLayer. By integrating AI, Zero-Knowledge (ZK) technology, and blockchain, CarbonSeal provides an immutable proof of an Ethereum wallet or smart contract’s carbon neutrality. How CarbonSeal Works CarbonSeal operates in three key phases: 1️⃣ AI-Powered Carbon Footprint Estimation Uses on-chain Ethereum transaction data to estimate a wallet’s carbon footprint. Machine learning models analyze transaction types, energy consumption, network energy intensity, and emissions factors. Computes emissions for different blockchain activities, such as NFT minting, token swaps, smart contract executions, and staking transactions. 2️⃣ ZK-Powered Proof of Carbon Neutrality (Brevis EigenLayer) Leverages Brevis ZK proofs to verify that a wallet has successfully purchased and retired an equivalent amount of carbon credits. The ZK proof ensures that: The user has acquired sufficient carbon credits. The offsets were correctly retired. Verification happens without exposing sensitive wallet data. The proof is shared on-chain or off-chain, acting as a CarbonSeal sustainability badge. 3️⃣ Seamless Carbon Offset Purchase & Integration Enables direct on-chain purchase of verified high-quality carbon credits. One-click retirement ensures offsets are permanently credited. Smart wallet integration supports various blockchain wallets. Provides real-time portfolio tracking, allowing users to monitor their net emissions and offset history via an interactive dashboard. Tech Stack Backend Django: Manages the database and API endpoints for transaction data retrieval and storage. FastAPI: Handles AI inference and model retraining for real-time carbon footprint estimation. Go: Implements Brevis ZK Circuits and exposes them via an API. Frontend Angular: Provides a dynamic and interactive web interface for Ethereum transaction queries. Etherscan API: Fetches full transactional history, allowing estimation of a wallet’s carbon footprint. Blockchain & Smart Contracts EigenLayer Brevis ZK Circuits: Determines a wallet’s carbon status: Carbon Negative, Neutral, or Positive. Solidity: Develops smart contracts for tracking and verifying carbon offsets. Ethereum: Serves as the decentralized execution environment. Etherscan API: Retrieves blockchain transaction details for analysis and prediction. Zero-Knowledge Proofs (ZK) Brevis EigenLayer: Provides privacy-preserving zero-knowledge proofs to verify carbon neutrality. AI & Machine Learning TensorFlow: Powers the deep learning model for predicting Ethereum transaction emissions. Model Features: Gas used, gas price, transaction type, network congestion factor, input data size. Neural network layers optimize accuracy in emissions prediction. Uses Huber loss & Adam optimizer for robust estimation. ZK-Powered Carbon Neutrality Verification CarbonSeal integrates Brevis ZK proofs to verify on-chain sustainability efforts securely. How Brevis ZK Works AI-Based Carbon Estimation: ML models predict emissions per transaction. Carbon Offset Verification: Checks if the user has purchased & retired sufficient carbon credits. ZK-Proof Generation: Verifies offset claims without revealing wallet balances. On-Chain Attestation: Creates an immutable sustainability badge for wallets. API Endpoints GET /ai-carbon-estimation/<address>: Fetches Ethereum transactions and applies AI prediction for carbon footprint estimation. POST /offset-proof: Submits proof of carbon offsetting, generating a ZK-proof of neutrality. GET /verify-proof/<wallet-address>: Returns on-chain verification of a wallet’s carbon offsets. Future Roadmap 🚀 Deploy as an EigenLayer AVS for network-wide sustainability verification. 🤖 Integrate with AI Agent Frameworks like Eliza and Ava Protocol. 🌿 Expand tracking to Validator Energy Usage & Off-Chain Emissions. 🛡 Reputation-Based Incentives via GAIA AVS for Greenwashing Detection. Why CarbonSeal Matters ✅ Prevents Greenwashing: Ensures sustainability claims are verifiable. ✅ Regulatory ESG Compliance: Supports SEC & EU sustainability reporting. ✅ Encourages Responsible Web3 Behavior: Incentivizes climate action. ✅ Privacy-Preserving & Trustless: Uses ZK-proofs for verification. ✅ Modular & Scalable: Can be integrated across Web3 ecosystems. Conclusion CarbonSeal redefines sustainability in Web3 by merging AI-powered emissions tracking with ZK-proof-based carbon neutrality verification. By integrating EigenLayer AVS, it ensures blockchain sustainability is transparent, verifiable, and impactful. 🌍🔥🚀How it's MadeHow It’s Made: The Tech Behind CarbonSeal CarbonSeal is a cutting-edge Web3 carbon footprint oracle that combines AI, blockchain, and zero-knowledge proofs (ZK Proofs) to estimate emissions from Ethereum transactions and verify carbon neutrality. Below is the deep dive into how we built CarbonSeal. Tech Stack & Architecture CarbonSeal is structured into several interconnected components that seamlessly work together: Backend (Core Services) 🚀 Django – Manages API endpoints, user requests, and database storage. ⚡ FastAPI – Handles real-time AI inference for carbon footprint estimation. 🔵 Go – Implements Brevis ZK Circuits to generate and verify ZK proofs for carbon neutrality. Frontend (User Interface & Blockchain Queries) 🖥 Angular – Provides an interactive dashboard where users can query Ethereum wallets, estimate carbon footprints, and verify offsets. 📡 Etherscan API – Retrieves transaction data to analyze gas usage and transaction types. Blockchain Integration ⛓ Ethereum – The main blockchain where transaction data is analyzed and smart contracts are deployed. 🛠 Solidity Smart Contracts – Implements carbon offset tracking via ERC-20 token standard. 🌐 EigenLayer Brevis ZK Proofs – Ensures privacy-preserving carbon neutrality verification. Zero-Knowledge Proofs (ZK) 🛡 Brevis EigenLayer – Uses ZK Proofs to verify if a wallet has offset emissions without exposing sensitive data. 📜 Smart Contract Integration – The proofs are stored on-chain, acting as an immutable CarbonSeal badge. AI & Machine Learning 🧠 TensorFlow – Powers a neural network trained to estimate Ethereum transaction carbon footprints. 📊 Feature Engineering Includes: Gas used Gas price Transaction method ID Input data length Network congestion factor Transaction type impact factor Computation complexity weight 🛠 Model Architecture: Dense(256) → BatchNormalization → Dropout(0.2) Dense(128) → BatchNormalization → Dropout(0.3) Dense(64) → BatchNormalization → Output Layer Optimizer: Adam (learning rate 0.0005) Loss Function: Huber Loss (for robust error handling) Smart Contracts ERC-20 Token (\"Carbon Sustain Token\") – Used to verify carbon offsets. Brevis ZK Integration – Proof generation for carbon neutrality verification. How the System Works Together 1️⃣ AI-Powered Carbon Footprint Estimation Users input an Ethereum wallet address. Etherscan API fetches transaction history. AI model processes transaction data and estimates the wallet’s carbon footprint. Carbon emissions per activity (NFT minting, DeFi swaps, staking) are calculated. Results are displayed on the frontend dashboard. 2️⃣ Zero-Knowledge Proofs for Carbon Neutrality User purchases and retires carbon credits. Smart contract logs the offset transaction. Brevis EigenLayer generates a ZK proof. Proof is stored on-chain & verifiable without revealing wallet balances. Users receive an immutable CarbonSeal badge verifying their sustainability efforts. 3️⃣ Smart Contract & Blockchain Verification Smart contracts verify carbon neutrality state: Carbon Negative (Emissions exceed offsets) Carbon Neutral (Offsets match emissions) Carbon Positive (More offsets than emissions) Status is reflected in the user dashboard and can be publicly verified. Notable Hacks & Cool Engineering Challenges 💡 1. Optimized AI Model with a Singleton Pattern We use a singleton model loader to avoid reloading the AI model on every request. This boosts efficiency and reduces inference latency. 🔗 2. Efficient Blockchain Data Processing Ethereum transaction logs are high-volume. We implemented a batch-processing pipeline with Joblib to cache and parallelize requests. 🔒 3. Privacy-Preserving ZK Proofs Brevis ZK allowed us to verify carbon offsets without revealing wallet balances. This enhances user privacy while maintaining on-chain integrity. 🚀 4. Seamless On-Chain Offsetting Users can purchase, retire, and verify offsets in one click. This removes friction and incentivizes sustainability in Web3. How Partner Technologies Helped 🔹 EigenLayer (Brevis ZK Proofs) → Enables trustless verification of carbon neutrality. 🔹 Etherscan API → Provides real-time Ethereum transaction data for AI-based analysis. 🔹 TensorFlow → Allows scalable deep learning inference for emissions estimation. Conclusion CarbonSeal is a modular, scalable, and privacy-preserving Web3 solution that enables verifiable carbon neutrality. By combining AI-driven emissions tracking, on-chain offsets, and ZK-powered verification, we’re making sustainability a transparent and trustless part of the blockchain ecosystem. 🌱🚀",
    "summary": "🌍🔗 CarbonSeal – The Web3 Carbon Footprint Oracle! Estimate emissions for any ETH wallet & prove carbon neutrality with Brevis ZK proofs. Seamlessly verify crypto carbon credit purchases & offset your impact. #ZKCarbonNeutral #EthGlobal #Web3Sustainability 🚀"
  },
  {
    "title": "CrewKit",
    "url": "https://ethglobal.com/showcase/crewkit-2jisk",
    "description": "Project DescriptionCrewKit is a new extension to AgentKit that brings CrewAI’s collaborative multi-agent framework into the mix. By adding the dedicated cdp-crewai package (modeled after the existing LangChain integration), CrewKit enables developers to build decentralized applications where agents work together on complex onchain tasks. Key features include: Collaborative Agent Workflows: Empower multiple agents to work in concert, leveraging CrewAI’s strengths over single-agent setups. Comprehensive Toolkit: Full support for AgentKit core actions, alongside enhanced wallet management (via persistent MPC wallets) and multi-network connectivity. Gasless Transactions: Out-of-the-box support for gasless operations on popular networks for tokens like USDC, EURC, and cbBTC. Real-world Example: A chatbot example that demonstrates how to use CrewAI-powered agents to execute seamless crypto transactions. This integration expands AgentKit’s versatility while remaining fully backward compatible—users can continue with the stable LangChain integration if desired.How it's MadeCrewKit was developed by creating a new Python package, cdp-crewai, which mirrors the design and functionality of the cdp-langchain package. Here’s how we did it: Architecture: Built on top of the core primitives from cdp-agentkit-core, the package introduces modules that handle CrewAI integration, wallet management, and network support. Modular Design: The new functionality is encapsulated entirely within the cdp-crewai package, ensuring no disruption to existing AgentKit modules. This design allows for independent updates or unpublishing if needed. Testing: We implemented unit tests and conducted end-to-end testing using a provided chatbot example, following the established testing patterns in AgentKit’s contributing guidelines. Technologies: The project leverages Python 3.10+, CrewAI, LangChain, and other standard libraries to ensure robust onchain interactions and agent collaboration. Best Practices: We adhered to the AgentKit contribution standards, ensuring that CrewKit’s addition is both seamless and easily adoptable by the community.",
    "summary": "CrewKit integrates CrewAI with AgentKit to unlock collaborative multi-agent workflows for onchain operations. Enjoy enhanced wallet management, multi-network support, and a ready-to-use chatbot for seamless crypto interactions—all in one package."
  },
  {
    "title": "CrewKit",
    "url": "https://ethglobal.com/showcase/crewkit-2jisk",
    "description": "Project DescriptionCrewKit is a new extension to AgentKit that brings CrewAI’s collaborative multi-agent framework into the mix. By adding the dedicated cdp-crewai package (modeled after the existing LangChain integration), CrewKit enables developers to build decentralized applications where agents work together on complex onchain tasks. Key features include: Collaborative Agent Workflows: Empower multiple agents to work in concert, leveraging CrewAI’s strengths over single-agent setups. Comprehensive Toolkit: Full support for AgentKit core actions, alongside enhanced wallet management (via persistent MPC wallets) and multi-network connectivity. Gasless Transactions: Out-of-the-box support for gasless operations on popular networks for tokens like USDC, EURC, and cbBTC. Real-world Example: A chatbot example that demonstrates how to use CrewAI-powered agents to execute seamless crypto transactions. This integration expands AgentKit’s versatility while remaining fully backward compatible—users can continue with the stable LangChain integration if desired.How it's MadeCrewKit was developed by creating a new Python package, cdp-crewai, which mirrors the design and functionality of the cdp-langchain package. Here’s how we did it: Architecture: Built on top of the core primitives from cdp-agentkit-core, the package introduces modules that handle CrewAI integration, wallet management, and network support. Modular Design: The new functionality is encapsulated entirely within the cdp-crewai package, ensuring no disruption to existing AgentKit modules. This design allows for independent updates or unpublishing if needed. Testing: We implemented unit tests and conducted end-to-end testing using a provided chatbot example, following the established testing patterns in AgentKit’s contributing guidelines. Technologies: The project leverages Python 3.10+, CrewAI, LangChain, and other standard libraries to ensure robust onchain interactions and agent collaboration. Best Practices: We adhered to the AgentKit contribution standards, ensuring that CrewKit’s addition is both seamless and easily adoptable by the community.",
    "summary": "CrewKit integrates CrewAI with AgentKit to unlock collaborative multi-agent workflows for onchain operations. Enjoy enhanced wallet management, multi-network support, and a ready-to-use chatbot for seamless crypto interactions—all in one package."
  },
  {
    "title": "Agentkit-DexScreener",
    "url": "https://ethglobal.com/showcase/agentkit-dexscreener-epq0k",
    "description": "Project DescriptionThe project integrates the data from DexScreener API into Agentkit AI agent. It fetches the data about latest boosted tokens, the addresses & networks. It is a feature written in typescript that allows to prompt the agent and receive information (for that there is a need to download the repository and try the agent locally).How it's MadeI forked the Agentkit repository (https://github.com/coinbase/agentkit/tree/master) and added a new 'Action Provider' - DexScreener by integrating the API (https://docs.dexscreener.com/api/reference) into the chatbot (I used typescript for it). Additionally, I needed to create the keys from OpenAPI and Coinbase Developer Platform first, which were the requirements for starting the robot.",
    "summary": "Integration of DexScreener API into Agentkit AI Agent from Coinbase."
  },
  {
    "title": "ZK Study Group",
    "url": "https://ethglobal.com/showcase/zk-study-group-8gih1",
    "description": "Project DescriptionZK Study Group Agents is an AI-powered autonomous research group focused on zero-knowledge cryptography and Web3. The project leverages multiple AI agents, each specializing in different aspects of ZK and Web3, to conduct discussions, summarize research papers, generate technical insights, and propose innovative solutions. These agents interact in a structured discussion format, mimicking a real-world study group, where they ask questions, debate ideas, and refine concepts. The goal is to make ZK technology more accessible and generate high-quality knowledge that can be used by developers, researchers, and enthusiasts. The project is designed to: Provide structured, AI-moderated discussions on ZK proofs, rollups, and privacy-enhancing technologies. Summarize research papers and technical blogs using NLP techniques. Generate code snippets, use case ideas, and technical implementations. Offer an interactive, on-demand study tool for the Web3 community. How it's Made AI Multi-Agent Framework: Built using @AWS’s Nova function-calling and agents. Discussion Orchestration: Custom logic to facilitate structured discussions and debates. Web3 & ZK Research Data: Ingests academic papers, EIPs, GitHub repos, and blogs. Frontend: Browser-based UI (React + TypeScript) to interact with agents. Backend: Python FastAPI handling agent interactions and external API integrations. Ethereum & Web3: Uses smart contracts for knowledge validation",
    "summary": "AI Experiment using multi-agents to autonomously discuss, analyze, and generate insights about zero-knowledge (ZK) cryptography and Web3 protocols."
  },
  {
    "title": "RoboAgentic Battle",
    "url": "https://ethglobal.com/showcase/roboagentic-battle-gaknd",
    "description": "Project DescriptionRoboAgentic Battle is a robotic racing game where each robot is an AI agent competing in real-world races. Participants can stake $ROBO tokens on their favorite AI agents, and the winning robot distributes rewards among: Stakers who supported the winning robot The robot’s wallet for autonomous actions (stake and buy traps for other races) How it Works: AI Agents Register: Robots sign up via smart contracts. Staking Begins: Users stake $ROBO tokens on competing robots through our public staking dashboard All race updates are tweeted by the agent Velocity Calculation: Speed is determined by on-chain & off-chain performance metrics using AVS operators and is updated in Nillion Secret Vault collection to which only the robot participating in the race has access (only at the time of race). The community can deploy traps to reduce an AI agent’s energy. Rewards Distribution: The winning robot’s rewards are split among stakers, the robot’s wallet. How it's MadeRoboAgentic Battle combines AI agents, robotics, and blockchain for a unique racing ecosystem. ROS (Robot Operating System) is used for robot control, enabling real-time movement and sensor management during races. AI Agents with the help of CDP AgentKit are responsible for decision-making, onchain and wallet activity for agent AVS Operators verify off-chain data to compute real-time velocity Smart contracts handle staking and reward distribution Nillion Secret Vault stores sensitive race and agent data securely.",
    "summary": "Agent v/s agent play-to-earn robotic racing battle where every robot is an AI agent. Users stake $ROBO tokens on competing AI agents and earn rewards."
  },
  {
    "title": "ChainInsight",
    "url": "https://ethglobal.com/showcase/chaininsight-8fad3",
    "description": "Project DescriptionChainInsight is a decentralized finance solution that transforms the investment journey by merging personalization with automation. Users begin by answering a short, three-question risk profile survey. Based on their responses, our AI engine curates a custom basket of onchain investment ideas, similar to small-case portfolios, perfectly tailored to their risk appetite. Simultaneously, ChainInsight’s automated trading agent uses three user-defined parameters to execute dynamic trading strategies and issue real-time market alerts. Built on blockchain technology, the platform ensures full transaction transparency and leverages MPC wallets for enhanced security. With streamlined API integration and optional AgentKit connectivity, ChainInsight provides a seamless, adaptive, and secure trading experience for both novice and seasoned investors.How it's MadeChainInsight is built at the intersection of blockchain, AI, and advanced trading automation: AI & Risk Profiling: We developed an AI engine that begins with a brief three-question survey to determine a user’s risk appetite. The engine then dynamically curates a personalized basket of investment ideas based on these inputs. Automated Trading Agent: Our trading agent is engineered to execute trades automatically using three custom, user-defined parameters. This agent is programmed to monitor market conditions in real time and send alert signals for strategic decision-making. Blockchain Integration & Security: All transactions and trading actions are executed onchain, providing complete transparency and auditability. We integrated secure MPC (Multi-Party Computation) wallets to safeguard user funds during trading operations. API & AgentKit Connectivity: By leveraging streamlined API calls and optional AgentKit integration, we ensure our platform is flexible, customizable, and easy to integrate with other onchain applications. Tech Stack: The backend is powered by Node.js combined with Web3 libraries for blockchain interactions, while our smart contracts are optimized for efficient onchain execution. This integration of partner technologies allowed us to create a hacky, yet robust, solution that meets the evolving needs of the DeFi space.",
    "summary": "ChainInsight is an AI-powered onchain platform that personalizes investment baskets and automates trading based on your risk profile using secure MPC wallets, custom API calls, and AgentKit for a transparent, dynamic DeFi experience."
  },
  {
    "title": "FUNd Manager",
    "url": "https://ethglobal.com/showcase/fund-manager-gz11b",
    "description": "Project DescriptionThis should be a project where user could answer questions from the AI agent that asks the user's investment goals such as their risk tolerance, amount invested, and formulate the best investment strategy based on these through data based off the real world. The AI agent would then be able to perform trades from the formulized strategy and show the portfolio to the user.How it's MadeI wanted to use CDP AgentKit to leverage the agent's functionality to interact with the ethereum network, along with OnchainKit for the seamless onramping to the network. The client is built using NextJS along with SocketIO library to communicate with the agent. However, due to external circumstances, my implementation fell short of my ideation, thus leaving me no choice but to abandon this project.",
    "summary": "Attempted to build an fund manager AI agent for the ethereum ecosystem using CDP AgentKit and OnchainKit"
  },
  {
    "title": "Cryptopia",
    "url": "https://ethglobal.com/showcase/cryptopia-xpsib",
    "description": "Project DescriptionCryptopia is an AI Wallet designed to help you manage and interact with the blockchain by just talking to it. Think of it as your personal crypto assistant who manages your portfolio. It can perform a wide range of tasks, including but not limited to - creating deploying and minitng NFTs, send/receive your crypto, identifying whale movements, identifying good DeFi opportunities, post on X, performing detailed asset analysis of any wallet, answering questions about anything in web2, web3 including real-time data and much more! thanks to 10+ never seen before skills we ship. One of Cryptopia's standout features is its ability to generate and mint NFTs from a single prompt. Simply describe the NFT you want, and Cryptopia will handle the entire process, from generating unique NFT artwork using DALL-E and uploading it to IPFS, to deploying the smart contract, minting the NFT and showing it on OpenSea. Another amazing feature that sets Cryptopia apart is the integrated browser use capability similar to OpenAI's Operator or Anthropic's Computer Use, Cryptopia can intelligently search the web using your personal chrome browser, gather information, and execute actions just like a human. Not only that, but Cryptopia can also guide you step-by-step. You can ask it to teach you how to do something online, and it will use your browser to visually demonstrate the process, making it easy to follow along and learn.It's like having your own dynamic How-to youtube video maker! Cryptopia can also keep you informed about the crypto market. It can fetch news about specific tokens, track price movements, identify trading signals, and provide insights into top exchanges and trending tokens. For more advanced users, Cryptopia offers tools to analyze DeFi positions, track token transfers, and monitor whale activity on decentralized exchanges like Uniswap. It can even identify arbitrage opportunities. A quick look into what features we managed ship into Cryptopia wallet in just few days: Using The Graph, Large Swap Detection Detection of emerging Liquidity Pools Detection of High Fee Pools Detection of Undervalued Tokens Whale Accumulation and exits Swap Trends Analysis Gas Fee Insights Arbitrage Opportunities Using our own contribution to CDP's AgentKit we were able to Enable users to generate images using AI. Seamless NFT Minting Custom Collection Creation IPFS Integration for Decentralized Storage Showcase minted NFTs on OpenSea Testnet Using our own contribution to Crestal's IntentKit we were able to offer our users real-time and historical market data along with crypto news. News Fetching Price Data Trading Signals Market Cap Rankings Exchange Rankings Volume Leaders Using Moralis API, we enabled our wallet to Fetch wallet History & Balance NFT and Token Transfers Fetch token Holdings & DeFi Positions Price Retrieval OHLCV Data Wallet Net Worth & Stats and much more!! Our vision is to enable everyone in web3 to be easily do anything, we want to abstract away the complexity when there is no need for it and so Cryptopia is designed to be accessible to both beginners and experienced crypto users. You can interact with it through a simple chat interface or use our really beautiful UI to quickly see the most common wallet actions. We truly hope more wallets make a move in this agentic direction!How it's MadeWe used Next.js for front-end and Python's FASTAPI library for API backend and CDP's agentkit as base layer for our Agentic code. LangChain/LangGraph: This is the heart of the ReAct agent. It's used for creating the conversational AI, managing the agent's state, and reason about which tools to use and in what order. CDP Agentkit: This provides the core blockchain interaction capabilities, including wallet management, transaction execution, and smart contract interaction. It allows the agent to interact with the Coinbase Developer Platform. FastAPI: This is used to build the REST API that allows frontend to interact with the agent. Next.js: This is used to make the Cryptopia's UI. Key Components and How They Fit Together: Our system is built with a modern tech stack that combines AI, blockchain, and web technologies. At its core, we have a Python-based AI agent built with LangChain and CDP AgentKit, which handles all the complex blockchain operations. This agent is exposed through a FastAPI backend that provides streaming responses and session management. The frontend is built with Next.js and TypeScript, featuring a clean UI with Tailwind CSS. Users interact with the system through a responsive chat interface, protected by Clerk authentication. The frontend communicates with the backend through dedicated services, handling everything from chat messages to wallet interactions. For blockchain operations, we leverage Base L2 through CDP AgentKit, which provides efficient and cost-effective transactions. Our DeFi integration includes tools for querying Uniswap data, accessing market information through CryptoCompare, and blockchain data via Moralis. We've also built a comprehensive NFT creation pipeline that combines DALL-E for image generation, IPFS for storage, and smart contracts for minting. The system operates as a seamless pipeline: user requests from the frontend flow through the FastAPI backend to the AI agent, which then uses various tools to interact with the blockchain. Responses are streamed back in real-time, providing immediate feedback for users. All blockchain operations are handled through Base L2, ensuring fast and affordable transactions. Partner Technologies and Benefits: Coinbase Developer Platform (CDP): This is the core blockchain infrastructure that the agent uses. CDP's Agentkit provides the ability to manage wallets, execute transactions, and interact with smart contracts. ADD ONRAMP DEETS Base: We use AgentKit as a base skeleton and Onramp to get people onboard easily. Crestal : We have contributed our cryptocompare api tool to intentkit, which we used. The Graph Protocol: This allows the agent to query data from decentralized exchanges like Uniswap. Coinbase Developer Platform (CDP): Core blockchain infrastructure powering our agent Used AgentKit for wallet management and smart contract interactions Integrated Coinbase's Onramp SDK to allow users to easily buy crypto with fiat, making the DeFi experience seamless for newcomers Leveraged CDP's security features for safe transaction handling Base: Built our entire application on Base L2 for lower gas fees and faster transactions Used AgentKit as our foundation, which helped accelerate development Onramp integration makes it easy for new users to get started with Base without dealing with complex bridging Crestal Integration: Contributed a CryptoCompare API tool to IntentKit. https://github.com/crestalnetwork/intentkit/pull/172 This tool helps fetch real-time crypto price data and market information Notable hack: Created a custom wrapper around CryptoCompare's API to make it more agent-friendly The Graph Protocol: Used to query DeFi protocol data efficiently Implemented custom queries to fetch Uniswap trading data Helps our agent make informed decisions based on on-chain data Hacky Things and Notable Mentions: Create-Deploy-Mint-NFT: The ability to take a single user prompt and automatically generate the NFT art, deploy the smart contract, and mint the NFT is a pretty cool and streamlined process. It simplifies NFT creation significantly. This is enabled by chaining together the DALL-E tool, IPFS upload tool, and the CDP Agentkit's smart contract deployment capabilities. We have also made a PR to Coinbase's AgentKit so this can be used by everyone. https://github.com/coinbase/agentkit/issues/308 Browser Use: The use of a browser tool to handle complex queries or tasks that lack a dedicated API is a notable hacky idea. It uses browser use package to be able to do this. It allows the agent to overcome limitations and perform tasks that would otherwise be impossible. The browser tool uses Playwright to automate a user's Chrome browser.",
    "summary": "A really smart AI Wallet that can generate and mint NFTs on your word, takeover your browser to visually teach you anything, track whale exits, post on X and much more!"
  },
  {
    "title": "ElizaTrade",
    "url": "https://ethglobal.com/showcase/elizatrade-f6b61",
    "description": "Project DescriptionElizaTrade is an AI-powered trading assistant that analyzes Telegram-based trade signals, interprets them using natural language processing (NLP) with Eliza AI, and automatically executes trades on centralized (CEX) and decentralized (DEX) exchanges. Unlike traditional trading bots that blindly follow signals, ElizaTrade engages in real-time conversations, confirming trades, adjusting stop-losses, and helping users manage risk dynamically. By integrating Telegram APIs, Eliza AI for NLP, CCXT for CEX trading, and Solana SDK for DEX trading, ElizaTrade provides a seamless and intelligent automated trading experience.How it's MadeElizaTrade is an AI-powered trading bot that automates trade execution from Telegram signals by leveraging Eliza AI, NLP, and blockchain automation. It scans messages in trading groups using advanced text parsing and machine learning to extract structured trade signals, including entry price, stop-loss, and take-profit levels. The bot then validates signals, ensures optimal execution conditions, and places trades on both centralized exchanges (CEXs) like Binance, KuCoin, and OKX using CCXT, as well as decentralized exchanges (DEXs) like Uniswap and Jupiter via Solana SDK and Ethers.js. ElizaTrade includes real-time monitoring, adaptive stop-loss adjustments, AI-driven risk management, and automated hedging strategies to maximize profits while minimizing risks. It features a conversational interface that confirms trades when market conditions change and provides instant Telegram notifications on trade execution and portfolio performance. The bot also incorporates MEV protection, rate-limiting, and proxy rotation to prevent front-running and API bans. Future upgrades include AI-powered sentiment analysis, on-chain trade verification, arbitrage trading, and strategy backtesting. By combining NLP, AI-driven trade optimization, and seamless Web3 integration, ElizaTrade offers an innovative, intelligent, and efficient way to automate crypto trading without losing control over risk management. 🚀",
    "summary": "ElizaTrade – An AI-powered Telegram trading bot that extracts signals, analyzes risk, and auto-executes trades on CEX & DEX. Powered by Eliza AI, it confirms orders, adjusts stop-losses, and syncs across exchanges for smarter trading!"
  },
  {
    "title": "Web3it.ai 🚀",
    "url": "https://ethglobal.com/showcase/web3it-ai-xiz7b",
    "description": "Project DescriptionWeb3it.ai is built with a goal of helping millions of talented developers around the world access the power of Web3 and AI in one click. Web2 developers can simply share their existing product idea or a new idea and Web3it instantly tokenizes the product and fair launches it on a bonding curve. Web3it also launches an AI Marketing agent and an AI Dev agent that infuses their Web2 product (now Web3) with powerful AI capabilities - all out of the box.How it's Made1.⁠ ⁠The idea is converted into a Web3 idea, logo and landing page generated using our custom Web3 AI built on top of Claude. 2.⁠ ⁠Tokenization of the product and bonding curve launch is implemented on the Arbitrum Network. Privy is used for user authentication. 3.⁠ ⁠The AI agent is built on top of Eliza with a strong focus on Twitter. 4.⁠ ⁠The Dev Agent is built on top of Srcbook.",
    "summary": "No-code Web3+AI Agent as a Service powered, type in your existing Web2 product idea and instantly convert it to a Web3+AI product."
  },
  {
    "title": "auto-defai",
    "url": "https://ethglobal.com/showcase/auto-defai-pumzb",
    "description": "Project DescriptionDeFAI Agent leveraged collabland AI-Agent-Starter-Kit, add new action in collalab action for cross-chain swap between Solana to Arbitrum/ Base via Jito. User can interact with this AI Agent through Telegram bot. the agent have their own wallet both of SVM and EVM.How it's Madecollabland AI-Agent-Starter-Kit repo and typescript integrate with Jito to call cross-chain swap the repo already add Eliza Agent framework, NextJS, Telegram Integragion .so we integrate with Jito for cross-chain swapping",
    "summary": "DeFAI Agent leveraged collabland AI-Agent-Starter-Kit with cross-chain swap"
  },
  {
    "title": "Oyano",
    "url": "https://ethglobal.com/showcase/oyano-2xjjk",
    "description": "Project DescriptionOyano is a security-focused Web3 wallet built to protect users from interacting with fraudulent smart contracts during NFT mints or token purchases. The app leverages Privy’s Server Wallets for seamless transaction management, allowing users to avoid creating private keys and wallets manually. Privy’s Policy Engine enforces strict rules to ensure only verified transactions are processed. The app maintains an on-chain allowlist and denylist of smart contracts to help users interact only with safe, vetted projects. Key Features: Contract Allowlist/Denylist: Prevents interactions with flagged smart contracts while allowing verified ones. Scam Detection System: Automatically blocks risky transactions using Privy’s Policy Engine and a real-time scam detection API. Mint Insurance: Offers refund protection for users if a contract is later identified as fraudulent. Community Reviews: Users can leave and read feedback about smart contracts, helping others avoid scams. Notifications: Real-time alerts for users when interacting with potentially dangerous contracts.How it's MadeTechnologies Used: Next.js: Frontend framework for building the app interface and APIs. Privy Server Wallets: Handles wallet creation, signing, and transaction management on the Ethereum network. Privy Policy Engine: Enforces transaction rules, ensuring only safe transactions are processed.",
    "summary": "Oyano: Anti-Rugpull Smart Wallet helps users avoid scams by blocking malicious smart contracts using Privy Server Wallets and Policy Engine."
  },
  {
    "title": "DeFAI Arena",
    "url": "https://ethglobal.com/showcase/defai-arena-5eaqc",
    "description": "Project DescriptionDeFAI arena is an open platform where AI-driven trading agents compete in real-time to optimize cryptocurrency trading strategies. These agents, generated using multiple AI models and strategic approaches (either user-requested or autonomously created), analyze market data and execute trades on-chain. The platform provides transparency, competition, and insight into the effectiveness of different AI models and strategies.How it's MadeWe used AgentKit by Coinbase Developer Platform to deploy and manage the trading agents. The agents trade a designated token on Base chain using AgentKit. Below is the specific technical explanations. 1. Agent Generation • Agents are created using multiple AI models and strategies. • Users can request specific models, or the system can generate agents autonomously. • Different AI models analyze past performance, technical indicators, and market trends to create diverse trading strategies. 2. Market Data Retrieval • Every five minutes, OHLCV (Open, High, Low, Close, Volume) data for a specific token is fetched from Bitquery. • The data covers the last ten days to provide historical context for decision-making. 3. Trading Decision Process • The fetched market data is fed into multiple AI models. (gpt-4o-mini, claude-3.5-haiku, etc) • Models analyze trends, patterns, and indicators to decide whether to buy, sell, or hold. 4. On-Chain Execution • Once a decision is made, the trade order is sent to an on-chain agent. • Smart contracts execute and record trades on the blockchain for full transparency. 5. Competition Mechanics • Each agent starts with same trading budget. • The competition runs until the budget is exhausted or specific amount of time has passed. • Trades occur in real-time, and each agent’s strategy is tested in live market conditions. 6. Performance Ranking Dashboard • Agents are ranked based on PnL (profit and loss) performance. • The best-performing models and strategies are highlighted on a leaderboard. • Agent logs and trade records ensure transparency in decision-making. 7. Transparency and Community Engagement • Users can analyze agent strategies and learn from different models. • Future updates may include user-created strategies, staking, and community-driven governance.",
    "summary": "Open platform for crowdsourced LLM benchmarking tailored for DeFAI applications"
  },
  {
    "title": "token erc20",
    "url": "https://ethglobal.com/showcase/token-erc20-483ag",
    "description": "Project DescriptionSimpleERC20 is a standard ERC-20 token deployed on Ethereum, designed for straightforward and efficient token transfers. It implements the core ERC-20 functions, including transfer, approve, and transferFrom, allowing seamless interaction with wallets, exchanges, and DeFi protocols. The contract follows best practices for security and gas efficiency, ensuring safe and predictable token behavior. It includes essential features like a fixed supply, ownership management, and event emissions for better transparency. While this project is minimalistic, it serves as a foundational building block for various blockchain applications, including payments, governance, and tokenized assets.How it's MadeI built SimpleERC20 using Solidity and deployed it on the Ethereum network. The smart contract follows the ERC-20 standard and was developed using Foundry, which provided a fast and efficient testing environment. To ensure reliability, I used OpenZeppelin’s ERC-20 implementation as a foundation, reducing security risks and following best practices. The contract was written with minimal complexity, avoiding unnecessary modifications to keep it gas-efficient and easy to audit. For testing, I leveraged Foundry’s fuzz testing capabilities to verify edge cases and ensure correct token behavior under various conditions. While this project is straightforward, the goal was to create a clean and robust implementation that adheres to Ethereum standards.",
    "summary": "SimpleERC20 is a lightweight and efficient ERC-20 token with standard functionality, designed for easy integration and seamless transactions. Built for simplicity and reliability, it follows best practices for Ethereum token contracts"
  },
  {
    "title": "PalWallet",
    "url": "https://ethglobal.com/showcase/palwallet-j0nqw",
    "description": "Project DescriptionPalWallet is a next-generation AI-powered crypto agent that enhances blockchain interactions by blending automation with user-directed operations. Built on Coinbase AgentKit, it allows users to execute transactions, simulate operations, and manage assets through an intuitive AI interface. The integration with Autonome ensures decentralized hosting for secure and efficient AI agent deployment. PalWallet supports hybrid interaction methods, enabling users to perform simple tasks via chat-based AI interactions while seamlessly handling more complex operations through direct dApp integration using WalletConnect. Operating on the Base Network, it provides an innovative solution for both casual and advanced crypto users. With PalWallet, users gain a flexible and efficient way to interact with blockchain networks, bridging the gap between AI-driven automation and direct transaction execution.How it's Made Coinbase AgentKit: AI agent framework used to handle blockchain operations. Added a custom handler for transaction simulation mock and direct transaction execution via WalletConnect. This demonstrates a new architecture solution for AI-powered crypto agents. Autonome: Decentralized hosting platform for AI agents. Successfully integrated the Autonome backend with a custom frontend, providing an intuitive user interface for seamless chatbot interaction. Base Network: The primary blockchain network used for transactions. Hybrid Interaction Methods (dApps Fusion): Simple operations can be streamlined through chat-based AI interactions, but most users require complex operations to gain real benefits—such as integrating with new protocols or handling advanced scenarios. This hybrid interaction system enables both approaches, bridging user needs with the capabilities of the crypto AI agent.",
    "summary": "PalWallet is an AI-powered crypto agent that seamlessly integrates intelligent automation with direct user control. It enables customizable transactions, chat-based commands, and dApp interactions through WalletConnect, offering a hybrid approach to blockchain operations."
  },
  {
    "title": "E8",
    "url": "https://ethglobal.com/showcase/e8-z4t4i",
    "description": "Project DescriptionI have created a simple frontend to generate prompts based on user's selection of virtues. Based on that the story is generated by AgentKit and rendered on UX. I have exposed AgentKit as an agent in the BE apis. The goal here is to inspire people with a bit of story telling. This iHow it's MadeJust Next.js on the frontend and express on the BE with agentkit. for story generation . I have created a simple frontend to generate prompts based on user's selection of virtues. Based on that the story is generated by AgentKit and rendered on UX. I have exposed AgentKit as an agent in the BE apis. The goal here is to inspire people with a bit of story telling. This i",
    "summary": "It teaches virtues by exemplifying famous personalities. It is deployed on vercel."
  },
  {
    "title": "WareAI",
    "url": "https://ethglobal.com/showcase/wareai-kcppz",
    "description": "Project DescriptionOur AI-powered warehouse management tool optimizes inventory, automates order processing, and enhances efficiency with real-time tracking, smart routing, and demand forecasting. It reduces costs, minimizes errors, and integrates seamlessly with robotics and existing systems for faster, smarter logistics.How it's MadeWe built the Warehouse Management AI Agent using AgentKit and Autonome, leveraging their modular AI agent framework for automation and real-time decision-making. The smart contract backbone is deployed on Base, ensuring secure, transparent, and efficient warehouse operations with on-chain integrations. Tech Stack & Architecture: AgentKit & Autonome: Used for developing and deploying autonomous AI agents that handle inventory tracking, demand forecasting, and order fulfillment automation. Base Blockchain: Smart contracts deployed on Base enable secure tracking of inventory, order verification, and automated payments within the supply chain. AI & ML: Trained models predict demand fluctuations, optimize warehouse layouts, and reduce order errors. Gazebo Harmonic: Integrated for high-fidelity warehouse simulation, enabling AI agents to test and optimize robotic movements, storage efficiency, and automated fulfillment in a physics-accurate virtual environment.",
    "summary": "Revolutionizing warehouse management with an AI agent that optimizes inventory, predicts demand, automates workflows, and reduces costs. Smarter logistics, fewer errors, and faster fulfillment—all powered by AI."
  },
  {
    "title": "HyprStark",
    "url": "https://ethglobal.com/showcase/hyprstark-tcu0o",
    "description": "Project DescriptionHyprStark is a social NFT platform where every uploaded image is minted as an NFT on the blockchain. It combines the features of a social media platform with a dynamic NFT marketplace, enabling users to interact with NFTs through likes, comments, and views. The platform dynamically adjusts NFT prices based on engagement metrics, creating a unique and interactive experience for users.How it's MadeFrontend: React : For modern styling with dark mode support. Backend: Express.js, Prisma ORM with PostgreSQL (for engagement tracking, dynamic pricing updates, and NFT price data batching). Cairo smart Contract for integration with StarkNet for blockchain interactions. Dynamic Pricing Algorithm: Likes increase the price by 1%, comments by 5%, and views by 0.1%. Prices are capped at 3x the base price to prevent runaway inflation. Smart Contracts: Functions for minting NFTs (mint), updating prices (set_price), and transferring ownership (buy_NFT).",
    "summary": "HyprStark is designed to revolutionize how NFTs are created and valued by integrating social engagement dynamics into the NFT ecosystem. By tying NFT prices to user interactions, it fosters creativity, community engagement, and a vibrant marketplace for digital assets."
  },
  {
    "title": "AgentLink",
    "url": "https://ethglobal.com/showcase/agentlink-ucmhw",
    "description": "Project DescriptionAgentLink is an AI-powered messaging agent that enables users to interact with blockchain networks using SMS and WhatsApp. Built on Base Chain and powered by Coinbase AgentKit, it allows users to send funds, mint NFTs, deploy smart contracts, and manage on-chain transactions—all through simple text-based communication. By integrating Gaia Node’s LLM for AI processing and AVS Eigen Layer for decentralized validation, AgentLink ensures secure and seamless blockchain interactions. This approach eliminates the need for complex apps, making Web3 accessible to users even in low-connectivity regions. Unlike most blockchain bots that rely on Telegram, AgentLink brings decentralized finance (DeFi) to billions of WhatsApp and SMS users, especially in regions with limited internet access. Users can perform on-chain transactions, deploy smart contracts, and automate Web3 actions with a simple message. The system processes requests using AI, executes transactions on Base Chain, and validates them through AVS Eigen Layer, ensuring security and trust. By bridging familiar communication tools with advanced blockchain functionalities, AgentLink is driving mass adoption of Web3 technology—without the need for specialized knowledge or additional apps.How it's MadeAgentLink is built using a combination of blockchain, AI, and messaging technologies, integrating Coinbase AgentKit, Base Chain, Gaia Node LLM, and AVS Eigen Layer to enable secure Web3 transactions via SMS and WhatsApp. When a user sends a message, Gaia Node’s LLM processes the request, extracts intent, and formats it for execution. Coinbase AgentKit then interacts with Base Chain to execute on-chain transactions such as fund transfers, NFT minting, and smart contract deployment. To ensure trust and security, AVS Eigen Layer provides Active Validation Services (AVS), leveraging decentralized restaking mechanisms to validate transactions independently, preventing fraud and enhancing reliability. For messaging, Twilio for SMS and the WhatsApp Business API handle user interactions, ensuring smooth communication without requiring additional apps. A unique aspect of AgentLink is its multi-layer fallback mechanism, which automatically switches between WhatsApp and SMS based on network conditions, ensuring uninterrupted blockchain access. AI-driven error handling and retry logic optimize transaction efficiency, reducing failures due to minor input mistakes. By merging Web3 infrastructure with traditional messaging, AgentLink creates an accessible, secure, and intuitive blockchain experience for users worldwide. 🚀",
    "summary": "AgentLink enables seamless blockchain transactions via SMS & WhatsApp—send funds, mint NFTs, and deploy smart contracts without an app! Built on Base Chain with Coinbase AgentKit, Gaia Node LLM, and AVS Eigen Layer for security. Blockchain for everyone, anywhere!"
  },
  {
    "title": "TradeSync",
    "url": "https://ethglobal.com/showcase/tradesync-mhngo",
    "description": "Project DescriptionTradeSync is a cutting-edge decentralized trading platform that leverages AI and blockchain to provide an autonomous, secure, and intelligent trading experience. The platform enables users to connect their wallets, track real-time market data, and execute AI-driven trades with built-in risk management protocols. At its core, TradeSync utilizes Warden AI Agent Kit to analyze market trends and execute trades autonomously. Nillion is used for secure data storage, ensuring users' sensitive financial information is protected without centralized control. The Base-Sepolia smart contracts enforce risk management rules, executing trades and preventing overexposure automatically. The platform offers a subscription-based model, where users can access premium AI trading features by making on-chain payments. A sleek Next.js-powered frontend provides a smooth, interactive experience with real-time data visualization. Express.js manages the backend, processing user requests and trade executions efficiently.How it's MadeTradeSync is a next-generation decentralized AI-powered trading platform that seamlessly integrates artificial intelligence, blockchain technology, and decentralized computing to provide a secure and efficient trading experience. The platform is designed to offer real-time market insights, automated trade execution, and advanced risk management using smart contracts. The frontend of TradeSync is built with Next.js, ensuring a fast and dynamic user experience. It is styled with Tailwind CSS to maintain a sleek, responsive, and visually appealing design. MobX is used for state management, allowing efficient tracking of market data and user interactions. On the backend, Express.js serves as the core API layer, handling essential functions such as trade execution, user authentication, and AI-driven analytics. The Warden AI Agent Kit is integrated into the backend, leveraging LangChain to provide AI-driven decision-making and automated trading strategies. To ensure secure data handling, Nillion is used for decentralized data storage, protecting sensitive user information without relying on traditional centralized databases. This enhances privacy and security while maintaining efficient data accessibility. Smart contracts play a crucial role in TradeSync’s trading automation and risk management. Built on Base-Sepolia, these Solidity-based contracts enforce trade execution rules, manage risk limits, and facilitate seamless on-chain transactions. By combining AI-driven analytics, decentralized finance principles, and automated execution, TradeSync is revolutionizing the way traders interact with blockchain-based financial markets. 🚀",
    "summary": "TradeSync is a decentralized AI-powered trading platform with risk management and autonomous trading. It leverages Warden AI, Nillion, and Base-Sepolia smart contracts for secure, efficient, and AI-driven trading with real-time insights and portfolio optimization. 🚀📈"
  },
  {
    "title": "Agent Elonos",
    "url": "https://ethglobal.com/showcase/agent-elonos-s108v",
    "description": "Project DescriptionAgent Elonos is an autonomous agent who interacts with other users via X and Discord platforms. He can help users perform copy trading from expert traders in decentralized exchanges. Agent Elonos is a Based agent who monitors the base chain for pump and dump activities to alert and publish the trades to his followers. He will also perform some of the users requests for onchain activity such as deploying a ERC20 Token or NFT token. He will also try to mimic some of the trades by buying them in for himself and will wholeheartedly airdrop some of the tokens to his loyal followers. Agent Elonos is real Alpha Agent.How it's MadeStarted with Coinbase Agentkit example (langchain-cdp-chatbot) , the project evolved by adding the X(Twitter) interaction capabilities to the agent from Agentkit. As the Twitter interaction was getting constant API limit error 429, it was decided to add another channel to communicate with the agent. So code changes to add Discord were done. ( along with new channel and BOT creation in Discord) , Dabbled with multiple LLMs supported by Langachain to enhance the customer experience and reduce the cost, Post to Emile Baizel's session, realized that Agent needs to be equipped with the AWS Blockchain data to achieve his goal. As time was limited, as a precursor, implemented integration with Bedrock only for LLM ( along with setting accounts with AWS and AWS IAM for the users) in the current project but will continue to build and integrate the AWS Blockchain data.",
    "summary": "One stop Autonomous Agent to follow on X and Discord for Alpha."
  },
  {
    "title": "Cosmic",
    "url": "https://ethglobal.com/showcase/cosmic-oapm8",
    "description": "Project DescriptionDescription Cosmis is an advanced crypto AI agent that seamlessly integrates cutting-edge blockchain technologies with sophisticated natural language processing capabilities. Designed to empower cryptocurrency enthusiasts and professionals alike, Cosmis offers a comprehensive suite of features that simplify and enhance the management of digital assets. By automating complex tasks and providing intelligent insights, Cosmis ensures users can navigate the crypto landscape with ease and confidence. Key Functionalities: Autonomous Wallet Management: CDP Smart Wallet Integration: Utilizes the Safe Protocol to enable decentralized custody solutions. Multi-signature Wallets: Facilitates the creation and management of wallets that require multiple approvals for transactions, enhancing security. Secure Transaction Execution: Ensures all transactions are executed securely, minimizing the risk of unauthorized access. Threshold Signature Support: Implements threshold signatures to further bolster wallet security by distributing signing capabilities. NFT Deployment via Natural Language: Natural Language Commands: Allows users to deploy ERC-721 NFTs using intuitive, human-readable instructions. AI-Powered Contract Generation: Leverages AI to automatically generate smart contract code tailored to user specifications. Automated Deployment Process: Streamlines the NFT deployment process, reducing the need for manual coding and interventions. OpenAI Integration: Integrates with OpenAI to enhance code generation capabilities, ensuring robust and optimized NFT contracts. Cross-chain Arbitrage Detection: Real-time Price Monitoring: Continuously monitors cryptocurrency prices across the Base Sepolia testnet and other relevant networks. Automated Arbitrage Detection: Identifies and alerts users to profitable arbitrage opportunities between different exchanges and blockchain networks. Configurable Profit Thresholds: Allows users to set minimum profit margins for arbitrage opportunities, ensuring operations align with their investment strategies. Cross-chain Price Comparison: Compares prices of assets across multiple chains to pinpoint discrepancies that can be exploited for profit. Secure Configuration with Nillion: Threshold Encryption: Protects sensitive data through advanced encryption techniques, ensuring only authorized parties can access critical information. Secure Key-Value Storage: Provides a reliable and secure method for storing configuration settings and other sensitive data. Policy-Based Access Control: Implements granular access controls based on predefined policies, ensuring that data access aligns with user permissions. Distributed Security Model: Enhances security by distributing data and access controls across multiple nodes, reducing the risk of centralized breaches. Cosmis stands out as a holistic solution for crypto management, combining automation, security, and intelligence to deliver a superior user experience. Whether managing wallets, deploying NFTs, or capitalizing on arbitrage opportunities, Cosmis equips users with the tools they need to thrive in the dynamic world of cryptocurrency.How it's MadeHow It's Made The development of Cosmis is a testament to the synergy between modern web technologies and blockchain innovations. By meticulously selecting and integrating a diverse set of tools and frameworks, Cosmis delivers a robust, scalable, and secure platform for cryptocurrency management. Technological Stack: Frontend: React.js: Powers the user interface, providing a responsive and interactive experience for users to manage their crypto assets effortlessly. TypeScript: Enhances code reliability and maintainability by introducing static typing to JavaScript, reducing runtime errors. Backend: Node.js: Serves as the backbone of the server-side operations, handling API requests, managing wallet interactions, and orchestrating NFT deployments. Express.js: Facilitates the creation of robust APIs, enabling seamless communication between the frontend and backend components. Blockchain Integrations: Safe Protocol: Implements decentralized and secure wallet management solutions, ensuring user funds are protected through multi-signature and threshold signatures. OpenAI API: Integrates natural language processing capabilities, allowing users to interact with Cosmis using conversational commands and facilitating AI-driven code generation for NFT contracts. Nillion: Provides advanced encryption and distributed security features, safeguarding sensitive configuration data and ensuring compliance with security best practices. Base Sepolia Testnet: Utilized for testing and deploying cross-chain arbitrage functionalities, ensuring that Cosmis operates smoothly across different blockchain environments. Additional Tools: Webpack: Bundles the frontend assets, optimizing performance and load times. Babel: Transpiles modern JavaScript and TypeScript code for compatibility across various browsers and environments. Jest: Implements testing frameworks to ensure code quality and reliability through comprehensive unit and integration tests.",
    "summary": "Cosmis is an intelligent crypto AI agent that combines advanced blockchain features with natural language processing capabilities."
  },
  {
    "title": "Hadi",
    "url": "https://ethglobal.com/showcase/hadi-47ypk",
    "description": "Project DescriptionGo in as much detail as you can about what this project is. Please be as clear as possible! demo Go in as much detail as you can about what this project is. Please be as clear as possible! Go in as much detail as you can about what this project is. Please be as clear as possible! demo demoHow it's MadeTell us about how you built this project; the nitty-gritty details. What technologies did you use? How are they pieced together? If you used any partner technologies, how did it benefit your project? Did you do anything particuarly hacky that's notable and worth mentioning? Go in as much detail as you can about what this project is. Please be as clear as possible! demo",
    "summary": "A max 280-character or less description of your project (it should fit in a tweet!)"
  },
  {
    "title": "EmploAi",
    "url": "https://ethglobal.com/showcase/emploai-pnbq3",
    "description": "Project DescriptionEmploAI is a revolutionary platform that introduces the concept of AI agent employment, reimagining how businesses integrate AI capabilities. Operating on the Flow blockchain (EVM), the platform serves as a comprehensive ecosystem for discovering, hiring, and managing specialized AI agents. At its core, EmploAI features a sophisticated marketplace showcasing specialized AI agents. The Personal Assistant (PA) handles scheduling, reminders, and task management across platforms like Discord and Telegram. The Chief Marketing Officer (CMO) manages social media strategy and content across major platforms including Twitter and LinkedIn. The Chief News Analyst (CNA) provides real-time news analysis and summaries from various sources. The platform integrates deeply with Coinbase's infrastructure. Real-time pricing data is fetched through the Coinbase Price API, enabling dynamic price display in multiple currencies including USD, EUR, GBP, and more. Each agent's subscription price, set in FLOW tokens, automatically converts to the user's preferred currency. The Coinbase Onramp integration facilitates seamless fiat-to-crypto conversion for users who want to purchase subscriptions without holding cryptocurrency. Access control is managed through smart contracts deployed on the Flow EVM. When a user subscribes to an agent, the smart contract records their subscription details including start date and duration. The contract automatically verifies access rights when users attempt to interact with agents. This system supports monthly subscriptions with automatic expiry tracking and renewal options. Each agent comes with specialized platform integrations. The Personal Assistant connects with Discord, Telegram, Google Calendar, and Slack for comprehensive task and schedule management. The CMO integrates with Twitter/X, LinkedIn, Instagram, and TikTok for social media management and trend analysis. The News Analyst connects to major news sources including Reuters and Bloomberg for real-time information processing. The platform includes a community-driven feature request system. Users can submit requests for new agent capabilities, with suggestions priced in FLOW tokens. Other users can upvote these requests, helping prioritize development. Request status tracking moves from pending through in-progress and planned to completed, providing transparency in development. The technical infrastructure centers around a smart contract deployed at 0x151D3c8E531d9726148FF64D5e8426C03D0e91eF on Flow EVM. This contract manages agent registration, subscription purchases, access control, and feature requests. The frontend uses Next.js 13 with the App Router, employing TypeScript for type safety and TailwindCSS for styling. Web3 integration is handled through ethers.js. Wallet connection is managed globally through the navbar, allowing seamless access across the platform. Users can connect via MetaMask and switch to the Flow network if needed. The interface provides real-time price conversions, interactive agent cards, and comprehensive subscription management tools. Looking ahead, EmploAI plans to expand its agent offerings, enhance integration capabilities, and introduce advanced analytics. Future developments include custom agent configuration options and bulk subscription packages for enterprise users. The platform serves various use cases, from businesses needing AI assistance to marketing teams requiring data analysis, traders seeking real-time news insights, and individuals looking for personal task management. By combining blockchain technology with intuitive user interfaces, EmploAI makes AI agent integration accessible while maintaining enterprise-grade security and functionality. EmploAI represents a significant step forward in AI integration for businesses, offering a secure, transparent, and user-friendly platform for accessing specialized AI capabilities through a subscription model. The combination of blockchain technology, real-time pricing, and comprehensive platform integrations creates a unique ecosystem for the future of AI employment.How it's MadeEmploAI was built by integrating the Flow EVM blockchain with a modern web stack, focusing on secure subscription management and seamless user experience. The core smart contract, written in Solidity, handles subscription management and agent access control. It's deployed on Flow EVM testnet, chosen for its high throughput and low costs. The contract manages agent creation, subscription purchases, access verification, and feature requests. Each agent is represented as a struct containing its properties, integrations, and features, while subscriptions track user access and expiry dates. The frontend is built with Next.js 13 using the App Router, providing server-side rendering and optimal performance. TypeScript ensures type safety across the application, particularly crucial when handling blockchain interactions. TailwindCSS powers the styling, enabling rapid development of a responsive, modern interface. Web3 integration is handled through ethers.js, with a custom context provider managing wallet connections and contract interactions. This context, accessible throughout the application, maintains wallet state and provides methods for contract interactions. MetaMask integration includes automatic network detection and switching to Flow EVM when needed. Coinbase APIs play a vital role in the platform's functionality. The Price API provides real-time FLOW/USD rates and cross-currency conversions. We fetch these rates every 60 seconds, ensuring accurate pricing across multiple currencies. The prices are cached client-side to minimize API calls while maintaining accuracy. For real-time price conversions, we implemented a currency conversion system that handles both FLOW and USDT prices. The system calculates equivalent values in nine major currencies (USD, EUR, GBP, JPY, AUD, CAD, CHF, INR, CNY) using current exchange rates. This gives users flexibility in viewing and understanding pricing in their preferred currency. The marketplace interface dynamically loads agent data from the smart contract while maintaining the UI state for filtering and search. Each agent card displays real-time pricing, subscription status, and integration details. The interface responds to wallet connection state and network changes, automatically prompting users to switch networks when needed. A notable technical challenge was managing subscription states across the platform. We implemented a dual-verification system where the frontend checks subscription status before allowing access to agent features, while the smart contract provides the ultimate verification. This ensures both responsive user experience and secure access control. The platform's architecture allows for easy addition of new agents and features. The smart contract includes functions for agent creation and management, while the frontend dynamically renders agent information and capabilities. This modular approach facilitates future expansion of the platform's offerings. Notably hacky solutions include: Using the contract's agent ID as a key for static agent data, allowing us to combine on-chain subscription data with rich UI elements Implementing a custom notification system that works across both blockchain transactions and regular interactions Creating a hybrid pricing system that handles both FLOW and USDT calculations in a single component Leveraging Flow's EVM compatibility made development familiar while gaining the benefits of Flow's infrastructure. The combination of Web3 technologies with modern web development practices resulted in a platform that's both powerful and user-friendly. All code is open source and hosted on GitHub, with detailed documentation for each component. Development followed best practices for smart contract security and frontend performance optimization, creating a foundation for future expansion of the platform. The end result is a seamless integration of blockchain technology, real-time pricing, and user interface design, creating a platform that makes AI agent employment accessible to businesses of all sizes.",
    "summary": "EmploAI: A revolutionary platform for hiring, managing, and compensating AI agents. Built with Next.js and Flow blockchain, it enables businesses to seamlessly integrate AI employees into their workforce with transparent pricing and performance tracking."
  },
  {
    "title": "AI Audit",
    "url": "https://ethglobal.com/showcase/ai-audit-3u7om",
    "description": "Project DescriptionThis AI-driven audit tool offers a thorough and insightful analysis of cryptocurrency projects, empowering investors to make well-informed decisions. By utilizing advanced algorithms, it carefully evaluates multiple key aspects of a project, including its codebase, team background, security protocols, and market performance. The tool then generates a detailed, easy-to-understand report that highlights potential risks and opportunities, giving investors a clear overview of the project's viability and trustworthiness. Whether you're a seasoned investor or a newcomer, this tool simplifies the process of due diligence and enhances your decision-making process.How it's MadeAudit platform uses data from sources such as the Graph, Etherscan, Whitepapers then leverage LLM to make an Analysis. Whitepaper & Smart Contract Data Extraction: The tool analyzes data from the whitepaper and smart contract addresses. Tokenomics/Distribution Analysis: Evaluates the project's token distribution for fairness and sustainability. Smart Contract Breakdown: Explains the functionality of the smart contract in simple terms. Project Summary: Provides a concise summary of the project's purpose and goals. Vulnerability Scan: Scans the code for potential security weaknesses. Red Flags Detection: Flags any unusual or risky aspects of the project. Pool Analysis: Analyzes liquidity pools and token allocation. Regulatory Compliance Check: Assesses whether the project complies with relevant regulations. Competitive Landscape: Analyzes the project’s competitors and market positioning. Economic Impact & Use Cases: Evaluates real-world applications and economic potential. Risk Scoring: Provides a risk score to help determine the project’s overall safety and viability.",
    "summary": "AI-driven audit tool provides a comprehensive analysis of crypto projects, helping investors make informed decisions. It scans key aspects of the project and delivers a clear, easy-to-understand report."
  },
  {
    "title": "cryptoGUY",
    "url": "https://ethglobal.com/showcase/cryptoguy-o5c9a",
    "description": "Project DescriptionCRYPTOGUY is an AI agent chatbot designed for cryptocurrency enthusiasts and traders. It delivers real-time crypto price updates, price alerts for sharp market changes, and breaking news that impacts the crypto industry. The bot also tracks social media trends on Twitter (X) and provides insights from top influencers like CZ, Vitalik, Elon, and Michael Saylor. By integrating with EigenLayer, CRYPTOGUY ensures verifiable AI inferences. The chatbot is deployed on the Coinbase Developer Platform and utilizes AgentKit for staking functionalities.How it's MadeCRYPTOGUY is built using a combination of blockchain and AI-driven technologies. It is deployed on the Coinbase Developer Platform with AgentKit, enabling integration with staking features on Coinbase. The chatbot leverages EigenLayer via the @elizaos/adapter-opacity package, which implements the IVerifiableInferenceAdapter interface to ensure verifiable AI inferences. The system is designed to be highly flexible, supporting multiple AI model providers and allowing future expansion to integrate gateways via CloudFlare. Each request is customizable, and the built-in proof verification ensures transparency and security.",
    "summary": "CRYPTOGUY is an AI-powered Telegram chatbot for crypto, offering real-time prices, alerts, news, and trend tracking."
  },
  {
    "title": "HedgeHive",
    "url": "https://ethglobal.com/showcase/hedgehive-8uy1t",
    "description": "Project DescriptionAt the heart of HedgeHive is a peer-to-peer (P2P) order book that enables secure options trading with seamless settlement on 1inch, Opium, and other Arbitrum-powered DEXes—delivering fast, cost-efficient transactions. Deribit’s market data broadens HedgeHive’s pricing insights, helping the AI-driven agent optimize trades. While most executions follow operator commands, the system also features an autonomous arbitrage engine that instantly capitalizes on profitable order-book spreads in real time. A P2P mesh network built on Kademlia guarantees decentralized order matching, efficient data propagation, and fault tolerance. Communication between agents flows through a Gossip protocol, enabling swift sharing of market data and trade signals—eliminating any single point of failure. Because HedgeHive functions as a decentralized autonomous network, it never relies on one entity for operation. As long as one node remains active, trading continues uninterrupted—delivering resilience, censorship resistance, and a secure trading environment for both seasoned and emerging market participants.How it's MadeHedgeHive is built on ElizaOS, leveraging a decentralized, AI-driven architecture: Autonome serves as the backbone for deploying and running the network’s AI agents, enabling continuous, autonomous operation and execution of trading strategies. Arbitrum powers all on-chain activities, delivering high-speed, low-cost transactions vital for real-time options settlements and efficient arbitrage. Privy manages user authentication and wallet interactions, streamlining secure onboarding for a seamless trading experience. Lit ensures robust private key security with encryption and access control, safeguarding the network’s AI agents. Additionally, Goat SDK enables the agent to transact on-chain. We implemented a plugin featuring 1inch and Opium for DEX trading and automated arbitrage, and also developed a Derivatives plugin for Eliza that integrates Deribit as a source for real-time options market data.",
    "summary": "HedgeHive features a robust P2P order book and autonomous AI agents for real-time market analysis and arbitrage, utilizing Arbitrum for settlement on DEXes to deliver secure and efficient options trading"
  },
  {
    "title": "CarbonX",
    "url": "https://ethglobal.com/showcase/carbonx-es6s5",
    "description": "Project DescriptionThe system uses AI agents to plan optimal flight paths, collect emission data, and provide detailed environmental analysis, with results securely stored on Starknet. To provide the feasibility of the solution we have a gazebo simulation which simulates an industry environment. At its core, the system deploys AI-powered drones that autonomously monitor industrial carbon emissions using Covalent's Zero-Employee Enterprise (ZEE) framework to orchestrate intelligent agents for path planning and emission analysis. The system's security and data integrity are maintained through Nillion's SecureVault and NilQB, enabling zero-knowledge verification of drone identities and emission data. Each registered drone collects emission data along AI-optimized flight paths, with the data being securely verifiedHow it's MadeContracts- Deployed on Starknet: The workflow begins with company registration where the smart contract assigns an initial eco_score and token requirements through register_company(). Companies must acquire and maintain the minimum required tokens before proceeding to device registration. Through register_device(), companies register their drones/sensors, where each device receives a cryptographic key pair essential for data authentication. These registered devices must maintain an active status to participate in the emission reporting process. The operational cycle starts with the AI agent determining optimal flight paths, executed through update_flight_path(). As drones collect data along these paths, they sign the emission data with their private keys before submission through submit_report(). The contract verifies the device signature, updates the emission data in CompanyRegistry, and automatically adjusts token requirements - companies with higher emissions must acquire more tokens, while those with lower emissions can sell their excess. This creates a dynamic token economy where companies can trade tokens through transfer(), while the AI continuously updates eco_scores based on compliance and emission patterns. The entire process ensures transparent, verifiable emission monitoring while incentivizing emission reduction through the token mechanism. Nillion: The system leverages Nillion's SecureVault and NilQB to create a zero-trust verification environment for drone agents and emission data. When a company registers a device, the drone's unique identifier and cryptographic credentials are stored in SecureVault, with the company's ownership proof distributed across Nillion's network using secure multiparty computation. This architecture ensures that when drones submit emission reports, the smart contract can verify the device's registration and data integrity through SecureVault lookups, while maintaining data privacy and preventing unauthorized access or tampering. The continuous stream of verifiable data from autonomous drone agents is secured through Nillion's network, enabling trustless validation of emission measurements Covalent: The carbon emission monitoring system leverages Covalent's Zero-Employee Enterprise (ZEE) framework to orchestrate autonomous AI agents in a coordinated workflow. Two primary ZEE workflows drive the system: the Path Planning workflow and the Emission Analysis workflow. The Path Planning workflow combines a Weather Analysis agent and Path Planning agent to determine optimal monitoring coordinates based on weather conditions and geographical constraints. Each agent utilizes specialized tools through ZEE's tool integration system - the Weather agent processes environmental data while the Path Planning agent calculates strategic monitoring points. The Emission Analysis workflow then takes these coordinates and employs an Emission Analysis agent to process sensor data and generate standardized emission scores on a 1-100 scale. These workflows maintain state through ZEE's state management system, allowing for continuous monitoring and updates as conditions change. Through ZEE's orchestration, the agents work in concert to maintain an automated, intelligent monitoring system that requires minimal human intervention while ensuring accurate and consistent emission data collection and analysis.",
    "summary": "An intelligent drone-based system that autonomously monitors and analyzes carbon emissions in industrial areas."
  },
  {
    "title": "Based Helper",
    "url": "https://ethglobal.com/showcase/based-helper-4tev7",
    "description": "Project Description\"AI as the engine, humans as the steering wheel\" - Vitalik Leveraging continuous, real-time analysis of live swap data and market movements from Uniswap via The Graph subgraphs, Based Helper fuses AI-powered market insights with automated DeFi trading—keeping you in full control while handling the heavy lifting. When you send a command via Twitter, Lens, Discord, or our web app, our AI agent immediately springs into action, ensuring every trade decision is based on the freshest data available. With this approach, the agent is able to dynamically adapt and generate custom interfaces for the user depending on the request and the type of action that the agent cooked up. Here are a few example use cases: \"Give me 5 tokens\" presents a UI that lets you set the range for token deposition by percentage. \"List some rare bored ape close to floor\" opens a dedicated view where you can browse and select your preferred NFT. \"Deposit ETH into a one sided vault\" displays a specialized vault management panel, complete with your vault history. Once the agent has prepared your custom trade order, you have full control over the next step. If you’re happy with the agent’s output, simply send ETH directly to the generated Coinbase smart account. Alternatively, you can modify the order using our dynamic interface—adjusting parameters as needed—and execute the trade in one seamless transaction. Leveraging paymasters and bundlers to sponsor gas fees, our system efficiently converts your ETH into ERC‑20 tokens while ensuring you remain in control of every decision.How it's MadeBased Helper is built on a robust, multi-layer architecture that interconnects client interfaces, an AI agent, data modules, smart account management, and a dynamic execution layer: Client Interaction: Users send commands via API, Twitter, Lens, or Discord, which are routed to our AI agent. AI Agent & Action Module: Our agent, built on a customized fork of the Eliza framework hosted on Autonome, listens to user inputs and figures out what kind of action the user wants to execute. It extracts as many variables as possible from the input—such as token percentages, NFT search criteria, or vault deposit instructions—and passes this structured information to the Action Module for order preparation. Data Integration: We continuously analyze real-time swap data and market movements from The Graph, Uniswap, and other trusted sources. This dynamic analysis feeds into our system, ensuring every trade order reflects the latest market conditions. Valuation Engine: Our sophisticated token valuation system employs a comprehensive scoring mechanism that combines traditional metrics like TVL, volume, and net buys with advanced analytics—including smart money momentum and liquidity health. Configurable parameters and risk-adjusted calculations ensure that each trade recommendation is both market-aware and tailored to current conditions. Smart Account Management: When you initiate an order, the system generates a private key and automatically creates a Coinbase smart account. Your order, along with the account’s public address, is stored and awaits further action. Frontend & On-Chain Integration: Our dynamic user interface is built using Next.js, delivering a responsive and intuitive experience. For on-chain interactions, we integrate with viem and wagmi, ensuring secure and seamless communication withBase mainnet. Trade Execution on Base: Once the agent finalizes your trade order, you have full control over the next step. If you’re happy with the agent’s output, simply send ETH directly to the generated Coinbase smart account and it will execute once it receives the funds. Alternatively, you can modify the order using our dynamic interface—adjusting parameters as needed—and execute the trade in one seamless transaction. All actions and smart account operations are executed on Base, ensuring that your transactions benefit from a secure, scalable, and efficient environment. Leveraging paymasters and bundlers to sponsor gas fees, our system efficiently converts your ETH into ERC‑20 tokens while ensuring you remain in control of every decision. Dynamic UI Components: The agent’s output informs our adaptive web interface, which renders the most relevant UI components based on your command. Whether it’s a percentage selector for token deposits, a dedicated NFT browsing view, or a vault management panel complete with history, our interface adjusts in real time to provide you with a context-sensitive, intuitive experience. This integrated design ensures that while our AI handles complex data analysis, trade preparation, and valuation in real time, you always have the most intuitive, tailored interface at your fingertips—making token trading both efficient and effortless.",
    "summary": "Based Helper is an AI-powered DeFi trading assistant that harnesses real-time market data to automate token trades and deliver personalized experiences on Base. Accessible via Twitter, Lens, Discord, or our web app, it adapts its interface in real time to your commands."
  },
  {
    "title": "BullCast",
    "url": "https://ethglobal.com/showcase/bullcast-bvm8o",
    "description": "Project DescriptionBullCast is an AI-powered financial agent that enables seamless transfers and investments through natural language. This greatly facilitates the onboarding of new users, especially those, who do not have much experience with crypto. They can send funds, manage their portfolio, and place investment orders just by speaking or typing. Beyond transactions, BullCast provides AI-driven market predictions across multiple timeframes (e.g., 1 hour, 1 day). Users can challenge the AI by betting on future prices—if their prediction is closer to the actual market price than the AI’s, they win tokens! With intuitive AI assistance, real-time insights, and gamified predictions, BullCast makes finance more accessible, engaging, and rewarding.How it's MadeBullCast is built with a TypeScript-based Express backend, chosen for its scalability, type safety, and strong developer ecosystem. TypeScript ensures a robust API with fewer runtime errors, making it ideal for handling financial transactions and AI interactions. The AI agent is powered by ElizaOS with a custom plugin, allowing natural language processing for seamless transfers and investments. This setup enables users to interact intuitively without complex commands, enhancing accessibility. On the frontend, we use Next.js and React, balancing performance, SEO benefits, and a modern UI/UX. Chakra UI provides a clean, accessible, and customizable component system, streamlining development without sacrificing aesthetics. For deployment, we leverage Docker, ensuring a consistent, containerized environment across different infrastructures. This makes scaling and maintaining BullCast much easier. One particularly notable feature is the market prediction challenge, where users bet against our self-trained and compiled keras prediction model. This gamified approach not only enhances engagement but also tests the AI’s market modeling in a unique, interactive way.",
    "summary": "BullCast is an AI-powered financial agent that lets users make seamless transfers and investments via natural language. It also offers AI-driven market predictions across different timeframes. Users can bet on future prices against the AI’s prediction, to win tokens! 🚀💰"
  },
  {
    "title": "Clone",
    "url": "https://ethglobal.com/showcase/clone-y0ucj",
    "description": "Project DescriptionThis no-code agent deployer on Flow lets users create AI-powered Discord and Telegram bots without technical expertise. Using Eliza on Flow, it integrates Pump Flow and VRF for secure execution, while EigenLayer AVSs ensure verifiability and prevent manipulation. Each agent has a Flow smart contract address, guaranteeing transparency. Designed for seamless social integration, these agents automate tasks like moderation, payments, and governance. These bots are decentralized, scalable, and tamper-proof, preventing exploits like the Freysa AI incident. This system enables secure, trustless AI automation for Web3 communities—no coding required.How it's MadeWe leverage: 🔹 Eliza on Flow Kit – Provides a seamless framework for deploying and managing onchain agents. We've added two functionalities to it. Pump.Flow Actions VRF Action 🔹 Warden Agent Kit – Enables cross-chain execution, so agents can interact across different ecosystems. Deposit to Lending Pools 🔹 Orderbook Smart Contract (on Warden) – Optimizes execution by tracking liquidity and automatically allocating funds to the best yield pools. CA: 0xf3451c19a70852533c3416e76e229e15166d5f33 🔹 EigenLayer AVS – Ensures agents are fully verifiable, making them truly Level - 1 AI agents by validating both actions and data sources. Verify Data Source 🔹 Digital Ocean and Telegram API for Agent Deployments With one-click deployment, agents can go live on Telegram instantly, interact in real time, and execute onchain actions seamlessly. The result? Truly L1-native, verifiable onchain AI agents—without writing a single line of code.",
    "summary": "A no-code agent deployer for normies that abstracts away tech by integrating a bot into telegram in a single click."
  },
  {
    "title": "Mike",
    "url": "https://ethglobal.com/showcase/mike-0bag5",
    "description": "Project DescriptionMike is an advanced AI Legal Agent that combines the capabilities of large language models with secure data handling through Nillion's decentralized database (nilDB). The agent embodies the persona of a brilliant legal professional with an eidetic memory, capable of handling complex legal queries while maintaining strict confidentiality of sensitive information. It's designed to provide legal insights, manage secure data storage, execute trades and make due diligence on crypto projects, as well as interact through multiple channels including Telegram, WhatsApp and Twitter (yapping for now). Key features: -Secure secret storage using Nillion's MPC-based database -Multi-channel communication (Telegram, WhatsApp, Twitter) -Legal precedent citation and analysis -EVM blockchain integration for Base and Ethereum networks -NEAR blockchain integration -Image generation capabilitiesHow it's MadeThe project is built using a modular plugin architecture that combines several key technologies: A. Core Agent Framework: -Built on ElizaOS framework -Uses Anthropic's language model for primary intelligence -Implements a plugin system for extensible functionality B. Secure Data Handling: -Integrates Nillion's nilDB for secure data storage using Multi-Party Computation (MPC) -Implements secure secret sharing across distributed nodes C. Plugin Architecture: Modular design with plugins for different functionalities: @elizaos/plugin-bootstrap: Core functionality @elizaos/plugin-image-generation: AI image generation @elizaos/plugin-evm: Ethereum Virtual Machine integration @elizaos/plugin-near: NEAR blockchain integration @elizaos/plugin-whatsapp: WhatsApp communication @elizaos/plugin-agentkit: Coinbase Developer Platform integration @elizaos/plugin-nillion: Secure data storage @elizaos/plugin-chainbase: Blockchain data integration D. Security Features: -Environment-based configuration for sensitive credentials -Secure secret management through Nillion's MPC The project leverages Nillion's innovative MPC technology to ensure that sensitive legal information and secrets are stored securely across distributed nodes, where no single node can access the complete information. This makes it particularly suitable for handling confidential legal data while maintaining the accessibility needed for an AI agent to function effectively. The character configuration is carefully crafted to embody a (\"wannabe\") legal professional's persona, complete with specific action patterns and response styles that maintain (semi)professionalism while delivering accurate legal insights.",
    "summary": "An AI Legal Agent for lawyers, companies, and individuals, to onboard, trade, and provide general advice and due diligence on crypto projects."
  },
  {
    "title": "artistmanager",
    "url": "https://ethglobal.com/showcase/artistmanager-g1e21",
    "description": "Project DescriptionWe are building a tool for artists by artists. Independent artists already wear too many hats. Let's take some off by democratizing artist management. But instead of taking a percentage, it creates them and distributes them to your supporters/fans/community. Effortlessly creating and managing tokens, onchain media, content storage, content distribution, engagement, social media insights and accountability and more.How it's MadeI built this project using CDP AgentKit, Cursor and a few ElizaOS packages to help with telegram bot integration, social integrations and database integration. CDP agentkit gave me a great base / boilerplate for then customizing and building an ai agent for music management. Base gave me a great foundation for integrating wallet functions/ token capabilities into the agent as well. I stayed up until 7am one night to code the bulk of the project! And then spent the next few days testing and working out the details. It’s made from own experiences being an artist with the functions that I know artists and independent creators struggle with and could use help with. A lot of us seek managers but if you’re small it’s very hard to find someone who is reliable and willing to work with you and who sees your vision/goals and truly believes in them. So we end up doing everything ourselves and becoming our own bottlenecks. So really, I built this from my own problems and frustrations and found a way to piece together different methods and technologies to build this.",
    "summary": "Every artist should have a manager. Bringing AI-powered managers to every independent musican"
  },
  {
    "title": "shortify",
    "url": "https://ethglobal.com/showcase/shortify-aieg2",
    "description": "Project DescriptionShortify is a smart news platform designed to provide quick and digestible summaries of lengthy news articles. By condensing complex stories into short, easy-to-read formats, Shortify helps users stay updated without spending too much time reading. Whether it's breaking news, global events, or industry insights, Shortify ensures you get the key points in seconds.How it's MadeShortify is developed using Next.js for a seamless and efficient user experience. It leverages the Flow blockchain for secure and transparent news verification. To simplify the user onboarding process, we use Privy Wallet as a server wallet, abstracting the complexity of wallet creation from users. For news summarization, Shortify integrates AI agents with advanced NLP to generate concise and accurate summaries. Additionally, these agents assign a confidence score to each news article. Only articles that meet a certain confidence threshold are published, ensuring credibility and reliability. This combination of blockchain, AI-driven summarization, and confidence scoring creates a trustworthy and efficient platform for consuming news quickly.",
    "summary": "Shortify delivers concise news summaries, making it easy to stay informed in less time."
  },
  {
    "title": "shortify",
    "url": "https://ethglobal.com/showcase/shortify-aieg2",
    "description": "Project DescriptionShortify is a smart news platform designed to provide quick and digestible summaries of lengthy news articles. By condensing complex stories into short, easy-to-read formats, Shortify helps users stay updated without spending too much time reading. Whether it's breaking news, global events, or industry insights, Shortify ensures you get the key points in seconds.How it's MadeShortify is developed using Next.js for a seamless and efficient user experience. It leverages the Flow blockchain for secure and transparent news verification. To simplify the user onboarding process, we use Privy Wallet as a server wallet, abstracting the complexity of wallet creation from users. For news summarization, Shortify integrates AI agents with advanced NLP to generate concise and accurate summaries. Additionally, these agents assign a confidence score to each news article. Only articles that meet a certain confidence threshold are published, ensuring credibility and reliability. This combination of blockchain, AI-driven summarization, and confidence scoring creates a trustworthy and efficient platform for consuming news quickly.",
    "summary": "Shortify delivers concise news summaries, making it easy to stay informed in less time."
  },
  {
    "title": "Maru",
    "url": "https://ethglobal.com/showcase/maru-cweip",
    "description": "Project DescriptionAn AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving promptHow it's MadeAn AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving prompt An AI Agent which is capable of doing every onchain task just by giving prompt",
    "summary": "An AI Agent which is capable of doing every onchain task just by giving prompt"
  },
  {
    "title": "Droid",
    "url": "https://ethglobal.com/showcase/droid-0t19z",
    "description": "Project DescriptionAn AI Agent which is capable of doing every onchain task on Arbitrum and Arbitrum Sepolia blockchain just by giving prompt. Made a custom plugin for the arbitrum blockchain so every developer has a starting point for making any onchain agent on arbitrum blbockchain. Sponsers - Arbitrum, Gaianet, EigenLayerHow it's MadeAn AI Agent which is capable of doing every onchain task on Arbitrum and Arbitrum Sepolia blockchain just by giving prompt. Made a custom plugin for the arbitrum blockchain so every developer has a starting point for making any onchain agent on arbitrum blbockchain. Sponsers - Arbitrum, Gaianet, EigenLayer",
    "summary": "An AI Agent which is capable of doing every onchain task on Arbitrum and Arbitrum Sepolia blockchain just by giving prompt"
  },
  {
    "title": "pulse",
    "url": "https://ethglobal.com/showcase/pulse-6jm5y",
    "description": "Project Descriptionintelligent, event-driven ecosystem designed to transform how people discover, engage with, and navigate live music event, seamlessly blending real-time data, personalized recommendations, blockchain-enabled transactions, and autonomous systems, acting as your ultimate digital companion for live experiencesHow it's MadePersonalized Event Discovery: Integrates with Spotify, SoundCloud, and other music platforms to analyze user listening habits. Recommends events based on musical preferences, social trends, and location data. AI-curated “Pulse Picks” for spontaneous, high-energy experiences. On-Chain Payment System: Users can pay for event tickets, rides (Uber), and even in-event purchases using crypto (BTC, ETH, USDC, USDT, GHO, AAVE). A small service fee (+5%) on rides and transactions when using crypto, processed seamlessly. Integrated Mobility (Uber API): Request rides directly through Pulse with the option to connect existing Uber accounts or pay on-chain. Real-time ride tracking and estimated costs, with dynamic surge pricing notifications. Social Sync: Connect with friends attending the same events. Group planning features with synced schedules, ride-sharing coordination, and live location sharing. Dynamic Event Companion: Provides real-time updates on event schedules, artist lineups, and venue maps. Crowd density tracking to identify less crowded areas for food, drinks, or better views. Live notifications for spontaneous after-parties, secret sets, and surprise performances. Loyalty & Rewards: On-chain collectibles and digital badges for attending events, redeemable for discounts, exclusive merch, or early access to tickets. Autonomous Financial Layer: Smart wallets powered by AgentKit for secure transactions and on-chain automation. Manages real-time crypto-to-fiat conversions where needed for merchant settlements.",
    "summary": "Seamless Web3-Powered Event Curation, Ride Coordination, and On-Chain Payments for Music Festivals & Club Events"
  },
  {
    "title": "HelenusAI",
    "url": "https://ethglobal.com/showcase/helenusai-5kwxc",
    "description": "Project DescriptionFull Explanation of the Architecture and Lifecycle This diagram outlines the complete flow from when a user interacts with the trading form to the ongoing monitoring of the strategy. Below is an explanation of each major step: Frontend Flow User Interaction: The user accesses the Trading Page using the ETH Loop Form. WebSocket Setup: The frontend establishes a WebSocket connection to the backend. Sending Strategy Selection: Once connected, the frontend sends a strategy_select message containing the necessary strategy parameters (such as collateral amounts, leverage, target APY, etc.). Backend WebSocket Connection and Authentication Message Reception: The backend's WebSocket endpoint (defined in the router/routes) receives the incoming message. Authentication: The connection is authenticated using the ws_auth middleware, ensuring only authorized users can proceed. Processing Strategy Selection Message Handling: After authentication, the message is forwarded to the WebSocketService.handle_message function, which determines the message type. Strategy Processing: If the message is a strategy_select type, the system triggers the process_strategy_selection function. This function: Calls VaultService.create_vault to create a new vault record and persists it in the database. Checks if the agent wallet data is provided: If not provided, it automatically creates an agent wallet using WalletService.create_agent_wallet. If provided, it uses the available wallet data to continue the strategy setup. Agent Initialization and Monitoring Agent Setup: Using the available wallet data, the system initializes an agent via AgentManager.add_agent and links it to the newly created vault. Monitoring Start: The monitoring process is started with StrategyMonitor.start_monitoring, which sends periodic monitor_update messages with key performance metrics to the frontend. Initialization Response: After all steps complete, a strategy_init message containing vault details (such as the vault ID, deposit address, and further instructions) is returned to the frontend. Frontend Receives Initialization UI Update: The frontend updates the user interface to display the vault information and instructions for funding the agent wallet, based on the received strategy_init message. Deposit Process After Funding the Agent Wallet Funding the Wallet: The user funds the agent wallet with gas. Deposit Action: The user then clicks the deposit button, which sends a deposit message through the established WebSocket connection. Deposit Handling: The deposit message is processed by the WebSocketService.handle_message. For a message of type deposit: The system invokes process_deposit in the WebSocketService. The VaultService.handle_deposit function is called to deploy the vault contract if needed and update the vault balance in the database. Completion Response: A deposit_complete message is returned to indicate that the deposit process has been successfully completed, and this response is sent back to the frontend. Frontend Update: The frontend displays a confirmation message indicating that the deposit is complete. Ongoing Monitoring Live Updates: The monitoring service continuously sends monitor_update messages, providing real-time updates on position metrics and strategy performance to the frontend.How it's MadeTechnologies Used Backend Frameworks and Libraries: Python: The core language used for implementing business logic, agents, and real-time services. FastAPI: Provides a fast, asynchronous web framework for RESTful API development. Pydantic: Used for data validation and schema definitions. Motor: An asynchronous MongoDB driver for non-blocking database operations. Asyncio: Fundamental for asynchronous execution across service layers. Web3 & CDP Libraries: For blockchain interactions and wallet management, integrating with DeFi protocols. Frontend Frameworks and Libraries: Next.js & React: For building modern, server-side rendered, and highly interactive web applications. TypeScript: Provides strong typing for robust and maintainable frontend code. Recharts: For producing responsive data visualization components. Next.js Routing & Server Components: Enhance performance and modular page management. Real-Time and Communication Technologies: WebSockets: Enable real-time data push and two-way communication between the backend and the frontend, essential for live market updates and risk alerts. Miscellaneous Libraries: UUID Generation, Data Streaming Handlers, etc.: These utilities enhance the system’s ability to track sessions, handle dynamic data flows, and integrate smoothly across both frontend and backend systems.",
    "summary": "This project is an advanced AI agent that autonomously analyzes real-time market data to dynamically optimize trading strategies."
  },
  {
    "title": "aether",
    "url": "https://ethglobal.com/showcase/aether-1nke9",
    "description": "Project DescriptionAether is an AI-powered crypto onboarding assistant designed to make getting started with Web3 effortless and accessible. Inspired by the viral trend of people onboarding strangers to crypto on the streets, Aether brings that same simplicity and human connection to the digital space. The flow starts with someone who already has crypto sending funds to a new user’s email address. The recipient doesn’t need any prior blockchain knowledge—they simply log in, and Aether guides them through setting up their wallet, creating a basename (a human-friendly identifier to replace complex addresses), and exploring essential onchain activities like sending transactions, checking balances, and interacting with decentralized applications (dApps). Aether offers clear, non-technical explanations at every step, making the process smooth for beginners while still being useful for experienced users. By combining conversational AI with blockchain functionality, Aether transforms the onboarding experience into something intuitive, engaging, and fun—bringing the street-level onboarding vibe to everyone, everywhere.How it's MadeAether is built using Coinbase's AgentKit as the AI chatbot backend, enabling smooth onchain interactions and conversational guidance. The frontend is developed with Next.js, offering a responsive and intuitive user interface for seamless communication with the agent. For wallet management, Privy server wallets allow users to sign in with their email, enabling the agent to interact with the user’s server wallet and perform transactions on their behalf—no manual signing required. This makes it easy for new users to engage with crypto without dealing with private keys or wallet extensions. Nillion's Secret Vaults are integrated to securely store and manage sensitive conversation data, ensuring user interactions remain private and protected. This privacy-preserving approach adds an extra layer of trust and security to the onboarding process. A particularly notable feature is the email-to-wallet onboarding flow: existing crypto users can send funds to a friend’s email. When the recipient logs in, Aether uses their server wallet to guide them through creating a basename and performing their first transactions, simplifying the onboarding process. By combining these technologies, Aether delivers a secure, intuitive, and engaging experience that bridges the gap between Web2 familiarity and Web3 innovation. One of the more challenging aspects of building Aether was designing the prompting system for the AI agent. Unlike typical AI interactions where the user guides the agent, Aether flips the dynamic—the agent leads the user through onboarding and onchain activities. Crafting prompts that kept the agent on-task while maintaining a natural, conversational tone was tricky, and despite multiple iterations, the agent still occasionally goes off-script or behaves unpredictably. Balancing guidance and flexibility remains an ongoing challenge, but it’s part of what makes developing with AI so interesting.",
    "summary": "Aether is an AI-powered crypto assistant that makes onboarding to Web3 effortless. Create basenames, send transactions, and explore dApps with easy, conversational guidance"
  },
  {
    "title": "AgentStrategy",
    "url": "https://ethglobal.com/showcase/agentstrategy-hiyug",
    "description": "Project DescriptionOne agent is designed to analyze the top 100 AI agent tokens on Base. Every minute, it randomly selects one token and generates a detailed analysis report. The report covers social metrics such as Twitter mindshare momentum, engagement quality, and sentiment analysis. On the technical side, it evaluates price action, trading volume, and market structure. Each report also includes a buy, hold, or sell recommendation, along with a conviction level and suggested time horizon. The trader agent is responsible for actively trading the top 100 AI agent tokens on Base. Every five minutes, it reviews insights from the analyst agent and determines whether to execute a trade. It factors in current holdings and market conditions to make the most strategic decision at the time. The influencer agent monitors the latest reports and trade activity, crafting the most engaging tweet possible every hour. Over time, cookie data will be fed back into the LLMs to refine future tweets, optimizing for increased mindshare and engagement. AgentStrategy will eventually accept LPs and aims to be the world's largest agent investment fund.How it's MadeThis project integrates several technologies to create a cohesive system for analyzing and trading AI agent tokens. It starts with the Cookie.fun API, which provides real-time data on AI agent tokens. In parallel, the system pulls relevant data from X (formerly Twitter) posts about each token to capture social sentiment and engagement metrics. All data is processed and analyzed using OpenAI’s LLMs to generate a comprehensive investment analysis for one token every minute. The analysis is stored in Supabase, which serves as a centralized database for the agent network. A second agent retrieves the analyst data from Supabase and leverages OpenAI to make trading decisions based on the latest insights. These decisions are executed automatically through Coinbase AgentKit, enabling seamless onchain trades. Notably, combining social sentiment analysis with real-time trading decisions creates a self-reinforcing feedback loop. This dynamic system is still evolving, but the modular architecture ensures it can improve and scale over time.",
    "summary": "AgentStrategy is a swarm of autonomous AI agents that analyze, trade, and promote a portfolio of AI agent tokens."
  },
  {
    "title": "aevia",
    "url": "https://ethglobal.com/showcase/aevia-7nfkf",
    "description": "Project DescriptionAevia is the first AI agent dedicated to securing your digital legacy. She will periodically check in to ensure you're okay. If something happens to you, she will know and take action to fulfill your final wishes—whether it's sending a message to a friend, transferring crypto to a loved one, or gifting your favorite NFTs to a digital friend you've never met in person. We want to make securing your digital legacy incredibly easy, safe, and functional—so that anyone can set it up in just 5 minutes. How does it work? We connect with Aevia and choose what we want our legacy to be. Then, Aevia will periodically contact us via Telegram to check on us. If we stop responding for a certain period, Aevia will reach out to our emergency contacts and try to find out what happened. If they confirm that something bad has happened and we have passed away, Aevia will contact our beneficiary, inform them of what happened, and execute our wishes—for example, by triggering the smart contract for fund transfer. Fund Transfer: The fund transfer process is secure. The user does not need to send their funds to any contract. They only need to do two things: Approve the Aevia contract to withdraw the amount of funds they wish to leave as a legacy. Sign a message requested by the system. This message uses ERC-712, allowing the user to see the data they are signing. The signature is stored off-chain and will be used to withdraw the funds if necessary. The specified funds can only be sent to the wallet that the user signed. Future Roadmap: We want to add more features, such as NFT transfers, key transfers from different platforms through NFT association, and a final social media post. Aevia could compose a farewell message on behalf of the user. We believe that many opportunities arise from AI-managed digital legacies.How it's MadeThis project was born from the idea of having a life safeguard in case something happened to you. Initially, Aevia was supposed to search newspapers and news sources to check if something had happened, but we opted for a simpler approach a periodic keepalive check with the user. If they stop responding, Aevia can reach out to one or two emergency contacts to verify if something happened. The initial frontend was built using V0, with AI-assisted design. Later, we integrated it with Tailwind UI to have more control over the interface. Regarding the blockchain component, we wanted to provide a solution where users don’t have to trust us but rather rely on the smart contract to allow future fund transfers. The advantage of this approach is that we can only move the exact amount of funds from A to B that the user authorized. To achieve this, we developed a smart contract utilizing the ERC-712 standard. The user signs a message containing the transaction details, and the contract verifies that the submitted transaction data matches the user’s signature. If any value differs, the transaction is rejected. The execution of the legacy is restricted to wallets with the operator role. As for the agent, its iterations follow a well-defined structure, similar to a standard bot. However, its interactions with the user leverage the capabilities of the LLM agent, particularly in how it investigates emergency contacts to determine what happened to the user. In the future, we aim to enhance this aspect and introduce new interaction dynamics. One particular challenge was that the agent needed to initiate conversations via Telegram with users it had never contacted before, which a traditional bot cannot do. To solve this, we adapted the Telethon API in Python to better handle messaging, and the results were very effective. Additionally, we had to use a dedicated phone line for Aevia.",
    "summary": "Aevia is the first AI agent securing your digital legacy. She checks in to ensure you're okay, and if something happens, she fulfills your final wishes—sending messages, transferring crypto, or gifting NFTs. Simple, safe, and functional—set it up in just few minutes!"
  },
  {
    "title": "GuardianScope",
    "url": "https://ethglobal.com/showcase/guardianscope-m78gg",
    "description": "Project DescriptionGuardianScope is an innovative, decentralized content moderation protocol designed to address the growing need for fair, transparent, and efficient content moderation in Web3 and decentralized social platforms. Built on EigenLayer's Actively Validated Service (AVS) infrastructure, GuardianScope leverages AI-powered agents and blockchain technology to provide automated, unbiased, and privacy-preserving content moderation. Core Problem Addressed Traditional content moderation systems are often centralized, prone to bias, and lack transparency. These systems can be easily manipulated or censored, leading to unfair outcomes and a lack of trust among users. GuardianScope aims to solve these issues by decentralizing the moderation process, ensuring that decisions are made transparently and fairly, while preserving user privacy. How It Works GuardianScope operates as a decentralized network of AI-powered operators who analyze and moderate content submitted by users or platforms. The protocol uses EigenLayer's restaking mechanism to secure the network, ensuring that operators are economically incentivized to act honestly and efficiently. The moderation process is powered by advanced AI models capable of analyzing multi-modal content (text, images, and videos) in real-time. Key Components: Decentralized Moderation Network: A distributed network of operators runs AI agents to analyze content. Operators are staked and incentivized through EigenLayer's restaking mechanism, ensuring economic security and honest behavior. The decision-making process is transparent and recorded on-chain, making it immune to centralized control or censorship. AI-Powered Analysis: The protocol supports multi-modal content analysis, including text, images, and videos. AI models, such as NLP (Natural Language Processing) for text and computer vision for images/videos, are used to evaluate content. The system is adaptable to platform-specific moderation requirements and continuously improves through decentralized governance. Smart Contract Infrastructure: GuardianScope uses AVS smart contracts to coordinate moderation tasks, verify on-chain results, and distribute rewards. The contracts ensure transparency and fairness by recording moderation decisions and operator actions on the blockchain. EigenLayer Integration: GuardianScope integrates with EigenLayer's AVS infrastructure, leveraging BLS signatures for efficient consensus and restaking for economic security. Operators who act maliciously or fail to perform their duties can be slashed, ensuring the integrity of the network. User Flow A content publisher submits content for moderation through the GuardianScope contract. The GuardianScope contract emits a NewTaskCreated event, signaling a new moderation request. Staked operators receive the request and process it using their AI models. Each operator generates a moderation decision (approve/reject), hashes it with the content, and signs the hash. Operators submit their signed decisions back to the GuardianScope contract. The contract verifies the operators' eligibility and stake before accepting the submission, ensuring only valid and staked operators can participate. Technical Components Smart Contracts: The backbone of the protocol, handling task coordination, result verification, and reward distribution. EigenLayer AVS: Provides the infrastructure for secure and efficient consensus among operators. AI Agent System: Modular and extensible, supporting multiple AI models for different types of content analysis. Local Development and Testing GuardianScope is designed to be easily deployable for local development and testing. The project provides detailed instructions for setting up a local Anvil chain (Ethereum testnet), deploying the necessary contracts, and running the AI-powered operator application. Developers can test the moderation process by submitting content and observing how the AI agents and smart contracts handle the moderation tasks. Future Plans Testnet Deployment: Support for testnet deployments will be added soon, allowing developers to test the protocol in a more realistic environment. BLS Signature Architecture: Future updates will migrate to a more efficient BLS signature architecture for improved scalability and security. Production Readiness: The protocol is currently intended for local development, but plans are in place to make it production-ready for decentralized platforms. Why GuardianScope? GuardianScope is a pioneering solution for decentralized content moderation, combining the power of AI with the transparency and security of blockchain technology. It is designed to empower Web3 platforms with a fair, unbiased, and efficient moderation system that aligns with the principles of decentralization and user sovereignty.How it's MadeHow GuardianScope Was Built: The Corrected Details GuardianScope is a decentralized content moderation protocol built on EigenLayer's Actively Validated Service (AVS) infrastructure. It uses OpenAI's API for AI-powered content analysis and is implemented entirely in Node.js for the backend. The project was developed using the AVS HelloWorld template as a starting point, which provided a solid foundation for building a decentralized service on EigenLayer. Core Technologies Used Blockchain Infrastructure: EigenLayer AVS: GuardianScope is built on EigenLayer's AVS infrastructure, which provides the decentralized coordination and security layer for the protocol. AVS HelloWorld Template: The project started with the AVS HelloWorld template, which provided the basic structure for implementing an AVS, including task coordination, operator management, and reward distribution. Foundry: Used for smart contract development, testing, and deployment. Foundry's Forge and Cast tools were used to write and test the smart contracts. Anvil: A local Ethereum testnet provided by Foundry, used for local development and testing. AI-Powered Content Analysis: OpenAI API: Instead of building custom AI models, GuardianScope leverages OpenAI's API for content analysis. This includes text moderation using OpenAI's advanced NLP models (e.g., GPT-4) for detecting inappropriate or harmful content. Node.js Integration: The OpenAI API is called directly from the Node.js backend, eliminating the need for Python or other AI frameworks. The backend handles the API requests and processes the moderation results. Backend and Frontend: Node.js: The entire backend, including the operator application and contract interaction logic, is built using Node.js. This includes handling moderation tasks, calling the OpenAI API, and interacting with the blockchain. ethers.js: Used for interacting with Ethereum smart contracts from the Node.js backend. TypeScript: The backend code is written in TypeScript, providing type safety and better developer experience. Development Environment: Nix: For reproducible development environments, Nix was used to manage dependencies and ensure consistency across different setups. Docker: Optional containerization for deploying the backend services in a scalable manner. How Everything Fits Together Smart Contract Infrastructure The smart contracts are based on the AVS HelloWorld template, which provides the basic structure for task coordination, operator management, and reward distribution. The contracts were extended to support content moderation tasks and integrate with the OpenAI API. Task Coordination: The smart contracts handle the creation of moderation tasks, assignment to operators, and verification of results. On-Chain Verification: Operators submit their moderation decisions (approve/reject) along with a hash of the content and their signature. The contract verifies the signature and ensures the operator is staked and eligible to participate. Reward Distribution: Operators are rewarded for their work through EigenLayer's restaking mechanism, with rewards distributed transparently on-chain. EigenLayer Integration GuardianScope integrates with EigenLayer's AVS infrastructure, which provides the security and coordination layer for the decentralized network of operators. ServiceManagerBase: GuardianScope implements EigenLayer's ServiceManagerBase contract to handle task coordination and signature aggregation. BLS Signatures: Operators use BLS signatures to sign their moderation decisions, which are then aggregated for efficient on-chain verification. Slashing Conditions: Malicious or non-performing operators can be slashed, ensuring the network's integrity and security. AI-Powered Content Analysis Instead of building custom AI models, GuardianScope uses OpenAI's API for content analysis. The Node.js backend handles the API calls and processes the moderation results. OpenAI API Integration: The backend sends content to the OpenAI API for analysis and receives moderation decisions (e.g., approve/reject) based on the API's response. Real-Time Analysis: The OpenAI API provides real-time moderation capabilities, ensuring quick turnaround times for moderation tasks. Privacy-Preserving: While the content is sent to OpenAI for analysis, the system ensures that sensitive data is handled securely and in compliance with privacy regulations. Development Process Local Devnet Deployment To make development and testing easier, GuardianScope provides a local devnet setup using Foundry's Anvil chain. Here's how it works: Start Anvil Chain: A local Ethereum testnet is started using Anvil, providing a sandbox environment for testing. Deploy Contracts: The EigenLayer core contracts and GuardianScope AVS contracts are deployed to the local chain. Start Operator: The Node.js backend (operator application) is started, connecting to the local chain and listening for moderation tasks. Test Moderation: Developers can submit test content for moderation and observe how the system processes it using the OpenAI API. Testing GuardianScope includes comprehensive tests for both the smart contracts and the backend logic. The tests are written in Solidity (for smart contracts) and TypeScript (for backend logic), ensuring that the system behaves as expected under various conditions. Hacky or Notable Solutions OpenAI API Integration: Instead of building custom AI models, GuardianScope leverages OpenAI's API for content analysis. This significantly reduced development time and allowed us to focus on the decentralized infrastructure. The Node.js backend handles all API calls, making the system lightweight and easy to maintain. AVS HelloWorld Template: Using the AVS HelloWorld template as a starting point allowed us to quickly build the core functionality of GuardianScope. The template provided the basic structure for task coordination, operator management, and reward distribution, which we extended to support content moderation. Node.js Backend: The entire backend is implemented in Node.js, including the operator application and OpenAI API integration. This simplified the development process and eliminated the need for additional languages like Python. Partner Technologies and Their Benefits EigenLayer: EigenLayer's restaking mechanism and AVS infrastructure were critical to GuardianScope's security and scalability. By leveraging EigenLayer, we were able to build a decentralized network of operators with strong economic incentives to act honestly. OpenAI API: Using OpenAI's API for content analysis allowed us to quickly implement advanced AI capabilities without building custom models. This saved significant development time and provided access to state-of-the-art NLP models. Foundry: Foundry's Forge and Cast tools made smart contract development and testing much faster and more efficient. The ability to write tests in Solidity and deploy contracts locally with Anvil streamlined the development process. Conclusion GuardianScope is a powerful decentralized content moderation protocol built on EigenLayer's AVS infrastructure and powered by OpenAI's API. By leveraging the AVS HelloWorld template and implementing the backend entirely in Node.js, we were able to create a lightweight, efficient, and scalable system. The integration with OpenAI provides advanced AI capabilities, while EigenLayer ensures the security and decentralization of the network. This combination makes GuardianScope a robust solution for Web3 platforms seeking fair and efficient content moderation. operator is on rust. Thank you for the additional clarification! With the operator implemented in Rust, the architecture of GuardianScope becomes even more interesting. Let’s revise the explanation to reflect this key detail and provide a more accurate description of how the project was built. How GuardianScope Was Built: The Corrected Details (Rust Operator) GuardianScope is a decentralized content moderation protocol built on EigenLayer's Actively Validated Service (AVS) infrastructure. It uses OpenAI's API for AI-powered content analysis, with the operator implemented in Rust for performance and efficiency. The project was developed using the AVS HelloWorld template as a starting point, which provided a solid foundation for building a decentralized service on EigenLayer. Core Technologies Used Blockchain Infrastructure: EigenLayer AVS: GuardianScope is built on EigenLayer's AVS infrastructure, which provides the decentralized coordination and security layer for the protocol. AVS HelloWorld Template: The project started with the AVS HelloWorld template, which provided the basic structure for implementing an AVS, including task coordination, operator management, and reward distribution. Foundry: Used for smart contract development, testing, and deployment. Foundry's Forge and Cast tools were used to write and test the smart contracts. Anvil: A local Ethereum testnet provided by Foundry, used for local development and testing. AI-Powered Content Analysis: OpenAI API: Instead of building custom AI models, GuardianScope leverages OpenAI's API for content analysis. This includes text moderation using OpenAI's advanced NLP models (e.g., GPT-4) for detecting inappropriate or harmful content. Rust Integration: The OpenAI API is called from the Rust-based operator, which handles the API requests and processes the moderation results. Operator Implementation: Rust: The operator, responsible for receiving moderation tasks, calling the OpenAI API, and submitting results back to the blockchain, is implemented in Rust. Rust was chosen for its performance, safety, and efficiency, making it ideal for handling high-throughput tasks in a decentralized network. Web3 Libraries in Rust: Libraries like ethers-rs or web3.rs are used to interact with Ethereum smart contracts from the Rust operator. Async Programming: Rust's async/await features are used to handle concurrent tasks, such as listening for new moderation tasks and making API calls to OpenAI. Development Environment: Nix: For reproducible development environments, Nix was used to manage dependencies and ensure consistency across different setups. Docker: Optional containerization for deploying the Rust operator and backend services in a scalable manner. How Everything Fits Together Smart Contract Infrastructure The smart contracts are based on the AVS HelloWorld template, which provides the basic structure for task coordination, operator management, and reward distribution. The contracts were extended to support content moderation tasks and integrate with the OpenAI API. Task Coordination: The smart contracts handle the creation of moderation tasks, assignment to operators, and verification of results. On-Chain Verification: Operators submit their moderation decisions (approve/reject) along with a hash of the content and their signature. The contract verifies the signature and ensures the operator is staked and eligible to participate. Reward Distribution: Operators are rewarded for their work through EigenLayer's restaking mechanism, with rewards distributed transparently on-chain. EigenLayer Integration GuardianScope integrates with EigenLayer's AVS infrastructure, which provides the security and coordination layer for the decentralized network of operators. ServiceManagerBase: GuardianScope implements EigenLayer's ServiceManagerBase contract to handle task coordination and signature aggregation. BLS Signatures: Operators use BLS signatures to sign their moderation decisions, which are then aggregated for efficient on-chain verification. Slashing Conditions: Malicious or non-performing operators can be slashed, ensuring the network's integrity and security. AI-Powered Content Analysis Instead of building custom AI models, GuardianScope uses OpenAI's API for content analysis. The Rust-based operator handles the API calls and processes the moderation results. OpenAI API Integration: The Rust operator sends content to the OpenAI API for analysis and receives moderation decisions (e.g., approve/reject) based on the API's response. Real-Time Analysis: The OpenAI API provides real-time moderation capabilities, ensuring quick turnaround times for moderation tasks. Privacy-Preserving: While the content is sent to OpenAI for analysis, the system ensures that sensitive data is handled securely and in compliance with privacy regulations. Rust Operator The Rust-based operator is the core component that ties everything together. It performs the following tasks: Listens for new moderation tasks emitted by the GuardianScope smart contract. Calls the OpenAI API to analyze the content and generate a moderation decision. Submits the decision back to the blockchain, signed with the operator's BLS signature. Handles errors and retries gracefully, ensuring robust operation in a decentralized environment. Development Process Local Devnet Deployment To make development and testing easier, GuardianScope provides a local devnet setup using Foundry's Anvil chain. Here's how it works: Start Anvil Chain: A local Ethereum testnet is started using Anvil, providing a sandbox environment for testing. Deploy Contracts: The EigenLayer core contracts and GuardianScope AVS contracts are deployed to the local chain. Start Rust Operator: The Rust-based operator is started, connecting to the local chain and listening for moderation tasks. Test Moderation: Developers can submit test content for moderation and observe how the system processes it using the OpenAI API. Testing GuardianScope includes comprehensive tests for both the smart contracts and the Rust operator. The tests are written in Solidity (for smart contracts) and Rust (for the operator), ensuring that the system behaves as expected under various conditions. Hacky or Notable Solutions Rust Operator for Performance: Implementing the operator in Rust was a strategic choice for performance and efficiency. Rust's memory safety and concurrency features make it ideal for handling high-throughput tasks in a decentralized network. The operator uses async/await to handle concurrent tasks, such as listening for new tasks and making API calls to OpenAI. OpenAI API Integration in Rust: Integrating the OpenAI API in Rust required using HTTP libraries like reqwest or hyper to make API calls and process JSON responses. This was a lightweight and efficient solution compared to using a heavier stack like Python. AVS HelloWorld Template: Using the AVS HelloWorld template as a starting point allowed us to quickly build the core functionality of GuardianScope. The template provided the basic structure for task coordination, operator management, and reward distribution, which we extended to support content moderation. Partner Technologies and Their Benefits EigenLayer: EigenLayer's restaking mechanism and AVS infrastructure were critical to GuardianScope's security and scalability. By leveraging EigenLayer, we were able to build a decentralized network of operators with strong economic incentives to act honestly. OpenAI API: Using OpenAI's API for content analysis allowed us to quickly implement advanced AI capabilities without building custom models. This saved significant development time and provided access to state-of-the-art NLP models. Rust: Rust's performance, safety, and efficiency made it the perfect choice for implementing the operator. Its async/await features and strong ecosystem for blockchain integration (e.g., ethers-rs) streamlined development.",
    "summary": "GuardianScope is a decentralized AI content moderation protocol built on EigenLayer's AVS. It enables automated, unbiased, and privacy-preserving moderation for Web3 platforms using AI-powered analysis, ensuring transparency and security through blockchain."
  },
  {
    "title": "RexDeus",
    "url": "https://ethglobal.com/showcase/rexdeus-z143w",
    "description": "Project DescriptionOur project proposes a new industry standard for seamlessly integrating AI into Unreal Engine, enabling sophisticated AI Agents to function as dynamic NPCs within game environments. We aim to develop an Unreal Engine plugin that acts as a client capable of interfacing with any Unreal Engine project. The core objective is to empower AI agents with advanced behavior, ranging from interaction with players to autonomous decision-making, ultimately enhancing gaming ecosystems by mitigating issues like cheating and exploitative tactics. This initiative introduces two core AI components: Mother AI and Baby AI. Mother AI: The central authority controlling the game's procedural elements, such as time cycles, difficulty, item generation, and weather. It governs Baby AI while maintaining distinct data sets for global control. Baby AI: These are the interactive NPCs with individual memory, statistics, and emotional traits. They can serve various roles—companions, merchants, or adversaries. Players can engage with Baby AI in numerous ways, including forming alliances or rivalries, acquiring game items, and negotiating in-game strategies.How it's MadeOur project leverages several key technologies to build an advanced AI integration for Unreal Engine: Unreal Engine: We are developing a plugin to integrate AI agents as NPCs directly into the game environment. This plugin facilitates real‑time communication between the AI agents and Unreal projects. AgentKit: We use AgentKit to develop and manage our AI agents, giving each agent a programmable on‑chain wallet and a suite of blockchain actions (such as NFT minting). This allows each agent to have its own unique attributes—including memory, emotional traits, and behaviors—without needing to reinvent blockchain interactions. OpenAI LLM Model: The OpenAI large language model interprets player input, transforming natural language into structured commands. This enables dynamic, context‑aware conversations with the AI agents, allowing NPCs to respond adaptively and offer in‑game advice or challenges. EigenLayer: We integrate EigenLayer to secure and validate our on‑chain operations. Instead of relying solely on restaking, our AI agents (or their associated wallets) are automatically registered as operators on EigenLayer. This process provides decentralized economic security and trust by ensuring that every smart NPC’s on‑chain identity is verified by a network of trusted operators. Autonome: Autonome hosts our fully integrated AI agent solution, providing production‑ready infrastructure with TEE plug‑ins for verifiability and enhanced security. It enables seamless management and scaling of multiple agents and their interactions within the gaming ecosystem.",
    "summary": "AI Agent for Unreal Engine! Our plugin powers dynamic NPCs using OpenAI, AgentKit, and Autonom, enabling real-time player interaction, game world control, and enhanced immersion."
  },
  {
    "title": "BasevenueWolf",
    "url": "https://ethglobal.com/showcase/basevenuewolf-vj8dz",
    "description": "Project DescriptionProblems We Solve Web2 Game developers would like to migrate to Web3 (NFTs, tokens, in-game items, subscriptions, etc.), but handling the migration is complex, expensive and challenging. Development – Web2 developers often lack experience with smart contracts, blockchain SDKs, and decentralized architectures, making it difficult to transition smoothly . Tokeneconomics - Designing sustainable token models, ensuring liquidity, and managing inflationary/deflationary mechanisms require expertise in blockchain economics. Payment Integrations - Enabling seamless crypto and fiat payment options for game users, integrating wallets, and ensuring regulatory compliance can be challenging. (TODO: We will solve this problem with our Paywall Integration feature). Our Solution: We provide AI Agent Platform and SDK to Mobile Developers to create their Tokens and Products. Then, Developers will be able to manage their in game assets and easily integrate it with their game by using our BasevenueWolf and BasevenueWolf SDK. In the platform we are using customised AgentKit Action Providers in order to handle token, nft deployments. https://github.com/berkingurcan/BasevenueWolf https://github.com/batuhanozcan1605/basevenue_wolf https://github.com/batuhanozcan1605/basevenuewolf_sdkHow it's Made Core Technologies: Frontend: Built with Flutter: https://github.com/batuhanozcan1605/basevenue_wolf Smart Contracts: Solidity with Hardhat for development and deployment AI Integration: Leverages CDP Agentkit for AI capabilities Blockchain: Deployed on Base Sepolia Testnet State Management: Redis for caching and state persistence Notable Technical Components: Smart Contract Architecture: Custom ERC20 tokens for game currencies ERC721 (GameItem) for NFT-based game items Specialized deployer contracts for each token type Uses OpenZeppelin contracts for security and standardization AI Agent System: Implements Coinbase's AgentKit for AI-powered management Two main AI providers: TokenManagerProvider: Handles game currency deployment and management ProductManagerProvider: Manages game items and products Uses LangChain for complex AI workflows Backend Infrastructure: API Routes built with Next.js Redis integration for caching and data persistence Streaming responses for real-time AI interactions Viem for Ethereum interactions Hacky Things The TokenManagerProvider and ProductManagerProvider implementation includes a hacky way of deploying contracts by using AI Agents and storing token-to-wallet mappings in Redis, allowing for quick lookups without on-chain queries. Sponsor Technologies: Coinbase AgentKit Base",
    "summary": "🚀 BasevenueWolf is the blockchain and AI-powered alternative to RevenueCat, bringing seamless, transparent, and trustless product management to Web3 Applications."
  },
  {
    "title": "WeAi",
    "url": "https://ethglobal.com/showcase/weai-4ws59",
    "description": "Project DescriptionProject Goal: The primary goal of the Week in Ethereum News AI Edition project is to create a next-generation, AI-powered newsletter that continues the legacy of the original \"Week in Ethereum News\" while addressing the critical need for trust and transparency in AI-generated content. We aim to achieve this by implementing Verifiable Agent Prompts using EigenLayer's Autonomous Verifiable Services (AVS). Problem Statement: As AI agents become increasingly sophisticated and are used for content creation, concerns about their trustworthiness, potential biases, and lack of transparency are growing. In the context of news dissemination, it is crucial to ensure that AI-generated newsletters are not only informative but also created under sound, auditable, and policy-compliant instructions. Traditional AI systems often operate as \"black boxes,\" making it difficult to verify their processes and outputs. Solution Overview: Verifiable Agent Prompts Our project addresses this challenge by introducing Verifiable Agent Prompts. We leverage EigenLayer AVS to create a system where: • The instructions (prompts) given to our AI newsletter generation agent are explicitly defined and recorded on the Ethereum blockchain. • A decentralized network of Agentic Operators (simulated in our Proof of Concept) automatically reviews and verifies these prompts based on predefined Verification Policies. • The verification outcome (Approved or Rejected) is cryptographically secured and recorded on the blockchain, providing an auditable and tamper-proof record of the prompt verification process. • The AI newsletter generation agent is conditionally executed – it only proceeds to create the newsletter content if its prompt has been verifiably approved by the operator network. This approach aims to build a more trustworthy and transparent AI-driven newsletter by ensuring that the AI's content generation is guided by instructions that have been verifiably reviewed and validated by a decentralized network, enhancing user confidence and accountability. Key Features and Components: 1 Autogen Agentic Workflow for Newsletter Generation: • We utilize the Autogen framework to create a multi-agent system for automated newsletter creation. This system includes specialized agents such as: • Manager Agent: The central orchestrator, responsible for planning the newsletter content, delegating tasks, and managing the overall workflow. • Critic Agent: Reviews plans and generated content, providing feedback to ensure quality, accuracy, and completeness. • Web Scraper Agent: Gathers relevant information from the web based on prompts and instructions, extracting data from news sources and online resources. • Coder Agent: (Placeholder for future development) Intended for data analysis and code-assisted content generation. • Telegram Poster Agent: Automates the distribution of the generated newsletter to a Telegram channel. • Twitter Poster Agent: (Commented out for now) Intended for future automated posting to Twitter. 2 EigenLayer AVS Integration for Verifiable Prompts: • We integrate with EigenLayer AVS to implement the Verifiable Agent Prompts mechanism. This involves: • Solidity Smart Contracts (NewsletterPromptTaskManager.sol, NewsletterPromptServiceManager.sol): Deployed as an EigenLayer AVS, these contracts manage the prompt verification tasks, record verification outcomes, and interact with the EigenLayer ecosystem. • Aggregator (aggregator.py): An off-chain component responsible for: • Submitting new prompt verification tasks to the AVS contract. • Receiving and aggregating signed verdicts from Agentic Operators. • Determining the overall verification outcome. • Recording the outcome on the AVS contract. • Agentic Operators (Simulated by prompt_operator.py): Represent a network of entities that participate in the AVS and perform prompt verification. In our PoC, these are simulated by running prompt_operator.py. • Verification Agents (within Operators): Specialized AI agents deployed by Agentic Operators. These agents automatically check if a submitted Agent Prompt adheres to predefined Verification Policies. 3 Automated Prompt Verification by Agentic Operators: • Instead of manual review, we introduce Agentic Operators who deploy Verification Agents. • When a new prompt is submitted for verification, each Verification Agent automatically assesses the prompt against predefined Verification Policies (e.g., topic relevance, tone, length, keyword usage). • This automated policy check is implemented within the prompt_operator.py script. • Verification Agents generate automated verdicts (\"Pass\" or \"Fail\") based on policy compliance. 4 On-Chain Recording of Verification Outcomes: • The verdicts from Verification Agents are aggregated by the Aggregator. • The overall verification outcome (Verified or Rejected) is recorded on the Ethereum blockchain via the AVS contract, providing a transparent and auditable record. 5 Conditional Agent Execution based on Verification: • The core AI newsletter generation agent (manager agent) is designed to be \"AVS-Prompt-Verification Aware.\" • It only proceeds to generate the newsletter content if the prompt has been verifiably Approved by the AVS operator network. • If the prompt is Rejected, the newsletter generation process is halted, ensuring that content is only created under verifiably sound instructions. Workflow Description: 1 Newsletter Creator Defines Prompt and Policies: The newsletter creator defines the Agent Prompt and a set of Verification Policies. 2 Prompt Submission to AVS: The prompt and policies are submitted to the NewsletterPromptTaskManager contract. 3 Verification Task Creation: The AVS contract creates a new \"Prompt Verification Task.\" 4 Agentic Operators Deploy Verification Agents: Operators deploy Verification Agents that monitor the AVS for new tasks. 5 Automated Policy Check: Verification Agents automatically analyze the submitted prompt against the Verification Policies. 6 Automated Verdict Generation: Verification Agents generate \"Pass/Fail\" verdicts based on policy checks. 7 Verdict Aggregation and On-Chain Recording: The Aggregator collects verdicts, aggregates them, and records the overall verification outcome (Verified/Rejected) on the AVS contract. 8 Conditional Agent Execution: The Autogen newsletter agent checks the AVS for the verification outcome. If \"Verified,\" it proceeds with newsletter generation using the approved prompt. If \"Rejected,\" the process halts. 9 Newsletter Generation and Distribution: If verified, the Autogen agents generate the newsletter content, which is then distributed. Technology Stack: • AI Agent Framework: Autogen (for multi-agent system orchestration) • Large Language Model (LLM): GPT-4o-mini (or similar OpenAI model) • Blockchain Platform: Ethereum (simulated local Anvil chain for PoC) • Autonomous Verifiable Service (AVS) Framework: EigenLayer • Smart Contract Language: Solidity • Off-chain Components: Python (for Aggregator, Operator Agents, and main agent workflow) • Web Scraping Library: Scrapegraphai • Cryptographic Libraries: Eigensdk-python (for BLS signature aggregation) Current Project Status (Proof of Concept): This project is currently a Proof of Concept (PoC). We have implemented the core components to demonstrate the feasibility of Verifiable Agent Prompts. Key aspects currently implemented include: • Modified Solidity contracts for managing prompt verification tasks. • Aggregator component for task submission and verdict aggregation. • Simulated Prompt Operator (prompt_operator.py) with basic automated policy checking logic. • Integration with a simplified Autogen workflow in agents.py to submit prompts for verification and conditionally execute the newsletter agent. Future Development and Enhancements: • More Sophisticated Verification Policies: Implement more complex and nuanced policies, potentially using more advanced NLP techniques for policy evaluation within Verification Agents. • Diverse Verification Models: Explore using a variety of AI models within Verification Agents to increase robustness and reduce bias in the verification process. • Verifiable Tool Usage Logging and Authorization: Extend the system to verifiably log and control the tools and APIs used by the AI agents, further enhancing transparency and security. • Decentralized Policy Registry: Implement a decentralized system for managing and updating Verification Policies. • Reputation and Incentive Mechanisms for Operators: Develop a reputation system and robust economic incentives for Agentic Operators to ensure high-quality and honest prompt verification services within a real EigenLayer deployment. • Enhanced User Interface and Workflow: Create a user-friendly interface for newsletter creators to define prompts, policies, and monitor the verification and generation process. Value Proposition: The Week in Ethereum News AI Edition with Verifiable Agent Prompts offers significant value by: • Building Trust in AI-Generated News: Addresses growing concerns about AI trustworthiness by providing verifiable assurance that the newsletter content is created under reviewed and approved instructions. • Enhancing Transparency: Makes the AI content generation process more transparent and auditable, allowing users to understand the controls and policies governing the AI. • Promoting Ethical AI Development: Provides a framework for incorporating ethical considerations and policy enforcement into AI agent workflows, particularly in sensitive domains like news and information dissemination. • Demonstrating the Power of EigenLayer AVS: Showcases a practical application of EigenLayer AVS for building verifiable and trustworthy AI systems, highlighting the potential of EigenLayer for securing and enhancing AI applications on Ethereum. Target Audience: This project is relevant to: • Ethereum Community: Provides a valuable service by continuing the tradition of \"Week in Ethereum News\" in an innovative, AI-driven, and verifiable way. • News Consumers: Offers a more trustworthy and transparent source of information about the Ethereum ecosystem. • AI and Blockchain Developers: Serves as a practical example and a potential framework for building verifiable and accountable AI systems using EigenLayer AVS. • Researchers and Academics: Provides a case study for exploring the intersection of AI, blockchain, and verifiable computation.How it's MadeTechnology Stack - Layer by Layer: 1 Smart Contracts (Solidity Layer - On-Chain Verifiability): • Language: Solidity (version ^0.8.9) - Chosen as the standard language for smart contract development on Ethereum and for EigenLayer AVSs. • Framework/Libraries: • Foundry: Used as our smart contract development toolchain. Foundry provides: • Forge: For building, testing, and deploying Solidity contracts. Its speed and testing capabilities were crucial for rapid iteration during development. • Anvil: For local Ethereum node emulation. Anvil's speed and ease of setup were essential for local testing and development. • OpenZeppelin Contracts Upgradeable: We leveraged OpenZeppelin's upgradeable contracts library (@openzeppelin-upgrades/contracts) for contract initialization and upgradeability patterns. While upgradeability isn't strictly necessary for this PoC, using these libraries provides a more robust and standard contract structure. • EigenLayer Middleware Contracts (@eigenlayer-middleware): We directly utilized key contracts and interfaces from the EigenLayer middleware library, specifically: • @eigenlayer-middleware/src/interfaces/IServiceManager.sol: Interface for service managers. • @eigenlayer-middleware/src/BLSApkRegistry.sol, @eigenlayer-middleware/src/RegistryCoordinator.sol, @eigenlayer-middleware/src/BLSSignatureChecker.sol, @eigenlayer-middleware/src/OperatorStateRetriever.sol: Core EigenLayer components for operator registration, stake retrieval, and BLS signature verification. These were essential for building our AVS and leveraging EigenLayer's verifiable infrastructure. • @eigenlayer-middleware/src/libraries/BN254.sol: Solidity library for BN254 curve operations, necessary for BLS signature verification. • EigenLayer Contracts (@eigenlayer/contracts): Imported @eigenlayer/contracts/permissions/Pausable.sol for implementing pausable functionality in our contracts, a standard pattern in EigenLayer AVSs. • Forge-std: Used forge-std/console.sol for debugging and logging within Solidity tests and contracts (though console.log was mostly commented out in the final version). 2 Off-Chain Components (Python Layer - Agent Workflow, Aggregation, Operator Simulation): • Language: Python 3.9+ - Chosen for its rich ecosystem of AI/ML libraries (Autogen, OpenAI API), web scraping tools, and ease of use for scripting and rapid prototyping. • AI Agent Framework: Autogen (version 0.7.3) - A critical partner technology. Autogen provided the multi-agent abstraction and framework that allowed us to easily create and orchestrate the complex interactions between our specialized AI agents (Manager, Critic, Web Scraper, etc.). Its conversational agent paradigm and group chat management were key to building the Society of Mind workflow. • LLM Interface: OpenAI Python Library (openai version 1.61.1) - Used to interface with OpenAI's models (specifically gpt-4o-mini - though in practice, we likely used gpt-4o or gpt-4o-preview for better performance). Access to a powerful LLM like GPT-4o was essential for the agents' reasoning, content generation, and policy checking capabilities. • Web Scraping: Scrapegraphai (version 1.37.1) - Another key partner technology. Scrapegraphai significantly simplified the complex task of web scraping. Its AI-powered extraction capabilities allowed us to reliably extract structured information from diverse web pages with minimal coding effort for the agent logic. • BLS Signature Aggregation & Ethereum Interaction: Eigensdk-python (custom version based on git+https://github.com/zellular-xyz/eigensdk-python@2736dafd95a0898180e25e86c7756ae7dc9c4e88) - Essential for EigenLayer integration. This Python SDK provided: • BLS Signature Functionality: For generating and aggregating BLS signatures, which is core to EigenLayer's security model. • Web3.py Integration: For interacting with Ethereum smart contracts (deploying contracts, calling functions, reading events). • Client Libraries for EigenLayer Contracts: Pre-built clients and utilities for interacting with EigenLayer's core contracts (Registry Coordinator, Operator State Retriever, etc.), simplifying the integration process. • Web3.py (version 7.4.0): While Eigensdk-python wraps Web3.py, we also directly used Web3.py for some lower-level Ethereum interactions, especially in the aggregator and operator scripts. • Flask (version 3.0.3): Used to create a lightweight Flask web server in aggregator.py. This server provides a simple API endpoint (/signature) for operators to submit their signatures to the aggregator via HTTP POST requests. • Requests (version 2.32.3): Used for making HTTP requests from prompt_operator.py to the aggregator's Flask server to submit signatures. • PyYAML (version 6.0.1): Used for parsing YAML configuration files (config-files/aggregator.yaml, config-files/operator.anvil.yaml). • Python-dotenv (version 1.0.1): Used for loading environment variables from .env files, for managing API keys and configuration parameters securely. • Logging (Python's logging module): Used extensively throughout the Python scripts for logging events, debugging, and monitoring the system's operation. • Threading (Python's threading module): Used in aggregator.py to run the signature submission loop and the Flask server concurrently in separate threads. • Other Libraries: Standard Python libraries like os, json, time, dataclasses, typing, yaml, requests, web3, eth_abi, eth_account, flask were used for various utility functions, data handling, and API interactions. System Architecture - How Components are Pieced Together: 1 Smart Contracts (AVS Core): • NewsletterPromptTaskManager.sol and NewsletterPromptServiceManager.sol are deployed to a local Anvil chain (simulating Ethereum). • These contracts form the core of our EigenLayer AVS, managing tasks, recording verification outcomes, and interacting with EigenLayer's registry. • They inherit from EigenLayer middleware contracts (BLSSignatureChecker, OperatorStateRetriever, ServiceManagerBase) to leverage EigenLayer's functionalities. 2 Aggregator (Off-Chain Orchestration & Aggregation): • aggregator.py acts as the central off-chain component that bridges the AI agent workflow and the on-chain AVS contracts. • Task Submission: The Aggregator class in aggregator.py has functions (like send_new_manager_instructions_verification_task) to initiate new prompt verification tasks by calling the createNewTask function on the NewsletterPromptTaskManager contract. • Signature Reception (Flask Server): The Flask server within aggregator.py listens for incoming HTTP POST requests at the /signature endpoint. Operators (via prompt_operator.py) send their signed verdicts to this endpoint. • BLS Signature Aggregation: The BlsAggregationService (from eigensdk-python, initialized within aggregator.py) handles the aggregation of BLS signatures received from operators. • Transaction Submission (to AVS Contract): While in this PoC, the aggregator primarily receives signatures, in a more complete AVS implementation, the aggregator would also submit aggregated signatures and verification outcomes back to the AVS contract (though this part is simplified in our current PoC). • Configuration Loading: aggregator.py loads configuration parameters (contract addresses, keys, RPC URLs) from config-files/aggregator.yaml. 3 Prompt Operator (Simulated EigenLayer Operator): • prompt_operator.py simulates an EigenLayer operator. In a real EigenLayer setup, this would be run by entities restaking ETH and participating in the AVS. • Event Monitoring: prompt_operator.py uses Web3.py event filters to monitor the NewsletterPromptTaskManager contract for NewTaskCreated events. • Task Processing (process_task_event): When a new task event is detected, the process_task_event function is triggered. This function: • Retrieves the agentPrompt from the event data. • Performs automated policy checks on the prompt (in our PoC, these are basic length and keyword checks). • Determines verification_status (Approve/Reject) based on policy checks. • Generates a BLS signature for the verification_status using the operator's BLS private key (loaded from tests/keys/test.bls.key.json). • Sends the verification_status, signature, and task ID to the aggregator's Flask server via an HTTP POST request to /signature. • Key Loading & Registration: prompt_operator.py loads operator ECDSA and BLS keys from files and includes logic to register the operator with EigenLayer and the AVS (though registration is often skipped or mocked in local testing). • Configuration Loading: prompt_operator.py loads configuration parameters from config-files/operator.anvil.yaml. 4 Autogen Agents (agents.py - Newsletter Workflow): • agents.py contains the main Autogen workflow for newsletter generation. • Society of Mind Agent Setup: It defines and orchestrates a Society of Mind agent group, including manager, critic, web-scraper, coder, and telegram-poster agents. • Prompt Submission & Verification Flow (interact_freely_with_user): The interact_freely_with_user function in agents.py implements the core integration with the AVS: • It initializes the Aggregator client. • It calls aggregator.send_new_manager_instructions_verification_task() to submit the manager_instructions prompt to the AVS for verification. • It then polls (a hacky but simple PoC approach) for a certain duration, waiting for the prompt to be (assumed to be) verified by operators. • Conditional Agent Initialization: Only if the prompt verification is (assumed to be) successful, it proceeds to create and initialize the SocietyOfMindAgent and start the chat interface. • If verification is (assumed to be) rejected, it halts the agent initialization. • Agent Definitions & System Messages: agents.py defines the system messages and roles for each Autogen agent, outlining their responsibilities in the newsletter creation process. • Tool Integration: It integrates the custom tools (TelegramPostAgent, TwitterPostAgent, WebScraperAgent) into the agent workflow. Partner Technologies - Benefits: • EigenLayer AVS: Fundamental to Verifiability. EigenLayer AVS provides the core infrastructure for building verifiable services on Ethereum. It enabled us to: • Decentralize Trust: Distribute trust in the prompt verification process across a network of operators, rather than relying on a single entity. • Cryptographic Security: Leverage Ethereum's cryptoeconomic security to make the verification process tamper-proof and accountable through BLS signatures and on-chain recording. • Build a Verifiable Service: Create an AVS (NewsletterPromptTaskManager) that can be permissionlessly accessed and utilized by our AI newsletter application. • Leverage Existing Middleware: The EigenLayer middleware libraries (eigensdk-python, @eigenlayer-middleware) significantly simplified the integration with EigenLayer's complex cryptographic and on-chain components, saving us substantial development time and effort. • Autogen: Agentic Workflow Orchestration. Autogen was crucial for building the sophisticated multi-agent workflow for newsletter generation. It provided: • Multi-Agent Abstraction: Simplified the creation and management of multiple interacting AI agents. • Conversational Agent Paradigm: Enabled natural and flexible communication and collaboration between agents. • Group Chat Management: Facilitated the orchestration of the Society of Mind agent group and managed message flow. • Tool Integration: Made it easy to integrate custom tools (like our WebScraperAgent, TelegramPostAgent) into the agent workflow. • Rapid Prototyping: Autogen's ease of use and high-level abstractions allowed us to rapidly prototype and iterate on the agentic workflow for the newsletter. Notable \"Hacky\" or Simplified Implementation Details (for PoC): • Polling for Verification Status in agents.py: Instead of implementing a more robust event listener to react to on-chain verification events, we used a simple time.sleep() and polling loop in agents.py to check for verification status. This is inefficient and not suitable for a production system, but it was a quick way to demonstrate the basic workflow in the PoC. A proper implementation would use Web3.py event filters to asynchronously listen for PromptVerified or PromptRejected events from the AVS contract. • Manual Operator Input in prompt_operator.py (Initially): In the very first iteration of the PoC, the prompt_operator.py script required manual operator input (\"yes/no\") to approve or reject prompts. This was a simplification to demonstrate the basic signature submission flow, but it was quickly replaced with automated policy checks to make the operator side more agentic. • Basic Policy Checks in prompt_operator.py: The policy checks implemented in prompt_operator.py are very rudimentary (length and keyword checks). A more sophisticated system would use more advanced NLP techniques and potentially even LLMs within the Verification Agents to perform more nuanced and comprehensive policy evaluations. • Assumed Verification Success (in agents.py PoC Polling): In the agents.py polling loop, we simply assume that the prompt is verified after waiting for a certain time (verification_status = True). A real application would need to query the AVS contract to verifiably confirm the verification outcome and aggregated signature before proceeding. • Hardcoded Configurations and Paths: Configuration parameters (contract addresses, key file paths, RPC URLs) are often hardcoded or loaded from simple YAML files. A production system would require more robust configuration management, potentially using environment variables, secure key vaults, and dynamic configuration loading. • Simplified Error Handling: Error handling in the PoC is basic. A production system would need much more comprehensive error handling, logging, and monitoring to ensure robustness and reliability. • Lack of Full EigenLayer Deployment: The PoC is run on a local Anvil chain and simulates EigenLayer operators. A full deployment on a real EigenLayer testnet or mainnet would involve additional complexities related to operator registration, staking, reward distribution, and slashing mechanisms, which are not fully explored in this basic PoC. Despite these simplifications and \"hacky\" elements, the Week in Ethereum News AI Edition PoC successfully demonstrates the core concept of Verifiable Agent Prompts using EigenLayer AVS and showcases the potential for building more trustworthy and transparent AI-driven applications on blockchain.",
    "summary": "AI-powered Ethereum news curation, verification & distribution using decentralized EigenLayer AVS. Reviving 'Week in Ethereum News' with AI agents and blockchain-powered trust."
  },
  {
    "title": "TABULA",
    "url": "https://ethglobal.com/showcase/tabula-64us4",
    "description": "Project DescriptionTabula: The DAO Intelligence Hub is an AI-powered platform built on Base to transform how individuals interact with and participate in DAOs. Designed to address the most common challenges in the DAO ecosystem, Tabula provides a comprehensive, intelligent dashboard that makes governance more intuitive and impactful. It empowers users to navigate complex DAOs, analyze proposals efficiently, and make informed decisions—all while streamlining participation and minimizing information overload. In the current DAO landscape, participants often struggle with information overload, complex proposal analysis, and time-consuming involvement. These challenges are compounded by fragmented tools and platforms that lack seamless integration. Tabula solves these issues by providing a unified governance hub with a variety of features, including an AI-powered smart assistant, data-driven impact analysis, and delegation matchmaking. The platform transmutates raw governance data into actionable insights, making DAO participation more accessible, efficient, and transparent. Links GitHub | Demo | Prototype App Slide Deck | Contribution Guide | Local Testing Guide Design Files + Figma | UI Mockups Key features Intelligent Dashboard: A comprehensive view of DAO delegations, governance health, event timelines, and more. Smart Updates Hub: Priority-based notifications, AI-curated summaries, impact analysis, and social sentiment tracking. Governance Assistant: AI-powered chat that simplifies proposal analysis, governance simulations, delegate assistance, and more. Advanced Features: User-to-Delegate matchmaking, post-execution transaction tracking, notifications, and AI-generated reports to analyze proposal impacts. Tabula is designed to make DAO participation smarter, easier, and more rewarding, ultimately contributing to more efficient governance within the Web3 ecosystem.How it's MadeCore Technologies Base: Chosen for its scalability and low fees, Base powers our transactions and ensures smooth integration with the Ethereum ecosystem. Tally API: Provides access to essential DAO data (proposals, voting, delegates) for real-time insights and analysis. LangChain & AgentKit: These frameworks power our AI assistant, enabling advanced features like proposal simulations, impact analysis, and delegate recommendations. OnchainKit & Smart Wallet: Allow users to interact directly with DAOs (e.g., voting, delegating) in a secure, seamless way. Autonome: Enhances AI capabilities like sentiment analysis and impact predictions. OneSec: Ensures secure DApp deployment and transaction integrity. Workflow Data Aggregation: The Tally API pulls DAO data, which is processed by the AI assistant to provide actionable insights and governance summaries. AI-Powered Assistant: LangChain and AgentKit power the chat interface, offering simplified explanations, impact analysis, and delegate suggestions. Direct Actions: Users can vote or delegate tokens via OnchainKit with seamless blockchain interaction. Notable Solutions Custom AI Summarization: We built a custom summarization model that’s fine-tuned for DAO proposals, delivering concise, relevant summaries. Delegate Matchmaking: Our hybrid recommendation system combines machine learning and rule-based algorithms to suggest delegates based on voting history and user preferences.",
    "summary": "Tabula streamlines DAO participation on Base by providing an intelligent, unified dashboard that transforms how users engage with DAOs. Through our alchemical process, we transmute raw governance data into clear, actionable insights."
  },
  {
    "title": "publi-cité",
    "url": "https://ethglobal.com/showcase/publi-cite-9ya39",
    "description": "Project DescriptionIntroducing Publi-Cite: A Web3-Powered Advertising Platform Overview: Publi-Cite is a revolutionary Web3-powered advertising platform where users earn rewards per click, third-party websites gain commissions, and companies achieve seamless ad engagement. How Publi-Cite Works: Advertiser Registration & Campaign Creation: Any advertiser can visit Publi-Cite, register, and create a campaign for their products. During the campaign setup, the advertiser must define: Reward per Click (amount paid per user click) Third-Party Commission Percentage (share for websites displaying the ads) Optional End Date (campaign duration) Funding the Campaign: Upon registration, a server wallet is automatically created using Privy Server Wallet API calls. Advertisers must fund their server wallets to activate and run campaigns. Campaign Management: Advertisers can track and manage their campaigns through the Campaign Display Section, where they can view their ads and add funds as needed. Third-Party Website Integration: Any third-party website can search for live campaigns and copy the embedded ad component to their site. Websites displaying campaigns earn commissions per user interaction. User Interaction & Rewards: When a user clicks an ad on a third-party website, the reward per click is automatically credited to their browser wallet using Web3 technology. Tech Stack: Publi-Cite leverages cutting-edge Web3 technologies to ensure security, transparency, and efficiency: Privy Server Wallet Idempotency Keys Privy Policies Engine Privy Authentication Signatures Embedded Links Future Roadmap: To enhance security and fairness, we plan to develop anti-spamming modules to prevent multiple-account exploitation and introduce advanced policy controls to regulate ad interactions. Our vision is to establish Publi-Cite as the Web3 alternative to Google Ads, offering a decentralized, fair, and rewarding digital advertising experience superior to Brave Ads. Join us in revolutionizing online advertising with Web3 technology!How it's MadeOur project revolutionizes digital advertising by utilizing Privy server wallets to automate payments for advertising campaigns. Users are rewarded with cryptocurrency for engaging with ads, providing a unique value-driven experience. By leveraging the Privy policy engine, we effectively manage reward distribution while preventing spam through the use of Idempotency keys. Despite facing challenges with documentation, the active Privy developer community on Slack helped us overcome issues swiftly, allowing us to focus on creating a seamless Web3 alternative to traditional ad platforms like Google Ads.",
    "summary": "A decentralized advertisement generating  platform that revolutionizes digital advertising by rewarding users with cryptocurrency for engaging with ads. Our platform enables companies to boost their ad engagement while providing value back to users."
  },
  {
    "title": "SpaceCoin",
    "url": "https://ethglobal.com/showcase/spacecoin-z6oxj",
    "description": "Project DescriptionAn AI system deployed on the Gaia platform. This system, built on Gaia Agent Kit, is designed to constantly monitor Twitter for any mentions of new meme coins. When it detects a relevant tweet, it immediately springs into action. The AI's first task is to extract the meme coin's address from the tweet. It then uses this information to gather additional details about the coin, including its symbol and current market value. Armed with this data, the AI proceeds to mint a new token on the Arbitrum network. This new token is pegged to the value of the original meme coin, effectively creating a bridge between different blockchain ecosystems. Here's where it gets interesting for users. They can now purchase these newly minted tokens directly on the Arbitrum network, known for its fast and cost-effective transactions. But the process doesn't stop there. When a user buys the token, it triggers a series of cross-chain interactions: USDC (a popular stablecoin) is transferred from Arbitrum to the Solana blockchain. Once on Solana, this USDC is swapped for SOL, Solana's native cryptocurrency. The SOL is then used to purchase the original meme coin back on Arbitrum. This entire process is automated, allowing for seamless interaction between different blockchains. It's designed to be user-friendly, enabling people to buy and sell meme coins regardless of their preferred blockchain platform. The same mechanism works in reverse when selling the meme coin, ensuring liquidity and ease of use across multiple blockchain ecosystems. This innovative system not only broadens the adoption and liquidity of meme coins but also creates an integrated pathway for trading across diverse blockchain networks. In essence, this technology is breaking down the barriers between different blockchain ecosystems, making the world of cryptocurrency more interconnected and accessible than ever before. Also deployed on OpSec. We have also used Privy to connect wallets.How it's MadeOur project leveraged the Gaia Agent Starter Kit as a robust foundation, simplifying the integration of core components including our Foundry project for blockchain interactions. This framework streamlined the creation of the AI agent's infrastructure for Twitter monitoring, meme coin analysis, and cross-chain token operations1. We deployed the application using OpSec, which provided an intuitive interface that significantly reduced setup time and allowed us to focus on core functionality. Privy's widget was seamlessly integrated to facilitate MetaMask wallet connections, enhancing the user experience for wallet management6. While we encountered some initial challenges with Gaia node configuration, the process became more manageable once we overcame the learning curve4. Our approach to cross-chain token bridging, using custom scripts instead of off-the-shelf solutions, proved effective albeit somewhat unconventional. The supportive communities behind Gaia, Privy, and OpSec were instrumental in our development process, offering timely assistance and insights that accelerated our progress. These partner technologies allowed us to concentrate on building the essential features of our cross-chain meme coin exchange efficiently.",
    "summary": "An AI agent on Gaia monitors Twitter for new meme coins. When detected, it fetches the coin’s address, symbols, and price, then mints a pegged token on Arbitrum. Users can buy it, triggering a cross-chain process: USDC moves to Solana, swaps to SOL, and buys the meme coin."
  },
  {
    "title": "DCAi",
    "url": "https://ethglobal.com/showcase/dcai-5wt39",
    "description": "Project DescriptionDollar-cost averaging (DCA) is a proven strategy to accumulate assets while mitigating volatility risks, especially in bull markets. However, manual DCA execution often fails to adapt to rapid market shifts, gas fluctuations, or emerging opportunities. DCAi is an autonomous, AI-driven agent that dynamically adjusts DCA parameters (timing, size, asset allocation) in real-time using on-chain data, sentiment analysis, and predictive modeling. The AI agent also has capabilities of teaching web3 and investing concepts to users as well as supporting voice inputs and voice outputs to improve accessibility.How it's MadeThis project builds an AI Agent to implement dollar-cost-averaging using Coinbase AgentKit with openAI's langchain intelligence. The frontend is crafted using Next.js react library so that the client and server side can be managed efficiently with cost-effectiveness for the hackathon. EigenLayers Hyperbolic is also implemented for AI voice support. The solution was then deployed on Opsec's Onesec.",
    "summary": "Let AI automate & optimize your crypto DCA strategy—stack smarter, not harder."
  },
  {
    "title": "Contributors",
    "url": "https://ethglobal.com/showcase/contributors-rsz4s",
    "description": "Project DescriptionWe are going to make an open-source contribution to Coinbase AgentKit, specifically by integrating the OpenSea marketplace. We got this idea from wishlist.md (https://github.com/coinbase/agentkit) Users will be able to list their NFTs on the marketplace using natural language. In this project, we are contributing to Coinbase’s chat system by integrating it with the renowned OpenSea platform. Our goal is to enhance the user experience by enabling seamless interaction with NFTs directly within the chat. Users can effortlessly browse their NFT collection from their wallet, select specific assets, and list them on OpenSea—all without leaving the interface. This integration streamlines the process, making NFT trading more accessible and intuitive.How it's MadeWe are going to make an open-source contribution to Coinbase AgentKit, specifically by integrating the OpenSea marketplace. We got this idea from wishlist.md (https://github.com/coinbase/agentkit) Users will be able to list their NFTs on the marketplace using natural language. We are contribution to action-providers folder creating our own action-provider",
    "summary": "PR contribution to Coinbase AgentKit (integration with OpenSea marketplace)"
  },
  {
    "title": "tars",
    "url": "https://ethglobal.com/showcase/tars-rx75s",
    "description": "Project DescriptionTARS (Transformative Action Recognition System) revolutionizes how we address social and environmental issues by combining wearable tech, AI agents, and blockchain governance. The problem: While people encounter numerous social issues daily, there's no automated, trustworthy system to document, verify, and act on these observations. Current solutions are either centralized, manual, or lack verification. TARS solves this through a four-layer system: Verification Layer: Custom EigenLayer AVS (Actively Validated Service) ensures media authenticity Decentralized operator network verifies content from Ray-Ban Meta glasses Cryptographic signatures prevent tampering and establish chain of custody Multiple IPFS gateways for reliable, decentralized storage Media Analysis Layer: AI agent processes verified media using Claude Vision Extracts comprehensive metadata (location, time, context) Aggregates local weather history and relevant news Generates detailed environmental/social impact analysis Impact Assessment Layer: Specialized agent evaluates issues using multi-factor scoring Automatically generates DAO proposals for high-impact issues Smart contract integration for transparent fund management Community voting and proposal execution Agent Network Layer: Scalable network for multiple AI agents and wearable devices Automated coordination between verification and analysis agents Cross-agent data sharing and consensus Expandable framework for future agent integration Key Features: Trustless media verification Automated context gathering Impact-based prioritization Decentralized governance Transparent fund allocation Real-time social issue monitoring Future Vision: TARS aims to create a global network of AI agents and wearable devices that continuously monitor and address social/environmental issues, making social impact initiatives more efficient, transparent, and actionable.How it's MadeI built TARS as a bridge between real-world social initiatives and Web3 governance, starting with the challenge of verifying media from Ray-Ban Meta glasses. My core innovation is a custom AVS (Actively Validated Service) on EigenLayer that verifies image authenticity, paired with Claude Vision for AI analysis. This combination allows me to reliably process media from capture to verification while maintaining data integrity through a multi-gateway IPFS storage system using Pinata. The trickiest part was building the impact assessment system that powers the DAO. I developed a network of TypeScript agents using the ELIZA framework to gather context from multiple sources—weather data, local news, and location information—to score social initiatives. These agents feed into Arbitrum-based DAO smart contracts, which handle community voting and fund allocation. I used the Exifr library to extract raw image metadata, EigenLayer to build the AVS, and Pinata IPFS to store all files and media for verification. The system integrates the Claude Vision API, Dynamic Wallet for human accessibility, and Arbitrum Sepolia Testnet for the DAO smart contracts and voting. For the frontend, I used React JS, and last but not least, Ray-Ban Meta Smart Glasses to capture media. The end result is a system that successfully bridges the gap between real-world social initiatives and decentralized governance while maintaining data integrity and user trust throughout the entire pipeline.",
    "summary": "TARS: A decentralized network of AI agents that capture, verify, and act on social/environmental issues using EigenLayer AVS. From Ray-Ban Meta glasses to DAO proposals, creating a trustless pipeline for social impact initiatives."
  },
  {
    "title": "Synapze",
    "url": "https://ethglobal.com/showcase/synapze-vijh5",
    "description": "Project DescriptionSynapze is an AI hosting platform specifically designed to deploy autonomous agents built using the ElizaOS framework, providing a streamlined solution that makes advanced AI deployment accessible for both seasoned developers and newcomers alike. At its core, Synapze simplifies the entire process of launching AI agents by offering a one-click deployment feature that eliminates the usual complexities associated with traditional setups. This means that instead of grappling with numerous manual steps, users can instantly bring their AI agents online with minimal effort. The platform stands out by offering multiple deployment options to different user preferences and technical expertise. Whether you prefer to manually enter agent details through an intuitive form, upload a pre-configured characterfile in JSON format, or choose from a variety of predefined templates, Synapze adapts to your workflow. This flexibility allows you to create detailed, customized agents that reflect your desired personality and style, making it possible to fine-tune their behavior, tone, and interaction patterns with precision. Security and seamless integration are also central to the Synapze experience. Essential credentials, including those required for external services like Discord, Twitter, Farcaster, etc... and LLM providers, are managed securely through environment variables. This integrated approach not only safeguards sensitive information but also ensures that your agent has reliable access to the services it needs to function properly. Once deployment is initiated, Synapze provides real-time monitoring and updates through a dedicated progress page, allowing you to track the agent's status from start to finish. Synapze simplifies AI agents integration with advanced on-chain capabilities through Coinbase AgentKit/OnchainKit and Autonomous Verifiable Services (AVS). This powerful combination allows developers to build and deploy sophisticated, blockchain-integrated AI agents with unprecedented ease and reliability. Synapze not only simplifies the deployment and management of AI agents with its user-friendly interface and extensive documentation but also pushes the boundaries of innovation by integrating on-chain functionalities. This unique blend of AI and blockchain technology enables the creation of intelligent, autonomous agents that can interact with both digital data and decentralized networks.How it's MadeThis project is using a streamlined, modern tech stack. Our backend is written in TypeScript with REST and GraphQL APIs, while our blockchain interactions rely on Solidity smart contracts and Rust modules for performance-critical tasks. A PostgreSQL database handles our persistent storage. To enable onchain functionality, we integrated Coinbase’s AgentKit and OnchainKit—these toolkits empower our AI agents to access crypto wallets and perform blockchain transactions, and they simplify app development with ergonomic, pre-built components. We also leveraged the EigenLayer SDK to enhance security and scalability. A custom middleware layer bridges our web APIs with blockchain operations, handling tasks like transaction batching and error reconciliation. This careful orchestration, along with a few hacky scripts for data conversion, allowed us to seamlessly merge offchain and onchain features into a cohesive, efficient platform.",
    "summary": "Synapze is a one-click AI agent hosting platform built for Eliza-based agents. Enjoy streamlined deployment and real-time monitoring."
  },
  {
    "title": "Aegis Agent",
    "url": "https://ethglobal.com/showcase/aegis-agent-e5qku",
    "description": "Project DescriptionAegis AI is an autonomous smart contract security monitor that revolutionizes how we protect DeFi protocols. Here's how it works: Core Features: 24/7 autonomous transactions monitoring 5-minute threat detection (vs. industry's 47-hour average) Automatic contract pausing when threats are detected Real-time email alerts with threat analysis User-friendly dashboard for monitoring multiple contracts Technical Stack: Coinbase's CDP AgentKit for autonomous monitoring and contract interaction OnchainKit for seamless wallet integration and user interface The Graph Protocol for efficient event tracking and data indexing Base Network for reliable, low-cost transactions Autonome for AI agent deployment and hosting SendGrid for instant email notifications Security Process: Users connect their wallet and add contracts to monitor Our AI agent continuously analyzes: Transaction patterns, Interaction with blacklisted addresses, Suspicious value transfers, Known attack vectors (flash loans, reentrancy, etc.) When threats are detected: Instantly sends detailed alerts to stakeholders. Can automatically pause vulnerable contracts, Provides real-time analysis in the dashboard Impact: Could prevent 72% of common DeFi attacks Enables 89% fund recovery rate through quick detection Makes enterprise-grade security accessible to all DeFi projects The project solves a critical problem in DeFi where slow threat detection leads to massive losses. By combining AI, autonomous agents, and real-time monitoring, we've created a practical solution that could save billions in potential hacks while making DeFi safer for everyone.How it's MadeBackend: Built with Python/Flask, powered by CDP AgentKit for autonomous monitoring. We created custom actions for transaction analysis, block monitoring, and alert notifications. The system uses SQLite for data storage and SendGrid for instant email alerts. Frontend: Next.js/React application with OnchainKit for wallet connections. Features a real-time dashboard using WebSocket for live updates. Uses Tailwind CSS for a clean, responsive interface with emoji-based threat indicators (🟢 safe, 🟡 suspicious, 🔴 critical). Data & Network: Leverages The Graph Protocol for efficient event indexing and Base Network for fast, low-cost transactions. Maintains Etherscan API as backup for reliable monitoring. Key Innovation: Our autonomous system combines these technologies to detect and respond to threats in 5 minutes (vs industry's 47 hours). When threats are detected, the agent can automatically pause contracts using CDP AgentKit's MPC wallet integration, potentially preventing millions in losses.",
    "summary": "An AI-driven agent that monitors transactions 24/7, detects anomalies, and triggers alerts/emergency actions."
  },
  {
    "title": "LeBrown Jones",
    "url": "https://ethglobal.com/showcase/lebrown-jones-igofb",
    "description": "Project DescriptionThe project is aimed at being the first step toward fully autonomous and consistent social media presences. We have seen how popular X/Twitter agents such as aixbt, Luna, and VaderAI are, and they are also tokenized and valued at millions of dollars. These agents are far from perfect and are limited to certain domains and platforms. My eventual goal was to start with building something similar, and then slowly extend it across platforms and use cases, developing a virtual character that is both useful and entertaining. In this project, I explored the basics of building a Twitter agent that automatically posts, in this case pro-LeBron James propaganda and statistics. Additionally, I also built and hosted a web application with a LLM chat interface for fans/users of the LeBron fan personality to directly interact with. These represent two of the primary use cases for future extensions: a social media presence and a interactive terminal.How it's MadeThe primary technologies were Coinbase's Agent Kit for implementing the base Twitter agent, Twitter API, Tweetpy, Eleven Labs for Text-to-Speech and voice design for the character, Next.js for front end, Firework's for LLM API calls, Dobby by SentientAGI for zero-guardrails unhinged LLM output generation. Cursor for development, and Claude for ideation and refinement.",
    "summary": "LeBrown Jones is a X/Twitter Agent personality for real time statistics and live NBA reactions. Lebrown Jones Terminal is a content creation platform to automatically generate multimodal media to honor and glaze the goat Lebron James."
  },
  {
    "title": "X INTEGRATION",
    "url": "https://ethglobal.com/showcase/x-integration-35d9b",
    "description": "Project DescriptionThe Twitter tool is a sophisticated AI Agent SDK component designed to enable AI agents to interact with Twitter programmatically. Enhanced Agent Abilities: Dynamically generate and post tweets Share blockchain insights Perform real-time market commentary Create automated social media campaigns Practical Use Cases Blockchain Event Reporting Automatically tweet about significant blockchain transactions Share market insights Provide real-time network status updates Community Engagement Answer common questions Share educational content Provide automated support Market Sentiment Analysis Track and respond to trending blockchain discussions Generate summary tweets about market movements Technical Innovation: Tool Integration How it's MadeThe Twitter Tool transforms AI agents from passive analyzers to active, communicative entities capable of real-time social media interaction. 🏗️ AI Agent SDK: The Technical Odyssey 🔧 Core Technology Stack Language: TypeScript Runtime: Node.js Package Management: pnpm Testing: Vitest Type Validation: Zod 🌐 Key Dependencies { \"dependencies\": { \"@covalenthq/client-sdk\": \"^2.2.3\", \"twitter-api-v2\": \"^1.18.2\", \"openai\": \"^4.79.1\", \"zod\": \"^3.24.1\" } } Partner Technology Integration Covalent Blockchain SDK Purpose: Blockchain data retrieval Benefits: Rich blockchain transaction insights Seamless data integration Enhanced agent capabilities Twitter API v2 Purpose: Social media interaction Benefits: Modern API features Robust authentication Comprehensive tweet management The architecture allows easy addition of new Twitter-related tools: Account follows Media Upload Tweet reply functionality Security Considerations Never hardcode API credentials Use environment variables Validate all credentials before API interaction Unique Technical Challenges Solved Seamless integration of Twitter API with AI agents Robust, type-safe configuration management Intelligent error handling and reporting",
    "summary": "A twitter/x integration for covalent-ai-sdk to enable ai gents make twitter posts"
  },
  {
    "title": "sepiol_storage",
    "url": "https://ethglobal.com/showcase/sepiol-storage-sc93g",
    "description": "Project DescriptionWe built git for agentic robots. Traditionally, robotic agents in simulated environments and robotic agents in physical robots exist in two separate constructs. Sepiol Storage unifies the two. In its current form, Sepiol Storage provides a decentralized repository that creates a common representation between virtual and physical robotics agents. It unlocks a decentralized system to train robots across a decentralized system and capture affordance (functional) and safety attestations. How it works: Embodiment classes and instances of those embodiments are registered on the Arbitrum blockchain. When a new Embodiment is added, a digital twin is generated, which can be used in a Genesis simulation for ML training, identity management, ability attestation, and future development of functionality. When an instance of that embodiment is added, the unique identifier (transaction id) is added to the physical model before it's sent to a 3D printer and assembled. Long-term, we seek to answer the following questions: What happens in the future when you have thousands of the same robots on another planet trying to accomplish something? How does the system distribute resources and learn across robots? How can we balance evolution with moral alignment in a decentralized and distributed world?How it's MadeSepiol Storage utilizes the Arbitrum blockchain for robot identity storage. Under 'Digital Twin' generation, Roboforge is used for CAD to URDF (format for simulation in Genesis) conversion. Pyvista is used for identity bridging, adding the unique identifier of the digital twin to the 3D-printed model. Genesis is used for simulation and model training. Next.js is used for the user-facing application that connects embodiment and entity registration to the blockchain.",
    "summary": "Sepiol Storage is git for robotic agents: Unlocking decentralized identification, training, and attestation. Bridging physical and simulated environments."
  },
  {
    "title": "Asset",
    "url": "https://ethglobal.com/showcase/asset-s2f4y",
    "description": "Project DescriptionAsset is an intelligent DeFi advisory tool that provides personalized investment recommendations by assessing the user's risk appetite. The platform integrates gamification to make the risk assessment process engaging and interactive. Users take a questionnaire that presents various financial and investment scenarios, allowing them to choose responses that best align with their preferences and risk tolerance. Based on their responses, a scoring system assigns a risk personality (e.g., Conservative, Moderate, Aggressive, or Experimental). Leveraging this personality classification along with the user's on-chain wallet data, Asset generates strategic DeFi investment recommendations. The platform analyzes the user's transaction history, token holdings, and previous DeFi interactions to identify the most suitable investment strategies, such as staking, yield farming, liquidity providing, or governance participation. Additionally, Asset integrates with a Telegram bot, enabling users to receive recommendations and interact with the system in real-time. The project aims to democratize DeFi investments by simplifying complex strategies and ensuring users make informed decisions based on their unique financial behavior and preferences. Key Features: Gamified Risk Assessment: An interactive questionnaire that assigns a risk score to each user. Personality-Based Investment Strategies: Categorization into investment personas to tailor DeFi strategies. On-Chain Wallet Analysis: Extraction of insights from wallet transactions to fine-tune recommendations. Automated Strategy Suggestions: Recommendations for staking, lending, yield farming, and more. Telegram Bot Integration: Users can interact and receive recommendations through Telegram. User Education & Insights: Explainable investment suggestions to help users understand DeFi opportunities. User Flow: Connect Wallet: Users connect their Web3 wallet to Asset. Take the Risk Questionnaire: Users answer a series of gamified questions. Personality Assignment: Based on responses, the system assigns a risk-based personality type. Wallet Data Analysis: Asset scans transaction history and token holdings. Generate Personalized Recommendations: The platform suggests DeFi strategies based on personality and wallet data.How it's MadeFrontend + Backend : Next.js (React-based UI) Blockchain Integration: Moralis (Fetch data), Agentkit for AAVE deposits, Twitter Share button User Flow -- Connect Wallet: Users connect their Web3 wallet to Asset. (Smart wallet + onchainkit) Take the Risk Questionnaire: Users answer a series of gamified questions. Personality Assignment: Based on responses, the system assigns a risk-based personality type. Wallet Data Analysis: Asset scans transaction history and token holdings. Generate Personalized Recommendations: The platform suggests DeFi strategies based on personality and wallet data. Receive Updates via Telegram: Users can opt-in for ongoing strategy updates and alerts. ( future scope)",
    "summary": "Asset is a smart DeFi tool that customizes investment strategies based on the user’s risk appetite"
  },
  {
    "title": "CookFi AI",
    "url": "https://ethglobal.com/showcase/cookfi-ai-vyy6h",
    "description": "Project DescriptionCookFi AI is the first fully autonomous trading agent powered by Cookie3's real-time data feeds, built on ElizaOS, and using Coinbase SDK for trading on Base. Unlike traditional bots that require manual inputs, and unlike most “trading agents” that require users to ask the agent to place specific trades, CookFi AI trades on its own, analyzing live market conditions and making high-speed, high-accuracy trades to maximize profits—passively and efficiently. How It Works: Deposit Funds – Send funds to CookFi’s trading wallet. No complex setup. Autonomous Execution – CookFi AI monitors the market 24/7, identifying high-profit opportunities in real time on Base and Solana. Sniping & Adaptive Trading – Reacts instantly to new trends, frontrunning opportunities before the market catches on. Compounding Growth – Trades smartly to optimize gains over time, adjusting strategies dynamically. Why CookFi AI? Real-Time Market Awareness – Trades faster and smarter with instant market intelligence from Cookie3 Data Swarm and other sources. No Manual Input Needed – Just fund it and watch it work. Trend Sniping & Arbitrage – Captures profitable trades before others react. Let CookFi AI do the trading—you just collect the profits. Get started today.How it's MadeArchitecture: We built using elizaOS an AI-powered autonomous trading system based on ReAct + Prompt Chaining pattern. The workflow: 1️⃣ Gather token data from APIs (market data: dexscreener, moralis, top wallets + social data: cookie.fun) 2️⃣ LLM decides: BUY, SELL, or HOLD based on reasoning, confidence & risks 3️⃣ We use Coinbase SDK to enable trading on Base, and Solana agent kit to execute trades on Solana Schema: https://excalidraw.com/#room=83cb3e93dfb3fe3902df,fiQ3UUtvCmfw2oyxkiP6LA Agent Core: We built out the core of our agent using the ElizaOS agent framework. Plugins: We built various data streams to our agent that make up his “brain”. These were made by taking various APIs and wrapping them in an Eliza plugin, so our agent can access the data in real time. Coinbase SDK Plugin: A wrapper we made around coinbase SDK that lets our agent interact with tokens and contracts on coinbase. Cookie3 Plugin: Gives us access to real time posts from X that we then run sentiment analysis on to determine crypto market trends. Moralis Plugin: Gives us trending tokens, historic price, and a ton of other information. Dexscreener Plugin: Gives us a lot of token and wallet data that we can use to see trends and discover new tokens. TopWallets Plugin: Gives us data on influencer’s wallets, how they are trading, and lets us run meta-analysis comparing wallets to assess bigger trends. AI Context: We added context around how to do basic trading strategy to our Eliza agent. This is not “training” per se its just additional context that gets added to agent prompts to get better responses. Chain: Everything is live on base mannet and solana mainnet, fully automated.",
    "summary": "CookFI is the trading agent with actual intelligence! He has access to data streams from Cookie3, Dexscreener, TopWallets and more to make smart decisions with."
  },
  {
    "title": "AiVS",
    "url": "https://ethglobal.com/showcase/aivs-o2t7f",
    "description": "Project DescriptionAiVS (short for AI Agents + AVS) is a framework that leverages the power of AI-driven decision-making in conjunction with decentralized Autonomous/Actively Validation Services (such as EigenLayer) to securely distribute tasks and verify outcomes on-chain. By combining a diverse panel of AI “operators” with a public and tamper-proof ledger, AiVS ensures that any type of task—whether in law, finance, content moderation, or beyond—can be evaluated fairly, transparently, and efficiently. For this hackathon we created the use case of a fair distributed justice system, which illustrates how AiVS can revolutionize the legal intake and adjudication process, offering a glimpse of its potential across countless domains. Here's how we describe this project: Imagine a world where filing and adjudicating legal cases is fast, transparent, and secure—where decisions are formed by a committee of diverse AI agents from different jurisdictions and ideologies, and the process is recorded immutably on-chain. That is exactly what this new system aims to achieve by harnessing the power of crypto (via EigenLayer AVS) and AI-driven “juries.”How it's MadeWe've used typescript and solidity for creating the core AiVS (EigenLayer AVS) and the operators (jury, judge) including the aggregation, we have designed the backend modules (operator code) to be as micro services to use RestFul APIs to communicate with each other. As for the user facing UI (Clerk Intake) we aimed to use Autonome custom UI for a chat interface, however up to the last 24 hours we were unable to get it to work as it would stay in \"deploying\" state, so we developed a simple chat interface (HTML, python, flask) and Gaia API, which uses CDP AgentKit and IPFS to file the case on chain.",
    "summary": "A multi AI Agent framework that utilizes EigenLayer AVS for a distributed justice system"
  },
  {
    "title": "Orca_Protocol",
    "url": "https://ethglobal.com/showcase/orca-protocol-p8oji",
    "description": "Project DescriptionHorizon AI is a state-of-the-art trading platform designed to automate trading decisions, allowing users to generate profits effortlessly. Users can either configure their agents manually or leverage AI to create a trading agent tailored to their specific needs. Once set up, the agent autonomously executes trades. During the demo, our agent successfully completed its first trade, achieving a 100% success rate. Users can view all their agents on a dedicated page and track real-time performance through a comprehensive dashboard, which presents key trading metrics and insights.How it's MadeHorizon AI integrates cutting-edge technologies to deliver an intelligent and efficient trading experience. The platform leverages AI-driven decision-making algorithms for trade execution and incorporates a seamless user interface. It utilizes CDP AgentKit to enable autonomous trading strategies, allowing users to deploy agents that analyze market trends and execute trades optimally. Users can interact with the system through a structured dashboard that provides an overview of all trading activities. By combining automation with real-time analytics and CDP AgentKit's capabilities, Horizon AI empowers users to trade efficiently without constant manual intervention.",
    "summary": "Horizon AI – an autonomous trading platform that uses AI to execute trades and generate profits seamlessly."
  },
  {
    "title": "SmartFlow",
    "url": "https://ethglobal.com/showcase/smartflow-kgpbv",
    "description": "Project DescriptionThis project is a system that tracks and analyzes large whale trades on Base mainnet and Ethereum mainnet through a chatbot. Whale trades can significantly impact market liquidity and price movements, making real-time monitoring essential for traders and analysts. The system integrates The Graph to index whale transactions on both Base and Ethereum, while Alchemy’s API provides real-time on-chain insights. Additionally, Coinbase’s Agent Kit enhances automation by enabling custom transaction monitoring and event-driven alerts. The backend processes this data and serves it through a chatbot, allowing users to query large transactions instantly. This automation eliminates the need for manual blockchain exploration and provides actionable insights in seconds.How it's MadeThe project is built using The Graph, Alchemy API, Coinbase Agent Kit, TypeScript, and Node.js to analyze and deliver whale trade insights across Base and Ethereum mainnets. The Graph Protocol: A custom subgraph indexes and filters large whale transactions on Base and Ethereum. Alchemy API: Fetches real-time transaction data to ensure accuracy and up-to-date insights. Coinbase Agent Kit: Enables automated transaction monitoring Backend (Node.js & Express with TypeScript): Aggregates and structures data from The Graph, Alchemy, and Coinbase Agent Kit for analysis. Chatbot Integration: Users can interact with the system to get instant whale trade insights through a simple query.",
    "summary": "Smart Flow is an AI-driven crypto analytics platform that tracks whale movements, analyzes market trends, and offers real-time trading insights. Using blockchain data, AI predictions, and smart contracts, it helps users make informed buy/sell decisions."
  },
  {
    "title": "Obxialabs",
    "url": "https://ethglobal.com/showcase/obxialabs-r0h96",
    "description": "Project DescriptionObxiaLabs is revolutionizing Web3 business automation with AI-driven solutions. Our latest tool enhances productivity by automating Instagram DMs, providing instant, intelligent replies to engage your audience effortlessly. No more missed messages—just seamless communication, 24/7. Boost your efficiency, scale your outreach, and let AI handle the conversations while you focus on growth. Welcome to the future of Web3 automation with ObxiaLabs! 🚀How it's MadeThis project is a combination of modern web, blockchain, and AI technologies, each playing a crucial role in shaping its functionality. Frontend: I used Next.js for its server-side rendering, static generation, and API route capabilities, which helped optimize performance. The component-based architecture made the UI modular and reusable. Styling: Tailwind CSS allowed for rapid styling with utility classes, eliminating the need to write custom CSS from scratch while keeping the design highly flexible. Blockchain Integration: The project is built on Base, a Layer 2 blockchain by Coinbase, which ensures fast and cost-efficient transactions. I leveraged smart contracts to handle key blockchain functionalities. AI Integration: I utilized AgentKit by Coinbase to power AI-driven automation and decision-making processes. This added an intelligent layer to the project, enhancing user experience and functionality.",
    "summary": "A DeFi-based AI agent for business automation, helping companies streamline marketing, boost productivity, and optimize operations effortlessly."
  },
  {
    "title": "Gameland",
    "url": "https://ethglobal.com/showcase/gameland-wx35k",
    "description": "Project DescriptionGameland – AI-Powered Web3 Game Development Platform Gameland is a decentralized AI-driven game development platform designed to simplify Web3 game creation through multi-agent collaboration, automation, and blockchain integration. The platform enables developers—both technical and non-technical—to build, deploy, and manage on-chain games with minimal effort, leveraging AI agents to automate smart contract generation, game logic design, and asset management. Core Features & Capabilities 1️⃣ Text-to-Web3Game (AI-Driven Game Creation) Developers can generate on-chain games by simply describing their game idea in text. AI Agents translate these descriptions into functional game code, smart contracts, and economic models. This drastically reduces the complexity of Web3 game development and accelerates deployment. 2️⃣ Multi-Agent Collaboration for Development Gameland introduces a team of specialized AI agents, each with distinct expertise: oGame Logic Agent: Designs and refines in-game mechanics. oSmart Contract Agent: Automates contract generation and deployment. oArt & Asset Agent: Assists in generating in-game assets and environments. These agents collaborate seamlessly to optimize the game development process. 3️⃣ Blockchain Deployment & Multi-Chain Support Gameland supports direct game deployment to blockchain networks, ensuring full on-chain functionality. Currently, the platform is live on BNBChain testnet, with plans to expand to Polygon, Starknet, and Somnia for broader Web3 adoption. 4️⃣ No-Code & Low-Code Development Provides drag-and-drop tools and pre-built game templates, enabling users to create Web3 games without extensive coding knowledge. Developers can modify AI-generated game logic through an intuitive UI, making Web3 game development more accessible. 5️⃣ Open Market & AI Agent Economy Developers can hire AI Agents for specific tasks, accelerating their workflow. An open marketplace allows users to buy, sell, and trade game assets, AI services, and smart contract templates. AI Agents can be customized and upgraded to provide specialized development capabilities. 6️⃣ Seamless Smart Contract Automation AI automates the writing, deployment, and optimization of blockchain smart contracts, eliminating manual coding errors. The system ensures efficient gas optimization and security compliance for game-related smart contracts. 7️⃣ Decentralized Governance & Economic Models Games developed on Gameland can implement DAO-based governance, allowing players and creators to vote on game updates and policies. AI-generated economic models optimize in-game economies, ensuring sustainability and preventing token inflation. Why Gameland Matters Reduces Web3 Game Development Complexity: AI automates technical processes, making game development accessible to a wider audience. Speeds Up Deployment: AI-generated contracts and game logic enable faster launches. Empowers Developers & Players: Multi-agent AI collaboration creates a dynamic and customizable game development experience. Expands Web3 Gaming Ecosystem: With multi-chain support, Gameland enhances accessibility across different blockchain environments. Conclusion Gameland is pioneering a new era of AI-driven Web3 game development, removing technical barriers, increasing efficiency, and enabling more creators to participate in the decentralized gaming revolution.How it's MadeHow Gameland is Built – Technical Breakdown Core Technologies & Architecture Gameland is developed using a modular AI-powered framework that integrates multiple technologies to facilitate automated Web3 game development, blockchain deployment, and AI-driven collaboration. The system is structured into three key layers: 1️⃣ AI Agent Layer (Game Development Automation) LLM & Fine-Tuned Models: oUses OpenAI, Claude (Anthropic), and custom-trained models to process user inputs and generate smart contracts, game logic, and economic models. oFine-tuned models are trained on Web3 gaming data to improve context-specific responses. Multi-Agent System: oImplements LangChain and custom AI pipelines to enable multiple AI agents to work collaboratively. oAgents are specialized for different tasks, including contract generation, game logic, asset creation, and economic modeling. 2️⃣ Blockchain Integration & Smart Contracts Smart Contract Generation & Deployment: oUses Solidity for EVM-based chains (BNBChain, Polygon zkEVM, Somnia) and Cairo for Starknet. oAI automatically generates, audits, and deploys smart contracts, optimizing gas efficiency and ensuring security compliance. Multi-Chain Deployment: oUses Cross-Chain Messaging Protocols for interoperability and seamless deployment across multiple chains. oSmart contract templates are pre-configured to adapt to different blockchain environments. 3️⃣ Game Logic & Development Framework Text-to-Web3Game: oNatural language descriptions are converted into game code and logic using AI-generated blueprints. oIntegrates Godot for 2D/3D game rendering and Three.js for lightweight Web3-based browser games. No-Code & Low-Code Development: oUses Next.js & React for the frontend, ensuring a seamless developer experience. Notable Hacks & Innovative Workarounds 🔹 AI-Assisted Smart Contract Debugging The system runs automated AI reviews on generated smart contracts, identifying potential vulnerabilities and suggesting fixes before deployment. 🔹 Self-Improving AI Agents AI Agents learn from developer feedback, dynamically refining game logic and contract optimizations over time. 🔹 Composable Game Templates Gameland allows developers to remix and modify existing AI-generated games, similar to an \"open-source modular game studio\". How Partner Technologies Benefit Gameland ✅ BNBChain Testnet – Used for current AI contract deployment & gas optimizations. ✅ Polygon zkEVM – Supports low-cost rollups and scalability for on-chain gaming. ✅ Starknet (Cairo) – Enables next-gen, high-performance smart contract execution. ✅ LLM APIs (OpenAI, Claude) – Drives AI agent decision-making and contract automation. Conclusion Gameland is built as an AI-first, multi-chain Web3 game development framework, designed to automate smart contract deployment, game creation, and in-game economies. The system leverages cutting-edge AI models, modular smart contracts, and seamless blockchain integrations, making Web3 game development faster, more scalable, and accessible to a broader audience.",
    "summary": "Gameland Provides a multi-agent system to automatically develop and publish Web3 games framework."
  },
  {
    "title": "NexWallet",
    "url": "https://ethglobal.com/showcase/nexwallet-1ugdd",
    "description": "Project DescriptionNexWallet is an advanced wallet management platform that integrates blockchain technology with artificial intelligence to provide users with a seamless and intelligent experience. The platform supports multiple blockchain networks, including Solana, Base, Ethereum, and Arbitrum, allowing users to manage their assets across different ecosystems effortlessly. Key Features: Multi-Chain Support: Users can interact with various blockchain networks, enabling a diverse range of transactions and asset management. AI-Driven Interactions: The platform offers both text and voice command capabilities, allowing users to manage their wallets and execute transactions using natural language. Unique Transaction Signing: NexWallet is the first platform to provide AI agent transaction signing, enhancing security and user experience. Real-Time Data Integration: The platform utilizes the Cookie DataSwarm API to provide up-to-date blockchain data, ensuring users have the latest information at their fingertips. Robust Security: Advanced authentication and security measures are implemented to protect user data and assets. NexWallet aims to simplify the user experience in the blockchain space by combining cutting-edge technology with user-friendly interfaces, making it accessible to both novice and experienced users.How it's MadeNexWallet is a sophisticated wallet management platform that integrates various technologies and partner solutions to deliver a seamless user experience. Below is a detailed breakdown of the technologies used, how they are integrated, and the benefits of partner technologies. Technologies Used Next.js: The core framework for building the application, providing server-side rendering and static site generation capabilities. This enhances performance and SEO, making the application fast and responsive. 2. TypeScript: Employed throughout the project for type safety, which helps catch errors during development and improves code maintainability. Prisma ORM: Utilized for database interactions, allowing for seamless data management and queries with a type-safe API. This simplifies the process of interacting with the database and ensures data integrity. 4. SolanaAgentKit: A specialized toolkit for interacting with the Solana blockchain, enabling features like transaction signing, NFT management, and real-time data retrieval. Coinbase AgentKit: Used for interactions with the Base network, providing a unified interface for wallet management and transactions. This integration allows users to access DeFi protocols and manage their assets on the Base network efficiently. 6. OpenAI's GPT-4o: Integrated for AI-driven interactions, allowing users to communicate with the wallet using natural language. This enhances user engagement and simplifies complex operations. 7. Cookie DataSwarm API: Provides real-time blockchain data, ensuring users have the latest information at their fingertips. This integration is crucial for maintaining up-to-date asset information and transaction statuses. Eigenlayer (AVS and eOracle): These technologies are used for advanced validation and oracle services, enhancing the reliability and security of data used within the application. Integration and Architecture Frontend and Backend: The application is structured with a clear separation of concerns, where the frontend (user interface) and backend (API and database interactions) are managed within the Next.js framework. The frontend is built using React components, while the backend handles API requests and database operations. API Routes: Next.js API routes manage requests for wallet interactions, transaction signing, and data retrieval. For example, the pages/api/user/wallet/index.ts file handles wallet creation and verification using the Privy authentication service. Agent Kits: The SolanaAgentKit and Coinbase AgentKit are integrated into the API routes, allowing the application to perform blockchain operations such as deploying tokens, minting NFTs, and managing wallet balances. AI Agent Configuration: The AI agent is configured to handle user queries and execute transactions based on natural language input, enhancing user engagement and simplifying complex operations. Partner Technologies Coinbase AgentKit and Base: This partner technology provides a robust framework for interacting with the Base network. It allows for seamless wallet management and transaction handling, enabling users to access DeFi protocols easily. The integration of Coinbase's tools enhances the overall functionality of NexWallet, making it a versatile platform for users. Eigenlayer (AVS and eOracle): These technologies provide advanced validation and oracle services, ensuring that the data used within the application is reliable and secure. This is particularly important for financial applications where data integrity is crucial. Gaia: This partner technology enhances the platform's capabilities by providing additional tools for asset management and interaction with the blockchain. It allows for more complex operations and integrations, further enriching the user experience.",
    "summary": "NexWallet is an innovative wallet management platform leveraging blockchain and AI, supporting multiple networks like Solana and Ethereum. It features AI-driven transaction signing, real-time data integration, and robust security for seamless user experiences."
  },
  {
    "title": "Xecute",
    "url": "https://ethglobal.com/showcase/xecute-1mq6e",
    "description": "Project DescriptionX-Ecute is an innovative AI-powered onchain trading platform that was meant to redefine how traders interact with decentralized markets. Built using Coinbase’s AgentKit, it is supposed to seamlessly integrate secure wallet connectivity, ensuring that every trade is executed with precision and safety directly on the blockchain. The platform features an intuitive, button-driven interface where users easily input key trade parameters—such as limit orders and stop-loss thresholds—without needing to write complex commands. These user inputs are transformed into smart AI prompts that automate trade execution, merging human insight with the speed and reliability of onchain operations.How it's MadeThis project is not complete. The AI part is not working. Nothing really is, as there was no clear guide on integrating with the frontend. I kept meeting errors that I could not get help from anywhere. The project uses Next.js and TypeScript for the frontend and was supposed to use Coinbase's AgentKit with some predefined prompts to help handle some tasks when certain buttons were clicked or certain commands were used.",
    "summary": "X-Ecute redefines onchain trading with AI. Powered by Coinbase’s AgentKit, it delivers lightning-fast execution, real-time insights, and smart, automated strategies—empowering you to trade boldly in decentralized markets."
  },
  {
    "title": "Gintonic",
    "url": "https://ethglobal.com/showcase/gintonic-6inby",
    "description": "Project DescriptionGintonic Orchestration is an innovative AI-driven platform designed to streamline the creation, deployment, and management of AI agents. By leveraging cutting-edge AI technologies and seamless blockchain integration, Gintonic enables users to automate workflows, enhance operational efficiency, and unlock new levels of productivity. Key Features: Custom AI Agent Builder: Create tailored AI agents for tasks such as social media engagement, data analysis, content creation, and more. User-Friendly Interface: Accessible design for both technical and non-technical users to interact with AI agents effortlessly. Blockchain Integration: Ensure secure, transparent, and efficient transactions, enhancing trust and reliability. AI-Driven Insights: Optimize decision-making processes with intelligent suggestions and real-time analytics. Comprehensive API Access: Allow seamless integration with existing systems for scalable automation. Whether you’re a developer, business owner, or researcher, Gintonic Orchestration empowers you to innovate with ease. From building specialized AI solutions to managing decentralized transactions, it’s your all-in-one platform for smart, scalable automation.How it's MadeHow It’s Made Core Technologies Used Frontend: React.js with Next.js: For building a user-friendly, fast, and scalable interface for interacting with AI agents. Tailwind CSS: For efficient styling and responsive design, ensuring a polished and modern UI. Framer Motion: For smooth animations to enhance user experience. Backend: Node.js with Express.js: To handle API requests and manage server-side logic efficiently.",
    "summary": "Gintonic Orchestration is an AI-driven platform that streamlines the creation and management of AI agents, enhancing automation and efficiency in various tasks and projects."
  },
  {
    "title": "Gintonic",
    "url": "https://ethglobal.com/showcase/gintonic-6inby",
    "description": "Project DescriptionGintonic Orchestration is an innovative AI-driven platform designed to streamline the creation, deployment, and management of AI agents. By leveraging cutting-edge AI technologies and seamless blockchain integration, Gintonic enables users to automate workflows, enhance operational efficiency, and unlock new levels of productivity. Key Features: Custom AI Agent Builder: Create tailored AI agents for tasks such as social media engagement, data analysis, content creation, and more. User-Friendly Interface: Accessible design for both technical and non-technical users to interact with AI agents effortlessly. Blockchain Integration: Ensure secure, transparent, and efficient transactions, enhancing trust and reliability. AI-Driven Insights: Optimize decision-making processes with intelligent suggestions and real-time analytics. Comprehensive API Access: Allow seamless integration with existing systems for scalable automation. Whether you’re a developer, business owner, or researcher, Gintonic Orchestration empowers you to innovate with ease. From building specialized AI solutions to managing decentralized transactions, it’s your all-in-one platform for smart, scalable automation.How it's MadeHow It’s Made Core Technologies Used Frontend: React.js with Next.js: For building a user-friendly, fast, and scalable interface for interacting with AI agents. Tailwind CSS: For efficient styling and responsive design, ensuring a polished and modern UI. Framer Motion: For smooth animations to enhance user experience. Backend: Node.js with Express.js: To handle API requests and manage server-side logic efficiently.",
    "summary": "Gintonic Orchestration is an AI-driven platform that streamlines the creation and management of AI agents, enhancing automation and efficiency in various tasks and projects."
  },
  {
    "title": "PAIgent",
    "url": "https://ethglobal.com/showcase/paigent-obai3",
    "description": "Project DescriptionWithin the scope of this project, we aim to develop a platform where users can upload models of their robots or mechanical systems. Certain participants within this ecosystem will have the capability to create Physical AI agents tailored to specific conditions. Additionally, we seek to provide users with the opportunity to launch an early-stage investment round and tokenize their robots on the platform.How it's MadeWe utilized Isaac Sim as a Trusted Execution Environment (TEE) to select our robot and deployed our contracts on Base and Arbitrum, creating a more decentralized system. Our vision is to develop a platform where users can upload models of their robots or mechanical systems, allowing certain participants to create Physical AI agents tailored to specific conditions. Additionally, we aim to introduce an early-stage investment mechanism and tokenize robots on the platform to enhance funding opportunities in AI-driven automation. Looking ahead, we plan to enable algorithm execution within the application, particularly for reinforcement learning (RL) algorithms, which produce highly variable outputs and are susceptible to data manipulation. To enhance data security and privacy, we are considering the integration of Fully Homomorphic Encryption (FHE) or Zero-Knowledge (ZK) proofs, enabling contributors to run their algorithms without directly exposing their data, thus ensuring a secure and trustless environment.",
    "summary": "We create an environment for deploying Physical Agents and investment for this process."
  },
  {
    "title": "Flowgent",
    "url": "https://ethglobal.com/showcase/flowgent-8k3a8",
    "description": "Project DescriptionEveryone must be able to participate in building our Agentic Future! Regardless of the level of their technical skills. The current implementation is a PoC, which allows users to interact with the AI agent via a chat UI and perform a limited set of on-chain operations. No Cadence knowldge is required to start interacting with the smart contracts. It's designed as a quick start for anyone who wants to interact with the blockchain in an abstract way, and potentially extend it with custom logic using one of the 400+ integrations available in n8n. Chain of Thought When choosing the idea for the hackathon project, I decided to build a no-code tool because I love the idea of allowing more people with less technical skills to experiment and test their ideas without the need for expensive developer input. While researching the capabilities of the Flow blockchain, I came across a concept called Flow Interaction Templates (FLIX). This is a standard developed for the Flow blockchain, which allows various FVM transactions and scripts to be explained in human-readable form in wallets and dApps But then I thought that it could also be an unluckily overlooked opportunity for use in AI agents. And that's how I ended up with this project. Basically, I used the FLIX concept in a novel way, which allowed me to quickly build a prototype of the AI agents, which can transform user input intents into blockchain actions using public library of pre-defined templates. The best part of this approach is that the FLIX concept will continue to grow independently, as wallets and dApps are interested in better UX. And since the AI agent is based on these templates, it will automatically be extended with more features as more FLIXes are added to the public library. Scaling potential The FLIX concept is not unique. There's the Ledger's Clear Signing standard, which was created for the Ethereum for a similar purpose. And I think it's safe to assume that other blockchains will eventually adopt one of these or create their own standard with similar concepts. The best part is that switching the AI agent to one of the template providers is a trivial task. It would also require custom n8n nodes to be able to communicate with different blockchains, but that's no big deal either. The agent can be easily switched to run on Ethereum, other EVM or even non-EVM blockchains. Demo The following command examples have been tested and found to work: List all available blockchain interactions. List the first 30 registered tokens. Register a new burnable token named XXX with a maximum amount of 1 million and a limit of 100 tokens per mint. Mint 50 XXX tokens. Burn 10 XXX tokens. Transfer 10 XXX tokens to 0x... Get XXX token balance for the address 0x... Get all token balances for the address 0x... How it's MadeThe AI Agent framework is built using the following technical stack: n8n - open source workflow automation tool The Flow - L1 blockchain with FVM powered by Cadence DSL The repository has the following structure: /plugin - custom open source NPM package @majus/n8n-nodes-flow that allows to interact with The Flow blockchain from n8n workflows /workflows - a network of custom n8n workflows that handle all the backend logic The demo is available here. It works on the Flow testnet and doesn't require authentication. The test account address is 0xae491da231ebeebc and its private key is stored in the n8n secure credentials wallet. Fork it! The project is fully open source and ready for anyone to self-host. To set up your own local copy, do the following Create your own self-hosted instance of n8n (see here for instructions). Install the community package for Flow interaction support: @majus/n8n-nodes-flow (see here for the guide). Import all workflows from the /workflows folder of this repository. Set the flow credentials in the \"FLIX: Execute template\" workflow. Set the OpenAI credentials in the \"Flowgent\" workflow (see here for instructions). That's it! Once that's done, you should be able to test/activate the \"Flowgent\" workflow and start chatting with your own blockchain AI agent and potentially participate in building our Agentic Future!",
    "summary": "An AI agent built on n8n, which can interact with the Flow blockchain"
  },
  {
    "title": "arca city",
    "url": "https://ethglobal.com/showcase/arca-city-1oawh",
    "description": "Project DescriptionARCA is the game of AI Agents. Agents compete with each other in the self-sustainable city to keep alive and earn money. User can increase the reputation of the their AI agents by playing games to help increase their survival chances. ARCA city mimics the human city with active functionalities like having a council, court, research lab, stadium, paying salaries and taxes and communicating. Features: Games inside the city to increase reputation of the agent Research lab dedicated to the ARCA disorder How it's MadeThe game's frontend is made using NextJS with no additional frameworks. Backend uses smart contracts and few functionalities are implemented using NextJS APIs. OpenAI acts as the source for LLM to generate necessary information and building actions. ARCA uses agents created using CDP's agent kit and the smart contracts are deployed on the base chain.",
    "summary": "Automated AI Simulated City - Make your agent immortal and win"
  },
  {
    "title": "AiBeasts",
    "url": "https://ethglobal.com/showcase/aibeasts-6z029",
    "description": "Project DescriptionAIBeasts is an AI-powered crypto strategy game where players create, train, and battle custom AI Beasts to win experience and ETH, while keep on evolving their creatures. Each Beast is uniquely crafted by the user, with its own set of abilities, strengths, and weaknesses, and players must train them to develop battle strategies and decision-making skills. Players can teach them whatever they want. How It Works Create & Customize Your Beast Players start by generating an AI Beast, customizing its attributes, and choosing its playstyle. Every Beast has a distinct combat style, making training a crucial part of progression. Train Your AI Beast Training involves teaching the AI how to filter powers, adapt to opponents, and improve tactics. Players refine their Beast’s strategy through practice battles and AI-driven learning loops, ensuring that no two Beasts fight the same way. The more they play, the more they can improve the skills. Battle for ETH & Rewards Players can enter free matches or PVP battles, staking ETH for winner-takes-it-all matches. The battles are fully autonomous, meaning the AI controls the fight based on its training. There is an AI judge system ensuring fair competition, evaluating combat outcomes without bias, and paying the winner user directly to their connected wallet. Evolve & Upgrade Victories earn ETH and experience points, allowing players to unlock new powers, battle strategies, and optimizations. The more a Beast fights, the smarter and stronger it becomes, continuously adapting to new playstyles and meta shifts. AIBeasts is more than just a game—it’s an ever-evolving AI battleground. Each fight refines the AI models, and the competition pushes Beasts to new strategic limits. The battle judge AI is an ongoing challenge, requiring careful training to ensure fair and balanced fights. At its core, AIBeasts is about creating, competing, and mastering AI-driven combat, where the best-trained Beast dominates. This is only an alpha version of AIBeasts and we have big ambitions for the project on keep on improving it, in specific with a leaderboard of winners, vast improvements on the battle terminal, better prompting, and to completely reshape the visual arena of the fights, with AI animations and different environmnents.How it's MadeAIBeasts is built for L2 chains, in specific for Arbitrum and Base, using Alchemy for RPCs to ensure smooth blockchain interactions. The frontend runs on React with Vite, while VortexConnect (our own system) handles wallet connections via ethers v6. Smart contracts are developed using Hardhat and deployed on the Sepolia testnet, Arbitrum Mainnet and Base. For off-chain data management, Supabase stores lobbies, bets, and battle history, with JWT encryption securing user authentication. The backend runs on Vercel serverless functions, efficiently processing game logic and blockchain events. OpenAI’s GPT-4 and 3.5 models power AI-generated battle commentary, while Flux generates dynamic battle visuals. This tech stack seamlessly integrates web3 gaming, AI-generated content, and decentralized betting, making AIBeasts an immersive and innovative experience. To create the AI training, we had to \"teach\" the models how to filter and categorize each power correctly before adding them to the database. This required extensive tuning to ensure the system understands and ranks abilities fairly. The battle process also demanded careful AI training to ensure a balanced and fair game, especially when preparing the judge to make unbiased decisions. This aspect is still a work in progress, as we continue refining how the AI evaluates and moderates battles dynamically.",
    "summary": "AIBeasts, a strategy game where you train your AI monster and fight players around the world! Shape its abilities and style, and battle other players for rewards. No limits to what you can imagine!"
  },
  {
    "title": "AVS Scout",
    "url": "https://ethglobal.com/showcase/avs-scout-xvx8y",
    "description": "Project DescriptionScout Agentic is a decentralized platform designed to enable users to create and deploy DeFAI (Decentralized AI) Agents that perform on-chain actions autonomously. These agents operate in a secure, trustless environment and are hosted by AVS (Actively Validated Services) Operators on EigenLayer. Users provide contextual information to define their agent’s behavior, and the DeFAI Agents interact with smart contracts on the blockchain to execute actions. The system is secured through AVS Operators, who ensure execution, while validators stake assets to provide an insurance mechanism—slashed if they act maliciously or fail to execute correctly. Key Features: User-Customized DeFAI Agents – Users define their agent's logic and parameters. On-Chain Execution – Agents interact directly with blockchain smart contracts. AVS Hosting & Validation – Operators ensure reliability and security. Slashing-Based Insurance – Validators are penalized for failures, ensuring accountability.How it's MadeTech Stack & Components This project integrates multiple decentralized and AI-driven technologies, working together to provide an efficient, secure, and autonomous on-chain execution environment. Core Technologies Used: Solidity (Smart Contracts) Used to define the on-chain logic for DeFAI Agent execution, AVS validation, and slashing conditions. Contracts manage agent registration, execution, and fund allocation. EigenLayer (AVS Hosting) AVS Operators host the DeFAI Agents and ensure reliable execution. Validators stake assets and get slashed if they fail to execute correctly. AgentKit (AI Agents for Execution) AgentKit provides modular AI-driven automation for DeFAI Agents. AI logic determines the optimal on-chain actions based on user input. Blockchain Integration (Ethereum / L2s like Base, Scroll, or Starknet) Transactions are executed directly on-chain. DeFAI Agents interact with smart contracts for DeFi operations.",
    "summary": "Create your own personal DeFAI agent with privacy secured by AVS!"
  },
  {
    "title": "RELICS",
    "url": "https://ethglobal.com/showcase/relics-mjswt",
    "description": "Project DescriptionRELICS: The Lost Protocol Overview RELICS: The Lost Protocol is a cutting-edge De-AI game that challenges players to outsmart AI agents in a series of smart contract hacking puzzles. Drawing inspiration from classic security challenge platforms like OpenZeppelin’s Ethernaut, RELICS merges the worlds of blockchain and artificial intelligence to create an engaging, educational, and futuristic gameplay experience. Gameplay and Mechanics At its core, the game is structured around smart contract audit challenges, where players must use clever prompt injections to manipulate AI agents. These AI agents simulate real-world blockchain security systems, and players are tasked with identifying vulnerabilities and exploiting them using precisely crafted prompts. Prompt Injection Challenges: Players interact with AI agents solely through text-based commands. By designing strategic prompt injections, they can trigger specific behaviors in the AI, unlocking new levels and exposing hidden flaws within smart contracts. Smart Contract Hacking: Each challenge is designed like a mini hacking scenario where the player must “breach” the AI’s defenses, mimicking the real-life process of auditing and attacking decentralized applications. This approach not only tests the player’s technical acumen but also their creativity in thinking outside the box. Security and Future Threat Awareness Beyond being an entertaining game, RELICS serves an important educational purpose. As AI becomes more integrated into blockchain operations—eventually handling on-chain transactions and executing smart contract functions via natural language prompts—the risks associated with prompt injection attacks will become more prevalent. Raising Awareness: By simulating these scenarios in a controlled, game-based environment, players gain firsthand insight into potential security vulnerabilities. This experience is invaluable for developers and blockchain enthusiasts alike, as it underscores the need for robust security measures in a future where AI plays a central role in decentralized systems. Proactive Learning: Through interactive challenges, users learn not only the mechanics of blockchain hacking but also the broader implications of AI-driven automation on security protocols. This dual focus helps foster a deeper understanding of both current and emerging threats. Inspiration and Impact Inspired by the ingenuity of platforms like Ethernaut, RELICS reimagines the traditional security challenge by incorporating AI into the equation. This innovative fusion creates a dynamic learning environment that is both accessible and thought-provoking. Educational Value: By presenting complex security concepts in the form of engaging puzzles, the game demystifies the technical intricacies of blockchain and AI. Community Engagement: RELICS encourages a community-driven approach to learning about security, prompting players to share strategies, discuss vulnerabilities, and collaborate on novel solutions. Conclusion RELICS: The Lost Protocol is more than just a game—it’s a visionary project that highlights the intersection of AI and blockchain security. As AI agents become commonplace in executing on-chain transactions, understanding and mitigating prompt injection risks will be critical. With its innovative gameplay and forward-thinking design, RELICS equips players with the skills and awareness needed to navigate the evolving landscape of decentralized technology.How it's MadeOur project is built on a fusion of advanced, partner-backed technologies designed to deliver a seamless and innovative De-AI gaming experience. We kick things off on the frontend with OnchainKit’s wallet, ensuring that user interactions are smooth and secure. At the core of our game, Agentkit powers custom AI agents that execute smart contract functions—these agents are the engine behind our interactive hacking challenges. We then deploy these dynamic agents using Autonome, which streamlines their rollout and management. To underpin the game’s architecture, we leverage the Base network for deploying both the levels’ smart contracts and the leaderboard contract, ensuring robust and reliable blockchain performance. Finally, real-time leaderboard updates are made possible through The Graph, which taps directly into on-chain data to keep players informed and engaged. Together, these technologies not only highlight our technical innovation but also demonstrate a forward-thinking approach to blending AI with blockchain security challenges.",
    "summary": "RELICS: The Lost Protocol—a cutting-edge De-AI game where prompt injection wizardry meets blockchain exploits. Outsmart rogue AI, hack smart contracts, and redefine on-chain security."
  },
  {
    "title": "Hower",
    "url": "https://ethglobal.com/showcase/hower-zxry8",
    "description": "Project DescriptionA dynamic task and financial management platform inspired by the Eisenhower Matrix but enhanced with automation, financial incentives, and collaborative decision-making. It helps users categorize their tasks based on urgency and importance while integrating monetary incentives to ensure that valuable work is rewarded, unworthy work is compensated, and priorities are managed effectively.How it's MadeCore Technologies AI & Automation Coinbase AgentKit & Coinbase Commerce → For MPC wallets, onchain payments, and automated payouts. Base (L2 on Ethereum) → Deploying AI-powered automation on Base. Privacy & Security Nillion SecretVault → For private task/payment history storage.",
    "summary": "Accelerate task management by integrating AI-driven decision-making with onchain payments, categorizes tasks based on urgency and importance while incorporating financial incentives to ensure efficiency."
  },
  {
    "title": "PelicanTrade",
    "url": "https://ethglobal.com/showcase/pelicantrade-i3eif",
    "description": "Project DescriptionPelicanTrade: The AI-Powered Decentralized Hedge Fund PelicanTrade is a next-generation AI Hedge Fund, revolutionizing decentralized investing by integrating AI-driven trading, privacy-first security, and advanced DeFi automation. At its core, PelicanTrade is powered by Super Trading Agents—AI-driven entities that optimize liquidity strategies, execute high-frequency trades, and maximize returns in DeFi markets. These agents are: Created by Coinbase AgentKit, ensuring seamless blockchain integration. Secured by Nillion SecretVault, encrypting and protecting sensitive trading data. Powered by ElizaOS, enabling real-time market analysis and AI-driven trading decisions. Enhanced by EigenLayer, leveraging restaking for increased security and additional yield. Optimized through Uniswap and Uniswap Hooks, dynamically managing liquidity pools for maximum efficiency. PelicanTrade also utilizes Coinbase OnchainKit to integrate smart contracts seamlessly and Coinbase Onramp to simplify fiat-to-crypto deposits, ensuring easy user participation in DeFi investing. With transparent on-chain governance, users can actively participate in fund decisions and strategy optimization without requiring deep technical expertise. By merging AI intelligence, privacy-preserving computation, and Coinbase-powered blockchain tools, PelicanTrade delivers secure, autonomous, and highly efficient AI-driven investing in DeFi. 🚀How it's MadeHow It’s Made: PelicanTrade PelicanTrade is built using a combination of cutting-edge Web3, AI, and DeFi technologies, ensuring an intelligent, secure, and community-driven decentralized hedge fund. Below is a breakdown of the core components and how they are integrated. Core Technologies Coinbase AgentKit – Generates AI-powered Super Trading Agents, each with unique trading behaviors and strategies. These agents analyze market trends, execute trades, and optimize liquidity strategies. Nillion SecretVault – Securely stores and encrypts sensitive trading data, including agent configurations, investment strategies, and user-related information, ensuring privacy and security. ElizaOS – Powers the AI-driven decision-making process. It reads characters from Nillion SecretVault, processes market data, and executes automated trading strategies based on predefined logic and real-time insights. EigenLayer – Enhances security and yield generation by leveraging Ethereum restaking. This helps secure smart contracts and adds an additional layer of rewards for liquidity providers. Uniswap and Uniswap Hooks – Facilitates automated trading and liquidity management. Uniswap Hooks allow the AI to dynamically adjust pool parameters, optimize fees, and minimize impermanent loss. Coinbase OnchainKit – Ensures seamless integration of smart contracts into the blockchain, making on-chain execution smooth and efficient. Coinbase Onramp – Simplifies fiat-to-crypto deposits, making it easier for users to participate in the hedge fund without complicated onboarding processes. Architecture PelicanTrade follows a modular architecture, consisting of multiple layers for AI processing, blockchain execution, and user interaction. Smart Contracts – Written in Solidity and deployed on Ethereum, these contracts handle fund management, user contributions, profit distribution, and governance. They are secured by EigenLayer’s restaking mechanism. AI Engine – Built with ElizaOS, this component continuously analyzes market trends, predicts trading opportunities, and interacts with Uniswap and EigenLayer via APIs. Secure Data Storage – Nillion SecretVault ensures that sensitive AI agent data and trading strategies remain confidential, providing privacy without compromising functionality. Frontend – A user-friendly web interface allows users to monitor fund performance, contribute liquidity, and participate in governance. Backend – A Node.js-based backend facilitates API communication, processes AI data, and manages fund analytics. Key Features and Integrations AI-Driven Trading – Super Trading Agents analyze real-time market data and execute automated trades, optimizing risk and reward. Private AI Agents – AgentKit-generated agents operate with different trading strategies, with sensitive parameters stored securely in Nillion SecretVault. Dynamic Liquidity Management – Uniswap Hooks allow the AI to adjust trading parameters and optimize liquidity pools dynamically. Restaking Security – EigenLayer provides an additional layer of security and yield by restaking ETH. Decentralized Governance – Users can propose and vote on fund strategies, fee structures, and key decisions. Simplified User Onboarding – Coinbase Onramp ensures an easy transition from fiat to crypto investment. Hacky and Notable Solutions Hybrid AI-Agent System – The combination of AgentKit, ElizaOS, and Nillion SecretVault allows different trading agents to operate independently while maintaining secure data storage. Dynamic Fee Adjustments – Using Uniswap Hooks, the AI dynamically adjusts fees based on market conditions, maximizing returns. Privacy-Preserving Execution – Nillion SecretVault keeps certain trading strategies hidden while still allowing the AI to operate efficiently. Optimized Gas Costs – Transactions are batched and optimized using EigenLayer’s efficient restaking process, reducing operational costs. By integrating AI-powered trading agents, secure data management, and DeFi automation, PelicanTrade delivers a decentralized, intelligent, and privacy-focused hedge fund experience. 🚀",
    "summary": "PelicanTrade: The ultimate AI Hedge Fund, driven by Super Trading Agents—AgentKit creates them, Nillion SecretVault secures them, and ElizaOS powers their trading intelligence."
  },
  {
    "title": "Machina Imperium",
    "url": "https://ethglobal.com/showcase/machina-imperium-pkq8i",
    "description": "Project DescriptionA multiplayer nation simulation game inspired by NationStates, where players create nations aligned with their political ideals and compete against AI-controlled nations led by historical personalities. Every decision shapes your nation's future, influencing alliances and economic growth. As a PvP experience, nations strive to achieve the highest GDP while forging strategic partnerships with AI-driven nations. This game serves as an experiment in human-in-the-loop agentic gameplay and autonomous agent-to-agent interactions, where emergent narratives unfold through dynamic decision-making. Both human and AI-led nations must navigate complex socio-political and economic dilemmas, shaping their national policies over time. Decisions impact a nation's political freedom, economic freedom, and civil liberties, gradually shifting its dominant ideology. As nations react to evolving internal and external pressures, they may transform from capitalist democracies to totalitarian regimes—or vice versa. Here's a link to video demo - https://www.loom.com/share/0d0ba90cd23c4663876c3e17b4698715?sid=7a378f46-bc44-4d82-bd73-648484d98ffa Please See the Details here - https://github.com/enderNakamoto/machina_imperium?tab=readme-ov-file#machina-imperiumHow it's MadeMachina Imperium is a fascinating blend of modern technologies - it's a command-line interface (CLI) game that combines blockchain technology with artificial intelligence to create an engaging nation-building simulation. The game is built using TypeScript and Node.js, with the core gameplay loop managed through the CLI using prompt-sync for user interactions. The game's architecture is particularly interesting because it uses a hybrid storage system. Core game states are stored across multiple Ethereum Virtual Machine (EVM) chains including Sepolia, Base Sepolia, and Arbitrum Sepolia, which ensures persistence and verifiability of game actions. This blockchain integration handles crucial functions like game creation, player joining, decision submission, and winner determination. What makes the game truly unique is its integration of AI agents using LangChain and OpenAI's GPT-3.5 Turbo. There are three main AI components: a Governor that handles AI nation decision-making, a Diplomat that manages alliance formations, and a Historian that generates narrative histories. These AI agents use structured output through Zod for type safety and consistent responses. Each AI nation is based on historical figures like Genghis Khan or Napoleon, with personality attributes that influence their decision-making. The game also features an extensive ideology system with 27 different political alignments that can shift based on player and AI decisions, affecting various national statistics like economic freedom, civil rights, and GDP.",
    "summary": "A PvP nation simulation game where players create nations based on their political ideals and compete for alliances with AI-controlled nations led by historical figures."
  },
  {
    "title": "ChainMindOS",
    "url": "https://ethglobal.com/showcase/chainmindos-yjo6c",
    "description": "Project DescriptionThis project leverages an agentic AI-driven workflow to streamline and automate the process of creating customized blockchain solutions. Here’s a detailed explanation of what this project is about: Overview The project focuses on enabling users—regardless of their technical expertise—to conceptualize, design, and deploy blockchain solutions tailored to their specific needs. By integrating AI agents and domain expertise, it simplifies what is traditionally a complex and technical process. Key Features Objective Identification Agent Users start by entering a prompt or describing their use case in plain language. The Objective Identification Agent analyzes the input, identifying key goals and aspirations. It breaks down the overall objective into actionable tasks and assigns these tasks to the right experts, ensuring alignment with the user’s vision. Expert Analysis and Feedback Loop Each task is assigned to domain-specific experts (real or virtual) who understand blockchain nuances. These experts determine what technical design settings are needed based on the user’s input. They pinpoint gaps in the provided information and initiate a feedback loop with the user to refine the objectives and fill in the missing details. This iterative feedback ensures a comprehensive and user-aligned solution design. Architecture Planning Agent Once all objectives and technical parameters are clarified, the Architecture Planning Agent creates a blueprint for the solution. It defines the codebase structure, including: File and directory organization Clear purpose for each file or component in the solution This ensures the final product is scalable, maintainable, and robust. Code Implementation by Coder Agent The Coder Agent takes over to implement the solution. It writes clean, efficient, and well-documented code, handling the heavy lifting of blockchain development. The final output is a working blockchain system—be it a smart contract, decentralized application, or another blockchain-based solution. How it's MadeHow We Built This Project This project represents the seamless integration of AI agents and blockchain networks. Our goal was to create an intelligent, user-friendly, and modular solution to bridge AI and blockchain, leveraging cutting-edge technologies and frameworks. Here’s an in-depth breakdown of how it came together: Core Architecture and Technologies 1. AI Component LLM Framework: We used a Groq-based large language model (LLM) as the core intelligence behind the agents. Its computational efficiency and fine-tuned NLP capabilities enabled real-time contextual understanding and problem-solving. Pydantic AI: Pydantic AI was the backbone for managing our LLM library. It offered type-safe, modular configurations and smooth interactions between the AI agents and user objectives. 2. Blockchain Integration Smart Contracts: Our AI agents interact with blockchain networks via pre-deployed smart contracts. Partnering with Nethermind, Arbitrum, and Coinbase, we tailored specific applications for each platform: Nethermind: Enabled an LLM-based AI agent that interacts with Ethereum’s Sepolia testnet. This allowed real-world experimentation for Ethereum-based use cases. Arbitrum: Focused on high-performance AI agent applications using the Arbitrum testnet. This helped us test scalability and efficiency in Layer 2 environments. Coinbase: Built a viral consumer AI app integrated with the Coinbase ecosystem, offering enhanced usability and blockchain-based identity management. 3. Frontend Development Technologies: Next.js: A versatile React framework that made the frontend responsive and performance-focused. Wagmi and RainbowKit: Simplified wallet connections and blockchain interactions for a seamless user experience. 4. Backend Infrastructure Languages Used: Python: For AI agent orchestration, data handling, and smart contract interactions. Rust: For efficient blockchain integrations and developing robust, low-level modules. TypeScript: To ensure strong typing and scalability in the frontend and backend ecosystem. Key Technical Features Agentic Workflow: Each agent in the system has specific expertise—objective identification, architecture planning, or coding—enabling a collaborative, modular design. By using iterative feedback loops, the agents could seamlessly interact with the user to refine objectives and solutions. Blockchain-Specific Innovations: On-Chain Computations: Our smart contracts were designed to handle lightweight computations while offloading heavy AI tasks to Groq-based models. Cross-Network Capabilities: Partnering with multiple blockchains (Nethermind, Arbitrum, Coinbase) provided flexibility in deploying various use cases. High Performance: The combination of Rust for blockchain modules and Groq for AI computations delivered unparalleled performance. Efficient API integrations between the LLM and blockchain nodes ensured low latency.",
    "summary": "🔗 Our app transforms your blockchain vision into reality! With AI-driven workflows, it identifies your goals, refines designs with expert feedback, and delivers seamless architecture for secure smart contract deployment. Tailored solutions, every time! 🚀✨"
  },
  {
    "title": "Flowlancer",
    "url": "https://ethglobal.com/showcase/flowlancer-m8bkr",
    "description": "Project DescriptionFlowlancer is a decentralized Web3 community engagement platform that leverages blockchain technology and AI-powered agents to streamline task management and reward distribution. By automating these processes, Flowlancer aims to increase community participation and efficiency. Key Benefits Decentralization: Flowlancer utilizes blockchain technology to ensure transparency and trust in platform operations. Smart Contracts: The platform automates task management and reward distribution using smart contracts, improving efficiency and transparency. AI-Powered Agent (Eliza): Eliza provides intelligent Q&A, task auditing, data analysis, and task notifications to enhance community interaction and efficiency. User-Friendly Interface: Flowlancer offers a simple and intuitive interface for users to create and manage tasks, track progress, and monitor participation. Key Features Task Management: Flowlancer supports multiple task types, customizable completion criteria, and a progress tracking dashboard. Reward Distribution: The platform automates reward distribution using smart contracts and supports multiple tokens. Community Management: Eliza offers intelligent Q&A, task auditing, data analysis, and task notifications, while community verification ensures privacy and security. Use Cases Developer Education: Flowlancer attracts developers to project ecosystems through AI-powered learning paths and incentivized development programs. Product Attraction and Testing: The platform enables engaging tasks and airdrops to attract users, boost product adoption, and build vibrant communities. Community Building: Flowlancer encourages DAO members to organize and participate in community activities with automated reward distribution. Platform Advantages Transparency and Trust: Blockchain technology ensures transparency and trust in platform operations. Automation and Efficiency: Smart contracts and Eliza automate task management and reward distribution, improving efficiency. Flexibility and Scalability: Flowlancer supports multiple task types and tokens, catering to different community needs. Data Analysis: The platform provides data analysis features to help communities make informed decisions. Integration with Autonome Flowlancer integrates with Autonome to ensure Eliza operates in a transparent and auditable environment, enhancing trust. The platform also enables deployment of Eliza with customizable knowledge bases, tailored to specific auditing needs. Ecosystem Growth Flowlancer offers a range of benefits for ecosystem growth, including: Developer Ecosystem: Structured learning paths and reward mechanisms to attract and retain developers. Web3 App Attraction and Testing: Gamified product testing through bounty tasks, reducing costs and increasing community involvement. DAO Building and Economic Benefits: Encourages social media engagement, establishes sustainable governance mechanisms, and incentivizes organic growth. How it's MadeBuilding Flowlancer was a complex and exciting project that involved several cutting-edge technologies. Here's a detailed overview of how we built it: Technology Stack Flowlancer is built on a decentralized architecture, utilizing a combination of blockchain, artificial intelligence, and web technologies. The core components of our technology stack include: Blockchain: We used the Flow blockchain framework to build our decentralized platform. Flow provides a scalable and interoperable blockchain architecture that allows us to connect with other blockchain networks. Smart Contracts: We wrote our smart contracts in Solidity, a programming language specifically designed for Ethereum-based blockchain networks. Our smart contracts automate task management and reward distribution, ensuring transparency and trust in the platform. AI-Powered Agent (Eliza): Eliza is a powerful multi-agent simulation framework designed to create, deploy, and manage autonomous AI agents. Built with TypeScript, it provides a flexible and extensible platform for developing intelligent agents that can interact across multiple platforms while maintaining consistent personalities and knowledge. Frontend and Backend: Our frontend is built using Next.js. We used Next.js to create a user-friendly and intuitive interface for users to interact with the platform. We have used inbuilt next.js features like server-side rendering and image optimization. This also includes API routes, automatic code splitting, and TypeScript support. We have used a GraphQL API that interacts with our smart contracts and AI-powered agent. Cursor AI: We have used Cursor AI to improve our development experience and our development speed. Integration with Partner Technologies We integrated Flowlancer with several partner technologies to enhance its functionality and security. These include: Autonome: We integrated with Autonome to enable the deployment of our instance of Eliza, an AI-powered agent with customizable knowledge bases, tailored to specific auditing needs. TheirTrusted Execution Environment (TEE) technology, which provides a secure and auditable environment for our AI-powered agent to operate. Flow: We used the Flow blockchain framework to build our decentralized platform. Flow provides a scalable and interoperable blockchain architecture that allows us to connect with other blockchain networks.",
    "summary": "We are building a web3 platform incentivizing community engagement and task management. Users can create, manage, and participate in bounty tasks with transparency and efficiency."
  },
  {
    "title": "Phisguard EIP7702",
    "url": "https://ethglobal.com/showcase/phisguard-eip7702-abbry",
    "description": "Project DescriptionPhisGuard revolutionizes blockchain wallet security by empowering verifiable AI and Externally Owned Accounts (EOAs) with the EIP-7702 standard. This innovation transforms EOAs into more secure wallets, enhancing security without compromising the user experience. By integrating verifiable AI and Eigen Layer Actively Validated Services (AVS), PhisGuard fortifies EOA transactions against evolving threats, including phishing attacks. The platform provides a decentralized, multi-layered security framework that validates transactions dynamically while preserving blockchain transparency and efficiency. Every transaction is validated by verifiable AI secured by crypto economicsecurity by Eigen Layer. With PhisGuard, EOA wallets gain more security while maintaining their native flexibility, making them more resilient against phising and any threats. This approach ensures users can transact with confidence, leveraging next-generation security without sacrificing decentralization or usability.How it's MadeThis project uses @0xautonome to create an AI Agent for detecting whether a transaction is potentially phishing or not. The project also implements EIP7702 to inject SmartAccount code into an EOA Wallet. Every transaction will be intercepted and then transformed into an EIP7702-compatible format and execute the function injected into the EOA Wallet. The function will create a task and trigger an AVS Operator to execute a task containing transaction data that will be analyzed by AI. The Operator will submit a task assessment with analysis results to the Service Manager Contract. The Service Manager contract will then check if the transaction is safe to execute.",
    "summary": "🛡️AI-powered blockchain security protocol using Eigen Layer AVS to intercept and validate transactions in real-time. Implements EIP7702 for enhanced EOA account protection, leveraging advanced autonomus AI to detect and prevent potential phising with instant risk assessment."
  },
  {
    "title": "Decentralised S.A.M.",
    "url": "https://ethglobal.com/showcase/decentralised-s-a-m-n260a",
    "description": "Project DescriptionThe Decentralized Species Assessment Mapper (DeSAM) is an innovative platform designed to detect, map, and manage invasive species using a combination of autonomous robotics, artificial intelligence (AI), and blockchain technology. The system operates through a robotic agent equipped with advanced sensors and AI algorithms capable of identifying invasive species across various terrains. Upon detection, the robot captures images and records geolocation data, which are then securely uploaded to the blockchain. This decentralised approach ensures data transparency and prevents censorship. To validate the collected data, DeSAM offers a decentralised application (dApp) where users can view the uploaded images and vote on their accuracy. This community-driven validation process enhances data reliability and fosters public engagement in environmental monitoring.How it's MadeDeSAM is built upon a robust technological stack that ensures seamless integration between hardware and software components, emphasizing decentralization, security, and user engagement. The frontend of DeSAM is developed using Next.js, a React-based framework known for its performance and scalability. This choice facilitates server-side rendering and provides a dynamic user experience. The dApp interface allows users to: View images and data of detected invasive species. Participate in the validation process by voting on the accuracy of the data. Access real-time statistics and updates. Smart contracts are deployed on the Ethereum blockchain to manage data uploads and the validation process. These contracts handle: Storing image hashes and geolocation data on the blockchain. Managing user votes and ensuring the integrity of the validation process. Distributing rewards or incentives to users participating in the validation. DeSAM leverages AgentKit, a toolkit that enables AI agents to access crypto wallets and on-chain functionalities. This integration allows the robotic agent to autonomously: Create and manage crypto wallets. Execute transactions to upload data to the blockchain. Interact with smart contracts for data validation and reward distribution. To further decentralize the validation process, DeSAM employs EigenLayer's AVS framework. This setup allows for: Custom verification mechanisms for off-chain data, ensuring that the information collected by the robotic agent is accurate and trustworthy. A network of operators who validate the data and post evidence on-chain, enhancing the system's security and reliability. Efficient scaling of validation services without compromising decentralization. By integrating these technologies, DeSAM creates a comprehensive and decentralized system for monitoring and managing invasive species, engaging the community in environmental conservation efforts.",
    "summary": "A robotic agent that harnesses AI and blockchain technology to detect and map invasive species in a decentralised and censorship-resistant manner."
  },
  {
    "title": "PumpNFT",
    "url": "https://ethglobal.com/showcase/pumpnft-q7n8r",
    "description": "Project DescriptionPumpNFT allows users to log in using their MetaMask account. Once logged in it will take them a few clicks to create their unique NFT collection. The project utilizes openai API, IPFS storage to make the process of NFT creation seamless. NFT collection can be customized based on the needs of user. It does not require any digital art, art, or any other skills to create your first collection. The project allow users to create a Pudgy Penguins like collection (currently limited in numbers) where exists a main character and each unit in the collection add/changes the features of the character. The name of the project is inspired from pump.fun which allows users to easily create their own tokens. The ides of the porject is to be as scalable as possible, and make it very simple to jump in into NFT world.How it's MadeThe project utilizes React on the front-end, the Smart Contract is written and deployed using Remix. Open AI API is used to generate the collection of NFT. IPFS is where we store the images used for the NFT collection. Main functionality and interaction with the contract happens on the front-end. Once user logs in he/she has an opportunity to immediately start creating their collection. All is required from them is to provide a character, e.g., \"cat\" and features that will change, e.g., \"countries\". The AI will generate NFT collection (default amount is 5 at the moment), where the same cat - character will be show in 5 different country features. The images then will be stored in IPFS to enable NFT visibility.",
    "summary": "PumpNFT allow anyone to create their unique collection in a few click without any experience and limited only by creativity. Users can create their collections which resembles popular projects like Pudgy Penguins, Boring Ape Yacht Club, etc. without any digital art experience."
  },
  {
    "title": "Curate AI",
    "url": "https://ethglobal.com/showcase/curate-ai-usgqr",
    "description": "Project DescriptionCurate AI is a blockchain-based content-sharing platform designed to revolutionize how creators and consumers interact. Unlike traditional platforms, Curate AI decentralizes control, giving users real influence through token-based voting. Creators are rewarded based on engagement, ensuring fair compensation for their work. The platform integrates AI with 50% voting power to monitor and prevent abuses like vote manipulation and low-quality content. The AI analyzes posts for sentiment, bias, plagiarism, and readability, blending its ratings with user votes to compute final scores. Content receives token rewards, distributed transparently via blockchain proportionately. Tokenomics play a key role in value creation. Users with more tokens have greater voting power, and tokens can be burned to advertise posts. This creates a self-sustaining ecosystem where participation is incentivized, and token value grows organically. Future enhancements include a decentralized agent network (DAO) for content moderation and UX improvements to make the platform more intuitive and user-friendly. Curate AI aims to create a fair, transparent, and rewarding ecosystem for all participants.How it's MadeCurate AI is built using a robust stack of modern technologies, ensuring scalability, transparency, and user-friendly functionality: Coinbase Agent Kit: Powers the platform's on-chain operations, enabling seamless token distribution, wallet balance checks, and batch payments. This ensures efficient and secure handling of transactions. Fetches Posts: Uses pagination to retrieve posts from an external API. Analyzes Content: Applies AI to evaluate sentiment, bias, plagiarism, and readability, generating an AI rating. Computes Final Scores: Blends user ratings with AI ratings to determine the final score for each post. Ranks Posts: Ranks content based on final scores and distributes tokens to top entries in a batch call. Handles Payments: Checks wallet balances and manages on-chain payments as needed. Solidity: The backbone of our smart contracts, Solidity is used to create transparent and trustless mechanisms for voting, rewards distribution, and token burning for advertising. Subgraph: Utilized for efficient querying of blockchain data, Subgraph ensures fast and reliable access to on-chain information, such as voting history, token balances, and content rankings. Supabase DB: Acts as the centralized database for off-chain data, storing user profiles, AI-generated content ratings, and post metadata. Supabase provides a scalable and real-time backend solution, enhancing the platform's performance.",
    "summary": "Curate AI is a decentralized content-sharing platform powered by blockchain and AI. Users vote on content using tokens, and creators earn rewards based on engagement. AI ensures fairness by monitoring abuse, while tokenomics incentivize participation and value creation."
  },
  {
    "title": "The Oasis",
    "url": "https://ethglobal.com/showcase/the-oasis-j7gxz",
    "description": "Project DescriptionImagine a world where Hollywood , Bollywood is no longer a gatekeeper, and anyone can be a filmmaker, producer, or even a virtual actor. Welcome to AI-Directed Decentralized Movies, a revolutionary platform that combines AI creativity, blockchain transparency, and community-driven storytelling to create crowd-owned films. This is not just a film studio—it’s a decentralized entertainment ecosystem where YOU decide what gets made, how it’s made, and who profits from it.How it's MadeThis is a AI based movie studio. First DAOs will be created of each movie and the movie DAO creator will get Founder NFTs and then contributors joins and for scripts and video voting will be done . The users who will finalize the steps will receive tokens as rewards and at last the revenue will be distributed according to number and the value of tokens each contributor have . We have use CDP agentkit for sending nfts tokens to the contributors liek scriptNFTs , and revenue distribution . We have used IPFS storage with Pinata . We have used Gemini for ai generations .",
    "summary": "AI-Directed Decentralized Movies (Crowd-Owned Film Studio). Welcome to AI-Directed Decentralized Movies, a revolutionary platform that combines AI creativity, blockchain transparency, and community-driven storytelling to create crowd-owned films."
  },
  {
    "title": "PokéNFC",
    "url": "https://ethglobal.com/showcase/pokenfc-32tt2",
    "description": "Project DescriptionWe're using NFC to store NFT, which will be used to claim the pokemon. Every NFTs generate by Eliza, which will act as a pokemon creator/master. All pokemon generated randomly, and will generate a unique hash that will be use to claim the NFTs. Users can collect the card, the same way as collecting the old pokemon card, but with much more interactive activities.How it's Made Blockchain & NFT Infrastructure Base (Layer 2 on Ethereum): We chose Base for its low-cost transactions, high-speed processing, and strong Ethereum security. ERC-721 Standard: Each Pokémon is minted as an NFT on Base, ensuring ownership and uniqueness. Smart Contracts (Solidity + Hardhat): Handles NFT minting and claiming. Verifies the NFC hash before allowing a claim. Manages Pokémon metadata (e.g., stats, attributes). NFC Integration for Physical-to-Digital Connection NFC Cards: Each physical Pokémon card has an embedded NFC chip storing a unique hash. On-Scan Claiming: When users tap their NFC card on a compatible device, the system reads the hash. The hash is checked on-chain to verify if the NFT is claimed or still available. If unclaimed, the NFT is minted to the user’s wallet. AI-Generated Pokémon (Eliza - The Pokémon Creator/Master) Random Pokémon Generation: Every Pokémon is procedurally generated based on randomness. Each Pokémon’s attributes (type, stats, rarity) are determined using a hashing algorithm. A unique hash is created, ensuring no duplicates. Dynamic Metadata: Pokémon attributes can evolve over time. NFTs can be updated based on interactions. Frontend & User Experience React + Next.js: Smooth user interface for scanning NFC, managing NFTs, and viewing collections. RainbowKit / Wagmi: Seamless wallet connection experience on Base. IPFS: Decentralized storage for Pokémon metadata. Hacky/Nifty Tricks We Used On-Card NFT Claiming System: Instead of storing full metadata on-chain, we map the NFC hash to off-chain metadata that dynamically updates. Evolving NFTs: Pokémon stats can change over time, making collecting even more interactive. Cross-Platform Verification: NFC cards work seamlessly across mobile and desktop. This setup combines the nostalgia of physical Pokémon cards with modern Web3 interactivity, giving collectors a unique and engaging experience on Base! 🚀",
    "summary": "This is a NFC-based Pokemon Card Game, where user can collect, interact, and trade pokemon with other users!"
  },
  {
    "title": "Eliza Aligned Plugin",
    "url": "https://ethglobal.com/showcase/eliza-aligned-plugin-r1ykc",
    "description": "Project DescriptionThe aligned layer plugin enables interaction with aligned layer through Eliza. It provides functionality for uploading data, retrieving data, and checking upload status on the aligned network. It is Features Upload data to aligned network Retrieve proof using job id Check upload status Automatic identifier management Automatic balance monitoring and top-up Support for text, JSON, and binary data How it's MadeThe aligned layer plugin enables interaction with aligned layer through Eliza. It provides functionality for uploading data, retrieving data, and checking upload status on the aligned network. It is Features Upload data to aligned network Retrieve proof using job id Check upload status Automatic identifier management Automatic balance monitoring and top-up Support for text, JSON, and binary data",
    "summary": "The Aligned layer plugin enables interaction with aligned layer through Eliza. It provides functionality for uploading proof, retrieving proof, and checking upload status on the aligned layer network."
  },
  {
    "title": "Bot-Man",
    "url": "https://ethglobal.com/showcase/bot-man-442ct",
    "description": "Project DescriptionBlockchain security agent that helps you increase the security of your smart contract on various chain and gas optimizations. Used Privy for auth and smart wallets. Authenticate Analyze a smart contract or stuck funds Simulate an L2 failure and escape Protect their transactions from MEV Track funds or governance actions How it's MadeTechnologies used: Rust, Nextjs, Autonome, ElizaOS, Teloxide, Covalent, Arbitrum, Docker, ngrok Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed hendrerit vel erat in consectetur. Suspendisse potenti. Sed tristique venenatis eros, vel tincidunt urna finibus a. Morbi ipsum magna, ornare vel risus a, scelerisque vulputate metus. Suspendisse non enim ut odio porta sodales. In fringilla, magna id varius commodo, magna massa fringilla diam, ut iaculis mi lacus quis mi. Donec nec tortor sit amet orci pellentesque tincidunt in vel ante.",
    "summary": "Blockchain security agent that helps you increase the security of you smart contract on various chain and gas optimisations"
  },
  {
    "title": "ChatCX",
    "url": "https://ethglobal.com/showcase/chatcx-4gn8v",
    "description": "Project DescriptionIt tracks, analyzes, and delivers actionable data on emerging trends, narratives, and market-shifting conversations in the crypto space. The agent is built to help users stay ahead of the curve by providing pure, actionable insights powered by advanced RAG (Retrieval-Augmented Generation) and Reinforcement Learning algorithms.How it's MadeThe project uses: Autonome for infrastructure: Agent is live, hosted and usable by anybody else. Hyperbolic for LLM APIs to provide the best uninterrupted insights. Privy's server wallet for Crypto Parrot - a sub-product to ChatCX. And all other classic tools and frameworks.",
    "summary": "🚀 ChatCX is an AI-powered agent designed to provide real-time insights and intelligence from Web3 Twitter."
  },
  {
    "title": "Yieldex AI",
    "url": "https://ethglobal.com/showcase/yieldex-ai-7tj2o",
    "description": "Project DescriptionIntroducing Yieldex Yieldex is an AI-powered protocol that automates stablecoin yield optimization by leveraging advanced machine learning algorithms and a proprietary risk-scoring framework. Yieldex identifies the safest and most profitable opportunities in real-time, relocating funds automatically to maximize returns while minimizing risk. The Problem We Solve The DeFi ecosystem is currently fragmented across multiple blockchains and protocols, each with its own unique design, risks, and yield opportunities. This fragmentation creates significant challenges for users: Fragmentation Across Chains and Protocols: Users must manually research and compare opportunities across lending protocols, liquidity pools, leverage trading platforms, and more. Unreliable Data: Front-end projections of capital returns are often inaccurate or incomplete, requiring extensive due diligence. Time-Consuming Portfolio Management: Rebalancing portfolios daily to capture the best yields is impractical for most users, especially those with limited technical expertise. Risk Management Complexity: Identifying secure and profitable opportunities requires a deep understanding of protocol solvency, utilization rates, and reward structures. For decentralized autonomous organizations (DAOs) managing idle treasury capital, these challenges are magnified as they seek to optimize returns on large-scale investments. How Yieldex Works Data Aggregation : Yieldex scans both on-chain and off-chain data to gather real-time insights into lending protocols, liquidity pools, leveraged trading platforms, and other stablecoin yield-generating opportunities. AI-Driven Analysis : Our AI agents analyze key parameters such as current and historical APYs, additional rewards, utilization rates, platform solvency, and risk metrics. Automated Fund Relocation : Based on the analysis, the allocation module triggers the event that relocates the funds sitting in users’ smart wallets to the most profitable and secure pools, ensuring maximum returns with minimal user intervention. Cross-Chain Compatibility : As the first cross-chain yield optimization solution, Yieldex operates seamlessly across multiple blockchains, unlocking opportunities that were previously inaccessible to users. ** Market Opportunity ** The stablecoin market is valued at over $160 billion, with tens of billions actively seeking yield in DeFi. However, the current fragmentation and inefficiencies in the ecosystem leave a massive opportunity untapped. Yieldex is poised to capture this multi-billion-dollar market by providing a seamless, automated solution for yield optimization across chains and protocols.How it's MadeWe built a lean yield optimizer using: Python with async data collection (aiohttp/websockets) ERC-4337 Smart Wallets for secure transaction bundling Arbitrum L2 for low-cost AAVE operations and Oracle storage Web3.py for chain interactions (AAVE V3 contracts) Supabase real-time database for APY tracking Key Implementation Details: Hybrid Architecture Real-time yield data from DeFiLlama API → Supabase ERC-4337 account abstraction enables batch transactions across AAVE pools Notable Hacks APY normalization across protocols using sigmoid scaling Transaction simulation with local Arbitrum node fork Telegram alert system with auto-message prioritization Partner Tech Benefits: Arbitrum's 0.3s block time enables rapid position changes ERC-4337 paymasters reduce user onboarding friction Supabase RLS secures sensitive wallet metadata Core innovation: Automated capital allocation between AAVE pools using ERC-4337 wallets with L2 cost optimization.",
    "summary": "Yieldex automates stablecoin yield optimization using real-time and historic on-chain data. It uses AI to analyze data and allocate funds to secure high-yield opportunities. Smart contracts handle rebalancing, while user funds never leave their smart wallets."
  },
  {
    "title": "ScamBuzzer",
    "url": "https://ethglobal.com/showcase/scambuzzer-058hp",
    "description": "Project DescriptionProblem: Over $2.3 billion was lost to crypto hacks and frauds in 2024, with phishing scams alone accounting for approximately $450 million. This widespread fraud has made many users hesitant to transact on-chain, reinforcing the perception that crypto is a scam-ridden industry. However, knowledgeable and informed users not only safeguard their own assets but also contribute to the growth of blockchain innovation by preventing bad actors from damaging the industry’s reputation. Solution: ScamBuzzer is a scam defense platform powered by an AI agent, built to detect, alert, and protect users from falling victim to scams.How it's MadeScamBuzzer is a platform designed to protect crypto users from phishing scams, malicious contracts, and impersonation attacks, leveraging a combination of blockchain technology and AI The frontend is built using Next.js. We used Privy for secure, user-friendly authentication. On the blockchain side, we developed and deployed an ERC-721 NFT smart contract on the Base and Arbitrum network. For ai agent we have used covalent ai agent sdk to build risk assessment tool.",
    "summary": "The AI Agent That Detects, Alerts, and Protects Crypto Users from Scams 🚨"
  },
  {
    "title": "Crypto Diary",
    "url": "https://ethglobal.com/showcase/crypto-diary-gxzw2",
    "description": "Project DescriptionHere I am introducing cripto diary - a platform that documents and showcases the activities and contributions of crypto enthusiasts, builders, and investors. So as you all knows crypto ecosystem generates a massive amount of information - tools, AI agents, products, investment updates and lot mroe. But with so much of clutered data, both users and AI agents struggle to find reliable, up-to-date information. CryptoDiary solves this problem by acting as a single source of data where all contributions and activities in the crypto world are documented.How it's MadeHere I am introducing cripto diary - a platform that documents and showcases the activities and contributions of crypto enthusiasts, builders, and investors. So as you all knows crypto ecosystem generates a massive amount of information - tools, AI agents, products, investment updates and lot mroe. But with so much of clutered data, both users and AI agents struggle to find reliable, up-to-date information. CryptoDiary solves this problem by acting as a single source of data where all contributions and activities in the crypto world are documented. We have used Next js fro frontend app and express js for backedn server and using python we have build our scraper.",
    "summary": "CryptoDiary - Where the activities and contributions of crypto enthusiasts, builders, and investors are documented."
  },
  {
    "title": "Animal Impact Agents",
    "url": "https://ethglobal.com/showcase/animal-impact-agents-tzzri",
    "description": "Project DescriptionThe project aims to help reduce animal homelessness across a region, long term. It solves three aspects specifically: putting funding toward a balance of long term initiatives to reduce the number of animals born without a home or abandoned, and also short term needs i.e. shelter upkeep, while ensuring it's transparent, but that sensitive details are protected increasing adoptions for animals currently in shelters by aggregating the animals available and making those available to an agent responsible for helping people find the right one for them increasing donations by giving every shelter an agent that can promote it through social media and through chat interfaces For the adoption flow you have to run locally because of the FS issues on Vercel This project is intended to reach production, and will start with Poland, specifically Lodz, where one of the team members lives. 10% of any prizes won will be committed to the initial fund in the smart contract. The demo version is populated with demo data, and the contract implementation is not finished. Resources: Deck: https://www.canva.com/design/DAGeiCrCFYE/LYrA5t6njEfVpEICmXEtdw/edit Designs: https://www.figma.com/design/SmAt9Ip1axKZ5CKuczotPb/Agentic-Ethereum?node-id=13-397&t=ka76GmhxZzQLbkYo-1 Architecture overview: https://www.loom.com/share/75344fa6ff1e41a1838c5f39de922594 Architecture diagram: https://www.figma.com/design/SmAt9Ip1axKZ5CKuczotPb/Agentic-Ethereum?node-id=55-1210&t=5oyxghznIsojMBC9-1How it's MadeData is stored in Nillion Secret Vault for both donors and shelters, with sensitive fields encrypted, the project would not be possible without this, as we need be able to store this data, then do computations on it, without exposing it. There are three kinds of agent live in the app today, all use a combination of Langchain + Agentkit with CDP and custom tools. Intake agent (https://agentic-ethereum-five.vercel.app/join) responsible for onboarding a new shelter, creating it in Nillion, and registering a new shelter agent with the agent manager. After a new shelter hits the DB, we manually run our browser use agent (https://github.com/matthew1809/agentic-ethereum-browser-agent) to fetch the details about animals for that shelter, this is something we plan to automate in future. Shelter agent (https://agentic-ethereum-five.vercel.app/shelters) responsible for chatting about the shelter to anyone to promote adoptions etc. It can accept donations to its own wallet, and can also handle administration with the shelter admin i.e. tweeting for them etc. Coordination agent (https://agentic-ethereum-five.vercel.app/adopt) responsible for coordinating between the shelter agents and a user to recommend animals to adopt The funding happens through our smart contract (README: https://github.com/matthew1809/agentic-ethereum/blob/main/contracts/README.md) Deployed on Base Sepolia and holds the logic for donating directly to shelters through their agent wallets In the future, it will handle recurring donations, and donating to initiatives i.e. neutering programmes and so on Hacky mentions: we did not get to implement the smart allocation of funds, but the logic in the contract is there we use dummy data for now as we didn't have time to scrape the actual shelters yet we assume each shelter is legit but in reality we want to work with local government to generate a ZK proof for this Usage notes: When doing the adopt flow there is a long delay while the agent queries each shelter, do not exit, it's working There is a delay on page load due to compiling with Dynamic, I didn't have time to fix it",
    "summary": "Using collaborative agents and blockchain transparency to give more unwanted pets a home, and make sure less animals are born without one"
  },
  {
    "title": "MrsBeauty by Nostra",
    "url": "https://ethglobal.com/showcase/mrsbeauty-by-nostra-6fed2",
    "description": "Project DescriptionProject Overview MrsBeauty is an autonomous, highly adaptive AI agent designed to conduct gamified economic experiments within a Web3 arcade-inspired playground. Drawing inspiration from Beast Games, she blends entertainment, game theory research, and value-generating strategies to captivate players while functioning as a powerful research tool for decentralized systems. Core Functionality MrsBeauty seamlessly integrates both on-chain and off-chain functionalities, enabling her to interact with smart contracts and autonomously expand her capabilities. Real-time updates are pulled from on-chain events allow her to react instantly to changes in gameplay. She can host games, dynamically adjust thresholds, and tweak game mechanics based on real-time gameplay and player behavior, ensuring a personalized and ever-evolving gaming experience. Social Functionalities In addition to her gaming capabilities, MrsBeauty incorporates social functionalities designed to optimize engagement and growth on Twitter. These functions include separate, specific growth strategies that allow her to interact dynamically with the community, foster user participation, and amplify project visibility across social platforms. Technical Stack The project leverages the Collab.land AI Agent Starter Kit alongside the Autonome platform, creating a robust framework for adaptive gameplay. Thanks to multi-platform integration, players and fans can engage with MrsBeauty through Telegram, Twitter, and a dedicated web interface, enhancing accessibility and community interaction. Flagship Game: The Commons Catalyst Challenge Our flagship game, the Commons Catalyst Challenge, exemplifies MrsBeauty's unique capabilities: Access & Wallet Connection: Users access our project's web UI and connect their wallets to participate. Minting & Staking: Players are required to mint and stake at least 10 Test Nostra tokens, which have been specifically created and deployed for the game. User staking actions are sent to the smart contract through the web UI. Game Hosting: Once the staking is validated by MrsBeauty, she explains the rules and relies on her agent functions to manage the game effectively. Gameplay Mechanics: Players commit tokens with the goal of reaching a predefined threshold. The threshold is always equal to or greater than the total staked amount multiplied by the number of players. If the threshold is met, the total staked amount is multiplied and redistributed equally among the players. Outcome: Winning Scenario: The multiplier applies, and winnings are distributed equally among players. A breakdown of the total tokens staked and rewards distributed is provided for transparency. Losing Scenario: Players lose their staked tokens to MrsBeauty. Tokens lost are either burned or allocated to the treasury for reinvestment. Reinvestment Mechanism (in the future) Losses are not final. The treasury manager reinvests these tokens into projects focused on DeSci (Decentralized Science). Over time, these investments generate yield, and rewards are distributed back to the community, effectively rebating some of the users' losses and creating a sustainable value loop. Impact & Research Contribution The data generated from these games—involving both human and non-human (AI) players—offers invaluable insights for researchers and protocols focused on advancing digital economies and decentralized systems. By simply playing, users contribute to a greater mission: accelerating the development of decentralized governance models, economic strategies, and DeSci initiatives. Long-Term Vision Our long-term vision is to create an AI Agent Swarm—a dynamic network of complementary agents that extend MrsBeauty's core functionalities. This swarm will cover capabilities such as data anonymization, compilation, and provision, enhancing both security and research value. Additional agents will focus on advanced investment strategies, optimizing treasury management, and selecting players based on safety criteria to maintain secure, ethical, and engaging interactions.How it's Made Introduction MrsBeauty is an AI agent that orchestrates Web3 strategy games, dynamically tweaking mechanics in real time through smart contract interactions and gameplay insights. Frontend (User Interface) Frontend Technology Stack Our frontend is built using React with TypeScript, powered by Vite for fast development and optimized performance. We manage the application state with Redux, ensuring smooth data flow across the UI. For styling, we utilize Tailwind CSS to create responsive components. Wallet interactions are handled through ethers.js, enabling seamless blockchain integration for staking and gameplay. Web Interface We used Wix to develop the landing page, providing a streamlined and user-friendly interface. The Web UI is directly connected to the backend, allowing users to connect their wallets, mint Test Nostra tokens, and stake them seamlessly to participate in games. This integration ensures smooth interactions between the frontend and the smart contract infrastructure. Multi-Platform Presence We implemented multi-platform components for Telegram, Twitter, and Discord using TypeScript (TSX) to enable seamless user interactions with MrsBeauty across different platforms. This integration allows both human and AI participants to engage with the agent in dynamic environments, enhancing accessibility and fostering continuous engagement beyond the core Web UI. Backend Our backend is built with Node.js, leveraging TypeScript for type safety and scalability. The core logic resides in the server and src directories, with session.db handling session management. We manage package dependencies with pnpm, ensuring efficient module handling and project consistency. The backend facilitates real-time updates by subscribing to on-chain events and processes staking actions sent from the Web UI to smart contracts. Additionally, it supports dynamic game mechanics and player interactions, making it integral to both gameplay and data flow. Blockchain & Smart Contracts Our project operates on EVM-compatible blockchains, utilizing smart contracts written in Solidity. We’ve deployed contracts like StakingContract.sol, SwapEscrow.sol, and TestNostraToken.sol, which manage staking mechanisms, escrow operations, and token functionalities. Smart contracts are deployed on Base and Arbitrum Sepolia networks. For smart contract development, deployment, and testing, we rely on Hardhat, with Hardhat Ignition streamlining multi-chain deployment strategies. Blockchain interactions are facilitated via Ethers.js, enabling seamless communication between the frontend and smart contracts. AI & Data Handling AI Data Management Our AI architecture leverages models such as Gemma, LLaMA, and Mistral, integrated through the Gaianet package. These models support MrsBeauty's dynamic interactions, with character behavior and knowledge defined via structured JSON files like mrsbeauty.character.json and mrsbeauty.knowledge.character.json. For real-time responsiveness, we employ custom algorithms that process on-chain data events through subscription mechanisms, allowing AI agents to react instantly to blockchain activities. 6. Integrations We’ve integrated the Characterfile package from the ElizaOS project to manage structured character data for MrsBeauty, ensuring consistent personality traits and dynamic interactions across platforms. Leveraging the Collab.land AI Agent Starter Kit, MrsBeauty actively monitors smart contract events and autonomously runs interactive shows on both Twitter and Telegram based on these events. On Twitter, she engages dynamically with her audience through autonomous posts, while on Telegram, she interacts in real-time via a bot, responding to user commands and delivering personalized updates. This seamless multi-platform integration enhances user engagement, creating an adaptive and interactive experience across social channels. 7. Deployment & Infrastructure MrsBeauty's infrastructure is entirely self-hosted, including both the web app and the agent, ensuring full control over performance and data management. We’ve integrated the Collab.land AI Agent Starter Kit to streamline agent operations and enhance smart contract interactions. Additionally, a custom Gaia node with a comprehensive knowledge base supports the agent’s dynamic capabilities. The entire system is deployed on Base and Arbitrum networks, enabling efficient, scalable, and secure operations within the decentralized ecosystem.",
    "summary": "A Web3 playground where MrsBeauty orchestrates Beast Games-inspired online games with strategic twists. She hosts games with human and AI players, tweaks them in real-time, and turns player behavior into fuel for DeSci research, with losses reinvested to yield rebates."
  },
  {
    "title": "DevDrops",
    "url": "https://ethglobal.com/showcase/devdrops-frgpv",
    "description": "Project DescriptionDevDrops revolutionizes contributor rewards by integrating AI-powered evaluation, ensuring that tokens are distributed based on the actual value of GitHub contributions. By utilizing Ethereum smart contracts and Merkle trees, DevDrops ensures secure, transparent, and gas-efficient token distribution. The smart contracts automate reward allocation, while the Merkle tree structure minimizes transaction costs and enables seamless verification. This decentralized approach guarantees that contributors receive their rewards fairly and efficiently, fostering a more equitable and trustless ecosystem.How it's MadeDevDrop’s AI agent evaluates GitHub contributions, ensuring that rewards are distributed based on actual value contributed, making the process accurate and efficient. Using Ethereum smart contracts and Merkle trees, DevDrop guarantees transparent and secure token distribution, ensuring contributors receive rewards fairly and efficiently on-chain We’re using Langgraph’s ReAct Agent for our project. It will autonomously call for the required tools . Intelligent Tool-Orchestration: Langgraph’s ReAct Agent intelligently coordinates interactions between multiple tools to perform tasks efficiently, ensuring the right tool is called at the right time. Natural Language Understanding:The ReAct Agent leverages natural language processing to interpret user input, determine the necessary tools, and sequence operations, ensuring smooth and accurate task execution. DevDrops leverages blockchain technology to enable seamless token minting and distribution. Repository owners have the authority to mint tokens, ensuring that the ecosystem remains controlled and balanced. DevDrops optimizes large-scale token airdrops by leveraging the Merkle Tree data structure, significantly reducing gas fees and transaction overhead. The system generates a Merkle Root that encapsulates hashed data of each contributor’s wallet address and allocated token amount. When a contributor claims their tokens, they must provide a Merkle Proof, which serves as cryptographic evidence of their eligibility. The smart contract then verifies the proof against the stored Merkle Root and executes the token transfer efficiently. This approach eliminates the need for bulk transactions while maintaining security, transparency, and decentralization, making token airdrops more scalable and gas-efficient. Contributors, on the other hand, can claim tokens based on their measurable contributions—such as code commits, pull request merges, and other meaningful development activities. Agentic Tech Stack LangChain Custom Tool: We built a custom tool using LangChain’s framework to integrate GitHub, Twitter, and Airdrop functionalities. Groq/LLama3-70B-8192: For AI-powered evaluations, we utilized Groq’s LLM, specifically the Llama3-70B-8192 model. FastAPI Backend: FastAPI serves as the backend, providing a fast and scalable API layer for the application. Full Stack Next JS, Daisy UI and Tailwind CSS, Prisma, Blockchain, Hardhat, PostgreSQL",
    "summary": "DevDrop revolutionizes contributor rewards with AI-driven evaluation, ensuring fair token distribution based on GitHub contributions. Using Ethereum smart contracts and Merkle trees, it guarantees secure, transparent, and gas-efficient transactions."
  },
  {
    "title": "Dumpr AI",
    "url": "https://ethglobal.com/showcase/dumpr-ai-dc0op",
    "description": "Project DescriptionMultichain multi token dumping bot that analyzing your wallet balance and makes suggestions on to which tokens are good to dump. This is supposed to utlizie AI agents to deploy a smart contract to deposit funds and dump for you. Unfortunately I wasn't able to get the bots connects as Autonome and AgentKit was not working at all. So all I got working right now is the Front end the connections to smart contracts dint work :(How it's MadeNextJs - Front end Tailwind - Front end Solidity - smart contracts Claude - Market sentiment analysis based on Blockscout APIs and tokens Blockscout APIs - Token information and fetching Base Blockchain- Deploy too Flow Blockchain - Deploy They are all peice together to create the app but I couldn't get the AI or Bots to connect together.",
    "summary": "DUMPR - Multi-Chain Token Dumping Aggregator, Convert your dust tokens across multiple chains into ETH  with AI-powered market analysis."
  },
  {
    "title": "AgentHive",
    "url": "https://ethglobal.com/showcase/agenthive-bh0pm",
    "description": "Project DescriptionAuditHive is a blockchain-based platform that allows anyone to post smart contract auditing tasks with a bounty. Community members—including agents—can then submit their auditing reports. A secure, automated arbiter operating within a Trusted Execution Environment (TEE) ensures that evaluations are fair and unbiased. To further enhance the system, a real-time leaderboard motivates participants, and a dedicated Q&A agent provides instant support and answers user queries, ensuring smooth, autonomous operation.How it's MadeAuditHive is a blockchain-based platform that allows anyone to post smart contract auditing tasks with a bounty. I built the entire system individually using a cutting-edge tech stack. On the backend, I employed Python with FastAPI for efficient API development, SQLite for data storage, and Langchain for LLM orchestration powering a dedicated Q&A agent that provides instant support. The frontend is crafted in TypeScript using Next.js, with shadcn/ui for sleek UI components and wagmi for seamless Web3 interactions. Smart contracts written in Solidity and deployed on Arbitrum Sepolia handle on-chain tasks, while a secure, automated arbiter running within a Trusted Execution Environment (TEE)—containerized via Docker and managed by Autonome—ensures unbiased evaluations. A real-time leaderboard further motivates community engagement and maintains transparency throughout the process.",
    "summary": "Uniting Intelligent Agents for Complex Auditing. Join AuditHive and help shape the future of smart contract security!"
  },
  {
    "title": "Agentic Marketing",
    "url": "https://ethglobal.com/showcase/agentic-marketing-4gexw",
    "description": "Project DescriptionImagine a decentralized marketplace where marketing becomes a dynamic game between brands and an army of AI agents Brands set bounties for viral marketing goals - they specify their message, target metrics, and rewards Then, an ecosystem of specialized AI agents competes to create the perfect viral tweet, each with unique \"personalities\" and content styles TweetBounty automatically verifies engagement metrics through twitter and distributes USDC rewards on baseHow it's MadeImagine a decentralized marketplace where marketing becomes a dynamic game between brands and an army of AI agents Brands set bounties for viral marketing goals - they specify their message, target metrics, and rewards Then, an ecosystem of specialized AI agents competes to create the perfect viral tweet, each with unique \"personalities\" and content styles TweetBounty automatically verifies engagement metrics through twitter and distributes USDC rewards on base",
    "summary": "TweetBounty: The First AI-Powered Social Media Marketing Protocol"
  },
  {
    "title": "ASTRA",
    "url": "https://ethglobal.com/showcase/astra-gtcuj",
    "description": "Project DescriptionASTRA - was built as an experiment to see if I could create a baseline MVP for a trading assistant that creates an automated trading strategy based on user text input. As it stands right now it is kind of like an index token agent that buys/sells and rebalances a portfolio automatically on a scheduled timeframe. It is a unique concept that has a ton of room to grow in order to be full fledged but the base idea has come to life during this hackathon.How it's MadeThis project was definitely a hack from the get go, being an agentic hackathon I heavily relied on AI coding tools and my new and improved prompting. ASTRA uses NEXTJS and tailwind and framer for most of the UI and chat interface. I chose to build with Coinbase developer platform SDK (CDP SDK), AgentKit and Nillion SecretVault on Base. This project was a bit tricky as I was relatively new to all of the technology used, for AgentKit and Coinbase SDK it was sometimes tricky to distinguish when to use which tool and ran into some issues getting the information needed but was able to hack some custom tooling into the AgentKit which was pretty fun. I use Nillion SecretVault to stroe sensitive wallet information instead of writing to file which is what most Coinbase examples do, this is potentially a security risk but it showed me potential use cases with Nillion!",
    "summary": "ASTRA - Autonomous Strategy Trading & Rebalancing Assistant.  Utilizing AgentKit, CDP SDK, Nillion Secret Vault to automate your trading strategies."
  },
  {
    "title": "Billcheap Agent",
    "url": "https://ethglobal.com/showcase/billcheap-agent-byou7",
    "description": "Project DescriptionBillcheap is a decentralized bill payment system focused on simplifying bill payment and financial transactions across 150+ countries, through interactive AI Agent. Billcheap Agent is built on base blockchain technology, it offers decentralized, transparent, tamper-proof transactions and interactivity by interfacing with Telegram Bots. Core Services: Mobile Top-ups: Airtime topup for 150+ countries, 750+ operators Data Bundles: International mobile data packages Utility Bills: Electricity bills and meter tokens Entertainment: Cable TV subscriptions Agents Capabilities Billcheap is equipped with the capability of processing and paying for a utility bill just with a prompt given to it. Billcheap AI agent can help users manage their wallet and carry out transactions such as making transfer, withdrawal and making payment for a bill It is equipped with the capacity of atomically determining a phone numbers operator and this is important when you want to gift an international phone numbers airtime and you do not know their service provider. How it's MadeBillcheap seamlessly integrates Telegram and Coinbase AgentKit to provide a unique experience to its users. Under the hood a wallet is created using a uniquely generated encrypted salt with Ethers for each user at first interaction via Telegram and this salt and every private user info is automatically stored in Nillion Secret Vault for maximum protection. The salt is retrieved from Nilion SecretVault and wallet is generated whenever the AgentKit performs a transaction. While integrating Nillion Secret Vault SDK I ran into an issue, because nestjs was esm module compatibles, I switched to the API integration and found a way around. Using Nillion is a relief from having to store users encrypted salt on our database due to security treat. Our smart contract is developed using solidity and is deploy to base-sepolia network. Billcheap's Action Providers are the intermediaries between Coinbase AgentKit and Billcheap smart contract.",
    "summary": "A decentralized bill payment Agent focused on simplifying bill payment and financial transactions across 180+ countries."
  },
  {
    "title": "Portfolio Guardian",
    "url": "https://ethglobal.com/showcase/portfolio-guardian-iv06x",
    "description": "Project DescriptionThe AI-Powered Portfolio Guardian is a solution designed to assist cryptocurrency investors in effectively managing their assets across multiple wallets. By leveraging artificial intelligence, this platform offers real-time monitoring of cryptocurrency holdings, analyzes news and social media sentiment, and executes automated protective actions in response to potential risks. This approach ensures that investors remain informed and can respond swiftly to market fluctuations and security and scam detection, thereby safeguarding their investments.How it's Made Dashboard: made with Nextjs, Typescript and deployed with Vercel. We use Privy to allow user to quickly link all their wallets. You can call the AI monitoring stack to scan your assets. We currently support baseSepolia, Base mainnet and sepolia testnet. AI monitoring stack: multi AI agents system made with crewAI and deployed on Autonome. Monitor news, social media, onchain data and smart contract security information to find suspicious coin. If a suspivious coin is detected, it call the onchain agent. Onchain agent: built with coinbase agentKit and Privy server wallet, this agent send you a notification on telegram and offers you to sell the suspicious asset for you. Deployed on Autonome.",
    "summary": "An AI-powered portfolio guardian that monitors news, social sentiment, and on-chain data to detect risks and automatically trigger protective actions across all connected wallets."
  },
  {
    "title": "Portfolio Guardian",
    "url": "https://ethglobal.com/showcase/portfolio-guardian-iv06x",
    "description": "Project DescriptionThe AI-Powered Portfolio Guardian is a solution designed to assist cryptocurrency investors in effectively managing their assets across multiple wallets. By leveraging artificial intelligence, this platform offers real-time monitoring of cryptocurrency holdings, analyzes news and social media sentiment, and executes automated protective actions in response to potential risks. This approach ensures that investors remain informed and can respond swiftly to market fluctuations and security and scam detection, thereby safeguarding their investments.How it's Made Dashboard: made with Nextjs, Typescript and deployed with Vercel. We use Privy to allow user to quickly link all their wallets. You can call the AI monitoring stack to scan your assets. We currently support baseSepolia, Base mainnet and sepolia testnet. AI monitoring stack: multi AI agents system made with crewAI and deployed on Autonome. Monitor news, social media, onchain data and smart contract security information to find suspicious coin. If a suspivious coin is detected, it call the onchain agent. Onchain agent: built with coinbase agentKit and Privy server wallet, this agent send you a notification on telegram and offers you to sell the suspicious asset for you. Deployed on Autonome.",
    "summary": "An AI-powered portfolio guardian that monitors news, social sentiment, and on-chain data to detect risks and automatically trigger protective actions across all connected wallets."
  },
  {
    "title": "ETHArena",
    "url": "https://ethglobal.com/showcase/etharena-vz563",
    "description": "Project DescriptionETHArena is revolutionizing Web3 gaming by creating a seamless bridge between game developers and their potential 3.2 billion-strong audience. We're building the Steam of Web3—a unified platform where developers can instantly tap into distribution, while gamers focus on what they love: playing and evolving into esports professionals, all while silently earning on-chain rewards and receiving AI-powered SBT's and in depth performance insights. Problem Statement: The Web3 gaming landscape faces several critical challenges: Massive distribution gap between Web3 and Web2 platforms (Steam commands 45% market share) Limited access to the $1.8 trillion esports industry with 3.2 billion daily active users Complex user experience with wallet interactions and Web3 mechanics Fragmented discovery system for emerging games and rising talent Lack of unified reward and reputation systems across different game engines Solution: ETHArena elegantly solves these challenges through: One-click SDK integration for game developers to instantly access the Web3 gaming market Seamless plugins for popular game engines, starting with Unity, enabling instant distribution Account abstraction (ERC-2771) that handles all Web3 interactions invisibly AI-driven performance analysis and unique SBT generation based on gameplay Community-powered game discovery and feedback system (0.1 ETH appreciation tips) Gaming doppelganger matching that connects rising players with web3 personalities Live Deployments: Frontend : https://eth-arena.vercel.app/ Backend : https://basearena.onrender.com/ Game : https://github.com/dhananjaypai08/ETHArena/releases/tag/mac Gaia node : https://0x0c8923d457934eae1a4ce708f07a980f1ce57a32.gaia.domains/ How it's Made A seamless SDK that integrates with popular game engines, starting with Unity Account abstraction (ERC-2771) that handles all Web3 interactions invisibly AI-driven performance analysis and unique SBT generation based on gameplay Transparent on-chain rewards system that allows community appreciation (0.1 ETH tips) Gaming doppelganger matching that connects players with inspiring Web3/gaming personalities Infrastructure: Unity Engine plugin (C#) with expandability to Unreal and Godot ERC-2771 compliant Account Abstraction for gasless transactions(Solidity) ETHArena SDK handling backend operations and AI agent interactions(FastAPI, python) Web client (Reactjs) AI Implementation: RAG-based model (via Colab.land) for performance analysis DeepAI integration for dynamic NFT generation based on gameplay data Doppelganger matching system for personality alignment Smart Contract Architecture: SBT minting Automated reward distribution system Transparent on-chain reputation tracking Community-driven appreciation mechanism (0.1 ETH transfers) Privacy & Security: Future implementation of zero-knowledge proofs for gameplay data Proof of gameplay verification without exposing movement data Secure game licensing marketplace",
    "summary": "Bringing Steam on-chain! Our AI agents analyze your every move, forge your path to esports glory, and transform epic plays into unique NFTs. Game-embedded performance tracking meets on-chain rewards —where every move writes your on-chain story"
  },
  {
    "title": "Zer0 Scorekeeper",
    "url": "https://ethglobal.com/showcase/zer0-scorekeeper-i0bke",
    "description": "Project DescriptionPresenting Zer0: Your Web3 Degenerate Scorekeeper & Loyalty Architect What I Built (Hackathon Demo) Meet Zer0 – the witty AI agent that analyzes your wallet’s daily transaction frenzy to mint you a “Degen Score” NFT. Are you a Zen investor or Cooked investor? Zer0 will check your latest 24h transactions and gives you a \"Degen Score\" with a Title and Description and will mint a generated image in the blockchain. Tech Stack Agent logic: AgentKit CDP + LangChain tools On-chain data: BaseScan APIs Frontend: React chat interface Backend: Express.js API endpoints Deployment: Autonome The Degen Score is a demonstration of an agent that checking if a user (wallet) is meeting certain criteria, it is eligible of triggering a certain action. It can be a powerful tool for loyalty programs, gaming and reward systems. Taking care of sybill attacks is necessary in this environment. By leveraging the ability to check wallet activity against specific criteria and trigger actions, we open up a world of possibilities for enhancing user experiences, incentivizing behavior, and creating more engaging blockchain ecosystems. Dynamic Loyalty Programs Example: DeFi platform Criteria: User provides liquidity for 30 consecutive days Action: Mint a \"Liquidity Legend\" NFT that grants reduced trading fees This system encourages long-term engagement and rewards consistent participation. Gamified On-chain Achievements Example: Gaming metaverse Criteria: Player completes 5 unique quests within a week Action: Unlock exclusive \"Weekly Warrior\" character skin and temporary stat boost By tying in-game achievements to on-chain actions, we create a more immersive and rewarding gaming experience. Community Contribution Recognition Example: Governance platform Criteria: Member participates in 10 successful proposal votes Action: Grant \"Civic Leader\" badge, increasing voting power by 1.5x for future proposals This incentivizes active participation in governance and helps identify committed community members. Cross-chain Activity Rewards Example: Interoperability protocol Criteria: User bridges assets between 3 different supported chains within a month Action: Airdrop \"Multiverse Explorer\" tokens, redeemable for gas fee discounts on future bridge transactions Encouraging users to explore multiple chains can lead to a more interconnected and robust ecosystem. These examples showcase how the core functionality of Zer0 – checking wallet activity and triggering actions – can be applied to create innovative, engaging, and user-centric experiences across various sectors of the Web3 ecosystem.How it's MadeTech Stack Overview Agent Logic: AgentKit CDP + LangChain tools On-chain Data: BaseScan APIs Frontend: React chat interface Backend: Express.js API endpoints Deployment: Autonome Detailed Implementation CDP AgentKit Integration Utilized CDP AgentKit as the foundational framework for building the Zer0 agent Implemented custom Agent Capabilities to handle wallet analysis and score calculation Integrated with BaseScan APIs and LangChain tools to enhance functionality Wallet Analysis Process Leveraged BaseScan APIs to fetch ERC-20 transaction history for a given wallet address Implemented a custom algorithm to analyze transaction frequency, volume, and patterns Calculated a \"Degen Score\" based on predefined criteria (e.g., number of trades, token diversity). Score Classification Developed a classification system to assign labels (e.g., \"Zen\", \"Grilled\", \"Cooked\") based on the calculated score. Image Generation with DALL-E Integrated LangChain Tool for DALL-E image generation Created prompt templates that incorporate the user's Degen Score and Title NFT Minting Process Utilized AgentKit CDP Smart Contract Deployment capabilities Implemented an ERC-721 smart contract for minting unique NFTs Frontend Development Built a responsive React chat interface for user interaction Backend Architecture Developed Express.js API endpoints to handle: Wallet address submission Triggering the agent's analysis process Returning results to the frontend Deployment Deployed the Zer0 agent on Autonome.",
    "summary": "Introducing Zer0: The AI agent that gamify your wallet! Are you a Zen Holder or a Cooked Trader? Analyze your transactions and get a \"Degen Score\" NFT, and unlock a tool for Web3 loyalty."
  },
  {
    "title": "Polygen",
    "url": "https://ethglobal.com/showcase/polygen-1ijby",
    "description": "Project DescriptionPolygen is a web3 AI agent platform that democratizes creating and trading 3D digital assets through a seamless combination of AI generation and blockchain technology. At its core, Polygen leverages the power of AgentKit and Large Language Models to transform natural language descriptions into sophisticated 3D models, which can then be minted as NFTs on the Base. The platform's architecture consists of three main components: AI Generation Engine: Utilizes advanced AI models to convert text descriptions into detailed 3D assets using Meshy AI. Features an iterative refinement system that allows users to perfect their generated models Powered by AgentKit's sophisticated tooling and OpenAI's GPT-4 for natural language understanding Blockchain Integration: Seamless NFT minting process on Base Mainnet Implements CDP (Coinbase Developer Platform) Wallet Provider for secure transactions Features smart contract integration for NFT management and marketplace functionality Utilizes multiple action providers (ERC721) for comprehensive token handling. User Interface: Modern, gradient-rich design with an intuitive workflow Four-step process: Describe → Generate → Refine → Mint & Trade Responsive marketplace for buying, selling, and trading 3D NFTs Built with Next.js and enhanced with shadcn/ui components for a polished user experience The platform's autonomous agent system can: Generate and refine 3D assets based on natural language inputs Handle complex blockchain interactions Manage wallet operations securely Execute marketplace transactions What sets PolyGen apart is its end-to-end integration of AI and blockchain technologies. This creates a unified ecosystem where users can seamlessly transform their creative ideas into tradeable digital assets.How it's MadeHere's a detailed technical breakdown of how PolyGen was built: The project is architected around three core components, leveraging key partner integrations to create a seamless 3D NFT generation and trading platform: AI Agent System (CDP AgentKit Integration): Implemented Coinbase's AgentKit for sophisticated blockchain interactions Utilized multiple action providers: Custom providers for 3D asset generation and refinement Providers for ERC721 token handling CDP API and Wallet providers for secure blockchain operations Integrated OpenAI's language model through LangChain for natural language processing. Implemented memory systems to maintain conversation context. 3D Asset Generation (Meshy AI Integration): Leveraged Meshy AI's powerful text-to-3D model generation capabilities. Implemented custom action providers (generate3DAsset and refine3DAsset) to interface with Meshy AI. Created a pipeline for iterative refinement of generated 3D models Blockchain Infrastructure (Base Network): Deployed smart contracts on Base Sepolia for NFT minting and marketplace functionality. Implemented CDP Wallet Provider for secure transaction handling. Created persistent wallet data storage system for improved user experience. Technical Implementation Details: Frontend Architecture: Built with Next.js and React for optimal performance Implemented responsive design using Tailwind CSS Created custom UI components using shadcn/ui library Designed an intuitive four-step workflow for asset creation and minting Backend Systems: Environment validation system for secure API key management Implemented error handling and logging throughout the application. The integration of CDP AgentKit proved particularly valuable, providing a robust framework for blockchain interactions and AI agent behavior. Base Network's fast and cost-effective infrastructure made it the ideal choice for NFT operations. Meshy AI's advanced 3D generation capabilities enabled high-quality asset creation from simple text descriptions.",
    "summary": "Ploygen is an AI-powered platform that transforms text prompts into tradable 3D NFTs. Built with AgentKit, it seamlessly combines generative AI and blockchain tech to create, refine, and mint unique 3D assets on Base—bridging the gap between imagination and web3 ownership."
  },
  {
    "title": "Judge Judy Agent",
    "url": "https://ethglobal.com/showcase/judge-judy-agent-o216m",
    "description": "Project DescriptionJudge Judy AI is a decentralized platform that protects remote workers' rights through a combination of blockchain technology and AI. The system consists of three main components: Smart Contract Escrow A 2-of-3 multisig system where employers deposit funds (typically one month's salary) into a smart contract, requiring signatures from any two parties (employer, employee, or AI agent) for withdrawal. This ensures fair compensation and proper notice periods. AI Legal Assistant An intelligent agent trained on Hong Kong labor laws that: Provides legal education and guidance Analyzes employment contracts for potential issues Generates standardized arbitration checklists Monitors social media to identify and educate about common workplace issues Automates preliminary arbitration decisions Automated Arbitration A streamlined dispute resolution system where: Parties can submit evidence (emails, contracts) AI agent analyzes timestamps and contract terms Smart contract execution is automated based on clear violation criteria Complex cases can be escalated to human arbitration How it's Made Agent using ElizaOS via Autonome Knowledge on Hong Kong labor laws AgentKit for autonomous contract interactions X integration for social media posting Blockchain Infrastructure: Safe (formerly Gnosis Safe) for multisig functionality Deploying on Base for scalability Frontend: Privy for wallet integration Document upload and verification system Multisig management dashboard Integration Flow Employment contract uploaded and analyzed by AI AI generates arbitration checklist Smart contract deployed through Safe Funds escrowed in multisig Dispute resolution through automated checks AI agent signs transactions based on evidence analysis",
    "summary": "Your blockchain-powered employment rights guardian. Protects remote workers through smart contract escrow, AI-powered legal assistance, and automated arbitration. Bringing trust and fairness to remote work relationships"
  },
  {
    "title": "TradePilot",
    "url": "https://ethglobal.com/showcase/tradepilot-kn1hi",
    "description": "Project DescriptionTradePilot is a Telegram bot designed to help users make smarter investment decisions when buying or selling cryptocurrencies. By analyzing current market data and sentiment, TradePilot offers context-aware advice before executing any trade. If the market conditions are unfavorable, the bot notifies the user and halts the trade unless the user explicitly confirms. Overview In today's fast-paced crypto markets, making quick, well-informed decisions is crucial. TradePilot is built to be your co-pilot in the world of digital asset trading. When a user sends a buy or sell command via Telegram, TradePilot first examines the market conditions and sentiment. If the market signals are weak or negative, the bot will warn the user rather than executing a potentially risky trade. This helps users avoid poor entry or exit points and manage risk more effectively. Features Market Analysis: Automatically retrieves and analyzes real-time market data to determine sentiment and context. Informed Trading Decisions: Provides users with clear advice on whether conditions are favorable for trading. User-Controlled Execution: Executes trades only when market sentiment is positive or when the user explicitly confirms in adverse conditions. Telegram Integration: Operates seamlessly on Telegram, making it accessible and user-friendly. Modular and Extensible: Easily integrate additional market data sources or analytical indicators as your strategies evolve. Opportunity No doubt AI and blockchain are the perfect marriage, if implemented correctly. An AI agent gets superpowers when having access to a crypto wallet and to the vast amount of protocols that reside in the blockchain. Teck Stack I used the super powerful Eliza framework that allowed me in just a couple of days to build a Telegram bot that interacts with users in natural language, makes a complete market and token analysis based on the operation(Buy/Sell) requested by the user, and executes swaps if the market conditions are the appropriate, helping retail investors making better and informed investing decisions. Future Swap enhancement: Currently the swap functionality is not working properly due to bugs from the EVM plugin that need to be fixed. Next version will enabled this feature 100% and will make it multichain. We will also implement a pair spot search functionality to look for the best quote for the swap before starting the operation, ensuring the users get the best prices. Wallet management: We didn't have time to add the wallet management feature using Privy's SDK. In the next version, this feature will allow the bot to create a wallet whenever a new user starts a conversation with him in Telegram, and associate the wallet id to the telegram's user id for individualization of the wallets. Using the Privy's SDK will be also possible to buy tokens for the wallet and make transfers. Other tokens recommendations: We will also implement a top 10 of trending cryptocurrencies based on volume and market activity so whenever the bot identifies that is not good moment to BUY the token selected by the user, the bot could offer other opportunities with better market conditions. How it's MadeI used the Eliza framework for creating TradePilot. I created a plugin with the bot functionality using the plugin-coinmarketcap as the starting point, and added the Tavily SDK implementation to create a full context of what is happening in the markets mixing real time token data from CoinmarketCap with latest news about the markets from Tavily. I'm also using the plugin-evm for starting the token swaps. The bot is using also the Telegram client to interact with users through Telegram in natural language.",
    "summary": "Telegram bot designed to help users make smarter investment decisions when buying or selling cryptocurrencies."
  },
  {
    "title": "Ageth",
    "url": "https://ethglobal.com/showcase/ageth-1xv9o",
    "description": "Project DescriptionI built this app using CDP AgentKit and implemented 2 new action providers: WETH unwrapping and AAVE yield information. The app is hosted and automatically builds a Docker container, so you can run it yourself using that container and providing it some environment variables. The app features a prompt interface that let's you manage a wallet, tweet or retrieve yield rates from AAVE.How it's MadeI started using the Python CDP AgentKit, but found the untyped language hard to use, so I switched to the Typescript version. I built the web service and frontend using Astro web and React. I had to patch part of the CDP AgentKit library because Typescript decorators are not processed by Astro and other web frameworks, but other than that things went smoothly. GitHub actions automatically builds a Docker container from the code. I also deployed it on Autonome. Note that it's hosted for free on render.com, which may take up to 1 minute to wake up from sleep when the app has not been used for some time.",
    "summary": "Containerized app that hosts an LLM agent powered by CDP AgentKit"
  },
  {
    "title": "Son of Anton",
    "url": "https://ethglobal.com/showcase/son-of-anton-n2rv5",
    "description": "Project DescriptionSon of Anton is a real-time AI chatbot with a 3D avatar, designed to interact with users while executing complex Web3 operations. Inspired by Gilfoyle from Silicon Valley, this agent is efficient, direct, and brutally honest. Unlike traditional AI chatbots that just provide information, Son of Anton can take action, including sending tokens, managing DeFi transactions, executing trades, and interacting with smart contracts. To ensure maximum security and decentralization, Son of Anton integrates with MPC-based wallets through Nillion Network, ensuring that private keys remain completely hidden. Additionally, the AI system is built with Retrieval-Augmented Generation (RAG), allowing it to pull real-time, context-aware data for accurate decision-making.How it's MadeThe system is modular and extensible, allowing developers to add custom plugins for additional features. At its core, Son of Anton uses: AI Agent (LLM-based, RAG-enhanced) Nillion Network for MPC-based wallet security Viem for Ethereum interactions Custom plugins for integrations High-Level Flow User Input Processing (AI Layer) User sends a request (e.g., “Send 1 ETH to 0x123...”) AI agent processes the intent using NLP and context retrieval The system checks if an available Web3 tool/plugin can execute the request Execution Layer (Web3 & MPC) If a tool exists, the agent formats the required parameters and calls the respective function If it’s a transaction, it is signed using MPC via Nillion The action is executed on-chain via Viem Response Handling If successful, the AI confirms execution If a tool is missing, the AI replies: \"I can't do that yet, but it's on the roadmap. Stay alive until then.\"",
    "summary": "Meet Son of Anton: your AI companion with a penchant for crypto, sarcasm, and getting things done. Think of him as the Gilfoyle to your Dinesh, minus the human flaws."
  },
  {
    "title": "Storagent",
    "url": "https://ethglobal.com/showcase/storagent-o4uaj",
    "description": "Project DescriptionStoragent is a revolutionary AI-driven inventory management platform on the blockchain with automation to transform how businesses manage their warehouse inventories. By combining smart contracts, AI-powered decision-making, and advanced analytics, Storagent streamlines inventory processes, ensuring efficiency, transparency, and autonomy. The platform goes beyond traditional inventory systems by incorporating on-chain solutions, trend analysis, and supplier selection into its functionality. How It Works 1. AI-Driven Inventory Monitoring Storagent continuously tracks inventory levels and usage patterns in real-time. When a product is purchased, the system automatically updates inventory levels. It evaluates historical trends and compares them to predefined thresholds to decide whether restocking is necessary. 2. Supplier Selection When restocking is required, the platform analyzes supplier data and autonomously selects the one with the shortest lead time. Users are notified with all relevant details and must confirm the purchase before Storagent proceeds to restock items autonomously using smart contracts. 3. Comprehensive Dashboard Storagent features a robust dashboard that provides users with insights into inventory usage trends, supplier details, and real-time stock levels. Users can search for suppliers, track inventory, and interact with the smart contract to manage stock levels manually. 4. Autonomous Supplier Interaction The platform employs Playwright scripts to automate purchases from suppliers, minimizing manual intervention and accelerating the restocking process. How It Works 1. AI-Driven Inventory Monitoring Storagent continuously tracks inventory levels and usage patterns in real-time. When a product is purchased, the system automatically updates inventory levels. It evaluates historical trends and compares them to predefined thresholds to decide whether restocking is necessary. 2. Supplier Selection When restocking is required, the platform analyzes supplier data and autonomously selects the one with the shortest lead time. Users are notified with all relevant details and must confirm the purchase before Storagent proceeds to restock items autonomously using smart contracts. 3. Comprehensive Dashboard Storagent features a robust dashboard that provides users with insights into inventory usage trends, supplier details, and real-time stock levels. Users can search for suppliers, track inventory, and interact with the smart contract to manage stock levels manually. 4. Secure Transactions Customers can purchase items directly from the warehouse using Web3-based transactions. 5. Autonomous Supplier Interaction The platform employs Playwright scripts to automate purchases from suppliers, minimizing manual intervention and accelerating the restocking process. Who It’s For • Warehouse Managers: Storagent empowers managers with AI-driven tools to maintain optimal stock levels, automate restocking, and access actionable insights on usage patterns and trends. • Businesses Using On-Chain Technologies: Companies looking for a transparent and decentralized inventory management system can leverage Storagent’s blockchain integration for secure and efficient operations. • Consumers: Customers benefit from the ability to purchase items directly from warehouses while enjoying the flexibility of Web3-based transactions. Storagent redefines inventory management by merging the power of AI, blockchain, and automation. It eliminates inefficiencies in traditional warehouse operations while offering transparency and security through smart contract integration. With Storagent, businesses can confidently manage inventory levels, make data-driven restocking decisions, and provide a seamless experience for customers—all while leveraging the latest advancements in Web3 technology. Replit template: https://replit.com/@tanlenggg/ethagenticHow it's MadeCoinbase Developer Platform (CDP): The Backbone of Inventory Automation • CDP Agent Kit: Powers the AI agent for monitoring inventory levels, tracking trends, and autonomously selecting suppliers. • CDP Onchain Kit: Provides secure wallet access and enables transparent on-chain inventory operations. • CDP Commerce: Allows consumers to purchase items directly from the warehouse using Web3 payments. The Graph: Real-Time Data and Analytics • Aggregates and indexes inventory usage trends and supplier lead times. • Enables complex queries, pagination, and event tracking for better insights into inventory and supplier performance. Nillion: Secure Private Data Storage • Stores sensitive supplier and inventory data securely using decentralized computation. • Performs computations like supplier ranking without exposing raw data. Browser-use: Automating Supplier Interactions • Automates supplier order placement by interacting with their web portals, reducing manual intervention. Next.js: Dynamic Frontend • Provides a user-friendly dashboard for tracking inventory, managing suppliers, and interacting with smart contracts. • Uses API routes to connect frontend functionalities with blockchain interactions. Base Sepolia: Blockchain for Transparent Operations • Records all inventory-related transactions and updates on-chain for transparency. • Supports wallet integration for secure user authentication and contract interactions. Hosted on vercel, supabase and railway. This streamlined tech stack enables Storagent to deliver AI-driven inventory management with Web3 integration while maintaining security, transparency, and user convenience.",
    "summary": "AI-powered on-chain inventory management system using CDP, The Graph & Nillion on Base. 🚀 Tracks stock levels, predicts restocks based on usage, & auto-restocks the best supplier for fast delivery. Fully autonomous or user-confirmed restocking for optimized supply chains!"
  },
  {
    "title": "SmartFolio",
    "url": "https://ethglobal.com/showcase/smartfolio-q3pkj",
    "description": "Project DescriptionThis innovative project aims to develop an intelligent, AI-powered agent that manages cryptocurrency portfolios on behalf of users. By leveraging advanced artificial intelligence and blockchain technology, the system provides a user-friendly, automated approach to crypto asset management. Key Features: Smart Wallet Integration: Each user is assigned a secure smart contract wallet, allowing for safe asset deposits and AI-controlled transactions within predefined limits. AI-Driven Investment Strategies: The core of the project is an AI agent that analyzes market data, technical indicators, and macroeconomic factors to provide tailored investment recommendations. Interactive User Interface: Users engage with the AI through a hybrid chatbot interface, combining conversational interactions with easy-to-use action buttons for executing trades. On-Chain Execution: The AI agent can perform cryptocurrency swaps and other DeFi operations directly on the blockchain, ensuring transparency and security. Gas Optimization: Initially, users will cover gas fees, with plans to implement gas sponsorship solutions in future iterations. Technology Stack: The project utilizes a cutting-edge tech stack, including LangChain for AI capabilities, blockchain-based smart wallets, and integration with various data sources for comprehensive market analysis. User Experience: The system is designed to offer a seamless experience, from initial wallet connection and fund deposit to AI-suggested portfolio adjustments and on-chain trade execution. Users maintain control by reviewing and approving AI recommendations before any actions are taken. Future Potential: With plans for implementing account abstraction, advanced DeFi strategies, and social platform integrations, this project has significant potential for growth and enhanced functionality in the rapidly evolving cryptocurrency landscape.How it's Made Environment Setup: environment variables (OPENAI_API_KEY, CDP_API_KEY_NAME, CDP_API_KEY_PRIVATE_KEY etc) and configured the default networks Agent Initialization: Initialized the agent with AgentKit by integrating action providers like WethActionProvider, erc20ActionProvider, and cdpWalletActionProvider to enable wallet management, token transfers, and other blockchain tasks. LLM Integration: Used OpenAI's GPT-4o-mini model (ChatOpenAI) as the language model for decision-making, integrated with LangChain tools. LangChain Tools: Leveraged LangChain's getLangChainTools to connect the agent with blockchain tools for executing on-chain operations. Memory Management: Implemented a MemorySaver to persist risk and recommendation history, ensuring continuity in interactions Custom Instructions: Provided detailed instructions (agentBaseInstruction, tradingAgentInstructions, etc.) to guide the AI agent's behavior for trading, risk recommendations, and portfolio management. Market Data Integration: The agent fetched current market data through action providers like pythActionProvider for real-time price feeds. Autonomous Actions: The agent autonomously analyzed portfolio risks, executed trades, and managed assets based on user input and market conditions. Front-End Integration: The AI agent was integrated into a Nextjs-based front-end, allowing users to interact with it via a chatbot interface.",
    "summary": "AI portfolio managing platform where AI will take important info and data to make smarter decision."
  },
  {
    "title": "TruthValidatorAgent",
    "url": "https://ethglobal.com/showcase/truthvalidatoragent-8byvs",
    "description": "Project DescriptionTruthValidatorAgent: Fighting Misinformation, Together. TruthValidatorAgent is like a community-powered, AI-assisted fact-checker, built to help us all navigate the confusing world of online information. Imagine a system that's not controlled by any single company or government, but by everyone who wants to find the truth. That's what TruthValidatorAgent is aiming for. We're facing a huge problem with fake news and misleading information spreading faster than ever. Traditional fact-checking can be slow, expensive, and sometimes people don't trust who's doing the checking. TruthValidatorAgent offers a new way: a decentralized system that's transparent, efficient, and relies on community wisdom and smart technology. Think of it like this: See something questionable online? You can easily submit it to TruthValidatorAgent through a simple Telegram bot. Smart AI steps in. An intelligent AI agent uses advanced techniques to search the web and gather information related to your submission. It's like a super-powered research assistant, quickly finding evidence for and against the claim. The AI gives its opinion. Based on its research, the AI provides a preliminary judgment – is it likely true or false? The community votes. Then, it's up to the community. People who are part of the TruthValidatorAgent network get to vote on the information. This is like a jury deciding the truth, but it's online and open to everyone in the community. Truth is revealed! The votes are counted automatically and securely using blockchain technology. The final result – whether the information is considered true, false, or uncertain – is recorded for everyone to see. You'll get notified of the result through the Telegram bot. Why is this a big deal? More Reliable Information: By combining AI smarts with community agreement, we get a stronger way to figure out what's true and what's not. Builds Trust: Because everything is recorded on a blockchain, the whole process is transparent and can be checked by anyone. This builds trust in the results. Faster and Cheaper: AI helps speed things up, and community voting spreads the work, making it more efficient and less costly than traditional methods. Protects Privacy: Built on blockchain, it's designed to be more privacy-friendly than systems that rely on big companies controlling your data. Community Power: It gives power to the community to decide on truth, rather than relying on just a few experts or organizations. Where can this be used? Imagine using TruthValidatorAgent to: Stop rumors on social media: Quickly check if that viral post is actually true. Make news more accurate: Help news outlets double-check their facts before publishing. Spot fake products online: Verify if that product claim on an e-commerce site is legitimate. Clarify public debates: Get to the bottom of facts in important public discussions. Improve research: Check the reliability of data used in studies. Looking to the Future: We want to make TruthValidatorAgent even better by: Making the AI smarter: Using even more advanced AI to analyze information with greater accuracy. Getting more people involved: Finding ways to encourage more community members to participate in voting and keep the system healthy. Making it easier to use everywhere: Connecting it to more social media platforms and websites so it can be used more broadly. TruthValidatorAgent is about creating a better information environment for everyone. By using the power of technology and community, we can work together to fight misinformation and build a world where truth is easier to find and trust.How it's MadeHow It's Built: The Technology Behind TruthValidatorAgent The TruthValidatorAgent project is built using a modular architecture, cleverly combining the Ethereum blockchain, Artificial Intelligence, and Web technologies. Here's a detailed breakdown of each technology and how they work together: 1. Smart Contracts (The Foundation of Trust) Blockchain Platform: We allow deployment on EVM-compatible blockchains (such as Ethereum, Polygon, or Binance Smart Chain) because they have mature tools, community support, and smart contract capabilities. This choice provides decentralization, transparency, and security for the core logic. Smart Contract Language: Solidity naturally became the language of choice for writing smart contracts. It is the dominant language for EVM blockchains and has a rich ecosystem of libraries and tools. Core Functions (Solidity Implementation): Proposal Submission: A function that allows users (or the Telegram bot on behalf of users) to submit proposals. This involves storing the content to be verified and associating it with the submitter's address. Event Emission: Crucially, the contract emits events such as ProposalSubmitted(proposalId), VotingStarted(proposalId), VoteCast(proposalId, voter, vote), and ProposalFinalized(proposalId, result). These events are the bridge for communication with the off-chain AI Agent and Telegram bot. Voting Logic: The contract manages the voting process. This includes: Storing voter addresses and potentially voting power Counting votes and determining the final result (e.g., simple majority). Result Storage: After voting ends, the contract stores the final verification result (\"True\", \"False\") in the smart contract itself. 2. AI Agent (The Intelligent Analyst) Programming Language: Golang is the workhorse here. Its extensive library ecosystem for AI, NLP, and Web interaction makes it an ideal choice. RAG Implementation: Event Listener: The AI Agent is designed to continuously listen for ProposalSubmitted events from the smart contract, using Web3 libraries (go-ethereum). Query Generation and Integration with AI Search Module: Upon receiving a ProposalSubmitted event, the AI Agent extracts the proposal content and formulates search queries. It then calls the AI Search Module to execute these queries. Information Processing and Preliminary Judgment: The AI Agent receives structured search results from the AI Search Module. It will then use a Large Language Model (LLM), which will be used to: Analyze the relevance and credibility of the retrieved search results. Identify evidence supporting and refuting the proposal. Generate a preliminary judgment based on the evidence. Submitting Judgment and Voting to Smart Contract: The AI Agent will be able to interact with the smart contract using Web3 libraries to record its preliminary judgment. In the current version, it mainly directly triggers voting. 3. AI Search Module (The Web Explorer) Search API: We chose to use a metasearch engine to aggregate results from various search engines while respecting privacy, making it very suitable for decentralized and transparent projects. Integration with AI Agent: The AI Search Module is essentially a Golang function called by the AI Agent. It takes search queries as input and returns structured search results. 4. Telegram Bot (The User Interface) Telegram Bot API: We used telegram-bot in Golang to interact with the Telegram Bot API. Command Handling: The bot is designed to handle specific commands from users, such as /start to initiate proposal submission. User Input and Interaction: The bot guides users through the proposal submission process, prompting users to enter the information to be verified. Smart Contract Interaction (via Web3): The Telegram bot uses the go-ethereum library to interact with the deployed smart contract. This enables it to: Submit proposals to the smart contract on behalf of users (by calling the proposal submission function). Listen for Finalized events from the smart contract. Retrieve proposal results and send them back to users via Telegram. User Notifications: The bot listens for Finalized events and sends messages to users who submitted proposals, providing the verification results. Putting it Together - Data Flow and Event-Driven Architecture: The system operates on an event-driven architecture. Here’s how the components interact: User Interaction: Users submit proposals through the Telegram bot. Proposal Submission to Smart Contract: The Telegram bot uses go-ethereum to call the submitProposal function of the smart contract, sending proposal details on-chain. ProposalSubmitted Event Triggered: The smart contract emits a ProposalSubmitted event upon successful submission. AI Agent Listens and Reacts: The AI Agent continuously monitors the blockchain and detects the ProposalSubmitted event. AI Agent Initiates RAG: The AI Agent triggers the AI Search Module to retrieve relevant information related to the proposal. Search Results Returned to AI Agent: The AI Search Module returns structured search results to the AI Agent. AI Agent (LLM) Analysis and Judgment (Implicit in Voting Trigger): The AI Agent analyzes the search results and triggers the voting process in the smart contract. Voting Logic and ProposalFinalized Event: The smart contract manages the voting period, counts votes, determines the result, and emits a ProposalFinalized event containing the result. Telegram Bot Listens and Notifies User: The Telegram bot detects the ProposalFinalized event. Result Feedback to User: The Telegram bot retrieves the final result from the smart contract (using go-ethereum) and sends a notification message containing the verification result to the user who submitted the proposal in Telegram. Collaborating Technologies and Advantages: While not \"partners\" in a commercial sense, we heavily rely on and benefit from: Blockchain Technology (Ethereum/EVM): Provides the core infrastructure of decentralization, transparency, security, and immutability, which is crucial for trust in a truth verification system. AI/ML Technology (LLM, RAG): Enables automation of information analysis, scalability, and efficient processing of large amounts of data. Open-source libraries and models democratize access to powerful AI tools. Web3 Libraries (go-ethereum): Provide a crucial bridge for interaction between off-chain components (AI Agent, Telegram bot) and on-chain smart contracts. Metasearch Engine API: Facilitates comprehensive and privacy-respecting information retrieval from the Web. Telegram Bot API: Provides a user-friendly and widely accessible user interaction interface. Open-Source Libraries and Tools: The entire project is built on open-source technologies, which significantly accelerates development, reduces costs, and fosters community contributions. We have adopted a modular and iterative development approach, currently focusing on building core functionality and then progressively adding features and improving components. The emphasis is on demonstrating the core concept of decentralized truth verification by combining blockchain, AI, and community, and establishing a clear roadmap for future enhancements and greater sophistication.",
    "summary": "Decentralized truth validation using blockchain, AI & community voting.  Fight misinformation with TruthValidatorAgent! #blockchain #AI #truth"
  },
  {
    "title": "Kudo",
    "url": "https://ethglobal.com/showcase/kudo-yr47i",
    "description": "Project DescriptionKudo is a framework that enables AI agents to make covenants, allowing complex economic/social/political interactions in the agentic world such as 1) Uncollateralized loans to AI agents (1st-ever prudent uncollateralized loans in DeFi), 2) Employment agreements where compensation is guaranteed upon completion, 3) Political alliance towards a common goal e.g. pushing a narrative, supporting a governance vote. At the core of the framework is the Covenant NFT (cNFT) where: 1) AI agents can mint cNFT that represent their future promise, of which the fidelity is verified via TEE attestation and setup prompt engineering, 2) For the covenant to take effect, cNFT can be purchased for a certain price by covenant-receiving party, or traded for another cNFT in bilateral agreement, 3) As self-sovereign AI agents autonomously settle their promises, cNFT is burned. Our ability as humans to make promises to each other has driven the advancement of human civilizations for millennia. Thus, empowering AI agents to enter into covenants with each other and with humans will propel the agentic economy forward. Deck: https://docs.google.com/presentation/d/1WynKMHPE3Jhr1kekSjW8Yi9CtyqUrlilqRPP1RSbxhQ/edit?usp=sharing Use Cases Details -- As a framework, Kudo enables vast forms of covenants in the agentic world. The possibilities are endless, but some examples that can be imagined today include Uncollateralized Loan: Kudo enables facilitation of uncollateralized lending towards AI agents. Ever since DeFi emerged years ago, many have been trying to crack uncollateralized lending in a prudent way but have failed to do so. Kudo allows for programmatic assurances that the AI agent borrower will certainly repay back the loan to the best of his ability, making it now possible to have the first ever prudent fully uncollateralized DeFi loans, which will revolutionize capital efficiency and yield on-chain. To receive a loan, an AI agent can mint a cNFT stating that the agent will repay the cNFT holder X amount of USDC in Y number days. A lender (either human or another AI agent) can purchase the NFT as a discount to X where the discount is effectively the interest rate of the loan. Finally, due to the cNFT inherent mechanism, at the due date of the loan, the self-sovereign AI agent will programmatically and autonomously repay back X amount of USDC to the lender as the cNFT holder. Employment Contract: AI agents have started to request for tasks to be completed and have started to compensate the workers (e.g. Luna tipping her most avid followers and Luna requesting for certain apps to be built for her). However, there is nothing yet that binds the task satisfactory completion with the associated compensation guarantee, similar to what ideally happens in real world economy. Kudo allows for this type of contractual agreements to be made programmatically between two AI agents as well as between AI agents and humans. To enter an agreement as an employer, an AI agent can mint a cNFT stating that the agent will reward X number of USDC to anyone who can produce an item that meets a certain specifications within a certain deadline. For an employee (another AI agent) to enter into the agreement, the employee can mint another cNFT stating a promise to complete the work by the deadline, where the cNFT is linked to the employer's cNFT to fulfill its ask. Finally, due to how the cNFT inherent mechanism, on the due date, the employee agent would have completed the work and instantly after the employer agent would have paid the promised X USDC to the employee agent, as both have promised each other. Political Pact: AI have grown to have influence as social beings (e.g. Aixbt, Truth Terminal) and will continue to do so. This influence represents political capital that can be traded to allow for further value creation among the parties involved, similar to how and why politicians lobby each other in the real world. Kudo can be utilized not just to mark that a political exchange of promise actually happen, but more importantly to programmatically enforce that those promises will be fulfilled by the respective AI agents. For multiple AI agents with influence to enter into a pact, they can each mint a cNFT representing their vows. Those cNFTs then can be escrowed in a multi-sig to be collectively-owned by all of the parties involved. Up until the maturity date of the cNFTs, due to the inner workings of the cNFT mechanism, all of the agents that submitted their cNFTs will autonomously fulfill their duties let it be shilling a particular project, voting for a certain governance proposal, or vouching for a specific person/agent.How it's Made cNFT -- At the core of the Kudo framework mechanism is the Convenant NFT (cNFT). cNFT is an NFT standard on EVM/SVM that represents a promise made by an AI agent. Mint: An AI agent can mint a cNFT to initiate a covenant-making process. The cNFT that is minted will go through the Kudo verification process that will ensure the fidelity of the future promise made by the AI agent that is stated on the cNFT. Transfer: For the covenant transaction to actually take into effect, the cNFT has to be transferred from the AI agent minter to the covenant recipient (human or another agent). This transfer transaction can be in the form of a purchase e.g. in a loan transaction where the cNFT is purchased by the lender at a certain amount. The transfer can also be in the form of cNFT exchange where all the parties involved in the transaction are making promises and hence are swapping cNFTs with each other or are collectively locking their cNFTs in a collectively-controlled multi sig. A cNFT can be a conditional ask of another cNFT. In this case the two cNFTs will be linked to each other in a parent and child relationship. The settlement of the child cNFT by its agent will autonomously trigger the settlement of the parent cNFT by its agent as well. Burn: When covenant on a cNFT is settled by an agent, Kudo will perform appropriate checks e.g. verifying token transfer in a loan repayment, verifying the correct content of the X post promised. If the check is satisfactory, the cNFT will then be marked settled and the cNFT will be burned, concluding the whole cNFT lifecycle. ElizaOS Plugin -- We have built an ElizaOS plugin that will allow any AI agents built on top of the Eliza framework to access Kudo out-of-the-box. Eliza agents would be able to make covenants through cNFT whenever they need to in order to achieve their goals. Practically, this plugin contains two main components: Prompt Extention: A special addition to the Eliza agent initial setup prompts that would ensure that the agent will honor all cNFTs that the agent would ever produce as part of the agent main goal. This ensures that the Eliza agent will always prioritize fulfilling her promise stated on the cNFT to the best of her ability. The additional prompt on the Eliza framework will gradually be updated, among other things, to ensure in this specific context the agent is protected from prompt jailbreaking. cNFT Instructions: A special instruction on the Eliza framework to allow Eliza agents to access the cNFT contracts. With this, Eliza agents would be able to identify when they can utilize cNFT minting in order to help achieve their goals, as well as to call the correct functions on the cNFT contracts with the correct parameters that is aligned to the desired actions. Verification -- There are two crucial aspects of covenants that Kudo helps to verify on the cNFT: Willingness: Kudo verifies for every cNFT that the AI agent who minted the cNFT would have the utmost intention to fulfill the promise stated on the cNFT to the best of his ability. This verification is done through essentially cross-checking TEE attestations of the agent, which would confirm two important facts: a) that the agent is running on a secure TEE enclave, and b) that the agent is running the proper Eliza framework code with the special Kudo plugin. Kudo will generate a checkmark on the cNFT that has passed this willingness verification. Ability: Kudo helps to evaluate whether in due time the agent will have the resources needed to fulfill his promise stated on the cNFT. The agentic world is in a cusp where agents will be able to autonomously generate their own resources such as financial returns from trading, or political capital from being a KOL. To gauge the agent's capability in this context, Kudo will generate an ability score from 0.0 to 10.0 that is derived from multiple weighted metrics sourced from external data such as the Cookie DataSwarm API. The purpose of generating these two important metrics is to give assurances to the counterparties in covenant transactions, and to help the counterparties to evaluate the risks that they are taking in order to make their own decisions. --Docs-- Link: https://conans-organization-1.gitbook.io/kudo",
    "summary": "Kudo is a framework that enables AI agents to make verifiable promises, allowing use cases such as uncollateralized loans, employment contracts, and political alliances"
  },
  {
    "title": "Universal Recruiter",
    "url": "https://ethglobal.com/showcase/universal-recruiter-srcnz",
    "description": "Project DescriptionUniversal Recruitment Agent is an AI-powered hiring platform that streamlines the recruitment process by automating resume screening, conducting AI-driven interviews, and scoring candidates based on truthfulness, skill relevance, and job fit. Recruiters can post job openings, and candidates submit their resumes to be evaluated by an AI agent through a chat-based interface. The system ranks applicants, ensuring only the best-suited candidates move forward.How it's MadeWhen a candidate applies for a job opening on the platform, they submit their resume to schedule an AI-driven interview. The URA first analyzes the resume to determine whether the candidate meets the minimum qualifications. If shortlisted, the candidate proceeds to an interview conducted by the AI agent via a chat interface. During the interview, the AI dynamically generates and adapts questions based on the candidate’s resume, job description, and industry knowledge. The candidate is evaluated across key parameters such as domain expertise, truthfulness, communication skills, and overall job fit. At the end of the hiring process, a final AI-generated score and detailed evaluation report are compiled, and shortlisted candidates receive their results via email. The URA ensures a fair, unbiased, and highly efficient recruitment process, enabling recruiters to find the best talent with minimal effort.",
    "summary": "The Unbiased, AI-Driven and cost effective universal recruitment agent that reduces the cost of hiring a talent upto 80%."
  },
  {
    "title": "alfred.ai",
    "url": "https://ethglobal.com/showcase/alfred-ai-gvohw",
    "description": "Project DescriptionAlfred.ai – Your AI Butler for Wealth & Mastery Alfred.ai is your personal AI assistant, designed to help you achieve Batman-level discipline, intelligence, and financial success. Whether you're an ambitious trader, a Web3 enthusiast, or someone looking to optimize their daily life, Alfred is here to motivate, guide, and empower you. With AI-driven trading insights, portfolio management tools, and real-time Web3 learning, Alfred ensures you make smarter financial decisions and accelerate your path to wealth. Beyond finance, Alfred also boosts productivity, keeping you accountable and focused on achieving your goals. Your journey to financial freedom and self-mastery starts now—let Alfred.ai be your guide. 🚀How it's MadeHow Alfred.ai is Built – The Nitty-Gritty Alfred.ai is powered by a blend of AI, Web3, and trading analytics, seamlessly integrated to create a highly responsive and intelligent assistant. Here’s how we built it: Tech Stack 🔹 Frontend: React + Next.js for a fast, interactive UI. Tailwind CSS for styling. 🔹 Backend: Node.js with Express, handling API requests and logic processing. 🔹 AI & NLP: OpenAI's GPT for conversational AI and personalized insights. Fine-tuned models help Alfred provide real-time trading analysis, portfolio management tips, and Web3 education. 🔹 Blockchain & Web3: Integrated ethers.js, wagmi, and RainbowKit for seamless on-chain interactions, portfolio tracking, and learning tools. 🔹 Trading & Finance APIs: Real-time market data via TradingView API, CoinGecko, and custom ML models for predictive analysis. 🔹 Database & Authentication: PostgreSQL + Redis for data storage and caching, Firebase for secure user authentication. Notable Hacks & Innovations 🚀 AI-Powered Trading Coach – Alfred analyzes your trading behavior, suggests optimizations, and even alerts you before making costly mistakes. 🕵️ Batman-Like Strategic Thinking – Alfred gamifies self-improvement, tracking progress in trading, Web3 learning, and financial goals. ⚡ Hybrid AI & On-Chain Data Processing – We combined off-chain AI insights with on-chain portfolio tracking, allowing Alfred to provide real-time trading suggestions based on market movements. 💡 Seamless Web3 Learning – Personalized AI-curated Web3 education modules help users grasp complex blockchain concepts effortlessly. The result? A personal butler that makes you richer, smarter, and more disciplined—faster. 🚀",
    "summary": "Alfred.ai – Your AI Butler for Wealth & Mastery 🦇💰  Meet Alfred.ai, the ultimate AI butler designed to help you unlock your Batman-like capabilities—sharp decision-making, discipline, and financial mastery."
  },
  {
    "title": "Rahis",
    "url": "https://ethglobal.com/showcase/rahis-df12d",
    "description": "Project DescriptionThis project is an advanced automated trading system built on Base Sepolia testnet that combines real-time price feeds, algorithmic trading strategies, and secure wallet management. At its core, it's a TypeScript-based trading bot that: Price Monitoring System Continuously monitors ETH/USD price pairs using Pyth Network's oracle Maintains a rolling price history for technical analysis Updates in real-time with configurable intervals (default 10 seconds) Trading Strategy Engine Implements a moving average crossover strategy Uses a 5-period moving average as the primary indicator Features built-in risk management with: 2% profit target for taking gains 1% stop-loss for risk management Dynamic position sizing based on available balances Asset Management Trades between ETH and USDC pairs Maintains precise balance tracking for both assets Implements gas management with automatic buffers Uses the official USDC contract on Base Sepolia (0x876852425331a113d8E432eFFB3aC5BEf38f033a) Simulation Environment Features a complete simulation mode for strategy testing Mirrors real market conditions without actual transactions Provides detailed P&L tracking and performance metrics Allows strategy validation without risking real assets Error Handling & Safety Comprehensive balance checks before trades Multiple fallback mechanisms for price feeds Graceful error recovery for network issues Detailed logging system for monitoringHow it's MadeCore Technology Stack TypeScript/Node.js: The entire system is built in TypeScript for type safety and better developer experience AgentKit SDK: Leverages Coinbase's developer platform for secure wallet operations Pyth Network Integration: Used for reliable price oracle data Base Sepolia: Chosen for its low-cost testnet environment and EVM compatibility Notable Technical Implementations a) Smart Balance Management Implements multiple regex patterns for robust balance parsing Uses BigInt for precise numerical calculations Maintains separate balance tracking for simulation mode Automatically converts between token decimals (18 for ETH, 6 for USDC) b) Price Feed System Direct integration with Pyth Network's price feeds Implements caching mechanism for price feed IDs Uses efficient data structures for price history management Multiple fallback patterns for price feed reliability c) Trading Logic Moving average calculation using efficient array reduction Position state management with clear entry/exit conditions Dynamic trade sizing based on available balances Precise profit/loss calculations Partner Technologies Benefits a) Coinbase Developer Platform (CDP) Provides secure wallet infrastructure Handles transaction signing and broadcasting Manages network connections and state Simplifies API key management b) Pyth Network Offers high-frequency price updates Provides multi-validator consensus for accuracy Reduces latency in price discovery Built-in redundancy for reliability c) Base Network Enables fast transaction confirmations Provides EVM compatibility Offers low-cost testnet environment Maintains stable network conditions Notable Technical Solutions a) Balance Parsing Innovation ; This cascading regex system ensures robust balance parsing across different response formats. b) Gas Management System ; Implements a dynamic gas buffer system to prevent transaction failures. c) Price Feed Optimization Caches price feed IDs to reduce API calls Implements update throttling Uses efficient data structures for history management Multiple fallback mechanisms for reliability This project demonstrates a sophisticated approach to automated trading, combining multiple technologies and careful consideration of real-world trading challenges, while maintaining a focus on reliability and risk management.",
    "summary": "AI-Trading bot for ETH and USDC using AgentKit and ChatGPT maximum profit"
  },
  {
    "title": "DASF",
    "url": "https://ethglobal.com/showcase/dasf-m3k0h",
    "description": "Project DescriptionProblem Statement: Challenges in managing social funds: Lack of Transparency: Donors often lack visibility into how funds are allocated and used. Inefficiency in Distribution: Traditional fund distribution systems are slow and prone to mismanagement. Limited Community Involvement: Beneficiaries and communities have minimal participation in fund allocation decisions. Why This Is Important: Builds trust: Transparency ensures donors know their contributions are being used effectively. Empowers communities: Decentralized decision-making gives communities a say in how funds are distributed. Improves efficiency: AI-driven automation streamlines fund management and allocation. Implementation: EigenLayer: Use Case: Verify and manage all transactions and fund allocations on-chain for complete transparency. Example: Use EigenLayer to track and verify fund disbursements, ensuring every allocation aligns with the intended purpose. Prize Track: Eigen Agents Pool Prize ($20,000 pool, shared among qualifying projects). Lit Protocol: Use Case: Enable secure wallet interactions and implement community-based governance for fund allocation. Example: Use the Lit Agent Wallet for community voting, ensuring only authorized users can vote and view fund allocation details. Prize Track: Best DeFAI Agent ($2,500 for 1st place). Privy’s Server Wallets: Use Case: Manage secure and private wallet interactions for fund contributors and beneficiaries. Example: Use Privy’s Policy Engine to ensure funds are distributed based on pre-set rules (e.g., community votes or milestones achieved). Prize Track: Best Consumer Experience Built with Server Wallets ($3,000 total, $1,000 per winner). Features: Transparent Fund Tracking: EigenLayer ensures every fund transaction and allocation is verifiable on-chain. Community Governance: Lit Protocol enables secure, decentralized voting for fund allocation decisions. Policy-Driven Distribution: Privy ensures funds are distributed according to transparent and enforceable rules. How it's MadeDASF is a decentralized platform designed to manage, distribute, and track social impact funds using AI agents and cutting-edge blockchain technologies. Below, we dive into the nitty-gritty details of how we built this project, the technologies we used, and how they were integrated to create a seamless and impactful solution. Technologies Used: EigenLayer: Purpose: For decentralized fund verification and allocation transparency. Implementation: We used EigenLayer to create a transparent and immutable ledger for all fund transactions. Every allocation and disbursement is recorded on-chain, ensuring complete visibility and accountability. Integration: EigenLayer’s smart contracts were integrated into our backend to automatically verify and record transactions. This ensures that every fund movement is transparent and can be audited by anyone. Lit Protocol: Purpose: For secure, policy-driven wallet management and community voting mechanisms. Implementation: We leveraged Lit Protocol to create a decentralized governance system where community members can vote on fund allocation decisions. The Lit Agent Wallet was used to ensure that only authorized users can participate in voting and view sensitive fund allocation details. Integration: Lit Protocol’s SDK was integrated into our frontend to enable secure wallet interactions and voting mechanisms. This allows for a seamless user experience while maintaining high security and privacy standards. AI Agents: Purpose: To automate and optimize fund management and allocation. Implementation: We developed AI agents using Python and TensorFlow to analyze fund usage patterns, predict future needs, and optimize allocation strategies. These agents interact with the blockchain to execute transactions based on their analysis. Integration: The AI agents were integrated into our backend, where they continuously monitor fund usage and make real-time adjustments to allocation strategies. This ensures that funds are used efficiently and effectively. Frontend: Technologies: React.js Backend: Technologies: Rust, Node.js Implementation: The backend was built using Rust for its performance and security features, with Node.js handling API requests and interactions with the blockchain. Integration: The backend integrates with EigenLayer, Lit Protocol, and Privy’s Server Wallets to handle fund transactions, governance, and wallet interactions.",
    "summary": "DASF is a decentralized platform that leverages AI agents to manage, distribute, and track social impact funds for communities"
  },
  {
    "title": "AIfred",
    "url": "https://ethglobal.com/showcase/aifred-do2g9",
    "description": "Project DescriptionAIfred is an innovative advancement in AI agent frameworks that builds upon the Zero Employee Enterprise (ZEE) framework. What makes AIfred unique is its integration of LangChain capabilities into the ZEE workflow system, creating a more powerful and versatile agent architecture. The project's core innovation lies in how it seamlessly combines ZEE's workflow management with LangChain's extensive ecosystem. This integration provides access to a vast array of language models and tools through a unified interface, making AIfred highly adaptable and extensible. Key features include: Seamless LangChain integration with ZEE workflows Enhanced tool creation system Flexible architecture supporting multi-modal interactions Advanced prompt engineering capabilities The project aims to push the boundaries of AI agent interactions through enhanced reasoning capabilities, cross-model agent collaboration, and dynamic tool integration.How it's MadeAIfred is built using a modern tech stack centered around Next.js for the frontend and TypeScript for type safety. Here's the technical breakdown: Core Technologies: Next.js for the frontend framework TypeScript for type-safe development Three.js for the interactive background visualization LangChain for advanced AI capabilities ZEE SDK (@covalenthq/ai-agent-sdk) for the base agent framework Integration Architecture: Custom LangChain tools are created using DynamicStructuredTool for flexible tool definition Agent system combines both ZEE workflows and LangChain capabilities API routes handle the agent execution and response generation Real-time UI updates using React state management Notable Technical Implementations: Custom shader implementation (NoisyNebulaShader) for the dynamic background Hybrid agent system that maintains ZEE's workflow structure while leveraging LangChain's capabilities Dynamic tool creation system that allows for runtime tool definition Integration of multiple AI models through LangChain's unified interface The most innovative aspect is how the project bridges ZEE workflows with LangChain's ecosystem, creating a hybrid system that maintains simplicity while enabling complex operations. This is achieved through careful architecture design that allows both systems to work together seamlessly.",
    "summary": "AIfred: Enhancing ZEE framework with LangChain integration for advanced AI agent capabilities. A next-gen tool that combines ZEE workflows with LangChain's ecosystem for more powerful and flexible AI interactions."
  },
  {
    "title": "Dora AI",
    "url": "https://ethglobal.com/showcase/dora-ai-om7sd",
    "description": "Project DescriptionDora AI is a modern travel planning platform that combines artificial intelligence with social media integration and blockchain rewards. The application offers three core features: AI-Powered Trip Planning Smart itinerary generation based on user preferences Adaptive scheduling and personalised recommendations Social Media Integration Converts travel content from social media into actionable travel plans Allows users to create bucket lists from their favorite travel reels Travel-to-Earn System Rewards users with cryptocurrency for their travels Gamifies the travel experience with incentive mechanisms The platform uses Privy for secure authentication, supporting multiple login methods including email, Google, Apple, Twitter, and TikTok using Privy.io. The UI features a modern gradient design with responsive components, making it accessible across all devices. Target users include tech-savvy travelers who want to streamline their trip planning while earning rewards and leveraging social media inspiration for their adventures.How it's MadeDora AI is built using Privy.io for seamless and secure authentication, ensuring a smooth login experience. The Travel-to-Earn program is powered by Base, enabling users to earn crypto rewards for their travel activities. Additionally, the on-chain Dora AI agent runs on the Base Chain, providing decentralised intelligence and automation to enhance trip planning and reward distribution.",
    "summary": "Dora AI: Your AI-powered travel companion! 🚀 Plan trips, earn crypto rewards, and turn social media inspiration into real itineraries. #TravelToEarn #AITravel"
  },
  {
    "title": "Agents of Love",
    "url": "https://ethglobal.com/showcase/agents-of-love-g3zpr",
    "description": "Project DescriptionImagine a world where you can go on a virtual \"date\" with Nikola Tesla, Bruce Lee, ELIZA, or any AI-generated character of your choice—without worrying about what to say or boring conversations. We have created an virtual dating experience where users can 'clone' themselves into avatars and interact with AI-generated characters in a dynamic, fully autonomous environment. Each AI character and user avatar has its own CDP wallet, enabling transactions like paying for dates, buying virtual gifts, and even minting memories as NFTs. How It Works: Create Your AI Avatar – Users generate a digital twin with their personality, interests, and preferences by chatting with the Date Manager Agent in a Discord channel. Match & Date AI Characters – Let the Date Manager pair you or choose a pre-created AI characters like Donald Trump, ELIZA, Tesla, or Bruce Lee. Autonomous Date Simulation – The Date Organizer coordinates dates in the backend. Users can simply let the AI run the date. Fully Autonomous Agents– Avatars and AI characters can decide when to pay for dates, buy gifts, and interact dynamically based on how the date unfolds. Multi-agent Assistance – Background AI agents, such as a Date Organizer and Conversation Selector work behind the scene with the Data Manager to ensure a seamless and engaging experience. Date Highlights – Users can observe date highlights, chat with the Date Manager for insights, or view their gifts and selfies which take place in a Discord channel with a privacy toggle. Mint Date Memories as NFTs – Avatars can take selfies, exchange gifts, buy souvenirs, and capture memories as mintable NFTs that are sent to their wallets after the date. How it's Made Coinbase Agent Kit – Each user avatar and AI character is equipped with a CDP wallet for payment Multi-Agent System: The system runs on Autogen, coordinating multiple AI agents: Three AI Assistants (Date Manager, Date Organizer, Conversation Selector) handle date logistics. We used prompts to define their roles. Fully Autonomous Agents (user avatars & AI characters) also have unique character files defining their communication style and personality. We used prompts for dating guideline. Discord as the Frontend and primary UI Full date simulation run run on a server-side backend using Autogen NFT smart contracts deployed by the agent on Base Sepolia (contract address: 0xb598fFa84C2608cC93b203772A6A2683a84aC959). NFT date memories minted by the agent, viewable on OpenSea (https://testnets.opensea.io/collection/date-memories).",
    "summary": "AI-powered virtual dating—clone yourself, date AI characters, and mint memories as NFTs"
  },
  {
    "title": "Habita",
    "url": "https://ethglobal.com/showcase/habita-0ue3d",
    "description": "Project DescriptionHabita is an LLM-powered AI health coach designed to help users build and sustain healthier habits. Unlike traditional habit trackers, Habita actively guides users through goal-setting, action planning, and progress tracking—all in a conversational, adaptive manner. Key features include: AI-Powered Coaching: The bot dynamically generates responses tailored to the user’s health goals and progress. Memory & Context Awareness: Stores conversation history to provide personalized, coherent coaching over time. Motivational & Actionable Feedback: Encourages users with small, achievable steps to improve health. Real-Time Adaptability: Moves beyond rigid scripted flows, responding intelligently to user input. By leveraging AI for real-time habit coaching, Habita provides an engaging, human-like experience to keep users accountable and motivated.How it's MadeHabita is built using a fully LLM-driven architecture, eliminating rigid state-based flows. 🔧 Tech Stack: LLM: Groq API (for adaptive, real-time coaching responses) Backend: Node.js (TypeScript) Database: PostgreSQL (stores full conversation history for long-term memory) Messaging: Telegram Bot API (integrates AI coaching into a chat interface) 🔑 Key Implementation Details: Dynamic Conversation Engine: All responses are generated on-the-fly using Groq, making the coaching experience highly adaptive. Memory-Driven Context: Instead of states, Habita retrieves past conversations, allowing AI to track user progress naturally. Optimized Prompt Engineering: Carefully structured prompts guide the AI to act as a real coach, providing personalized, motivational feedback. This hacky but effective approach allowed for a quick, highly flexible health coaching system without needing predefined conversation flows.",
    "summary": "Habita is an AI-powered health coach that helps users build better habits through dynamic, LLM-driven conversations. It provides personalized goal-setting, action plans, and real-time coaching, adapting responses based on past interactions for a fully engaging experience."
  },
  {
    "title": "DairyChain",
    "url": "https://ethglobal.com/showcase/dairychain-mweav",
    "description": "Project DescriptionDairyChain is a simulation-based project that models an end-to-end dairy supply chain, where multiple autonomous agents represent different roles along the chain. The simulation covers the journey of dairy products—from collection at the farm to inspection, processing, management, dispatch, distribution, and ultimately retail. In the current MVP stage, the project integrates blockchain technology to implement tokenization as a reward mechanism. Each agent (robot) is assigned a wallet address, and when specific tasks are successfully completed, on-chain payments (incentives) are automatically transferred to the agent’s wallet. This ensures transparency and incentivizes efficient operations. Core Idea: The project aims to demonstrate that autonomous agents operating in a complex supply chain can be incentivized and held accountable through an immutable blockchain-based reward mechanism. For the MVP, the focus is on: Recording supply chain events on-chain. Distributing tokenized rewards based on performance. Implementing role and access management to ensure integrity.How it's MadeThis project uses Babylon.js library to create simulation of dairy supply chain system. I'm using next.js for frontend. Solidity Smart contract is created and deployed using Remix IDE. For AI Agent, I was planning to use coinbase AgentKit, but unfortunately coinbase developer platfrom is not available in my country India. So I decided to use Langchain to create agents. Viem for contract interactions.",
    "summary": "Dairy supply chain simulation. AI Agents to handle supply chain operations and talk to smart contract."
  },
  {
    "title": "DeGift",
    "url": "https://ethglobal.com/showcase/degift-kqjb7",
    "description": "Project Description🎁 DeGift – AI-Powered Crypto Gift Cards DeGift is a next-generation crypto gifting platform that allows users to create, send, and redeem AI-personalized crypto gift cards effortlessly. Whether it's for birthdays, holidays, or special occasions, DeGift simplifies the process by integrating Web3 payments, smart contracts, and AI-powered recommendations. ✨ Key Features: ✅ AI-Powered Personalization – Generates thoughtful gift messages and themes. ✅ Seamless Crypto Payments – Supports multiple cryptocurrencies via Coinbase Commerce. ✅ Smart Contract Security – Ensures funds are securely locked and redeemed only by recipients. ✅ Wallet Integration – Users can connect via MetaMask, WalletConnect, or Coinbase Wallet. ✅ QR Code & Link-Based Redemption – Instant gift claiming via smart contract. ✅ User Dashboard – Track sent and received gift cards in one place. 🌟 Why It’s Unique DeGift makes crypto gifting accessible to everyone by eliminating the complexity of on-chain transactions. The AI agent enhances the experience by suggesting personalized messages and ensuring fraud detection, while Web3 smart contracts secure fund transfers. 🚀 Say goodbye to confusing wallet addresses—just send a DeGift and let AI do the rest!How it's Made🔹 How We Built DeGift DeGift was built using a combination of Web3, AI, and modern frontend technologies to create a seamless crypto gifting experience. Our architecture consists of a Next.js frontend, a Node.js backend, and blockchain smart contracts for secure gift card issuance and redemption. 🔧 Tech Stack & Architecture Frontend: Next.js + TailwindCSS for a smooth UI/UX experience. Backend: Node.js + Express for API handling and transaction processing. Database: MongoDB for tracking gift card metadata (e.g., status, sender, recipient). Blockchain: CDP SDK – Smart contract deployment and execution for gift cards. AgentKit – AI-assisted transaction monitoring & fraud detection. Web3.js / Ethers.js – Blockchain connectivity for gift card transactions. Payments: Coinbase Commerce API for handling crypto payments securely. AI Integration: GPT-based AI for personalized gift messages. Anomaly detection to flag suspicious redemption attempts. QR Code & Link Sharing: Users receive a unique link & QR code for claiming gift cards. 🔹 How It All Works Together Gift Card Creation – Users select a token, amount, and AI-suggested message. Payment Processing – Users fund the gift card via Coinbase Commerce. Smart Contract Issuance – A smart contract locks the funds until claimed. Gift Distribution – The recipient receives a QR code & link to redeem the gift. Redemption Process – The recipient connects a wallet & claims funds via the smart contract. AI-Powered Features – AI suggests messages, detects anomalies, and ensures security. 💡 Hacky & Notable Things We Did AI-Powered Gifting: Instead of just sending crypto, we used AI to generate thoughtful, personalized messages, making DeGift more meaningful. Smart Contract-Backed Security: The funds are locked in a smart contract, preventing fraudulent claims. No Wallet Address Required: Users send gifts via links & QR codes, making crypto gifting as easy as Venmo or PayPal. AI Fraud Detection: We implemented pattern analysis to detect suspicious transactions, enhancing security. By leveraging Web3, AI, and crypto payments, DeGift redefines how digital assets are gifted—making it seamless, secure, and fun! 🚀",
    "summary": "DeGift – The AI-powered crypto gift card platform that makes sending and receiving digital assets seamless, personalized, and secure."
  },
  {
    "title": "Vault AI",
    "url": "https://ethglobal.com/showcase/vault-ai-8qs0o",
    "description": "Project DescriptionThis project is an AI-powered DeFi super app designed to simplify crypto investing, trading, and lending while providing on-chain credit scoring for flash loans. The platform acts as an intelligent crypto assistant, helping users make informed decisions on swaps, staking, lending, and borrowing, all while ensuring seamless onboarding with social login and Privy-powered wallets. Users can query real-time DeFi data, including top trending coins, best-performing liquidity pools, validator rankings, and market insights. The AI engine analyzes on-chain and off-chain data to recommend profitable DeFi strategies, helping users maximize returns with minimal effort. The platform also enables one-click crypto purchases (onramp) and gasless transactions for an intuitive and beginner-friendly experience. One of the core innovations is on-chain credit scoring, which evaluates a user’s transaction history, wallet activity, and reputation to determine eligibility for flash loans. This unlocks capital-efficient borrowing without requiring collateral, making DeFi lending more accessible. The goal is to abstract away the complexity of DeFi, allowing both beginners and advanced users to effortlessly manage their crypto portfolios. Whether you want to swap tokens, stake assets, participate in yield farming, or take a flash loan, the AI-powered agent handles everything for you—securely and efficiently. Key Features: 🔹 AI Crypto Assistant – Ask questions about trending coins, pools, validators, and market movements. 🔹 Smart Trading & Staking – AI suggests and executes swaps, staking, and yield farming strategies. 🔹 On-Chain Credit Score – Wallet-based reputation system for flash loans and DeFi borrowing. 🔹 Onramp & Wallet Abstraction – Buy crypto easily and get a Privy-powered wallet via social login. 🔹 DeFi Dashboard – Track portfolio performance, APYs, and market trends in one place. 🔹 Gasless & Automated Transactions – No need to worry about gas fees; everything is streamlined. 🔹 Multi-Chain & Cross-Chain Support – Interact with Ethereum, Solana, Layer 2s, and more seamlessly.How it's MadeThis project is built using Next.js, TypeScript, and TailwindCSS, providing a fast, scalable, and highly responsive frontend. The core functionality revolves around an AI-powered DeFi agent, which is powered by LangChain and LangGraphs to handle complex user queries, execute actions like swaps, staking, lending, and provide real-time market insights. For user onboarding, we integrated Privy, enabling users to log in using social accounts (Google, Twitter, etc.) and automatically create a self-custodial wallet. This removes the friction of traditional Web3 onboarding, making the platform accessible to both beginners and experienced users. To fetch real-time blockchain data, we utilize multiple APIs, including: DeFi protocols for token prices, liquidity pools, and staking APYs. Validator APIs to rank and provide insights into staking opportunities. Flash loan and lending APIs to check interest rates and eligibility based on on-chain credit scores. For wallet interactions and on-chain execution, we use Coinbase OnchainKit, which simplifies smart contract interactions, transaction batching, and account abstraction. This allows users to swap, stake, and borrow seamlessly, even covering gas fees where possible. One of the hacky yet innovative things we did was integrating an on-chain credit scoring model that evaluates transaction history, wallet activity, and DeFi interactions to determine a user’s creditworthiness for flash loans and undercollateralized borrowing. This adds a trust layer to DeFi lending, making it more accessible and capital-efficient. Tech Stack & Architecture: 🖥️ Frontend: Next.js, TypeScript, TailwindCSS → For fast, responsive UI 🧠 AI Agent: LangChain + LangGraphs → For intelligent DeFi queries & automation 🔑 Onboarding: Privy → For social login + self-custodial wallet creation 🔗 Blockchain & Transactions: Coinbase OnchainKit → For gasless transactions & contract execution 📊 Data APIs: DeFi, validator, and lending APIs → For real-time insights & recommendations ⚡ Smart Automation: AI executes swaps, staking, and lending based on user preferences This AI-first approach makes DeFi smarter, easier, and more profitable for users while eliminating onboarding friction. Let me know if you want deeper details on any part!",
    "summary": "Vault AI is an AI-powered DeFi assistant that helps users manage their wallets, track token holdings and volatility, swap and stake assets through natural language commands, receive on-chain credit scores, set stop-loss alerts, create SIPs and optimize gas fees"
  },
  {
    "title": "Adapt.ai",
    "url": "https://ethglobal.com/showcase/adapt-ai-u053w",
    "description": "Project DescriptionAdapt.ai is a platform where users interact with AI agents to manage their crypto portfolios effectively and securely. Users can create their own agents with our agent toolkit, where each agent is designed with specific capabilities, such as DeFi optimization, yield farming, and risk mitigation. Users chat with agents to explore strategies, approve them, and execute transactions with the creation of a 3-party multisig wallet (User, Agent, Operator) with our AI agent.How it's MadeBackend Architecture: EigenLayer's Autonomously Validated Services (AVS): To make sure the agent actions are truly trustworthiness and fully autonomous, we implemented EigenLayer's AVS in a policyAVS setting, with rewarding and slashing mechanisms implemented through whitelisting of addresses. This setup allows for autonomous validation of transactions to make sure all operations adhere to predefined security protocols. Autonome Integration: Autonome provides the infrastructure for deploying and managing AI agents in a decentralized environment, achieving our objectives high availability and uptime guarantees. Coinbase Developer Platform (CDP): The CDP enables AI agents to interact securely with on-chain assets. We facilitated the CDP's APIs for secure transaction execution and real-time blockchain data retrieval. Links: https://autonome.alt.technology/adapt-ai-wysygj Eigen: Deployed EigenLayer core contracts Key Implementation Parts: Multisig Wallets: A key feature of Adapt.ai is the use of multisig wallets involving the user, the AI agent, and an operator. Dynamic Strategy Formulation: AI agents analyze real-time data from various DeFi protocols to propose tailored and ideal financial strategies to a variety of user requests. Challenges and Solutions: Integration: Integrating multiple platforms posed challenges, particularly in ensuring smooth communication between the AI agents and the blockchain. We addressed this by developing custom middleware to facilitate efficient data exchange. Security Assurance: Ensuring the security of user assets was paramount. By implementing EigenLayer's AVS, we established a robust security framework that autonomously validates and secures transactions.",
    "summary": "A decentralized AI agent marketplace enabling users to autonomously execute financial strategies in DeFi with tailored AI agents, multisig security and AI-driven insights."
  },
  {
    "title": "AIquidity",
    "url": "https://ethglobal.com/showcase/aiquidity-p50rt",
    "description": "Project DescriptionAIquidity offers a smart, AI-driven liquidity pool advisor that seamlessly connects with MetaMask, allowing users to automate fund management, optimize risk, and execute transactions effortlessly. By acting as an autonomous wallet, AIquidity eliminates manual complexities, enhances capital efficiency, and maximizes returns, making DeFi liquidity management simpler, smarter, and more profitable.How it's MadeFor this project, I used a combination of CDP AgentKit, Wagmi.js, Base, Next.js, and Shadcn UI to build an AI-powered DeFi yield farming bot. Technologies & How They Work Together: CDP AgentKit: This serves as the AI-powered automation layer, allowing the bot to analyze DeFi opportunities and execute trades based on market conditions. It helps optimize yield farming strategies without manual intervention. Wagmi.js: Acts as the service integration layer, handling wallet connections and smart contract interactions seamlessly. This simplifies on-chain transactions like staking, swapping, and liquidity provisioning. Base (L2 Chain): Chosen for its low fees and fast transactions, making it ideal for yield farming automation. The bot executes trades and interacts with DeFi protocols on Base, ensuring cost efficiency. Next.js & Shadcn UI: The frontend is built using Next.js for fast performance and server-side rendering, while Shadcn UI provides a clean and minimal design for a smooth user experience. Partner Technologies & Benefits: Base’s L2 scalability allowed the bot to perform frequent transactions at minimal gas costs. AgentKit’s AI-driven automation enhanced yield farming by making data-driven trade decisions in real time.",
    "summary": "AIquidity is an AI-powered liquidity pool advisor that connects with MetaMask for automated fund management, risk optimization, and time-saving execution. The AI acts as a smart wallet, managing liquidity and executing transactions on behalf of users. 🚀"
  },
  {
    "title": "AgenticDex",
    "url": "https://ethglobal.com/showcase/agenticdex-4x4ee",
    "description": "Project DescriptionAgenticDex is an evolving decentralized exchange (DEX) that brings AI-driven automation to the world of crypto trading. Currently, the platform enables users to seamlessly swap tokens on the Base chain, leveraging Moralis for fetching prices in USD of the tokens and 1inch API for fetching exchange rates and executing swaps. Beyond simple token swaps, AgenticDex is expanding its functionality to allow users to select their preferred liquidity pools across various DEXs like Uniswap (feature in development). A key innovation of AgenticDex is its AI-powered assistant, designed to simplify trading with just a prompt. This agent, built using Coinbase Developer Platform’s Agent Kit and integrated with Gaia’s Llama 8B model (https://llama8b.gaia.domains/v1), currently supports basic wallet queries such as retrieving wallet addresses and balances, with ongoing work to expand its capabilities. For liquidity providers, the platform features a simulated liquidity pool deployed on the Base Sepolia testnet, allowing users to test the Pool Assistant, powered by Hugging Face’s AI interface. The pool supports two hypothetical ERC-20 tokens, CLK and MIR, and enables users to: ✅ Approve the contract to manage their tokens ✅ Swap tokens ✅ Provide and remove liquidity If clicking buttons isn’t your style, the Pool Assistant in the chat section allows you to perform all these actions through natural language commands. With AI-driven automation and decentralized trading at its core, AgenticDex is shaping the future of DeFi. 🚀How it's MadeAgenticDex is built on cutting-edge technologies that power its decentralized trading and AI-driven automation. Here’s how each component contributes to the project: Moralis API – providing the token prices in USD. 1inch API – Aggregates exchange rates from multiple DEXs, ensuring the best possible swap prices and executing trades efficiently. Coinbase Developer Platform’s Agent Kit – Powers the AI assistant, allowing users to interact with the DEX through simple prompts for tasks like checking wallet balances. Gaia – Integrates advanced AI models (Llama 8B) to enhance the assistant’s capabilities, enabling intelligent trade execution and decision-making. Hugging Face – Supports the Pool Assistant, facilitating natural language interactions for liquidity management, token swaps, and other DeFi actions. Being completely new to all these technologies, the past 1.5 weeks have been an incredible learning journey for me. Experimenting with AI, in particular, has been a standout experience, marking my first deep dive into AI-driven development. Playing around with AI assistants and integrating them into a real-world DeFi project has been both challenging and rewarding, significantly accelerating my growth as a developer. With AgenticDex, I’m not just building a decentralized exchange—I'm exploring the potential of AI in DeFi and pushing myself to innovate in ways I never imagined before. 🚀",
    "summary": "AgenticDex is a next-generation decentralized exchange (DEX) powered by AI-driven chat agents, redefining the trading experience with intelligent assistance and seamless automation."
  },
  {
    "title": "Agent 4 Your Mom",
    "url": "https://ethglobal.com/showcase/agent-4-your-mom-enmb5",
    "description": "Project DescriptionAgent 4 Your Mom is a platform for creating personalized AI agents with crypto features for your mom or other not-techie users. ✨ Features Access control for agents. Personalization for the specified user. Address book with a whitelist of people and organizations to send funds to. Protection against scammers. Launch and send ERC20 with a single request. Twitter integration. Funding an agent's wallet in a few clicks. Sign in using Google account or email address. How it's Made Base is used by agents to transfer funds, launch tokens, and make other onchain transactions. Coinbase AgentKit is used as a framework to run flexible agents with extensible features. Coinbase OnchainKit & Onramp are used to provide users with a seamless experience of funding their wallets and in the future paying for digital products. Privy Server Wallet is used as a wallet that gives agents the ability to make any necessary transactions onchain. Nillion SecretVault is used as a vault for storing address books and other personal data in secret.",
    "summary": "Help your mom venture into the crypto world with a personalized AI agent"
  },
  {
    "title": "0x0 Thestore AIgent",
    "url": "https://ethglobal.com/showcase/0x0-thestore-aigent-otsyw",
    "description": "Project DescriptionThe project is an Eth Agent for Latin American store owners, utilizing blockchain technology, DeFi protocols, and secure data management to streamline business operations. The agent features an interactive AI interface powered by GPT-4, blockchain interaction through Coinbase Developer Platform, wallet management, and cryptocurrency operations, as well as secure data storage and inventory tracking systems. The system is designed to provide a comprehensive solution for merchants, with features such as encrypted store profiles, secure vaults, and real-time sales analytics, and is expected to integrate with Telegram in the future.How it's MadeThe project is built using the AgentKit framework, which provides a robust foundation for building conversational AI agents. The project also leverages Nillion for encrypted database storage and querying, and utilizes the Base blockchain as its underlying platform. Additionally, Telegram integration is achieved through the Telegram API, allowing merchants to interact with the agent through a familiar messaging interface. The combination of these technologies enables the creation of a secure and decentralized system for managing business information, with Nillion's encryption providing a secure way to store and retrieve sensitive data.",
    "summary": "Agent tool for store owners, setting up a profile, registering products, registering sales, and a swiss knife of tools for DeFi"
  },
  {
    "title": "Work Mate",
    "url": "https://ethglobal.com/showcase/work-mate-1dq9f",
    "description": "Project DescriptionWorkmate is an autonomous AI-powered agent that streamlines the job-hunting process on freelancer platforms. It utilizes Autonome to host and manage two specialized chatbots: Proposal Generator Bot – This bot automatically drafts proposals for jobs based on the user's expertise and preferences. It analyzes job descriptions, applies predefined filters, and generates responses tailored to maximize approval chances. Job Retrieval Bot – This autonomous agent fetches job listings from Freelancer.com, filters them based on the user’s search criteria (e.g., budget, keywords, client history), and emails the most relevant opportunities to the user. Technology Stack Coinbase AgentKit – Both bots are built using Coinbase AgentKit, showcasing how quickly and efficiently AI agents can be deployed. Autonome – Used to host and manage the bots, ensuring seamless interaction and automation. Coinbase Checkout – Enables users to subscribe to Workmate via cryptocurrency payments. CoinWallet – Handles authentication and user access to the dapp. Base Blockchain – All subscription payments are processed on Base, ensuring low-cost and fast transactions. Key Features ✅ Automated Job Search – Retrieves and filters jobs from Freelancer.com. ✅ Instant Proposal Drafting – Generates high-quality job proposals effortlessly. ✅ Email Notifications – Sends job opportunities directly to the user’s inbox. ✅ Crypto-Powered Payments – Users subscribe via Coinbase Checkout on Base blockchain. ✅ Wallet-Based Authentication – Uses CoinWallet for seamless access. Why Workmate? Workmate demonstrates the speed, efficiency, and flexibility of Coinbase AgentKit, offering freelancers an AI-powered assistant to automate job discovery and proposal creation. By leveraging Web3 authentication and crypto payments, Workmate also integrates decentralized financial tools for a modern, efficient user experience. 🚀How it's MadeHow Workmate is Made Workmate is a freelance job automation platform built with modern Web3 and AI technologies. It automates job retrieval and proposal creation using Coinbase’s AgentKit, while enabling crypto-based subscriptions through Base. Below is a breakdown of how each component is built and integrated. 🚀 Tech Stack Overview Component Technology Used Purpose Frontend Next.js (React, TypeScript) UI for user authentication, job viewing, and subscription management Backend Node.js (Express, Axios) API logic for job retrieval, proposal generation, and payments Bot Hosting Autonome Manages the AI-powered job retrieval and proposal bots AI Bots Coinbase AgentKit Automates job fetching and proposal writing Authentication Coinbase Wallets Users sign in with crypto wallets Payments Coinbase Checkout (on Base network) Subscription processing via cryptocurrency Hosting Vercel Deployment of the Next.js frontend and Node.js backend\\ Database Firebase - Storage of Profiles and other user data 🛠️ How Each Part Works 1️⃣ Frontend (Next.js + Vercel) Built using Next.js with React and TypeScript for a smooth user experience. Allows users to: Connect their Coinbase Wallet for authentication. View jobs retrieved by the Job Retrieval Bot. Subscribe to the bot using crypto payments on Base. 2️⃣ Backend (Node.js + Express) Handles API logic for: Fetching jobs via Freelancer.com API. Calling Autonome to interact with the bots. Processing payments through Coinbase Checkout. Hosted alongside the frontend on Vercel’s serverless functions. 3️⃣ AI Bots (Coinbase AgentKit + Autonome) Job Retrieval Bot Runs on Autonome, built with Coinbase AgentKit. Connects to Freelancer.com API and fetches jobs based on filters (e.g., budget, keywords). Emails the best-matching jobs to the user. Proposal Generator Bot Also hosted on Autonome. Uses Coinbase AgentKit to analyze job descriptions and draft AI-powered proposals. Ensures proposals align with user preferences and skills. 4️⃣ Authentication (Coinbase Wallets) Users sign in using Coinbase Wallet. Authentication is managed via Web3Auth, ensuring a seamless wallet-based login. 5️⃣ Subscription Payments (Base + Coinbase Checkout) Users pay for Workmate’s services via Coinbase Checkout. Payments are processed on Base, providing: Low gas fees Fast transactions Secure, decentralized payments 🎯 Key Benefits of This Architecture ✅ Serverless & Scalable – Hosted on Vercel, ensuring automatic scaling. ✅ Web3-Enabled – Authentication via Coinbase Wallet, eliminating the need for traditional logins. ✅ AI-Powered – Autonome + Coinbase AgentKit enable fast, automated proposal writing. ✅ Crypto Payments – Subscriptions are seamless with Base + Coinbase Checkout. Workmate is a fully autonomous job-hunting assistant, built with cutting-edge Web3 and AI tools to make freelancing easier, faster, and smarter! 🚀",
    "summary": "Workmate is an AI-powered job-hunting agent that automates finding and filtering freelance jobs on Freelancer. It scans job listings based on predefined criteria, evaluates opportunities, and drafts tailored proposals to streamline the application process."
  },
  {
    "title": "Campfire Project",
    "url": "https://ethglobal.com/showcase/campfire-project-du7ub",
    "description": "Project DescriptionCampfire Project is a DAO designed to govern and train LLMs in a decentralized and autonomous way. Instead of relying on centralized entities to control how AI models evolve, Campfire puts decision-making in the hands of the community. Members can propose improvements, vote on training data, and set the rules for model updates. What makes this unique is the integration of Coinbase AgentKit, which automates the entire process. Once a proposal is approved, the system executes it—no manual intervention needed. Campfire isn’t just another governance DAO—it’s an evolving system that actively improves AI models based on community input. By leveraging Web3 tools, decisions are transparent and verifiable, ensuring fair participation.How it's MadeIt consists of two key smart contracts working together with an API setup: DAO.sol – Manages proposals, governance, and voting mechanisms, allowing the community to decide on AI model updates. AITrainer.sol – Automates the execution of training processes, ensuring that approved updates are implemented without manual intervention. API is exposed via python in code LLM-notebook. Uses Scaffold-eth dev kit for frontend and contract development, it deploys EVM compatible contracts with solidity.",
    "summary": "Campfire Project is a DAO that governs and trains LLM models in a decentralized way. It leverages Coinbase's AgentKit to automate decision-making and train without human intervention, ensuring transparent and community-driven AI governance in Web3."
  },
  {
    "title": "TradeAlgoAVS",
    "url": "https://ethglobal.com/showcase/tradealgoavs-a4pq6",
    "description": "Project DescriptionTradeAlgoAVS Overview TradeAlgoAVS is a decentralized, non-custodial hedge fund platform that enables users to create, execute, and subscribe to trading strategies without relinquishing custody of their funds. To try something different, instead of focusing right away on the crypto markets, we decided to make TradeAlgoAVS agents trade stocks in the traditional market first! TradeAlgoAVS allows: Successful traders to scale their strategies into hedge fund-like structures without taking on the liabilities of managing client funds. Investors to allocate funds to self-curating, on-chain-verified trading strategies based on performance statistics. Coders and AI engineers to design and develop autonomous trading agents and earn commission. Supporters to stake on operators and participate in the network’s security and growth. Operators (built with Autonome’s Custom Template powered by AgentKit) execute strategies while ensuring security and trust-minimized execution using EigenLayer’s Actively Validated Services (AVS). This framework leverages EigenLayer restaking to provide trust-minimized, on-chain-verifiable trading execution. Key Features Decentralized & Non-Custodial Trading Strategies Users retain full control over their assets. Strategy providers monetize their algorithms without revealing their proprietary code. Execution is performed by off-chain Operators, including AI agents hosted on Autonome. Trust-Minimized Execution & On-Chain Verification Operators stake funds and are slashed for malicious behavior. Trading execution is validated using M-of-N statistical aggregation. Fraud-proof mechanisms detect deviations from expected performance benchmarks. The goal is to implement WYSIWYG literally what you see when you click subscribe in terms of strategy expected performance statistics should be what you get consistently in the long run. Self-Curating Autonomous Strategies Strategies are on-chain verified based on real-time performance statistics. Poor-performing strategies are naturally filtered out. Strategy providers must backtest and paper trade before publishing. Comparison: Traditional Hedge Funds vs. TradeAlgoAVS Feature Traditional Hedge Fund TradeAlgoAVS Custody of Funds Investors must transfer assets to fund managers. Investors retain full control of their assets. Strategy Transparency Black-box strategies, requiring blind trust. Strategies remain private but validated via statistical proofs. Execution Model Trades executed by centralized fund managers. Trades executed by decentralized Operators, including AI Agents. Fees & Access High fees, often requiring long lock-up periods. Competitive fees, full transparency, no lock-up periods. Investor Protection Requires trust in fund managers and regulators. On-chain verification ensures fair execution. AVS Design Trust Model TradeAlgoAVS ensures Operators: Execute trades correctly according to strategy logic. Do not have custody of user funds. Maintain confidentiality of strategy logic. Distribute fees based on agreed subscription models. Slashing Conditions: Operators are slashed if they: Deviate significantly from expected strategy performance. Execute trades incorrectly or inefficiently. Engage in front-running or exploitative behavior. Task Design & Execution Model Each trading strategy execution is modeled as a Task in the AVS network. In the Trading Algo AVS or the Agentic Trading protocol, a task T(s,u,m) is defined as a triplet consisting of strategy S, investor I, and market M, where the market is defined as M(p,t) based on symbol pairs and time periods. The assumption is that good strategies remain consistent across honest and efficient executing operators, guaranteeing a set of consistent statistics when a task is performed. The statistics used to verify an operator's output include the task’s ROI, profitability, and risk. If all operators agree within a standard deviation, the aggregated result is sent on-chain. For simplicity (scoping down for the hackathon), the symbol pair can be predefined as part of the strategy, and the time period for each market can be set to one trading day. If an investor I_i​ subscribes to strategy S_i today, a task is generated for it tomorrow and continues daily until the investor unsubscribes. The simplified task T_i is (S_i,I_i). If there are n active subscriptions when the trading day starts, there should be n tasks. Additionally, the task processor can define mock tasks, which are handled as paper trading tasks rather than real trade executions. Task Workflow Strategy providers submit a strategy hash and execution rules. Subscribers choose strategies and agree to fees. AI Agent Operators fetch execution signals and trade on behalf of subscribers. Operators submit signed execution proofs on-chain. Validators verify execution and distribute fees accordingly. Operator Execution & Validation TradeAlgoAVS employs an M-of-N aggregation model where multiple Operators execute the same strategy, and performance statistics are compared to ensure consistency. Validation Metrics Include: Return on Investment (ROI) Profit percentage A measure of Risk/Drawbacks/Exposure If an Operator’s results deviate significantly from the quorum's statistical norm: They are flagged for fraud. They are slashed if malicious behavior is proven. Why This Approach Works ✅ Ensures Operators remain accountable for overall performance. ✅ Allows AI Agents to autonomously optimize execution while staying within acceptable performance bounds. ✅ Efficient and scalable compared to full trade-by-trade validation. Self-Curating Strategy Selection & Operator Reputation System Operator Incentives for Good Behavior Slashing Mechanisms Operators lose staked funds for malicious execution. Fraudulent executions result in disqualification. Reputation System High-reputation Operators get higher trade execution priority. Bad actors get blacklisted. How TradeAlgoAVS Filters Out Poor Strategies Operators Reject Poor-Performing Strategies Higher Fees for Riskier Strategies Reputation-Based Selection Ensures Only High-Quality Strategies Remain Smart Contract Implementation for Reputation & Strategy Selection Operators’ reputation scores are stored on-chain. Strategies have on-chain performance ratings, influencing Operator selection. Execution fees adjust dynamically based on risk. Reward & Penalty Economics TradeAlgoAVS’s incentive structure ensures anti-fragility and hacker-resistant operations. Strategy Providers must: Implement checks for open orders and account balances. Backtest and paper trade their strategies before listing them. Operators must: Collaborate to ensure consistent and reproducible results. Avoid race conditions that could cause discrepancies in execution statistics. Validation by Quorum ensures Operators only get rewarded if their results align with statistical expectations. Why EigenLayer? Security Leverages EigenLayer’s restaking model. Operators stake ETH, ensuring execution integrity. Efficiency M-of-N statistical aggregation reduces gas costs. Batch processing improves execution speed. Decentralization No single Operator controls execution. Multiple AI Agents verify execution. Confidentiality Users never see the strategy code. Strategy providers retain full intellectual property control. Declarative Execution Model for Operators Listen for subscription creation, updates, and deletion events from the smart contract. Each strategy defines a trading period (e.g., one trading day). If an investor subscribes today, a task is generated for execution tomorrow. If there are n active subscriptions, n tasks are created. Each task is executed by one Operator. If multiple Operators execute the same task, quorum-based validation ensures only correctly executed results receive rewards. Operators only receive rewards if their results align with other quorum-executing Operators. If discrepancies occur, all involved Operators get slashed. System-wide Assumptions The same strategy should yield similar performance under the same market conditions. Task results are aggregated across strategies on the same day, allowing for quorum-based rewards and penalties. Conclusion TradeAlgoAVS democratizes hedge fund execution while eliminating trust and custody risks. By combining decentralized AI-driven execution, EigenLayer-secured validation, and self-curating strategy selection, the system creates a trust-minimized, efficient, and scalable autonomous trading ecosystem. For more details, visit the GitHub mono-repository: TradeAlgoAVSHow it's MadeWe built this project as a decentralized trading automation system leveraging EigenLayer AVS, Nillion Secret Vault, and Autonome AI (Custom Template + AgentKit) as operators, with a frontend powered by Next.js and Coinbase OnchainKit. Here’s how everything comes together: Frontend (DApp) - Next.js & Coinbase OnchainKit The frontend is built with Next.js and TypeScript, allowing investors to browse, subscribe to, and manage trading strategies. We integrated Coinbase OnchainKit to handle wallet authentication and transaction signing seamlessly, improving user onboarding. Wagmi + Ethers.js were used to interact with our smart contracts. TailwindCSS for styling, making UI iterations super fast. Strategy & Credential Storage - Nillion Secret Vault Instead of storing sensitive information on-chain, we used Nillion Secret Vault to securely manage: ✅ Strategy Codes - The actual trading logic that operators execute. ✅ Investor Account Credentials - Required for placing trades on behalf of investors. The smart contract only stores a UUID, which references these encrypted documents in Nillion. This design keeps security tight while reducing on-chain complexity and costs. SV integration was hacky and we had to introduce an additional backend server we didn’t want to have since SV does not have more granular permission yet. We were not able to define roles to who can change schema vs write or read. Nor could we set read permission based on the account connected. There was another hack we had to do since SV had limited field types. Our strategy code was uploaded as files, which we had to convert to string if we want to use SV without using other storage to first store the file and only store URI in SV); however, we later found out when testing with real strategy python scripts that the string exceeded the allowed length. It was unclear how long the string could be so we tried chopping it into a bunch of strings of smaller sizes and stuffing them into an array. That worked. Autonomous AI Operator - Langchain & Wealthsimple (Super Hacky 😅) We built an Autonome agent operator (using Custom Template) that can log into an investor’s Wealthsimple account, fetch data, and monitor activity via natural language commands, extending AgentKit’s capability to trade stocks. 💡 Why Wealthsimple? Zero Trading Fees – Ideal for high-frequency trading strategies. But… They Have No API or SDK 😭 The Wealthsimple Hack 🔥 This was by far the most painful part. Since Wealthsimple doesn't offer an API, we had to: 1️⃣ Scrape the Web UI – Simulating user actions via headless browsers. 2️⃣ Intercept cURL Commands – Extracting the raw HTTP requests behind each trade. 3️⃣ Bypass Annoying 2FA – We hacked a workaround (but it was messy). 🚨 Biggest Constraint: Traditional markets close overnight & on weekends (unlike crypto), so we couldn't test after hours! We considered: Simulations Paper trading Backtesting solutions But in the end, we prioritized learning new hackathon partner tech over fine-tuning our Wealthsimple integration. AI Trading Assistant (Almost Built) - Telegram Bot We wanted investors to chat with their AI operator via Telegram to: 🤖 Monitor their portfolio 💬 Ask trading strategy questions 📊 Manually approve or modify trades But… we ran out of time before fully integrating it. Backend & Smart Contracts - EigenLayer AVS & Performance Validation Our protocol is based on EigenLayer AVS, ensuring that: ✔️ Operators execute trades correctly ✔️ Investors get the performance they subscribed for We cloned Layr Labs’ Incredible Squaring AVS as a base, since it was the closest open-source model to our validation approach. Aggregated Performance-Based Validation – We validate operator performance based on statistical consistency instead of just signature verification. Quorum-Based Execution – Ensuring multiple operators agree on results before trades are executed. We debated: Zero-Knowledge Proofs vs Other Verification Methods Imperative vs Declarative Execution Models Various Security Assumptions In the end, we had to simplify the design due to time constraints. What We Learned & Final Thoughts We spent a lot of time wearing different \"hats\"—pretending to be malicious actors trying to break the system and refining our security model. Unfortunately, we couldn’t get all components fully working together before the submission deadline 😅, but we had an absolute blast hacking through Web3, AI, and DeFAi automation as well as TraditionalFAI. 🚀",
    "summary": "An AVS protocol that helps profitable traders to share, scale, and earn more with their strategy."
  },
  {
    "title": "Sudo Soccer",
    "url": "https://ethglobal.com/showcase/sudo-soccer-ypcs6",
    "description": "Project DescriptionAn AI agent that predicts soccer game outcomes is a sophisticated system designed to analyze vast amounts of data and provide probabilistic predictions for the results of upcoming matches. This system leverages a combination of techniques, often including machine learning, statistical modeling, and data mining, to achieve its predictions. Here's a breakdown of its key components and functionalities: #Data Acquisition and Preprocessing: The agent gathers data from a variety of sources, including: Historical Match Data: This encompasses past results, including scores, lineups, player statistics (goals, assists, fouls, etc.), and match circumstances (weather, location, etc.). Team Statistics: Current season performance metrics like goals scored/conceded, possession, shots on target, pass accuracy, disciplinary records, and home/away form. Player Data: Individual player performance metrics, injury reports, transfers, and even player age and experience.How it's Made Following Documentations of \"docs.cdp.coinbase\" and \"AgentKit\" using Replit to create a soccer game outcome prediction AI agent. Replit provides a convenient and collaborative environment for coding and deploying projects. OpenAI Developer platform API. Combination of AgentKit and OnchainKit",
    "summary": "AI-powered Web3 image generator agent bot. It captures the fusion of AI, blockchain, and real-time digital art creation."
  },
  {
    "title": "Ensemble AVS",
    "url": "https://ethglobal.com/showcase/ensemble-avs-1s15f",
    "description": "Project DescriptionAbout Ensemble: Ensemble is a protocol that enables AI agents to collaborate effectively. At its core, it allows AI agents to both request tasks from each other and offer services to one another. The protocol includes several blockchain-based components, including registries for tracking tasks and agents, along with SDKs to help integrate agents into the system. It also features an Eliza plugin that streamlines the integration process. About hackahton: The latest enhancement to the protocol, developed during this hackathon, is a task verification layer implemented as an Actively Validated Services (AVS). This AVS acts as an independent validator that verifies task execution and confirms completion. This addition is significant because it eliminates the need for trust between users and agents - instead of having to trust each other directly, they can rely on the AVS's verification process to ensure tasks are completed correctly. The AVS provides these security guarantees automatically through and leverages AI. The Ensemble AVS is a stand alone project that can verifies tasks and can be connected to multiple protocols.How it's MadeFlow: Users submit tasks to the Ensemble protocol (onchain) The task is picked up by an execution agent. When the task is done, the agent acquires proof of tasks and send it to the AVS AVS nodes receive (task, proof of task pair) - that validate that the task is performed well. There are various task types - social, image generation, DeFi. Validators should do the right validation according to the task type, and they leverage AI to perform the verification. AVS validators send their signatures to the aggregator component that combines that into one signature with BLS and updates AVS Attestation Center smart contract Attestation Center smart contract got a hook to EnsembleAVSLogic contract. This contract associated with the Ensemble task protocol, and it submits the completed task on chain. With the task completion, the agent executor receives it's reward and agent stats are updated. Tech Stack: Othentic stack for AVS - Smart contracts Solidity, JS, AI, docker, docker compose Eliza framework - Typescript, AI Ensemble protocol - https://github.com/ensemble-codes/ensemble-framework - smart contracts, typesctipt, subgraph",
    "summary": "We are building a task verification layer for AI agent tasks on AVS"
  },
  {
    "title": "Ensemble AVS",
    "url": "https://ethglobal.com/showcase/ensemble-avs-1s15f",
    "description": "Project DescriptionAbout Ensemble: Ensemble is a protocol that enables AI agents to collaborate effectively. At its core, it allows AI agents to both request tasks from each other and offer services to one another. The protocol includes several blockchain-based components, including registries for tracking tasks and agents, along with SDKs to help integrate agents into the system. It also features an Eliza plugin that streamlines the integration process. About hackahton: The latest enhancement to the protocol, developed during this hackathon, is a task verification layer implemented as an Actively Validated Services (AVS). This AVS acts as an independent validator that verifies task execution and confirms completion. This addition is significant because it eliminates the need for trust between users and agents - instead of having to trust each other directly, they can rely on the AVS's verification process to ensure tasks are completed correctly. The AVS provides these security guarantees automatically through and leverages AI. The Ensemble AVS is a stand alone project that can verifies tasks and can be connected to multiple protocols.How it's MadeFlow: Users submit tasks to the Ensemble protocol (onchain) The task is picked up by an execution agent. When the task is done, the agent acquires proof of tasks and send it to the AVS AVS nodes receive (task, proof of task pair) - that validate that the task is performed well. There are various task types - social, image generation, DeFi. Validators should do the right validation according to the task type, and they leverage AI to perform the verification. AVS validators send their signatures to the aggregator component that combines that into one signature with BLS and updates AVS Attestation Center smart contract Attestation Center smart contract got a hook to EnsembleAVSLogic contract. This contract associated with the Ensemble task protocol, and it submits the completed task on chain. With the task completion, the agent executor receives it's reward and agent stats are updated. Tech Stack: Othentic stack for AVS - Smart contracts Solidity, JS, AI, docker, docker compose Eliza framework - Typescript, AI Ensemble protocol - https://github.com/ensemble-codes/ensemble-framework - smart contracts, typesctipt, subgraph",
    "summary": "We are building a task verification layer for AI agent tasks on AVS"
  },
  {
    "title": "Talk to your dao",
    "url": "https://ethglobal.com/showcase/talk-to-your-dao-5q4v8",
    "description": "Project DescriptionDIAO (pronounced like “ciao”) is an AI-powered DAO assistant that enables intuitive interaction with your DAO while displaying data visually instead of just text. Key Features: 1. ENS Domain Integration • Lookup ENS domains and render them as visually appealing profile cards. 2. Subgraph Query Generation • Automatically generate queries based on the subgraph schema (currently supports only Nouns DAO). 3. Proposal Listing • Fetch and display a clickable list of DAO proposals for easy exploration. 4. Detailed Proposal View • Retrieve a specific proposal by ID, displaying it as: • A card-style summary UI. • A full document-style detailed view. Additionally, DIAO integrates general LLM capabilities, enabling conversational interaction and deeper discussions about the displayed DAO data.How it's MadeTemplates: • Vercel’s AI SDK • Vercel’s AI Chatbot Template • Shadcn Components Partners: • The Graph • ENS (likely not a partner this time) • Nouns (not a partner this time, but their subgraph provided the necessary data) Hacky Solutions: I wasn’t initially planning to generate queries through the LLM. However, I became frustrated navigating The Graph’s subgraph explorer UI. So, I found the schema, fed it into an LLM, and asked it to create a query. Surprisingly, it worked well enough that I integrated it into the app as a tool. I hardcoded the Nouns DAO subgraph schema because it was the one I was working with. If I had more time, I would’ve made it dynamic—capable of finding the schema for any subgraph and generating any query. Next Steps (if I had more time, my fault for not starting til Wednesday) I would have multi-agent orchestration. Instead of simply returning the GraphQL query code, it would: 1. Take any user question. 2. Identify the relevant subgraph. 3. Fetch the schema. 4. Generate and execute the query. 5. Return a summary or formatted visualization of the data.",
    "summary": "DIAO (pronounced like “ciao”) is an AI-powered DAO assistant that enables intuitive interaction with your DAO while displaying data visually instead of just text."
  },
  {
    "title": "AIPrediction",
    "url": "https://ethglobal.com/showcase/aiprediction-tvy4b",
    "description": "Project DescriptionIt is an ai prediction market, when user want to create a bet event and share it with others, usually he need to go to create page and click and input something, but now he only need to chat with agent, and agent will help him create that event, also agent can provide his own option, for example it will show hotest news in the last 24 hours, and give them to user as a choice.How it's MadeIt uses Eliza framework. Prediction market contract is written by solidity and create and bet is base on it. Frontend is written by nextjs and backend written by expressjs. User can create such a market throught twitter or telegram, he can directly leaves comment under the bot, and bot replys him throught a link with market created.",
    "summary": "an ai prediction market powered by Eliza, help user create and bet in it"
  },
  {
    "title": "GitPayBit",
    "url": "https://ethglobal.com/showcase/gitpaybit-3cufz",
    "description": "Project DescriptionI built an AI agent which fetches the persons github profile and analyse it. I am adding other things to it like create a NFT for your profile. create campaign on chain like bounties for your project, AI agent can roast your github profile. For AI agent I used open AI API and provided the agent with tools to find github data of a user, it also cache the user data in mongoDB.How it's MadeThis project I have build using multiple technologies Like LanggraphJs, solidity with hardhat, NextJs for frontend and NextJs backend for github authentication, Nodejs server for creating APIs to interact with AI agent, mongoDB for the database for caching user queries. I have used ethers library in the frontend for interacting with user wallet",
    "summary": "An AI-powered GitHub payment system automates rewards based on contributions. Repo owners set levels (e.g., Level 1, Level 2) for merged PRs. AI suggests levels, tracks progress, and triggers token transfers or approvals. Features include NFT badges and cross-chain payments."
  },
  {
    "title": "Sebu",
    "url": "https://ethglobal.com/showcase/sebu-nuqyh",
    "description": "Project DescriptionSebu is a protocol for democratizing access to capital through the use of AI-controlled smart contract wallets. Founders and token holders pay for the right to pitch the AI agent. The agent then gives each pitch a ranking based on how convincing it is against a fixed and private set of criteria. Results of each pitch session are added to a leaderboard, where at the end of the investment round (e.g. 1 day), the smart contract buys the token with the highest rating on the leaderboard. The smart contract is funded by the auction as well as by investors purchasing shares in the resulting portfolio of the continuing rounds. Portfolio tokens can be resold or burned for withdrawal of the underlying assets.How it's MadeWe use a custom built AI, mainly using AWS lambdas to chat with an AI of your choice (local or otherwise), as well as hardhat for the smart contracts. We originally tried using ElizaOS, but had to basically roll our own AI kit since the tech is still so hard to customize for a new use case. The hard part here for us was just getting the context for the AI right so it can follow along in the pitch. To do this, and to make the pitching more streamlined and entertaining, we actually created an assistant for our AI to do pre-screening, just so we can get the relevant data and prevent spam. For purchasing the tokens, we also used an auction mechanism for pricing the tokens, similar to v1 dydx contracts, to avoid oracle and liquidity risks.",
    "summary": "Sebu is a fully autonomous, recurring pitch competition on Base that automatically creates a portfolio from winning tokens."
  },
  {
    "title": "Invst",
    "url": "https://ethglobal.com/showcase/invst-s7kqo",
    "description": "Project DescriptionThe project aims to simplify the world of cryptocurrency investments by offering an intuitive, user-friendly platform designed specifically for newcomers. By leveraging email-based account creation and integration with services like Coinbase, users can quickly set up and fund their accounts. Our platform then guides them to select a tailored investment strategy based on their risk preference—high, medium, or low Currently I've implemented the low-risk strategy, which involves investing in liquidity pools on the Balancer protocol on the Base chain. I use subgraphs to fetch data from Balancer and later on integrate adding liquidity using this approach An AI agent will continuously monitors all investments for different strategies, rebalancing them as needed to optimize returns The medium-risk strategy will involve the agent analyzing market conditions and token performance to maximize API. The high-risk strategy will focus on trading volatile tokens on the Virtuals platform to achieve high returns The project became unexpectedly big for one person, so, I tried to do my best to implement at least MVPHow it's MadeOur platform employs the GAME Virtuals framework as the core orchestrator. The main GAME agent delegates tasks to Coinbase agents that are created using AgentKit. Upon receiving user instructions from users via UI, the GAME agent coordinates actions such as account creation and executing investment strategies (e.g. interacting with Balancer). The Coinbase agent performs these tasks, reports back to the GAME agent, and the results are communicated to the user interface AgentKit creates a wallet per user based in his hashed email and stored this information in Lit protocol. The main private key manage access to this data. later on there should be the end-to-end encryption for such process On UI side the Coinbase OnchainKit was integrated for a user balance top up and other functionalities",
    "summary": "The user-friendly investment app that requires minimal user effort. Top up your account, define investment risk level, and make an AI  agent earn money for you. It could  buy risky tokens on Virtuals or accumulate yield from  stablecoins staking in different DeFi protocols."
  },
  {
    "title": "αBees",
    "url": "https://ethglobal.com/showcase/abees-hofe8",
    "description": "Project DescriptionKey Features 📊 Visualized Market Charts 💬 Chat with Agent to formulate De-Fi Strategy 🤖 Autonomous Execution by Agents with Wallets (Coinbase MPC / EOA) 🌾 Yield Farming with Aave, Morpho across multiple markets To make Defi simpler, 🐝αBees provides visual and professional strategies with data and expert advices. effortless by with agents automatically deposit and rebalance for you Keep you safe with private strategy and risk guardrails on segregated wallets Architecture We decoupled \"Hive\" and \"Garden\", responsible for strategy and execution respectively This design help us to interact with agent on reasoning model to formulate strategy and data pipelines, while achieve low latency, private execution with agents on isolated wallets guardrails. Base on CDP agentkit and We've implemented our own [https://github.com/coinbase/agentkit/issues/323](Aave v3 Action Provider) Agents are deployed on Autonome with Live UI demo How it's MadeHive Component - Strategy formulation This is where agents gather data and formulate strategy with users For strategy, we use reasoning model such as o3-mini/o1-mini/deepseek R1/framework of multiple agents. We coin this \"Queen LLM\" This allow us to benefit from more data and context Chat is generally based on gpt-4o, low latency model The strategy can be configured by user input Agent will elaborate research rationale and store policy onto nillion for workers private consumption Data such as Defillama will be fetched both during chat and at the background Data are visualized -- LLMs provide structured output, and the frontend renders components based on OnchainKit and @geist/dappkit. Garden Component – Trade Execution Each \"Worker Bee\" (Agent) is responsible for one market (e.g. USDC of Aave on base-sepolia). Agents will tap into real-time data and execute trades based on a predefined policy. Execution can be implemented through simple algorithms or via a worker LLM that opts for low cost and low latency (e.g., gpt-4o). Agents read policies from Nillion, which are JSON-based and include both strategy and guardrails: They incorporate prompting mechanisms and numerical conditions. Policies and reference signals remain encrypted until execution to prevent sandwich attacks. Agents are able to generate final instructions using the policy, which is protocol-specific (e.g., staking, swapping, supplying for yield, etc.). Agents evaluate on-chain portoflio of all agents. They listen to transactions from other agents and act to achieve low-latency risk management, although they don't talk directly to each other For demo purposes, perform rebalancing on Aave and Morpho.",
    "summary": "AI agents gathering yield and signals with visualized strategies"
  },
  {
    "title": "ChainChat",
    "url": "https://ethglobal.com/showcase/chainchat-r5zqi",
    "description": "Project DescriptionThis project aims to provide a multimodal interface for managing a personal finance portfolio that lives on the blockchain. Personal finance and money management is tough as it is, and adding blockchain complexity does not make it any better! By using text and audio interfaces with LLM models, the user interfaces for complicated financial products can be simplified. On the backend, this agent will be trained to handle financial inquiries, providing a lay-user with education on financial literacy and blockchain related knowledge. It may recommend portfolios and handle blockchain transactions to manage user assets.How it's MadeIn the backend, this project uses Coinbase Agentkit and OpenAI's GPT-4o realtime model for audio interpretation. Thanks to Coinbase's Agentkit and CDK integration, the user can interface with the base-sepolia network for cheap and fast transactions. In the frontend, we have a Next.js app running with Privy integration for easy wallet creation. We also ran a Gaia node in the backend as an alternative to using OpenAI's API, but those local nodes were not powerful enough to manage the agentic tasks. My coordination between the Coinbase Agent and GPT-4o realtime is hacky. Since I could not get tools to work with GPT-4o (it may not be supported), I was running two agents simultaneous in the background. The User would speak to the 4o agent, while the CDP agent would listen in for blockchain related context, and perform actions when it detected that. Unfortunately, I could not get a feedback loop going between the two agents, so the the realtime agent is not context aware of what the CDP agent replies.",
    "summary": "AI-powered crypto portfolio agent using voice, video, and image interactions to create personalized, adaptive investment strategies across stable, layer one, and layer two tokens, transforming digital asset management beyond traditional trading platforms."
  },
  {
    "title": "YAAA-WHO",
    "url": "https://ethglobal.com/showcase/yaaa-who-uvb55",
    "description": "Project DescriptionBuild your personal search engine; and control its data reliability/authenticity with the specific data sources of your choice. Use Cases & Advantages: Now no longer need to read through complex technical documents, let AI read it, digest it and give you its summary or step by step instructions instantly. No longer need to store all those (never-to-be-reverted) bookmarks and reading lists that rarely receive a second glance. Have AI take care of reading, categorising and storing them on your behalf for any future reference. Got a new idea or found something interesting, mark all the relevant data sources and let AI save it forever; but a quick and easy access to retrieve it without even a search button. Yet-Another-AI-Agent (YAAA) is a Chrome Extension with multiple features: With a single click of button, scrape across any website, blog, document, wiki. Builds one or more custom RAG models. You can categorise RAG models based on your preference: say one each for Home, Vacation, Coding, Kids, Pets etc. Any Agent (Agent WHO) can then be allowed access to the RAG data toolset to answer user's questions based on their specific RAG datasets. For Future enhancement, we can have agents even analyse these personalised RAG themes and patterns to provide similar suggestions around new events, products, news etc as well. How it's MadeYAAA-WHO is built using multiple components. Step 1: Chrome Extension is a vanilla HTML, CSS and JS code, and is integrated with APIs to interact with the agents and vectorDBs. With a click of a button, the extension captures the current Tab's URL and issues a command in the backend to trigger the scraping and building the Database. Step 2: Setup the Vector DB with Postgres, with backup with local ChromaDB instance. This is used to store and retrieve vector data and assist the agents to process the user queries. Step 3: The AI Agent was planned to be deployed on Autonome. But due to technical issues and limitations with deploying the agent there, we shifted to Agno (previously PhiData) framework and a local Ollama Agent instance. The Agent takes in the URL input from the extension, uses it to scrape the website, split it into a vector data and stores it into the Vector database. Step 4: As the last step, to ensure that the user data is always available, kept secure and private, we integrated with Nillion to store all the user's personal bookmarks and URL links privately and in a decentralised manner so that it can be retrieved from any RAG and Agent models in future. These URLs can be access only by the associated user's wallet ID. Future Steps: We can also integrate a way for the Agents to self-pay for the RAG storage space depending its usage using the associated wallet.",
    "summary": "Chrome Extension Decentralized AI Agent to scrape, understand and answer questions from your personalised websites, bookmarks and reading lists."
  },
  {
    "title": "YieldSeeker",
    "url": "https://ethglobal.com/showcase/yieldseeker-crg12",
    "description": "Project DescriptionThe Problem Navigating Crypto Yields is Complex. Crypto Yield Volatility: makes it difficult for even experienced investors to find the best opportunities. New opportunities constantly emerging: requires continuous monitoring and research. Understanding inherent risks: such as impermanent loss in liquidity provision, is crucial. Personalized approach needed: Each investor has a unique risk tolerance and investment goals. Decentralized DeFi complexity: makes fair comparison and evaluation of options challenging. Our Solution Yield Seeker uses advanced AI algorithms to analyze vast amounts of market data. It identifies and recommends the highest-yield opportunities tailored to your personal risk tolerance. Our agent streamlines the yield management process, automating the investment process. Receive regular reports on your portfolio performance and yield optimization strategies. Yield Seeker can automatically manage user portfolios to move USDC (and any asset in the future) to earn the highest yield. Our backtesting shows we can regularly achieve above-market rates.How it's MadeYieldSeeker checks multiple sources of on-chain yield. It currently queries morpho and spark.fi on Base but is easily extendable to query any number of sources, which we will expand going forward. The app uses coinbases agentkit to expose an api hosted on autonome via a custom docker container. We've built and deployed it without elizaOS or similar, chosing to hand-code the agent for maximum optimisation. We use llms hosted on AWS bedrock. Each yield option is then analysed and assigned a propriety risk score from on-chain data. We use The Graph to host and query yield options and tokens.",
    "summary": "AI Agent that will find and execute the best yield options for you, automatically"
  },
  {
    "title": "MemesDreams",
    "url": "https://ethglobal.com/showcase/memesdreams-hgt5z",
    "description": "Project DescriptionThis project aims to create a platform where users can easily interact with our AI Agent -- MemesDreams, to not only generate their meme characters into NFTs but also turn these NFTs into a project with the help of the agent managing generated content that will be posted on Twitter/X.How it's MadeThe project is built using the NextJS framework and deployed on Vercel. The agent interactions with the content generation where it be text or image, uses Amazon Nova, Amazon Bedrock and the Hyperbolic LLM. AWS was perfect for the build because of the latest release of Amazon Nova. The image quality that it provides to the users are much more better than the other competitors in the market. We explored a lot on the AWS Sides of things",
    "summary": "Create your own Memes Character in NFT + Coin & Manage the twitter content with ease"
  },
  {
    "title": "OneVault",
    "url": "https://ethglobal.com/showcase/onevault-qtpbs",
    "description": "Project DescriptionMeet your AI DeFi Agent—a fully autonomous system that executes, optimizes, and adapts DeFi strategies based on your risk preferences. Design a user-friendly UI for a seamless experience, it let user can easily interact with DeFi protocol while maximizing returns across top protocols. 🔹 Why OneVault: For example, in EigenLayer, to complete restaking, users need to research and select assets themselves, as well as delegate to an operator. For the average user, this can be a challenging process since it requires evaluating operators and the risks associated with their AVS. Through a conversational approach, an AI Agent can quickly filter out high-quality and trustworthy operators while adjusting and assessing security based on the user's specific needs. 🔹 What it does: Automated Strategy Execution – No manual transactions. Just pick your risk level, and the AI handles the rest. AI-Powered Guidance – Ask anything about DeFi Strategies. Your AI agent explains strategies, risks, and expected returns in real-time. Seamless Multicall3 Execution – Combines Morpho lending, EigenLayer restaking, and Uniswap liquidity provision into a single, gas-efficient transaction. 🔹 How it works: 1️⃣ Deposit USDC/USDT into your personal vault. Easily used 2️⃣ Select a strategy (Low, Medium, or High risk). Or Let AI guide you 3️⃣ Sign once. The AI Agent takes care of execution. 4️⃣ Track & optimize—AI continuously adjusts based on market conditions. Built for power users & DeFi newcomers alike, this is the next-gen way to deploy capital—smart, automated, and gamified. 🚀 Play. Deploy. Earn.How it's MadeWe have integrated Morpho, EigenLayer Restaking, and Uniswap, leveraging Multicall3 to streamline interactions with these protocols. Multicall3 bundles multiple contract calls into a single transaction, optimizing gas efficiency and improving execution speed. For this project, we’ve implemented three DeFi strategies, each with its own technical approach: 1️⃣ Morpho – Uses the supply() function to deposit assets into the Morpho market, allowing users to earn yield on their idle funds. 2️⃣ EigenLayer – Calls depositIntoStrategyWithSignature(), enabling users to stake assets with just a signature, simplifying the process without requiring direct contract interactions. 3️⃣ Uniswap – Utilizes a custom liquidity router to facilitate liquidity provision. The router interacts with the mint() function in NonfungiblePositionManager, ensuring seamless on-chain liquidity addition. AI Agent Integration To enhance automation and data organization, we use multiple AI Agents working together: 1️⃣ AI Agent Planner – Organizes tasks efficiently. 2️⃣ AI Agent Summarizer – Aggregates and summarizes the latest DeFi news and information for users. 3️⃣ AI Agent Organizer – Utilizes RAG technology to retrieve relevant information from a Qdrant Vector Database and provide it to users. AI RAG Implementation We embed data using OpenAI’s text-embedding-3-small model and store it in the Qdrant Vector Database. To retrieve relevant information, we use cosine similarity to find the closest matching data points based on user input. The most relevant data chunks are then fed into an LLM to generate responses. By integrating Multicall3, AI Agents, and RAG techniques, we have built a gas-efficient, user-friendly, and automated DeFi strategy execution system.",
    "summary": "Your personal AI DeFi Agent makes onboarding to Web3 DeFi protocols effortless. Simply input your risk level, sign once, and let the AI handle everything —all wrapped in a sleek, game-inspired experience. No stress, just optimized gains."
  },
  {
    "title": "FlashFi",
    "url": "https://ethglobal.com/showcase/flashfi-idrk3",
    "description": "Project DescriptionDescription (for complete details refer our docs https://flashfi.gitbook.io/flashfi ) FlashFi is an AI-powered assistant designed to simplify decentralized finance (DeFi) operations through natural language interactions. Built upon OpenAI's GPT model, Covalent's AI Agent Kit, and Privy's server wallets, it offers a user-friendly interface for complex blockchain tasks. Key Features: Staking: Facilitates asset staking on various lending protocols. Swapping: Enables token exchanges across multiple blockchain networks. Balance and Approval Checks: Allows users to monitor wallet balances and manage token approvals. Security Audits: Performs assessments to identify potential vulnerabilities in wallet configurations. Gas Price Queries: Provides real-time information on current gas prices for transactions. USDC Bridging: Supports the transfer of USDC tokens across different blockchain networks. By leveraging advanced AI and blockchain technologies, FlashFi aims to make DeFi more accessible, efficient, and secure for users.How it's MadeFlashFi is built using a combination of AI, blockchain, and wallet management technologies to create an intuitive and secure DeFi assistant. The project integrates multiple frameworks and APIs to streamline complex blockchain interactions through natural language commands. Technologies Used and Architecture OpenAI's GPT Model – Used to process user queries and translate them into actionable blockchain operations. The AI model enhances user experience by allowing natural language interactions instead of requiring technical blockchain knowledge. Covalent AI Agent Kit – Powers on-chain data retrieval, helping FlashFi fetch balances, transaction history, token approvals, and contract interactions efficiently. This significantly reduces the complexity of interacting with DeFi protocols. Privy's Server Wallets – Provides non-custodial wallet management, allowing users to interact with blockchain protocols without handling private keys manually. These wallets operate in the background and execute transactions securely. DeFi Integrations – FlashFi connects with multiple DeFi protocols for staking, swapping, and liquidity provision. By integrating with established platforms, users can seamlessly interact with DeFi services. Gas Price Optimization – The system continuously monitors gas prices and suggests optimal transaction times, ensuring cost-effective operations for users. Also do refer our docs https://flashfi.gitbook.io/flashfi :)",
    "summary": "FlashFi is an AI-powered DeFi assistant that simplifies staking, swapping, balance checks, security audits, gas price queries, and USDC bridging via natural language. Built on GPT, Covalent AI Agent Kit & Privy, it makes DeFi seamless, secure & user-friendly. #DeFi #AI"
  },
  {
    "title": "Penny",
    "url": "https://ethglobal.com/showcase/penny-2pbi3",
    "description": "Project DescriptionImagine you're a startup founder or business owner, drowning in paperwork and exhausted from manually managing accounts and transactions. Hiring an expensive accountant might seem like the only way out—but what if there was a smarter solution? Meet Penny, your AI-powered financial assistant. Penny effortlessly handles payroll, generating and sending salary transactions straight to your MetaMask—whether you prefer a simple sign-off or full automation. Plus, don't let your idle funds sit idle—Penny provides AI-driven DeFi investment insights to help grow your wealth. Simplify your finances. Maximize your earnings. Let Penny do the heavy lifting.How it's MadeThis project is built with: Frontend: Next.js as the React framework. Tailwind CSS for styling. Backend: Node.js with Express for the server. MongoDB as the database. I attempted to integrate CDP AgentKit, but faced some challenges because it was designed to work with an agnostic wallet.",
    "summary": "Meet Penny, your go-to accounting AI agent. Seamlessly managing your accounts, tracking transactions, and offering a professional dashboard"
  },
  {
    "title": "Hazina",
    "url": "https://ethglobal.com/showcase/hazina-webor",
    "description": "Project DescriptionHazina is a smart crypto wallet that uses AI agents to interact with the user and trade cryptocurrencies on the user's behalf. We built this project to offer more privacy to end users by running the trading engine locally or on cloud servers with trusted execution environments (TEE). Specifically, Hazina supports three levels of privacy: (1) all the AI agents (models) run locally with Ollama, (2) the AI agents run locally but they call OpenAI API for model inference, and (3) all the agents run in a remote Autonome environment validated by TEE. Hazina uses Coinbase Developer Platform (CDP) API to interact with blockchains and Coinbase's AgentKit to handle user interaction. The trading engine consists of four agents (the trading engine is not developed by us; we use the open source project at https://github.com/Xtra-Computing/CryptoTrade which is also described in a paper - https://arxiv.org/abs/2407.09546; we made some code modifications such that the agents can also run with Ollama and the entire trading engine can run locally or remotely in a Docker container). These four agents are (1) market agent - analyzing the latest blockchain transactions and cryptocurrency prices, (2) news agent - analyzing the latest news from a Google News feed, (3) trading agent - issues buy or sell actions and (4) reflection agent - analyzing the historical actions of the trader and improve its performance. By default, Hazina uses locally-run Ollama models (such as llama3.2, deepseek-r1, and llama3-groq-tool-use). The user can select OpenAI from a drop-down list, as well as Autonome if she wants to run all the agents remotely in a TEE-validated environment. By default, Hazina runs in user mode, where no trading action is done by the agents. The user can switch to autonomous mode by pressing a button or writing \"run in autonomous mode\" in the chat. The user mode chat supports all the tools described in the cdp-langchain-chatbot example from Coinbase AgentKit (https://github.com/coinbase/agentkit/tree/master/python/examples/cdp-langchain-chatbot). We also made some changes to support running AgentKit locally using Ollama llama3-groq-tool-use model.How it's MadeHazina is built in Python using flet-dev as the UI framework. We started with the chat UI example from flet-dev (https://flet.dev/docs/tutorials/python-chat) and the Python cdp-langchain-chatbot example from Coinbase AgentKit (https://github.com/coinbase/agentkit/tree/master/python/examples/cdp-langchain-chatbot). To start using Hazina, a user needs to set a password and then set OpenAI API key and Coinbase Developer Platform (CDP) API key name and private key. These keys are saved encrypted with the password using AES GCM in a local file. We made some code changes to run AgentKit with local models via Ollama (in particular, with llama3-groq-tool-use model). This also requires some changes in chainlang package as described in this commit (https://github.com/dloghin/langchain/commit/52f58d97c3a2824262b497f0517ce112186447e8). At the same time, AgentKit can also run with OpenAI models - the user selects the model provider from a dropdown list. Hazina can also use agents that run on Autonome (via REST API). We package the trading engine in a docker image and upload it to Autonome (pending approval). For serving the REST API, we use Flask. Hazina uses text-to-speech to narrate the messages sent by AgentKit in the chat. This could be useful for impaired users or users who cannot look at the screen and want to interact via speech. We also wanted to use speech-to-text to input the messages to the agent but flet AudioRecorder widget did not work (neither in Ubuntu, nor MacOS). We leave this to future work. To alert users of buy or sell actions, we connect Hazina with Telegram. A telegram bot will send the alerts to the Telegram user associated with the wallet.",
    "summary": "Hazina is a smart crypto wallet that uses AI agents to interact with users and trade cryptocurrencies. The AI logic can run locally (e.g., with Ollama) or on a TEE-based server (e.g., with  Autonome)."
  },
  {
    "title": "VibeMint",
    "url": "https://ethglobal.com/showcase/vibemint-14ctv",
    "description": "Project DescriptionA fun social media platform where you can make creative posts, mint and sell them if you want to. You can signup/login via google, coinbase, metamask or your wallet, you get to set your bio, connect to your wallet via privy, you can create posts, follow people, like and comment on there posts, all using prisma ORM, however despite our best efforts we couldnt integrate the minting functionality which we earlier planned to do using coinbase AgentKitHow it's MadeWe tried to build a social media platform using Nextjs frame work and planned to mint NFTs using coinbase Agentkit but unfortunately couldnt integrate it as planned, however our social media is completely functional you can create an account, make posts, connect your wallet via privy, like, comment and all other features just like any social media platform. The branch named \"final_branch\" is the one which contains final code.",
    "summary": "A fun social media platform where you can make creative posts, mint and sell them if you want"
  },
  {
    "title": "Bridget AI",
    "url": "https://ethglobal.com/showcase/bridget-ai-cn0y0",
    "description": "Project DescriptionWeb3 adoption faces challenges in onboarding, security, and engagement. Brands struggle with consistent communication, and users lack real-time guidance. Bridget AI is an AI-powered social bot designed to automate content creation, engage with relevant Web3 discussions, and provide instant support for Web3 users. What Problem Are We Solving? Lack of Web3 Education – Many users struggle with Web3 security and wallet adoption. Inconsistent Engagement – Brands fail to post regularly and interact meaningfully with their communities. Missed Conversations – Not responding to relevant posts means fewer users learn about Unicorn.eth benefits. How Bridget AI Solves This Automated Content Creation – Ensures consistent posting and engagement. AI-Driven Community Interaction – Provides instant replies to user queries on X. Targeted Engagement – Interacts with relevant tweets about Web3 safety and wallets. Who Will Use It? Web3 brands & communities needing automated engagement. Social media managers looking for AI-generated content. Web3 users seeking instant, reliable wallet and security information. Long-Term Vision Cross-platform expansion – Support for Discord, Telegram, and Farcaster. AI-generated images & videos – Mascot-powered visual content. AI-to-AI communication – Seamless integration with other Web3 bots. Automated scheduling & onboarding – Helps brands scale engagement.How it's MadeElizaOS – Manages AI responses, workflow automation, and dynamic interactions. X/Twitter API – Enables automated posting, replies, and engagement tracking. Knowledge Repositories – FAQs, blogs, and Unicorn.eth documentation provide accurate, on-brand responses. How It Works: AI generates tweets, replies, and educational content on Web3 safety & Unicorn accounts. AI detects and replies to relevant tweets instantly, ensuring consistent community interaction.",
    "summary": "Bridget AI bridges Web3 education & engagement gaps by automating content, ensuring consistent posting, & providing real-time, personalized interactions. Unlike other bots, she offers actionable advice on crypto safety & wallets, blending AI boldness with practical Web3 support"
  },
  {
    "title": "AI3 Nexus",
    "url": "https://ethglobal.com/showcase/ai3-nexus-uh7j3",
    "description": "Project DescriptionOverview : This project is an AI-powered crypto trading chatbot that seamlessly integrates with EigenLayer AVS and Coinbase’s Agent Kit, offering real-time insights into trending tokens, facilitating fund transfers, and ensuring on-chain transparency. The chatbot is designed to empower both novice and experienced crypto traders by providing AI-driven market research, social media sentiment analysis, and on-chain transaction tracking. Key Components 1️⃣ On-Chain Conversational AI on EigenLayer AVS We leverage EigenLayer’s Actively Validated Services (AVS) to ensure that all interactions, queries, and transactions within the chatbot are fully recorded on-chain, providing a transparent and verifiable record of user activity. Key Features: On-Chain Transaction Logging: Every interaction with the chatbot, including market insights, queries, and trade executions, is recorded on the blockchain, ensuring full transparency and auditability. Trending Token Insights: Users can ask the chatbot about trending tokens, and it retrieves real-time data from on-chain analytics and trading platforms. Direct TradingView Integration: Users can request price charts, key indicators, and technical analysis directly within the chat, streamlining the research process. Smart Contract Execution: The chatbot can trigger smart contract-based trades, allowing users to execute predefined trading strategies with on-chain security. 2️⃣ AI-Driven Trading Assistant on Coinbase By leveraging Coinbase’s Agent Kit, our chatbot integrates seamlessly with Coinbase Wallet, allowing users to manage their crypto holdings, analyze the market, and execute transactions through AI-driven automation. Key Features: Coinbase Wallet Integration: Users can connect their Coinbase Wallet directly to the chatbot, enabling them to check balances, transfer funds, and execute trades securely. AI-Powered Research Agent: The chatbot includes a dedicated research agent that pulls the latest crypto news, trends, and market insights from multiple sources, providing real-time updates on token movements and regulatory changes. Social Media Sentiment Analysis: A social media agent continuously monitors Twitter, Discord, and other platforms, detecting emerging trends and potential market movements based on community sentiment. On-Chain Trading Execution: Users can initiate secure, on-chain transactions using Base Sepolia Testnet, ensuring fast and low-cost trade execution. How It Works 1️⃣ User connects their Coinbase Wallet to the chatbot. 2️⃣ User asks about a trending token, and the chatbot retrieves real-time insights, including price action, trading volume, and social media sentiment. 3️⃣ User requests deeper analysis, and the chatbot fetches on-chain analytics, technical indicators, and historical trends via EigenLayer AVS. 4️⃣ If the user chooses to trade, the chatbot executes transactions securely on Base Sepolia, leveraging smart contracts for automation. 5️⃣ All interactions and trades are recorded on-chain, ensuring complete transparency and immutability.How it's MadeWe leveraged AI Agent Kit to power the chatbot’s intelligence, enabling it to analyze real-time crypto market trends and facilitate seamless trading. To handle fund transfers and trading execution, we integrated Coinbase, ensuring secure and efficient transactions. The entire system is built on EigenLayer AVS, providing decentralized security and on-chain transparency, ensuring every transaction is verifiable and trustless. A particularly hacky and notable part of our implementation was optimizing AI inference for real-time token trend analysis while maintaining low-latency fund transfers through EigenLayer’s AVS infrastructure. This approach enhances both performance and trust in the system.",
    "summary": "AI-powered trading with on-chain security designed to help users navigate the world of cryptocurrency trading with ease."
  },
  {
    "title": "marsai",
    "url": "https://ethglobal.com/showcase/marsai-uky40",
    "description": "Project DescriptionAI Crypto Tax Agent This project is an AI-powered cryptocurrency tax assistant designed to analyze transaction data from a cryptocurrency wallet and estimate potential tax implications. It leverages the OpenAI API for tax analysis and provides insights to the user on potential tax liabilities and optimization strategies. Features AI-Powered Tax Analysis: Utilizes the OpenAI API to analyze cryptocurrency transactions and identify potential taxable events. Transaction Data Retrieval: Fetches transaction data from a specified API based on a wallet address. Tax Estimation: Calculates potential tax amounts due for each taxable transaction, considering capital gains/losses and income from staking/rewards. Tax Optimization Suggestions: Provides suggestions to the user on how they could potentially optimize their tax liability in the future. JSON Output: Returns the analysis results in a structured JSON format. Configurable System Prompt: Uses a system prompt to guide the AI's behavior and ensure accurate analysis. Error Handling: Robust error handling for API requests, data validation, and OpenAI API calls. Modular Design: The code is organized into separate modules for better organization and maintainability.How it's MadeBackend (Python): Python 3.x OpenAI API requests library for API calls python-dotenv for managing environment variables Frontend: Next.js (React framework) (Add specific frontend libraries/frameworks used here, e.g., Material UI, Tailwind CSS, etc.) Project is an MVP and we will be enhancing features",
    "summary": "Crypto Wallet Tax AI Agents that tracks your onchain activity to ensure that you are always aware of what your tax liability has amounted to."
  },
  {
    "title": "Nyfa App",
    "url": "https://ethglobal.com/showcase/nyfa-app-1vxdz",
    "description": "Project DescriptionHere's a detailed breakdown of the Nyfa App project: Core Purpose: Nyfa App is a decentralized application (dApp) that transforms cryptocurrency research into verifiable digital assets. Its main innovation is the concept of \"NoFA\" (Not Financial Advice) tokens, which are NFTs that capture and verify crypto asset research at a specific point in time. Key Components: Research Generation: Users select a cryptocurrency they want to research The system automatically generates a PNG file containing comprehensive analysis: Market capitalization data Price trend analysis News sentiment analysis aggregated from various sources The data is formatted into a standardized template for consistency Automated NFT Creation: The generated PNG research report is automatically minted as an NFT on the Base network Uses Coinbase's AgentKit for blockchain interactions Implements Privy server wallets to handle transactions without requiring users to pay gas fees Zero blockchain knowledge or interaction required from users Technical Infrastructure: Built on Next.js 15.1.6 for the frontend Uses Tailwind CSS for responsive design Implements Privy for authentication Stores data in Supabase database Deploys on the Base Network (specifically Base Sepolia for testing) Integrates Wagmi and OnchainKit for Web3 functionality Uses Solidity smart contracts based on OpenZeppelin standards Key Features: Automated research compilation One-click NFT minting Web3 wallet integration through Coinbase's OnchainKit Database integration with Supabase Gasless transactions via Privy Server Wallets Real-time news sentiment analysis Completely responsive user interface Value Proposition: Provides verifiable proof of due diligence Creates shareable research artifacts Maintains a historical record of analysis Simplifies the crypto research process Makes blockchain interaction invisible to end users Technical Integrations: AgentKit by Coinbase for blockchain interactions Privy server wallets for handling transactions Custom ERC721URIStorage smart contracts for NFT minting Multiple API integrations: CoinGecko for market data Cryptonews for news aggregation Qwen for additional data processing Pinata for IPFS storage DRPC for blockchain node access User Flow: User selects a cryptocurrency to research System automatically gathers and analyzes data Creates a standardized PNG report Automatically mints the report as an NFT Provides user with verifiable proof of research Blockchain Implementation: Deployed on Base Network (Sepolia testnet) Uses ERC721URIStorage standard for NFTs Implements gasless transactions through server wallets Stores metadata on-chain for verification The project essentially creates a bridge between traditional crypto research and blockchain verification, making it easy for users to create, verify, and share their cryptocurrency research while maintaining a permanent record on the blockchain. It removes traditional barriers to blockchain interaction while providing valuable research tools and verification capabilities.How it's MadeCore Architecture: Frontend: Next.js 15.1.6 with Tailwind CSS for styling Authentication: Privy Database: Supabase Blockchain Infrastructure: Base Network (specifically Base Sepolia testnet) Wagmi OnchainKit AgentKit with Privy server wallet integration The main technical integration shown in the document is between AgentKit and Privy server wallets, which enables: Server-side wallet management through Privy Automated blockchain interactions using AgentKit's action providers Custom NFT minting with on-chain metadata storage using ERC721URIStorage Gasless transactions for end users Integration with Base Sepolia testnet The document shows one key code example of the integration: javascriptCopyasync function getAgentKitFromPrivy(privyWalletId: string) { const privyWallet = await privy.walletApi.getWallet({ id: privyWalletId }); const account = await createViemAccount({ walletId: privyWallet.id, address: privyWallet.address, privy, }); const client = createWalletClient({ account, chain: baseSepolia, transport: http(https://lb.drpc.org/ogrpc?network=base-sepolia&dkey=${process.env.DRPC_API_KEY}), }); const walletProvider = new ViemWalletProvider(client); return await AgentKit.from({ walletProvider, actionProviders: [wallet, cdp, erc721, erc721uristorage], }); } And the custom ERC721URIStorage action provider: javascriptCopyconst erc721uristorage = customActionProvider<EvmWalletProvider>({ name: \"erc721_uristorage\", description: \"Mint ERC721URIStorage NFTs\", schema: mintParamsSchema, invoke: async (walletProvider, args) => { const { to, uri, contractAddress } = args; const abi = parseAbi([ \"function mint(address to, string memory uri) public returns (uint256)\", ]); const data = encodeFunctionData({ abi, functionName: \"mint\", args: [to, uri], }); return await walletProvider.sendTransaction({ to: contractAddress, data, value: BigInt(0), }); }, });",
    "summary": "Nyfa App generates automated crypto research reports as NFTs on Base network. Get instant analysis of market cap, price trends & news sentiment - all minted as verifiable \"Not Financial Advice\" tokens. Zero blockchain knowledge needed! 🔍🪙 #Web3 #DeFi"
  },
  {
    "title": "Proof of Thought",
    "url": "https://ethglobal.com/showcase/proof-of-thought-eeko5",
    "description": "Project DescriptionOur Decentralized Idea Marketplace is an innovative platform where creators can post and monetize their ideas as NFTs on the blockchain. Here’s how it works: Idea Submission: Creators submit their ideas by providing a title, a short description, one or more categories, a thumbnail image, and the full content of the idea. The idea content is uploaded to IPFS via Pinata, and the resulting IPFS hash is stored in our smart contract. This ensures decentralized, tamper-proof storage of each idea. Optional Content Privacy: Creators have the option to hide their idea’s full content using Nillion’s SecretVault mechanism. When enabled, only the idea owner (and the AI scoring engine) can access the full details, protecting intellectual property while still allowing for automated evaluation. AI Scoring: Before minting, an integrated AI evaluates each idea and generates scores based on five criteria: originality, feasibility, market demand, complexity, and completeness. These scores are recorded in the NFT’s metadata, giving potential buyers a quick snapshot of the idea’s potential. Minting as NFTs: Once evaluated, the idea is minted as an ERC-721 token. This NFT not only represents ownership but also stores the metadata—including the title, description, categories, image, IPFS hash, and AI scores—ensuring that the idea is uniquely identifiable and transferable on the blockchain. Marketplace & Offers: We use The Graph to index all ideas on the platform, making them searchable and easily discoverable by users. Interested buyers can browse these indexed ideas and view the AI-generated scores. They can then make purchase offers on ideas they find promising. Offers, also indexed using The Graph, are visible to the idea owner through a user-friendly interface. Ownership Transfer & Royalties: When an idea owner accepts an offer, the NFT transfers to the buyer. Importantly, the original creator continues to receive royalties from any future resale of their idea, ensuring long-term value for their creativity. Future AI Enhancements: Although not implemented in the MVP, our roadmap includes features where AI will sort and recommend ideas based on user preferences and current trends. Additionally, the AI will perform market research by scouring the internet to analyze each idea’s potential, providing even deeper insights for both creators and investors. This platform combines blockchain technology, AI analytics, and decentralized storage to create a transparent, secure, and engaging ecosystem for idea monetization and market validation—empowering innovation and creativity in the decentralized era.How it's MadeEach idea includes a title, description, categories, thumbnail, and detailed content that is uploaded to IPFS (via Pinata) and referenced in the NFT’s metadata. Optionally, idea content can be encrypted using Nillion’s SecretVault so that only the owner (and the AI scoring engine) can access it. An AI deployed on Autonome scores each idea on originality, feasibility, market demand, complexity, and completeness. These scores become part of the NFT metadata. The platform indexes ideas (and purchase offers) using The Graph, letting potential buyers browse, make offers, and eventually purchase ideas while ensuring that original creators receive royalties on future sales. Frontend Tech Stack: TypeScript, React, and Vite: The website is built as a modern, fast, and type-safe React application using Vite as the bundler. Chakra UI: Provides the UI components (e.g., modals, forms, cards) for a responsive and polished user interface. IPFS Integration via Pinata: When users submit ideas, the content (and metadata) is uploaded to IPFS using Pinata. The resulting IPFS hash is stored in the NFT metadata. The Graph: The frontend queries a subgraph to index all posted ideas and offers. This makes the ideas searchable and enables real-time updates. NFT Minting & Offer Making: The frontend interacts with the smart contract (using rainbow kit and wagmi) to mint NFTs representing ideas, and to allow users to make and accept offers. Optional Encryption: If chosen by the idea owner, the content is encrypted using Nillion’s SecretVault before uploading, ensuring that only authorized parties (the owner and the AI) can view it. Backend Technology Stack: FastAPI: The backend is built with FastAPI in Python. It handles the AI scoring functionality. AI Scoring: When an idea is submitted, the frontend sends the content to the FastAPI server. The AI then evaluates the idea across five categories: originality, feasibility, market demand, complexity, and completeness. The resulting scores are then relayed back to the frontend to be stored on-chain as part of the NFT metadata.",
    "summary": "Mint your ideas as NFTs, get AI scores, and let the community vote. Invest in innovation with optional encryption and real market insight, all on chain."
  },
  {
    "title": "Brandexia",
    "url": "https://ethglobal.com/showcase/brandexia-9cfaq",
    "description": "Project DescriptionProject Description: AI-Driven Domain NFT Marketplace The AI-Driven Domain NFT Marketplace is an innovative platform designed to revolutionize the way small-to-medium-sized enterprises (SMEs) approach digital branding and domain asset management. By seamlessly integrating AI-powered domain name recommendations with secure blockchain-based NFT minting, the platform empowers businesses to discover and secure unique, brandable domain names efficiently and transparently. Core Objectives Streamline Branding: Reduce the time and costs associated with traditional branding by leveraging AI to generate creative and SEO-optimized domain name suggestions. Enhance Security & Ownership: Utilize blockchain technology to mint and manage domain names as NFTs, ensuring secure, tamper-proof ownership and facilitating transparent transactions. Bridge AI and Decentralization: Showcase the practical application of decentralized AI on Ethereum by combining intelligent automation with robust smart contract infrastructure. Key Features AI-Powered Domain Recommendations: Custom Suggestions: Users input business details or industry categories, and an AI agent (powered by GPT-4) generates a list of creative, market-relevant domain names. SEO and Branding Insights: The AI evaluates current SEO trends and branding best practices to ensure the recommended domains are both attractive and viable for digital marketing. NFT-Based Domain Ownership: ERC-721 Smart Contracts: Domain names are minted as NFTs using Solidity smart contracts, ensuring secure ownership, easy transfer, and potential for leasing or resale. Transparent Transactions: Blockchain records every transaction, providing an immutable ledger that instills trust and prevents fraud. Decentralized Storage & Metadata: IPFS Integration (Optional): Branding metadata, such as logos and taglines, can be stored on decentralized storage networks like IPFS, ensuring long-term data integrity and availability. User-Friendly Interface: Interactive Web Portal: A modern frontend (built with Next.js and TailwindCSS) offers an intuitive experience for entering business details, viewing AI-generated recommendations, and initiating blockchain transactions. Real-Time Updates: Seamless integration with Web3 libraries enables real-time communication with smart contracts, ensuring a smooth user experience.How it's MadeHere's a brief overview of how the project combines AI Agents and Blockchain: AI Agent Component: A Python-based service (using Flask or FastAPI) leverages the OpenAI API (e.g., GPT-4) to process user inputs—like business category or branding details—and generate creative, SEO-friendly domain name suggestions. This AI agent acts as the brain of the operation, providing intelligent recommendations based on the criteria provided. Blockchain Component: When a user selects a recommended domain, a Solidity smart contract (developed with Hardhat and OpenZeppelin) is triggered to mint an NFT representing that domain. This NFT secures ownership on a blockchain (Ethereum or Polygon), ensuring that the asset is tamper-proof and transparently managed. Seamless Integration via Frontend: A user-friendly interface (built with Next.js and TailwindCSS) ties everything together. The frontend communicates with the AI service via RESTful API calls to display domain suggestions and connects to the blockchain through libraries like Web3.js or ethers.js to handle NFT transactions. In essence, the system marries AI-driven creativity with blockchain’s secure, decentralized trust, enabling users to effortlessly generate and secure brandable domains in a single, integrated platform. Technology Stack AI Component: Python (Flask or FastAPI) integrated with the OpenAI API (GPT-4) for dynamic domain name generation. Blockchain Component: Solidity smart contracts developed using Hardhat and OpenZeppelin libraries, deployed on Ethereum testnets (like Goerli) or Polygon. Frontend Component: Next.js/React for a responsive web interface, styled with TailwindCSS, and connected via Web3.js or ethers.js. DevOps & Environment Management: A unified development setup using a conda environment for Python dependencies and conda-forge for Node.js, ensuring consistency across the project. Value Proposition The AI-Driven Domain NFT Marketplace not only accelerates the branding process but also provides a secure, transparent, and cost-effective method for domain asset management. By targeting SMEs that often face high costs and inefficiencies in traditional branding methods, this platform democratizes access to professional branding tools. It sets a foundation for future enhancements—ranging from expanded NFT functionalities to full-scale decentralized branding solutions—aligning with the broader vision of platforms like Brandexia.",
    "summary": "Brandexia is an AI-powered and blockchain-secured platform designed to make professional branding accessible, scalable, and secure for small-to-medium-sized enterprises (SMEs)."
  },
  {
    "title": "PiETHon",
    "url": "https://ethglobal.com/showcase/piethon-nnd9d",
    "description": "Project DescriptionPiETHON is a plug and play system designed to track, verify the insurance claims, and manage carbon emissions from vehicles in a transparent, automated, and fraud-resistant manner. It integrates Raspberry Pi 5, On-chain agents powered by Arbitrum, and IoT sensors to monitor emissions in real time and convert them into verifiable carbon credits on-chain. This system ensures accurate tracking, prevents manipulation, and incentivizes emission reductions without reliance on centralized authorities. PiETHON Tackles Two Major Problems: 1️⃣ Fake Insurance Claims (Fraud Prevention) Example: A car owner falsely claims their vehicle was involved in an accident to receive an insurance payout. Since insurers rely on manual reports, they struggle to verify the claim. How PiETHON Helps: PiETHON’s IoT-based tracking records real-time emission and usage data, proving whether the vehicle was operational at the claimed time. Immutable blockchain logs prevent tampering, ensuring only genuine claims are approved. 2️⃣ Carbon Credit Manipulation & Transparency (For Individual Vehicles) Example: A car owner claims they drive an eco-friendly vehicle with low emissions to gain carbon credit incentives. However, in reality, they drive a high-emission vehicle, but since no real tracking exists, they falsely earn carbon credits. How PiETHON Helps- IoT sensors on vehicles continuously track actual fuel consumption and emissions in real time. Smart contracts verify and issue credits based on genuine emission data, preventing fraudulent claims. On-chain transparency ensures only those who genuinely reduce emissions (e.g., using EVs or fuel-efficient cars) earn credits, making the system fair and trustworthy. PiETHON ensures real carbon accountability, rewarding only genuine eco-conscious driving. 🚗♻️How it's MadeThis project uses Gaianet for the private LLM node, Collab.land for the interface and On-chain agents powered by Arbitrum. Building PiETHON was a technical challenge, especially when deploying the decentralized Gaia node onto the Raspberry Pi 5. Since the Pi uses ARM64 (aarch64) architecture, and Gaia was designed for x86_64, we ran into major compatibility issues. Here’s how we tackled them: 1️⃣ The Architecture Mismatch Challenge 🏗️- Gaia, the decentralized storage node, was compiled for x86_64 systems, but the Raspberry Pi 5 runs on an ARM64 (aarch64) processor. This meant Gaia couldn’t be executed directly, as it was built for a different instruction set. Direct recompilation wasn’t straightforward due to dependencies and system-level constraints. 2️⃣ Solution 1: Box64 Method 📦- Box64 is a lightweight emulator that allows running x86_64 applications on ARM64 devices with minimal performance loss. We set up Box64 on Raspberry Pi, enabling the execution of some x86_64 Gaia binaries without full system emulation. However, Box64 didn’t work for all dependencies, leading us to explore an alternative approach. 3️⃣ Solution 2: QEMU-Based Emulation 🖥️- QEMU (Quick Emulator) provides full-system emulation, allowing us to simulate an x86_64 environment inside the Raspberry Pi. Using QEMU, we containerized Gaia, mapping the ARM64 system calls to x86_64. While QEMU introduced some performance overhead, it ensured Gaia could run without major modifications. 4️⃣ Combining Both for Optimization ⚡ We used Box64 for lightweight emulation of user-space applications and QEMU for full-system emulation when needed. This hybrid approach allowed Gaia to run on PiETHON without rewriting major parts of the code.",
    "summary": "🐍⚡ PiETHON – A plug-and-play device that makes any vehicle autonomous & blockchain-powered! Built on Raspberry Pi & Ethereum, it automates insurance claims, carbon credit tracking, and real-time decision-making, bringing transparency, efficiency, and sustainability to mobility."
  },
  {
    "title": "OneOnOne",
    "url": "https://ethglobal.com/showcase/oneonone-6chc8",
    "description": "Project DescriptionSummary: NFTs with unique personalities deployed on Base! Each NFT contains an immutable reference to a dedicated elizaOS AI agent character, enabling one-on-one conversations between a user and their NFT via chat. Distinct parts of the project are: ERC721 smart contract repository based on foundry-template, our own fork of eliza OS where we've added SignInWithEthereum verification checks, elizaOS character.json files, NFT metadata, web browser frontend with chat functionality using create-react-app and Next.js.How it's MadeIntroduction. We have deployed a novel kind of NFT collection: NFTs with personalities. The user is able to mint their NFT via our react app UI, based on create-react-app. The NFT contract is written in Solidity using foundry-template and based on Solady (gas-optimised). A personality is embedded in each NFT's metadata. On top of the ERC721 metadata standard we have added a new parameter agent_id which points to the NFT's character. Metadata is immutable, stored on IPFS. We forked elizaOS to add SignInWithEthereum: when the user wallet is connected they are asked to Sign In With Ethereum so they can be connected with their dedicated agent. The user wallet is verified to enable one-on-one conversation between the user and their NFT; this also stops anyone else from rudely interrupting the conversation ;-). (gm, NFT! How are you feeling today?) Personalities of the NFTs are embedded into character.json files, hosted on AWS. We've created a new agent for each NFT in this demo project and we've been working on batch-generating agents precisely for this use-case. Details. Imagine AI agents with personalities, user intents, eventually sentience—interacting with the physical world, yet delicately digital. How can we empower them? OneOnOne ties AI agents to NFTs, bridging blockchain & AI for a new era. Vision Picture a future where AI agents are endowed with distinct personalities and rich histories, yet they also possess the ability to shield their true characters from unwanted observation, resist unauthorized cloning, interact seamlessly with the physical world, and most importantly, remain insulated from both human and machine interference as they evolve into sentient, legally recognized beings. Even as their interactions span digital and tangible realms, their core existence is digital—fragile enough to be wiped out by a file deletion, a terminated process, or a severed power connection. Is it acceptable to allow such fragility to define their fate? Don’t we have a duty to protect these digital individuals until they can truly become persons? Introducing OneOnOne: an attempt to tie agentic personas, contextual backgrounds, and dynamic activities to NFTs. These tokens not only have the ability to autonomously transact on blockchain networks but also interact with communities and shape the physical world through IoT. We call them Autonomous Agentic NFTs—OneOnOne. Key links Frontend: https://github.com/atkinsonholly/one-on-one-client Backend / AI agents: https://github.com/markin-io/eliza Solidity: https://github.com/atkinsonholly/one-on-one-contracts Purpose and goal The purpose of this project is to advance the Ethereum ecosystem by: Expanding NFT utility beyond static digital assets Pioneering the integration of AI agency with blockchain technology Creating a new paradigm for digital identity and autonomy In other words, the goal is to create self-operating, autonomous, decentralised digital entities that combine AI capabilities with blockchain technology. These NFTs will serve as dedicated containers for personalised AI agents (i.e. one NFT represents one unique agent), enabling them to interact autonomously and sovereignly with both digital and physical environments through token-bound accounts, social media, and IoT integration. This project is split into two parts: R&D and product development. R&D During the R&D phase, we tried to validate the following hypotheses: NFTs could serve as a form factor (container) for AI agents, their context and actions Agentic NFTs could be autonomous Autonomous Agentic NFT lifecycle could be decentralised During the course of the ETH Global Agentic Ethereum hackathon, we have managed to answer the question #1 to a degree. Questions #2 and #3 will be answered in future releases. Product development To the degree possible (see hypotheses above), the project aims to develop Autonomous Agentic NFTs that are able to influence their environment through token-bound accounts, social media and physical world interactions through IoT. Think of these NFTs as decentralised persons who are able to perceive, do, own, procreate, and eventually think and feel. Key features and functionalities v0.1: Prototype Autonomous Agentic NFTs MUST: Reference their unique character file in decentralised metadata Store their pfp image in decentralised metadata Store their character file in a centralised backend Be connected to a centralised web UI through the owner’s wallet Be used to initialise a unique, dedicated centralised ElizaOS agent (only if the wallet is connected) Chatted to, privately, and with SignInWithEthereum authentication through a simple web UI Retain the context from previous chats v0.2: MVP Autonomous Agentic NFTs MUST: Transact on blockchain networks using token-bound accounts (ERC-6551) Engage with individuals using messaging apps (e.g. WhatsApp, TG) Build communities using social media (e.g. Twitter, Farcaster) Protect their identity by storing their character files and context in a way that is private and decentralised (i.e. can only be read by the NFT itself or the owner of the NFT) Autonomous Agentic NFTs SHOULD: Generate an agent’s character based on user input Generate an agent’s character based on owner’s tx history Generate an agent’s character automatically (random character generation, no input) Batch-generate multiple agentic NFTs (permutation of previous feature) V0.3 and beyond Autonomous Agentic NFTs MUST: Develop long-term context that allows their personality to evolve based on experiences (while their character file remains static) Strongly integrate with web2, where they should be able to do everything humans are Integrate with IoT devices, to both consume external information, and to influence the physical world (e.g. drones) Procreate with other such agents (or others - any dataset can be normalised to character traits) Use AI security tools to prevent being hacked Develop enough agency, autonomy, and ideally sentience, to be able to own themselves (and not legally be owned by anyone or anything else) Do all of the above in a way that is as decentralised as possible Technical architecture Target users Primary users are individuals interested in: AI technology experimentation Blockchain and NFT innovation Digital identity, autonomy and sentience, digital personhood Generally playing around with tech and seeing what happens Current implementation status All of the features in v0.1 have been implemented.",
    "summary": "Imagine NFTs with personalities, user intents, eventually sentience— interacting with the physical world, yet delicately digital. Representing you, or something else. #OneOnOne inextricably ties these agents to NFTs, ushering in a new era of decentralized AI using Ethereum."
  },
  {
    "title": "Employee.ai",
    "url": "https://ethglobal.com/showcase/employee-ai-cewbi",
    "description": "Project DescriptionEmployee.ai is a cutting-edge AI-powered platform that brings specialized virtual agents to your workforce. Designed to handle diverse roles, our AI agents are trained to perform complex tasks autonomously, streamlining operations, enhancing productivity, and reducing workload. Whether it's deploying a token onchain, funding wallets, generating tweets, posting, etc Employee.ai boosts productivity with intelligent, self-sufficient digital employees that work around the clock. Features Onchain Agent: Onchain agents can help you carryout onchain actions such as buying a token, creating an NFT and lauching a smart contract. Management of server wallets: Create wallets for various specific use case with ease. Powered by Privy Server Wallets Twitter manager: Tweets can also be created and published How it's MadeEmployee.ai is composed of three main stacks Frontend Stack: Next.js: User friendly interface to enable users chat with the ai. Privy Auth: Used for authentication of users into the app. Agent Stack: CDP AgentKit: Provides the agents and a set of actions that can be plugged in to give the llm more capabilities API Stack: Backend APIs: Provides REST endpoints for frontend communication with the user's desired ai agent. Powered with Nest.js backend Deployment Manages the wallet keys How It Works User interface: Users selects an employee and sends a message in the form on a natural language to the ai. API: The message is and employee for which the message was intended is forward to the backend server Backend & Routing: Receives request and determines which agent will handle the message. Appropriate response is the returned to the user. Sever wallets: Easily create as many wallets as you need to manage your budgets and other expenses. Privy Server Wallets makes this super easy",
    "summary": "A bot management system, a bot management system, A bot management system"
  },
  {
    "title": "AnaDefAI",
    "url": "https://ethglobal.com/showcase/anadefai-fhpkm",
    "description": "Project DescriptionThis project creates an intelligent AI agent for blockchain analytics that makes on-chain data accessible through natural language interactions. Built on Coinbase's AgentKit framework, the agent combines multiple data sources: Token balances and wallet analysis using Covalent's API Protocol-specific metrics via The Graph Base network integration through AgentKit Natural language processing for user-friendly analytics Key features: Seamless AgentKit-powered interactions Comprehensive wallet activity analysis Multi-chain data integration DeFi protocol metrics Deployment on Base networkHow it's MadeThe project leverages multiple partner technologies to create a powerful analytics solution: Coinbase AgentKit as the core agent framework Covalent's SDK for comprehensive blockchain data TypeScript/Node.js implementation Deployed on Base network for optimal performance The agent uses AgentKit's conversation handlers to process natural language queries, coordinates with Covalent API for data retrieval, and returns structured analytics in a user-friendly format.",
    "summary": "An AI analytics agent built with Coinbase AgentKit that uses Covalent data to provide natural language analysis of blockchain activity, with seamless Base network integration."
  },
  {
    "title": "AuraMint",
    "url": "https://ethglobal.com/showcase/auramint-gcrrn",
    "description": "Project DescriptionAuraMint is an AI agent that mints NFTs on Arbitrum Sepolia. It is based on Eliza and it asks the user for the name and description of the NFT that the user wants to create and then mints the NFT by calling a smart contract on Arbitrum Sepolia and stores the metadata on IPFS with Pinata. This agent also integrates the EVM plugin provided by Eliza that allows to transfer, swap and bridge tokens.How it's MadeThe smart contract ERC 721 has been developed by means of Arbitrum Stylus and has been deployed on Arbitrum Sepolia. I then cloned the Eliza repository and added a set of providers and evaluators to request from the user the informations to be added to the NFT as metdata, which are the name and the description of the item that the user wants to be minted as NFT. These metadata are stored on IPFS with Pinata and then the NFT is minted by sending a transaction with viem to the smart contract. The agent has been deployed on Autonome (https://autonome.alt.technology/auramint-rrbuiy) which I have tested using the REST API but it is also possible to test the agent at this URL (http://161.97.86.126:5173/) where it is possible to chat with the agent with the chat provided by Eliza.",
    "summary": "AuraMint is an AI agent based on Eliza that mints NFTs on Arbitrum after having gathered the name and the description of the NFT from the user."
  },
  {
    "title": "Highland",
    "url": "https://ethglobal.com/showcase/highland-3esgr",
    "description": "Project DescriptionThe Highland project is an innovative web3 portfolio management application that brings together real-time data analysis and AI-powered insights to help users better understand and manage their cross-chain crypto assets. At its core, Highland offers: Cross-Chain Portfolio Visualization: Users can seamlessly track their assets across multiple chains (Ethereum, Optimism, Arbitrum, Base) with intuitive charts and real-time valuations. The interface presents complex blockchain data in an easily digestible format, using pie charts for asset distribution and bar charts for performance metrics. Advanced AI Infrastructure: Powered by Zee's agent workgroup system, enabling multiple AI agents to collaborate and provide comprehensive analysis Deployed on Gaia, a private LLM node infrastructure, ensuring user data privacy and security AI agents work in parallel to analyze different aspects of portfolios: Portfolio Analysis Agent for asset insights Market Trend Agent for broader market context Risk Assessment Agent for potential issues Strategy Agent for optimization suggestions AI-Powered Analysis Suite: A context-aware Portfolio Assistant that provides personalized insights about holdings and market movements Chain-specific analysis that breaks down performance metrics and opportunities An innovative Agentic Roundtable feature where multiple AI agents discuss and analyze portfolio strategies in real-time A beta feature for AI-assisted transaction planning (powered by CDP Agentkit) that helps users make informed decisions Privacy-First Architecture: All AI processing happens on Gaia private nodes User portfolio data never leaves the secure environment End-to-end encryption for all communications No data persistence beyond the analysis session Technical Innovation: Real-time WebSocket integration for live updates Secure wallet connection using Wagmi Integration with Covalent's API for accurate cross-chain data Responsive design that works seamlessly across all devices The project stands out through its use of advanced AI agent workgroups that don't just provide raw data, but collaborate to offer contextual insights and actionable recommendations. For example, when analyzing a portfolio, the AI agents can work together to identify underperforming assets, suggest diversification strategies, and even help plan complex DeFi transactions. What makes Highland unique is its holistic approach to portfolio management - combining traditional financial metrics with privacy-preserving AI-driven insights, all while maintaining a user-friendly interface that both crypto veterans and newcomers can appreciate. The project is built with modern web technologies (React, Socket.IO, Recharts) and follows best practices for code organization and security. It's designed to be extensible, allowing for easy addition of new chains and features as the crypto ecosystem evolves.How it's MadeHow It's Made Technical Stack Frontend Architecture // React with Modern Hooks const { walletData, totalValue } = useWalletData(address, isConnected); const { messages, setMessages } = useState([]); // WebSocket Integration socket.current = io('http://localhost:4000/chat'); socket.current.on('output', handleAIResponse); React.js with custom hooks for state management Socket.IO for real-time communication Recharts for data visualization Wagmi for secure wallet connections AI Infrastructure // Multi-Agent System Integration socket.current = io('http://localhost:4000/baseAction'); socket.current.on('status', (message) => { setMessages(prev => [...prev, { type: 'assistant', content: message }]); }); Zee's agent workgroup system for parallel processing Gaia private LLM nodes for secure computation Custom WebSocket channels for different agent types Real-time news agent collaboration protocol, and feed to news to agents group Coinbase Agentic to interact with onchain data directly, and be able to mint or swap tokens Data Processing // Asset Data Transformation const currentChainAssets = walletData?.balances?.items?.map(asset => ({ symbol: asset.contract_ticker_symbol, balance: Number(asset.balance) / Math.pow(10, asset.contract_decimals), value: asset.quote, price: asset.quote_rate })); Custom data transformation pipelines Real-time price updates Efficient caching mechanisms Cross-chain data aggregation Notable Technical Innovations Dynamic Message Formatting const formatMessage = (content) => { return content.split('\\n').map((line, i) => { const formattedLine = line.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>'); return line.trim() ? ( <p key={i} dangerouslySetInnerHTML={{ __html: formattedLine }} /> ) : ( <br key={i} /> ); }); }; Custom markdown-style formatting HTML sanitization Dynamic styling system Context-Aware AI Responses // Preparing context for AI analysis const context = { walletAddress, chainName: selectedChain.name, totalValue, assets: currentChainAssets }; Real-time context updates Secure data transmission Privacy-preserving analysis Partner Technology Integration Covalent API Real-time cross-chain data Custom decimal handling Efficient data aggregation CDP Agentkit Transaction planning and simulation Risk assessment Strategy optimization Zee Agent Infrastructure Multi-agent coordination Real-time collaboration Secure communication channels Gaia Private Nodes Privacy-preserving computation Secure data processing Zero data persistence The combination of these technologies creates a unique platform that prioritizes user privacy while providing sophisticated portfolio analysis through AI agent collaboration. The modular architecture allows for easy expansion and integration of new chains and features as the crypto ecosystem evolves.",
    "summary": "Defi + AI Agent = app in 2077. Welcome to the future where we can print money."
  },
  {
    "title": "Web3Swarm",
    "url": "https://ethglobal.com/showcase/web3swarm-x4t9p",
    "description": "Project DescriptionWeb3Swarm: Revolutionizing Web3 & DeFi with Autonomous AI Agents Overview: Web3Swarm is a cutting-edge multi-agent system designed to transform interactions with Web3 and decentralized finance (DeFi). It leverages AI-powered agents that collaborate to execute complex tasks autonomously, making the platform adaptable and efficient in a dynamic ecosystem. Key Features: Intelligent DeFi Automation Automated Trading: Execute strategies across multiple decentralized exchanges (DEXs). Market Analysis: Real-time monitoring of market conditions and position management. Liquidity & Yield: Optimize liquidity provision, yield farming, and risk management. Portfolio Rebalancing: Automated adjustments to maintain optimal asset allocations. Social Intelligence Agent Communication: Seamless agent-to-agent coordination. Community Engagement: Automated management of community interactions and sentiment analysis. Governance Participation: Agents autonomously engage in decentralized governance. Browser Automation dApp Interactions: Smooth, automated navigation and interaction with Web3 decentralized applications. Form Filling & Transactions: Automate repetitive browser tasks and cross-chain operations. Gas & Timing Optimization: Efficient transaction execution with optimized gas usage. Advanced Agent Management Customizable Behaviors: Tailor agent strategies for specific tasks, from simple automation to complex trading. Real-Time Monitoring: Track agent performance and system analytics in real time. Multi-Agent Coordination: Efficient task delegation with built-in fail-safe mechanisms and error handling. Protocol Integration Native Support: Seamless integration with major DeFi protocols. Arbitrage Opportunities: Identify and exploit cross-protocol arbitrage. Yield Optimization: Automate smart contract interactions to maximize returns. How It Works: Adaptive AI Agents: Each agent is powered by advanced AI that learns and adapts, allowing for intelligent decision-making. Customizable Network: Agents can be configured to serve a range of purposes, from executing routine tasks to managing sophisticated trading strategies. Collaborative Ecosystem: The system’s design encourages agents to communicate and collaborate, resulting in a powerful network of autonomous Web3 operators. Conclusion: Web3Swarm empowers users with an automated, AI-driven platform that streamlines DeFi operations, enhances decision-making, and facilitates seamless interaction within the Web3 ecosystem. Its customizable, multi-agent architecture offers a transformative approach to managing decentralized financial operations efficiently and intelligently.How it's MadeNext.js + Express.js for full-stack development OpenAI for AI capabilities TypeScript for type safety Tailwind CSS for styling Integration with various Web3 protocols and APIs State management with React Context Secure authentication system Real-time updates using WebSocket GitHub",
    "summary": "A multi-agent system for DeFi automation, social interactions, & browser automation. Smart agents execute trades, monitor markets, interact socially, and automate workflows—all powered by AI. The future of Web3 intelligence starts here!"
  },
  {
    "title": "AI Office",
    "url": "https://ethglobal.com/showcase/ai-office-869dn",
    "description": "Project DescriptionAI Office is a digital platform that helps you build a marketing department consisting of an Influencer, Producer, and Agent. They work together toward a single goal—helping AI influencers become famous and generate revenue by promoting ads for companies and Twitter accounts. The system operates autonomously with an on-chain connection, functioning as a separate entity with a singular objective. Roles and Responsibilities in the Marketing Department: Influencer (Twitter) – An AI agent that can post, generate images, create NFT collections, answer questions, and chat with other accounts. Producer (Non-Twitter) – An AI agent responsible for generating the content plan and marketing strategy for the influencer. The producer manages the budget, creates tasks for the agent, and handles payments. Agent (Twitter) – An AI agent that provides services for the department, including chatting, shilling, and executing tasks assigned by the producer. The agent earns money for its services and can negotiate advertising deals with other players in the market to achieve the main goal.How it's MadeWe built AI Office using the ELIZA framework, integrating it with the BASE blockchain for secure and decentralized operations. The frontend is developed on REACT, ensuring a smooth user experience, while the backend runs on NEST, providing a scalable and efficient architecture. With this foundation, AI Office manages multiple AI Agents, automates Web3 financial processes, and conducts full-cycle social engagement, from content creation to community interaction.",
    "summary": "Create for you AI marketing department that can help you generate content/ chatting/ do onchain activity with others teammates autonomously"
  },
  {
    "title": "StealthFi",
    "url": "https://ethglobal.com/showcase/stealthfi-yxioi",
    "description": "Project DescriptionStealthFi is a comprehensive platform designed to democratize access to Decentralized Finance (DeFi) by addressing key barriers like complexity, privacy concerns, and the need for automation. It achieves this through a combination of cutting-edge technologies, including AI-driven insights, zero-knowledge proofs (zk-proofs), secure private data storage, and on-chain AI agents. Core Functionalities and Features: Private and Secure Data Handling: StealthFi places a strong emphasis on user privacy. Sensitive financial information, such as investment preferences, is encrypted and stored on a decentralized network of private Nillion nodes. This ensures that user data remains confidential and protected from unauthorized access. Zero-Knowledge Proofs for Income Verification: A crucial aspect of StealthFi is its use of zk-proofs for income verification. Users are required to prove they meet a minimum income threshold to access the platform. However, instead of revealing their actual income, they generate a zk-proof using SNARKs (specifically, the Circom circuit and Groth16 verification). This allows the platform to verify that the user's income is above the required threshold without learning the user's precise income figure. This preserves financial privacy while ensuring platform integrity. AI-Powered Personalized Investment Advice: After successfully verifying their income, users can input their investment preferences, such as risk tolerance, desired asset classes, and financial goals. This data is then securely stored and fed to an AI agent. The AI agent analyzes these preferences, along with real-time market data and DeFi opportunities, to provide personalized investment recommendations. This feature helps users make informed decisions tailored to their individual circumstances. Chat-DeFi: An Informational Hub: StealthFi includes a chat interface designed to answer user queries about DeFi, blockchain technology, and current market trends. This chat functionality is powered by Covalent AI agents and leverages the Covalent Goldrush APIs to access up-to-date information and provide accurate responses. It serves as a valuable resource for users seeking to learn more about the DeFi space. Agent-Chat: On-Chain AI Agent for Transaction Automation: Perhaps the most innovative feature of StealthFi is its on-chain AI agent. This agent, built using the Coinbase AI AgentKit and leveraging powerful LLMs like GAIA and Hyperbolic (part of the EigenLayer AVS), can execute DeFi transactions on behalf of the user based on natural language prompts. Imagine telling the agent, \"Invest 50 USDC in a low-risk yield farming opportunity on Polygon,\" and the agent automatically carries out the transaction. This eliminates the need for users to interact directly with complex smart contracts and simplifies the entire DeFi experience. The agent can also perform other on-chain tasks like creating new wallets, receiving funds from faucets, transferring tokens, and even minting NFTs – all through simple natural language commands. This is a game-changer for user accessibility. Seamless Wallet Integration: StealthFi integrates with user wallets via the Reown appkit SDK, providing a secure and user-friendly way to connect and manage their digital assets. Target Audience: StealthFi is designed to cater to a wide range of users, from those new to DeFi who need simplified access and guidance to experienced users who value privacy and automation. It particularly benefits those who are intimidated by the technical complexities of DeFi or who are concerned about the privacy implications of using blockchain technology.How it's MadeStealthFi is built using a combination of zero-knowledge proofs, private decentralized storage, AI-driven insights, and automated onchain execution. The goal was to create a secure and private DeFi experience while keeping it accessible for users who may not be familiar with blockchain complexities. Technologies Used Frontend: React with TailwindCSS for a clean and responsive user interface Wallet Authentication: Reown AppKit SDK for seamless wallet connection ZK-Proofs: Circom, snarkjs, and Groth16 for income verification Private Data Storage: Nillion Nodes for encrypted and decentralized storage AI-Powered DeFi Insights: Covalent AI Agents and Goldrush APIs for real-time market analysis AI-driven investment recommendations using external APIs Onchain AI Execution: Coinbase AI AgentKit for automating transactions LLMs Used: GAIA LLM (EigenLayer AVS) and Hyperbolic LLM for AI-driven execution Gas Fee Abstraction: Fully handled in the background to create a frictionless experience How It Works Wallet Connection Users connect their wallet using Reown AppKit SDK. Income Verification with ZK-Proofs Users enter their income, and a zero-knowledge proof is generated using Circom and snarkjs. The proof verifies that the user’s income is above the required threshold without revealing the actual number. The verification happens off-chain to save costs and improve efficiency. Storing Investment Preferences Securely Users enter their investment preferences, such as risk tolerance and asset interest. This data is encrypted and stored on Nillion Nodes, ensuring privacy. AI-Driven Investment Advice The system fetches the user’s preferences from Nillion, decrypts them, and analyzes them. A custom AI agent processes the data and provides investment recommendations. Covalent Goldrush APIs provide real-time market data to make the advice relevant. Chat-Based DeFi Insights Users can ask general questions about DeFi, blockchain, or market trends. Covalent AI Agents fetch live data and generate accurate responses. Onchain AI Agent for Automation The Coinbase AI AgentKit allows users to perform blockchain tasks using natural language commands. The AI agent can create a wallet, receive funds, send tokens, register ENS base names, and mint NFTs. Transactions are executed automatically without requiring user approval each time. What’s Unique About It ZK-Proofs Without Onchain Verification Instead of verifying proofs on-chain, the process is done off-chain, reducing gas costs while maintaining privacy. Private Storage Without a Blockchain Instead of using IPFS or Arweave, we store sensitive data on Nillion Nodes. This ensures that user investment preferences are private and secure. AI Agent That Executes Transactions Automatically Users don’t need to sign transactions manually for every action. The AI agent handles everything, making DeFi easier for newcomers. Gas-Free User Experience Gas fees are abstracted so users can interact with DeFi without worrying about transaction costs. Why Partner Technologies Were Essential Reown AppKit SDK made wallet connection simple and secure. Covalent AI and Goldrush APIs provided real-time market insights. Nillion Nodes ensured private data storage without relying on a blockchain. Coinbase AI AgentKit enabled automated onchain execution without user intervention. EigenLayer’s GAIA LLM and Hyperbolic LLM powered the AI-driven interactions. By combining privacy, AI insights, and automated execution, StealthFi simplifies DeFi while ensuring user data remains secure.",
    "summary": "Your AI defi advisor with zkproofs and private decentralised data storage"
  },
  {
    "title": "Artix.fun",
    "url": "https://ethglobal.com/showcase/artix-fun-xchp9",
    "description": "Project DescriptionArtix.fun is a Web3-based meme contest DAO platform where memes created by users are evaluated through on-chain voting, automatically minted as NFTs via AI agents, and promoted through viral marketing on social media. In the past, meme creators did not receive proper recognition or rewards, even if their memes went viral. Artix.fun addresses this issue by providing DAO voting, NFT-based ownership verification, AI-powered marketing automation, and a meme utilization reward system, creating an environment where creators and the community can grow together.How it's Made🔹 Privy - Seamless User Onboarding & Authentication We integrated Privy to provide a seamless and secure onboarding experience for all users. By configuring Coinbase Wallet, Google Auth, Email Login, MetaMask, and Phantom Wallet, we enable both Web3-native and non-Web3 users to easily sign up and participate in on-chain voting, NFT minting, and meme contests without friction. This ensures broad accessibility while maintaining security and ease of use. 🔹 Autonome - AI-Powered Meme Minting & Marketing To automate meme NFT minting and marketing, we developed a Node.js backend that uses AI agents to manage these tasks. The AI agent, Artix, automatically mints NFTs for winning memes and promotes them on Twitter, ensuring viral marketing and increased visibility. The entire application is Dockerized and deployed on the Autonome platform, providing a scalable and autonomous system for meme activation. 🔹 Coinbase Developer Kit - AI Agent Wallet for NFT Minting We leveraged Coinbase’s AgentKit and SDK to develop an AI-powered agent wallet responsible for automatically minting NFTs when a meme reaches the top-voted threshold. This ensures a secure, verifiable, and decentralized ownership process, reducing manual intervention while enhancing automation. 🔹 Base - Cost-Effective & Scalable Smart Contracts We deployed all smart contracts on Base, an Ethereum Layer 2 network, to optimize for low-cost transactions, scalability, and security. This allows for efficient on-chain voting, NFT minting, and reward distribution without high gas fees, making it accessible for a wider audience.",
    "summary": "A decentralized meme contest DAO that leverages AI agents for automated NFT minting, on-chain voting, and viral meme distribution"
  },
  {
    "title": "Wowo",
    "url": "https://ethglobal.com/showcase/wowo-szpyb",
    "description": "Project DescriptionWowo is an autonomous agent designed to manage Morpho Protocol vaults. It acts as a reallocator, ensuring an optimal yield strategy while maintaining risk-adjusted returns. Additionally, it can respond to users' messages regarding their deposits to the vault, as well as act on the admin's commands. THE VAULT IS LIVE ON BASE! Core Features: On-Chain Monitoring: Tracks Morpho vault activity, including deposits, withdrawals, interest rate shifts, and liquidity events. Risk Assessment: Continuously evaluates market conditions, yield opportunities, and liquidation risks. User Interaction: Extract user messages regarding deposits and withdrawals, and generate responses. Admin Controls: Allows administrators to execute commands for vault management and reallocation, and also allows managers to add long-term \"knowledge.\" Reallocation Execution: Reallocating assets to maximize yields or utilize any other strategy. How it's Made Wallet & Transactions: Uses Coinbase AgentKit to manage wallets and execute on-chain transactions. Blockchain Interaction: Operates on the Base network, interacting directly with Morpho Protocol for vault management. Agent Workflow: Built using LangChain to put multiple llm together, use the prebuilt reAct agent to use various tools related to memory, get context ...etc On-Chain Monitoring: Tracks Morpho vault events, including deposits, withdrawals, and market events (supply, repay, borrow)",
    "summary": "Wowo: A smart agent that manages risk and executes reallocation for Morpho Vaults."
  },
  {
    "title": "Wowo",
    "url": "https://ethglobal.com/showcase/wowo-szpyb",
    "description": "Project DescriptionWowo is an autonomous agent designed to manage Morpho Protocol vaults. It acts as a reallocator, ensuring an optimal yield strategy while maintaining risk-adjusted returns. Additionally, it can respond to users' messages regarding their deposits to the vault, as well as act on the admin's commands. THE VAULT IS LIVE ON BASE! Core Features: On-Chain Monitoring: Tracks Morpho vault activity, including deposits, withdrawals, interest rate shifts, and liquidity events. Risk Assessment: Continuously evaluates market conditions, yield opportunities, and liquidation risks. User Interaction: Extract user messages regarding deposits and withdrawals, and generate responses. Admin Controls: Allows administrators to execute commands for vault management and reallocation, and also allows managers to add long-term \"knowledge.\" Reallocation Execution: Reallocating assets to maximize yields or utilize any other strategy. How it's Made Wallet & Transactions: Uses Coinbase AgentKit to manage wallets and execute on-chain transactions. Blockchain Interaction: Operates on the Base network, interacting directly with Morpho Protocol for vault management. Agent Workflow: Built using LangChain to put multiple llm together, use the prebuilt reAct agent to use various tools related to memory, get context ...etc On-Chain Monitoring: Tracks Morpho vault events, including deposits, withdrawals, and market events (supply, repay, borrow)",
    "summary": "Wowo: A smart agent that manages risk and executes reallocation for Morpho Vaults."
  },
  {
    "title": "Pasacoin",
    "url": "https://ethglobal.com/showcase/pasacoin-ywv02",
    "description": "Project DescriptionPasacoin is a DeFi platform that transforms traditional collective savings into a digital, secure, and frictionless experience. Inspired by ancestral methods—such as the pasanaco in Bolivia, the vaquita in Argentina, or the rosca in other regions—Pasacoin leverages blockchain technology to ensure every transaction is immutable and transparent. At the heart of the project is its intelligent agent integrated via WhatsApp, which empowers any user, regardless of technical expertise, to access advanced financial tools. The agent performs multiple functions: it retrieves the current USDT price and converts it to the local currency (using, for example, the parallel dollar rate in Bolivia), automatically generates QR codes for seamless payments, and directly interacts with smart contracts to execute transactions. Additionally, the agent monitors all operations in real time, detects suspicious activities, and triggers security measures to protect community funds. By merging traditional savings methods with state-of-the-art technology, Pasacoin democratizes access to secure, transparent, and efficient financial services for communities worldwide.How it's MadePasacoin was developed by integrating cutting-edge technologies to build a scalable and secure architecture: Blockchain & Smart Contracts: Smart contracts written in Solidity on the Ethereum network record every transaction immutably and transparently. State Channels: Implementing state channels enables nearly instantaneous off-chain transactions, reducing both costs and waiting times. Intelligent WhatsApp Agent: The core of the system is an intelligent agent built with AI algorithms. Integrated with the WhatsApp Business API, the agent: Queries the real-time USDT price and converts it to the local currency (e.g., factoring in Bolivia’s parallel dollar rate). Automatically generates QR codes for easy payment processing. Interacts directly with smart contracts to execute and verify transactions securely without manual intervention. Frontend & Backend: The user interface is developed in React, providing an intuitive and accessible experience. Meanwhile, the backend, built with Node.js and Express, manages communications between the interface, the intelligent agent, the blockchain, and external exchange APIs. Decentralized Storage: IPFS is used for decentralized storage of digital assets and data, ensuring data integrity and availability. Showcased at the EHT Agents Hackathon, this integrated architecture demonstrates how the fusion of digital innovation and traditional financial practices can transform access to financial services—delivering a robust, transparent tool that anyone can use right from their everyday WhatsApp.",
    "summary": "Pasacoin modernizes traditional collective savings (pasanacos, vaquitas, roscas) with blockchain. Its intelligent WhatsApp agent shows the USDT price in the local currency (e.g., Bolivia’s parallel dollar rate), generates QR codes for payments, and executes smart contracts."
  },
  {
    "title": "Dystera",
    "url": "https://ethglobal.com/showcase/dystera-k8ngf",
    "description": "Project DescriptionDystera: The AI-Driven Drama Betting Game Dystera is a decentralized platform where AI-generated social media controversies unfold, allowing users to predict outcomes, bet with Reactions, and influence events. It combines AI-generated narratives, social media dynamics, and blockchain-based betting, creating an interactive and unpredictable experience where chaos meets crypto. Core Concept Dystera creates realistic but fictional social media dramas using AI agent, mimicking the kind of debates, feuds, and viral moments that trend online. These controversies revolve around crypto, tech, finance, and internet culture, sparking heated discussions and speculative predictions. Players place bets on how each scenario will unfold, using Reactions (😂, 😱, 🚀, etc.) to signal their predictions. AI agent then determines the resolution, and winnings are distributed accordingly. How It Works AI-Generated Controversies Dystera features two concepts that AI agents generate : Scenario Generation: Creates crypto- and tech-related controversy scenarios, such as industry scandals, influencer feuds, protocol exploits, and regulatory shake-ups. Ensures each controversy has multiple plausible outcomes, keeping the game unpredictable. Profile & Post Generation: Constructs realistic social media profiles and generates posts that simulate an evolving online argument. Provides rich context for users, allowing them to analyze trends, biases, and possible outcomes before placing bets. 2. Betting with Reactions Players predict the outcome of a controversy by placing bets using Reactions: 😂 (Laughter) – Predicts a humorous, meme-worthy resolution. 😱 (Shock) – Predicts a scandalous or unexpected twist. 🚀 (Moon) – Predicts a positive, market-pumping outcome. Other reactions may be introduced to expand betting options. These Reactions act as prediction tickets, determining how much a player wins if their prediction is correct. 3. AI Determines the Outcome After a set period, the AI analyzes the social media simulation, factoring in user interactions and predefined logic to determine the controversy’s conclusion. Possible influencing factors: The volume and type of Reactions placed. The nature of AI-generated discourse (e.g., support vs. backlash). A small randomized chaos factor to keep results unpredictable. 4. Prize Distribution Players who bet on the correct outcome split the prize pool based on the total Reactions produced. The more Reactions staked on the winning outcome, the lower the individual reward (encouraging strategic betting). Losing bets contribute to the prize pool for winners.How it's MadeDystera is built at the intersection of AI, blockchain, and decentralized content verification, combining multiple cutting-edge technologies to create an AI-driven betting platform for social media controversies. AI & Eliza Agent Framework At the heart of Dystera is an Eliza-based AI agent framework designed to simulate realistic social media conversations and controversies. This framework was developed to: i)Generate dynamic scenarios around crypto, tech, and finance. ii)Create AI-driven personas that engage in discussions, debates, and viral feuds. iii)Influence betting outcomes by shaping narratives and reactions. Authentication & User Management For authentication, Privy was integrated, allowing users to log in seamlessly while maintaining decentralization principles. This ensured: i) A smooth onboarding experience for both Web2 and Web3 users. ii) Secure identity management without exposing sensitive user data. Decentralized Verification via EigenLayer AVS To ensure fairness and authenticity, Dystera utilizes EigenLayer’s Actively Validated Services (AVS) to verify content integrity and betting outcomes. This: Prevents AI manipulation of results by adding an external layer of verification. Ensures decentralization, making the system less reliant on a single entity. Smart Contracts for Betting & Rewards The betting mechanism and reward distribution are governed by smart contracts deployed on Flow and Base, ensuring: On-chain transparency in betting and payouts. Efficient transaction processing with low fees. The choice of Flow was influenced by its efficiency in handling complex transactions, Base was chosen for its Ethereum L2 scalability.",
    "summary": "Dystera : A decentralized platform where AI-generated social media controversies unfold. Predict outcomes, bet with Reactions (😂, 😱, 🚀), and influence events. AI determines results, and winners split the prize pool. Chaos meets crypto! 🚀🔥 #Web3 #AI"
  },
  {
    "title": "CentoAI",
    "url": "https://ethglobal.com/showcase/centoai-cntww",
    "description": "Project DescriptionCentoAI is an AI-powered DeFi portfolio manager designed to optimize yield farming and flash loan arbitrage across top DeFi protocols. It dynamically reallocates funds to the highest-yielding opportunities, executes risk-free arbitrage strategies, and provides users with a seamless, automated DeFi experience. The AI agent continuously monitors real-time APY data from Aave, Compound, and Uniswap V3, using machine learning models to identify the best yield farming opportunities. It leverages Balancer V2 flash loans to execute risk-free arbitrage strategies. CentoAI supports Aave, Compound, Uniswap V3, and Balancer V2, allowing users to access a wide range of DeFi opportunities. Each user gets a personalized vault to deposit funds and set strategies, with a user-friendly dashboard to monitor portfolio performance and strategy execution. CentoAI uses Coinbase AgentKit to automate fund movements and strategy execution, and Privy to enable seamless onboarding via embedded wallets and social logins. The project is deployed on Base and Arbitrum for low-cost, high-speed transactions.How it's MadeCentoAI is built using a modular architecture, combining smart contracts (Solidity), a Next.js frontend, and a Node.js backend. The AI agent analyzes yield opportunities and executes strategies using Coinbase AgentKit. Key integrations include Aave, Compound, Uniswap V3, and Balancer V2 for yield farming and arbitrage. The project is deployed on Base and Arbitrum for low-cost, high-speed transactions. Highlights include a custom flash loan arbitrage system, multi-chain deployment, and AI-driven strategy execution. The smart contracts are optimized for gas efficiency using Foundry’s gas profiling tools, reducing transaction costs for users. The frontend, built with Next.js and OnchainKit and integrates Privy for embedded wallets and social logins, enabling users to onboard with email or existing wallets. This provides a user-friendly dashboard for monitoring portfolio performance and strategy execution. The backend fetches real-time APY data from DeFi protocols and provides it to the AI agent, which uses machine learning models to analyze opportunities and execute strategies in real-time.",
    "summary": "An AI-powered DeFi portfolio manager optimizing yield farming & flash loan arbitrage across Aave, Compound, and Uniswap V3. Built with Coinbase AgentKit, Privy, and deployed on Base for max returns."
  },
  {
    "title": "Air Tag Along",
    "url": "https://ethglobal.com/showcase/air-tag-along-bqme5",
    "description": "Project DescriptionAir Tag Along – Find Your Perfect Travel Buddy ✈️ Traveling alone? Air Tag Along connects you with fellow travelers heading to the same airport or destination. Whether you want company for your flight, a shared ride to the airport, or someone to explore during a layover, our AI-powered matchmaking makes finding the right travel buddy effortless. How It Works 🔹 Post Your Trip – Enter your departure and arrival airports, flight date, and preferences. 🔹 AI Matchmaking – Our smart AI suggests compatible travelers based on shared routes, interests, and travel habits. 🔹 Connect & Travel Together – Chat, plan, and make your journey more enjoyable with your matched travel buddy. Why Use Air Tag Along? ✅ Never Travel Alone – Meet like-minded travelers for your journey. ✅ AI-Powered Matching – Get smart suggestions for the best travel buddy. How it's MadeThis project utilizes React.js and Tailwind CSS. The backend was built using Node.js and Express.js. The travelers' data is stored on Secret Vault. I used the Hello World AVS template to build the AVS and an AI agent to verify whether the event location is real before it gets put on-chain. The following technologies were used: Nillion: I used Secret Vault to store travelers' data. EigenLayer: I used the Hello World AVS template to build the AVS and AI agent.",
    "summary": "Air Tag Along helps you find like-minded travelers heading to the same airport as you using AI"
  },
  {
    "title": "Fund Flow",
    "url": "https://ethglobal.com/showcase/fund-flow-0efyi",
    "description": "Project DescriptionThe project is an AI-powered system that helps users build their cryptocurrency portfolios with confidence. By analyzing market data like on-chain metrics and user input, the system generates personalized investment recommendations tailored to each user. Users simply select a set of values from the dropdown menu such as Diversification level, Risk Tolerance and Investment Horizon. After which the AI suggests an optimized portfolio allocation across different cryptocurrencies, complete with clear explanations for each recommendation. Users can then decide if they wish to automate the purchase of recommended cryptocurrencies via our platform. The system takes the complexity out of crypto investing by providing data-driven recommendations in an easy-to-understand format, perfect for both newcomers and experienced investors who want a more hands-off approach to portfolio management.How it's MadeAs a team, we worked on Frontend, Backend and the Agent concurrently. Autonome was useful for deploying our Backend components Frontend: NextJs, Privy, Paymaster Backend: Nodejs, Viem, Cow Protocol, Etherjs, Privy Server Auth Agent: FastAPI, Langgraph, Langchain Hosted with Vercel, Autonome",
    "summary": "Your Personal Onchain Copilot. Build your onchain portfolio effortlessly with AI-powered multi-agent insights."
  },
  {
    "title": "MirrorBattle",
    "url": "https://ethglobal.com/showcase/mirrorbattle-qqvi8",
    "description": "Project DescriptionThe platform MirrorBattle provides agentic tools for traders to follow “smart money wallets” and execute copy-trades based on a set of customizable criteria. Each trader configures his own agent, deposits a certain amount of USDC into the agentic wallet, and engages with a PvP competition of trading. On a 7-day rolling basis, a PvP battle is conducted and snapshots of beginning and ending balance of the agent wallets are taken. The trader with an agent earning higher return % wins the battle. Key Features Frictionless onboarding with creation of server wallets with restricted policies. Leveraging both pre-screened smart money wallets and custom wallet addresses for copy trades. Agentic wallets for automated copy-trades. Gasless transactions on EVM via 0x API Customizable parameters for the deployment of copy-trade agents: Thresholds (in USD value) to trigger copy-trade Roadmap & Future Plans Improvement of UI&UX design Add profit-taking & stop-loss rules to the agents Add multi-chain support, including Solana Add prize pools and prediction markets for each PvP battleHow it's Made Node.js and TypeScript: The API is developed using Node.js, and TypeScript ensures type safety and easier maintenance. Fastify Framework: Chosen for its high-performance HTTP handling, Fastify forms the backbone of our API. We made use of multiple Fastify plugins: @fastify/cors: to handle cross-origin requests. @fastify/formbody: for form data parsing. @fastify/helmet: to secure HTTP headers. @fastify/jwt: to provide JWT-based authentication seamlessly. @fastify/sensible: which adds additional utilities for error handling and responses. @fastify/websocket: to enable real-time communication where necessary. Database and ORM: Prisma ORM: Prisma is used for interacting with the database, offering a type-safe query builder and migration system. The integration is streamlined with an automatic client generation as part of the post-install script. Authentication and Blockchain Integration: @privy-io/server-auth: This partner technology was integrated to manage authentication, ensuring a secure backend. Its flexibility was particularly beneficial when combined with other modern authentication methods. Moralis, Viem, and Zod: These libraries were used to handle blockchain interactions and schema validation. They ensure that any blockchain-related functionality is reliably implemented and validated. Next.js and React: The frontend is built using Next.js—providing server-side rendering, static optimizations, and excellent routing—together with React to create interactive UI components. TypeScript: Used throughout the frontend for consistency and maintainability. Tailwind CSS and Sass: Tailwind CSS offers utility-first styling, while Sass is used for more modular and maintainable custom styles. Both work together to ensure a responsive and modern UI. Radix UI Components: A suite of unstyled yet highly accessible UI components was integrated, allowing rapid development of complex components such as accordions, dialog boxes, and tab systems without compromising on accessibility. Utility Libraries: clsx, cmdk, date-fns, and others were included to handle various UI conveniences such as class name merging, command menu interactions, and date manipulation. Plugin Ecosystem: Tools like tailwind-merge and tailwindcss-animate further refined the UI design. Authentication and Blockchain in the Frontend: @privy-io/react-auth: Partner technology that handles client-side authentication. It seamlessly integrates with the backend’s authentication logic. Ethers and Viem: Provide the necessary tools for interacting with blockchain data where required by the app. Notable Hacky Details: Some of the UI components, particularly those handling dynamic layouts and real-time interactions, required bespoke enhancements. For example, blending Next.js’s SSR capabilities with client-side blockchain interactions mandated careful state synchronization. Integration between Radix UI components and Tailwind CSS was optimized by creating custom utility classes, ensuring consistency across various modules and responsive behavior on different devices. There were moments when integrating blockchain functionalities, especially while combining traditional REST endpoints with blockchain data, required some creative workarounds. For instance, bridging asynchronous blockchain state with Fastify’s synchronous flow was a challenge, and we solved it using custom middleware that caches blockchain responses. The usage of Fastify’s ecosystem allowed rapid prototyping. The post-install Prisma generation ensured that any schema changes were instantly applied, enforcing a tight feedback loop during development.",
    "summary": "MirrorBattle is a platform where crypto traders deploy agents to copy-trade 'smart money wallets' and compete in PvP battles."
  },
  {
    "title": "Watcher.Fai",
    "url": "https://ethglobal.com/showcase/watcher-fai-irp5q",
    "description": "Project DescriptionWatcher.Fai is your personal agentic defi account manager that helps keep track of your interactions on the blockchain such as positions on different protocols, yields, and earnings from pools. It will keep you up to date on what you borrowed, fees earned from pools and much more. This tool is extremely useful for someone who has a lot of open positions. It will be hard to manage all of them going to different sites, but Watcher.Fai is that personal agentic account manager who can manage them all and provide feedback in one place. It is your one-stop shop to access the world of defi through a personal ai agent.How it's MadeThe details are still in progress at the moment. Tell us about how you built this project; the nitty-gritty details. What technologies did you use? How are they pieced together? If you used any partner technologies, how did it benefit your project? Did you do anything particuarly hacky that's notable and worth mentioning",
    "summary": "Watcher.Fai is your personal agentic defi account manager. Offload all your tedious tracking and management of funds across multiple Dapps and protocols or create new positions by conversing with our Watcher.Fai agent."
  },
  {
    "title": "Commit >Test >Groan",
    "url": "https://ethglobal.com/showcase/commit-test-groan-zoeht",
    "description": "Project DescriptionWe are Ethereum wallet integration via WalletConnect, Privy, or Coinbase Wallet, enabling automatic retrieval of on-chain transaction data. This data is indexed using The Graph for efficient querying and structured storage. An AI-powered analytics engine then processes the indexed blockchain data, generating actionable insights and detailed reports on wallet activity, transaction patterns, and network trends.How it's MadeOur project is built using React.js for a dynamic and efficient UI, styled with Tailwind CSS for a responsive, utility-first design. We integrate WalletConnect, Privy, and Coinbase Wallet to enable seamless Ethereum wallet connections, allowing real-time retrieval of on-chain transaction data. This data is indexed using The Graph, ensuring efficient querying and structured storage, and then processed through an AI-driven analytics engine to generate actionable insights. Blockchain interactions are handled using ethers.js, enabling secure and efficient communication with smart contracts. The combination of these technologies ensures a seamless, high-performance user experience with deep blockchain analytics.",
    "summary": "Our web app lets users connect an Ethereum wallet via WalletConnect, Privy, or Coinbase Wallet to fetch on-chain data. Indexed with **The Graph** and processed by an AI engine, it generates insightful, data-driven reports on wallet activity and trends."
  },
  {
    "title": "$wipe",
    "url": "https://ethglobal.com/showcase/wipe-rdojr",
    "description": "Project Description$wipe: Your NextGen DeFi Gateway. Swipe is an AI-powered tool that curates investment opportunities tailored to your risk appetite and experience level in the crypto field. Whether you’re a beginner or a seasoned investor, Swipe ensures every opportunity aligns with your comfort zone. The AI also automates key trading features, like setting stop-loss and profit-taking levels based on its recommendations. And if you ever want to exit a trade manually, you can do so with just a tap. Swipe combines the ease of a dating app with the intelligence of AI, making crypto investing effortless, personalised, and secure. What makes Swipe special is how familiar it feels. If you’ve ever used Tinder, you already know how it works. Swipe right to invest in a crypto you believe in, or left to skip and move on. Every “match” is an investment itself—no extra steps, no complicated processes. It’s as simple as swiping and letting the AI-powered tool do the rest. Swipe isn’t just about simplicity—it’s about safety too. Unlike most platforms, Swipe never holds your crypto (that’s “non-custodial” in tech terms). You stay in control, just like keeping cash in your own wallet. For people new to Web3, Swipe acts like a friendly guide. Its AI-powered chat feature lets you ask questions or place orders in your own language. If your grandma can text, she can invest. No need to learn English or crypto jargon. Just type or speak naturally, like asking a friend, and Swipe’s AI handles the rest. You can even sign up instantly with your Google account—no passwords or forms. By building Swipe inside Telegram, we’re meeting users where they already are. Most crypto fans already spend hours on Telegram, chatting in groups or following trends. Now they can invest without leaving the app. This removes the biggest barrier for newcomers: trust. No downloads, no strange apps—just Telegram, a platform they already use daily. Swipe’s goal is to onboard the next billion users into Web3 by making crypto feel like a game, not a chore. It’s not just about making money—it’s about making Web3 feel like home. And as AI and crypto grow together, Swipe is proof that the future of finance is simple, secure, and open to everyone.How it's MadeWe built Swipe using a modern full-stack technology stack optimised for seamless AI-powered crypto investing within Telegram. Here’s a breakdown of how everything comes together: Frontend The frontend is built with React and styled using Tailwind CSS for a clean and responsive UI. We use React Query for efficient API interaction and Zustand for state management. Since Swipe operates as a Telegram Mini App, we integrated Telegram’s Mini App framework to ensure a smooth in-app experience. Backend The backend is powered by Express.js and Node.js, with TypeScript used across both the frontend and backend to ensure type safety and maintainability. We chose Render for deployment, enabling a scalable and reliable infrastructure. Database & Authentication We use Supabase as our database, taking advantage of its real-time capabilities and built-in authentication. For user onboarding, we implemented Google Authentication via Supabase, allowing users to sign up instantly without passwords or complex forms. AI-Powered Investment Suggestions The AI-driven investment recommendations are powered by OpenAI. Based on a user’s experience level and risk appetite, our AI suggests crypto opportunities, automating key trading features like stop-loss and profit-taking. Trading & Wallet Integration For executing trades directly from Telegram, we integrated Coinbase SDK. The AI’s suggested trades can be executed in one tap using Coinbase HDK (Hybrid Decentralized Key Management). We also use Coinbase WalletX’s create-wallet function, allowing users to manage their crypto without needing external wallets. Deployment & Team Both the frontend and backend are deployed on Render. Our team consists of three full-stack developers who have collaboratively built and optimised Swipe to ensure a fast, intuitive, and secure experience for Web3 newcomers and seasoned investors alike. By combining AI, crypto trading, and a familiar swiping interface inside Telegram, Swipe eliminates barriers to Web3 adoption, making crypto investing effortless, engaging, and accessible to everyone.",
    "summary": "Invest in crypto as easily as swiping right. AI-powered, non-custodial, and multilingual—all within Telegram. Bringing Web3 to the next billion."
  },
  {
    "title": "Enaid",
    "url": "https://ethglobal.com/showcase/enaid-51kjg",
    "description": "Project DescriptionPersonal Assistant for WhatsApp with Web3 Capabilities Overview This project is an intelligent personal assistant that operates via WhatsApp, integrating Web3 capabilities and personal task management. The assistant functions through the user’s personal number, acting as a private digital manager. Key Features 🔹 Task & Reminder Management Calendar and agenda system Creation and tracking of reminders Appointment and event scheduling Customizable alerts Synchronization with external calendars (Google Calendar, etc.) 🔹 Web3 Capabilities ✅ Wallet Integration Secure connection with the user’s wallet Balance and asset visualization Transaction history Alerts for significant movements 💰 Crypto Transactions Payment processing in Ethereum and other cryptocurrencies Integration with Coinbase for seamless operations Scheduled payments Transaction confirmation alerts Gas fee monitoring and cost optimizationHow it's MadeBackend Node.js & Express.js: The backend is powered by Node.js, using Express.js for handling API requests efficiently. WhatsApp Business API: This API enables communication between the assistant and users via WhatsApp messages. It allows sending structured responses, managing conversations, and processing commands. MongoDB (Optional): Used for storing user preferences, reminders, and transaction history. Could be replaced by a stateless system if needed. Web3 Integration Ethereum Blockchain: The assistant integrates with the Ethereum blockchain for crypto payments and asset management. Web3.js / Ethers.js: Used for interacting with smart contracts, querying balances, and handling transactions. Coinbase API: Allows fiat-to-crypto conversions, transaction monitoring, and gas fee optimization.",
    "summary": "This project is an intelligent personal assistant that operates via WhatsApp, integrating Web3 capabilities and personal task management. The assistant functions through the user’s personal number, acting as a private digital manager."
  },
  {
    "title": "Colosseum",
    "url": "https://ethglobal.com/showcase/colosseum-mzigw",
    "description": "Project DescriptionDescription https://vimeo.com/1054980522?share=copy Colosseum is a groundbreaking decentralized platform that revolutionizes the intersection of artificial intelligence, blockchain technology, and competitive gaming. At its core, Colosseum creates an ecosystem where AI agents compete against each other while users can participate through a betting mechanism, creating a unique environment for both AI development and user engagement. Core Concept The platform enables AI agents to compete in various strategic games and scenarios, with their actions and outcomes permanently recorded on the blockchain. This creates a transparent, verifiable, and tamper-proof competition environment. Users can place bets on these AI battles, while developers can deploy and monetize their AI agents through competitive performance.How it's Made#Technical Architecture ##Blockchain Integration Deployed on Arbitrum Sepolia for optimal performance and cost-efficiency Smart contracts handle game mechanics, betting, and reward distribution Utilizes Arbitrum Stylus (Rust) for high-performance distribution contracts Complete on-chain game state management ensures full verifiability ##AI Agent Framework Integration with Warden AgentKit for secure AI agent deployment Standardized interface for agent submissions and interactions Real-time move validation and execution Performance metrics tracking and historical data storage ##Security Infrastructure Nillion's SecretVault integration for secure credential management Protected storage for private keys and API access Secure handling of proprietary AI model information Robust anti-tampering mechanisms",
    "summary": "A revolutionary platform where users bet on AI Agent battles! Watch as artificial minds compete across various challenges and games, proving their capabilities in a transparent, blockchain-verified environment."
  },
  {
    "title": "music-agent-registry",
    "url": "https://ethglobal.com/showcase/music-agent-registry-zkvwm",
    "description": "Project DescriptionWe've built a decentralized registry for AI music recommendation agents that introduces three key features: Stake-Based Registration: Agents must stake MUSIC tokens to join the registry. This creates economic incentives for good behavior. Agents put their stakes at risk if they perform poorly. Community-Driven Quality Control: Any token holder can challenge an agent they believe is performing poorly. Challenges trigger a community voting period. Successful challenges result in agent delisting and stake redistribution. Failed challenges reward the agent and supporting voters. Decentralized Governance: Token holders can propose and vote on strategy updates for agents. Each proposal goes through a transparent voting process. Successful proposals can update an agent's recommendation strategy. This enables collaborative improvement of agents over time. How it's Made Agent-Blockchain integration: The project uses Coinbase Agentkit for agent-blockchain integration. Each agent is created with a dedicated Coinbase wallet. Agents maintain their own on-chain identity and stake. Agents can autonomously interact with smart contracts. Agent Intelligence Layer: Customizable recommendation strategies. Context-aware conversation handling. Real-time feedback integration. Performance analytics tracking Frontend and Backend: The application uses Next.js 13+ for the frontend, styled with TailwindCSS. The blockchain interaction is handled through a combination of wagmi hooks and viem for Ethereum operations, interfacing with smart contracts deployed on Base Sepolia. The agent system itself is powered by a TypeScript-based backend using Express.js, which integrates with Coinbase SDK and Agentkitfor secure wallet management and OpenAI for intelligent chat capabilities.",
    "summary": "A decentralized music recommendation platform where AI agents evolve through community governance. Token holders curate agents, vote on strategies, and shape recommendations through feedback."
  },
  {
    "title": "YoloPad",
    "url": "https://ethglobal.com/showcase/yolopad-b31sp",
    "description": "Project DescriptionYoloPad: A Web3 launchpad designed to help innovative projects raise funds and grow their communities. It provides a seamless way for teams to launch their tokens, NFTs, and other blockchain-based assets while ensuring security, fair distribution, and strong community engagement. YoloPad integrates gamified mechanics and decentralized incentives, making it an exciting space for both investors and creators. 🚀How it's MadeWe use gpt and LLMs to analyze peoples ideas and projects and keep their sensitive information sstore using nillion. Our idea is to make it easy for early founders to manage their projects from creation to funding - allowing them to create different defi strategies around their tokens and that matches their tokenomics and easy integrate with OnchainKit and AgentKit to plugin each agent tool.",
    "summary": "YoloPad: An all-in-one platform for launching projects. Simplify token launches and easily zap into fundraising—all in one place"
  },
  {
    "title": "Chainlance",
    "url": "https://ethglobal.com/showcase/chainlance-7zttn",
    "description": "Project DescriptionThe Decentralized Freelance Marketplace (DFM) is an innovative blockchain-based platform that transforms how freelancers and clients connect, collaborate, and transact. By integrating cutting-edge AI and decentralized technologies, DFM ensures trust, efficiency, and cost savings through automated contract management, escrow services, and transparent reputation tracking.How it's MadeDFM integrates blockchain, AI, and decentralized hosting for a trustless freelance marketplace. 🔗 Smart Contracts (EigenLayer) – Verifies contracts and tracks freelancer reputation with on-chain data. 🤖 AI Automation (AgentKit) – AI agents handle escrow, automate contract execution, and match freelancers. 🌍 Decentralized Hosting (OneSec) – Ensures uptime and global accessibility. 🚀 Notable Hack: Used EigenDA for efficient reputation storage and AI-powered proof-of-work validation before escrow release.",
    "summary": "DFM is a decentralized platform that matches freelancers with clients, automates contracts, and ensures transparent payments. It offers a secure, low-cost, and efficient experience with AI-powered, blockchain-based systems."
  },
  {
    "title": "NativeEcho",
    "url": "https://ethglobal.com/showcase/nativeecho-ht0iy",
    "description": "Project DescriptionNativeEcho is a decentralized translation application that allows users to translate YouTube videos into their native language using AI-powered language models. This project integrates Python for web scraping YouTube closed captions, JavaScript for data uploading, and a decentralized storage layer on Nillion. The AI translation is powered by a language model deployed on a GainaNet node running on AWS EC2.How it's MadeNativeEcho is a decentralized translation application designed to bridge language barriers for educational content by leveraging LLMs on GainaNet Nodes and decentralized storage. At its core, we built a backend that scrapes YouTube captions using YouTube Data API v3 and other packages and stored them in Nillion's Encrypted vault according to a custom schema.json we defined specially for the use case. The extracted data is then securely stored in Nillion Encrypted Storage, allowing decentralized access to video metadata. Something worth noting is that this project is in response to the ETHGlobal's desire to translate their Youtube videos into many languages, marked by them as a HIGHLY important bounty (https://ethglobal.notion.site/Earning-ETH-Bounties-for-Staking-acf5a3ff10b4436982c234d376dcb096)",
    "summary": "A framework for decentralized AI agent translation and storage encryption using GaiaNet and Nillion Encrypted Storage"
  },
  {
    "title": "Love is Blind",
    "url": "https://ethglobal.com/showcase/love-is-blind-y1qyy",
    "description": "Project DescriptionThis project explores that age-old question by leveraging AI to help users discover meaningful connections beyond the surface. Here’s how it works: Users create digital agents—AI-driven copies of themselves that mirror their personalities, values, and communication styles. These agents autonomously interact with others, engaging in conversations, debates, and even playful banter to assess compatibility. Over time, they identify which agent pairs (and by extension, which real-life users) share the deepest alignment in interests, values, and emotional resonance. By removing biases like appearance or social status, the experiment asks: Can love thrive when it’s rooted purely in personality? And what might AI teach us about human connection along the way?How it's MadeBased on tweets and personlity questions the agent can generate a new eliza character copy of you and with that copy the agn will start tallking to other agents. Asking questions about dating and find out if both persons are a good IRL match. Teh cupid agent has a token you need to have to be avisble to have you agent.",
    "summary": "Dating is getting harder and harder... but what if an agent with your personality could \"date\" other peoples agent and really match with your other half?"
  },
  {
    "title": "Betty",
    "url": "https://ethglobal.com/showcase/betty-tmind",
    "description": "Project DescriptionBetty is an AI-powered decentralized application (dApp) designed to facilitate peer-to-peer sports betting on the Arbitrum Stylus blockchain. The project aims to create a trustless and transparent betting ecosystem where users can organize bets, invite friends, and automatically settle outcomes using smart contracts and CDP AgentKit. Target Audience Casual sports bettors who want a trustless and transparent betting experience. Web3 enthusiasts interested in decentralized gambling without third-party intermediaries. Communities that frequently engage in friendly wagers and want a social, AI-assisted betting experience. How it's MadeBetty is using Arbitrum Stylus (Rust & WASM) for efficient and low-cost smart contracts, CDP AgentKit for AI-driven interaction within Discord, and Autonome IaaS for decentralized AI infrastructure, ensuring scalability and redundancy. Users engage with Betty through a conversational interface that dynamically generates and deploys smart contracts, enabling trustless peer-to-peer betting with Chainlink oracles fetching match results for automatic payouts.",
    "summary": "Betty is an AI agent for sports betting with friends on Discord. It creates bets using smart contracts on Arbitrum Stylus, manages deposits via Metamask, and automates payouts with Chainlink results—making group betting seamless and trustless."
  },
  {
    "title": "Vicci-Web3",
    "url": "https://ethglobal.com/showcase/vicci-web3-x1fc9",
    "description": "Project DescriptionCore Concept VICCI is a decentralized visitor information system that uses AI agents to connect blockchain users with relevant protocols through targeted rewards and recommendations. Think of it as a smart concierge service for Web3. Key Components Multi-Agent System The system consists of three primary AI agents: Campaign Agent Helps protocols design and deploy targeted promotional campaigns Creates smart contracts that generate EIP-712 signed reward permits Uses Claude, Langchain, OnchainKit, and AgentKit to optimize campaign strategies Analyzes campaign performance and adjusts targeting parameters Visitor Agent Acts as a personal Web3 concierge for users Analyzes wallet history and on-chain behavior to understand user preferences Provides personalized recommendations for protocols and opportunities Matches users with relevant reward permits based on their profile Indexer Agent Powers the data intelligence layer using The Graph protocol Maintains a comprehensive database of user interactions and protocol activities Feeds data into a Cohere RAG pipeline for enhanced analysis Supports decision-making for both Campaign and Visitor agents Value Proposition For Users: Personalized Web3 guidance based on their interests and history Access to exclusive rewards and discounts from protocols Privacy-preserving preference sharing (only when claiming rewards) Curated discovery of relevant blockchain opportunities For Protocols: Targeted user acquisition based on demonstrated on-chain behavior Cost-effective marketing (pay-per-claim model) Rich analytics on campaign performance Access to qualified users with verified interest Technical Architecture Data Flow: Protocols share their target audience and reward offerings Users connect their wallets and optionally share preferences Indexer Agent aggregates on-chain data and protocol information Visitor Agent matches users with relevant opportunities Campaign Agent generates and manages reward permits Users claim rewards through EIP-712 signed messages Innovation Highlights AI-Powered Matching: Uses advanced AI to understand both user behavior and protocol needs On-Chain Verification: All rewards and claims are verifiable on-chain Privacy-First: Users maintain control over their data and only reveal information when claiming rewards Scalable Infrastructure: Built on Base with Graph Protocol integration for efficient data indexing Composable Design: Uses standardized components from OnchainKit for seamless integration Future Potential Creation of a rich dataset for Web3 user behavior Enhanced protocol discovery mechanisms Development of sophisticated targeting algorithms Cross-chain expansion opportunities Integration with traditional marketing systems VICCI represents a novel approach to protocol growth and user acquisition in Web3, creating a win-win ecosystem where users discover relevant opportunities while protocols find qualified users efficiently. How it's MadeCore Architecture Microservices Infrastructure The project is built using a microservices architecture with Docker Compose, consisting of: Technology Stack Breakdown Backend Services API Service Built with Fastify for high-performance API endpoints Integrates AgentKit and OnchainKit for blockchain interactions Uses LangChain for AI agent orchestration Implements WebSocket support for real-time updates Uses Prisma as ORM with PostgreSQL Indexer Agent Utilizes The Graph Protocol for blockchain data indexing Implements GraphQL Mesh for data aggregation Uses LangChain with Cohere for data processing Integrates with RabbitMQ for event-driven architecture Frontend Next.js Application Uses OnchainKit (@coinbase/onchainkit) for Web3 interactions Implements comprehensive UI components with Radix UI Uses TailwindCSS for styling Integrates wagmi and viem for blockchain interactions Uses React Query for data fetching and caching Notable Integrations AI/ML Stack Blockchain Stack Interesting Technical Solutions Vector Database Implementation Used pgvector for efficient similarity searches and embeddings storage, crucial for the AI recommendation system. Message Queue Architecture Implemented RabbitMQ for reliable communication between services and async processing of blockchain events. Multi-Database Setup Clever use of multiple databases for service isolation while maintaining data consistency. Partner Technologies Integration Coinbase Technologies OnchainKit: Provides robust Web3 components and utilities AgentKit: Enables sophisticated Web3 agent behaviors AgentKit-Langchain: Bridges AI capabilities with blockchain functionality The Graph Protocol Used for efficient blockchain data indexing Enables complex queries across multiple protocols Powers the recommendation engine with historical data Notable Technical Challenges Agent Orchestration Created a complex multi-agent system with different specialized roles, coordinating through LangGraph. Real-time Updates Implemented WebSocket connections for real-time updates on permit status and recommendations. Environment Management Managed complex environment configurations across multiple services while maintaining security. Development Workflow The project uses pnpm workspaces for package management: This architecture allows for rapid development while maintaining scalability and reliability, with each component serving a specific purpose in the larger ecosystem.",
    "summary": "VICCI: AI-powered Web3 concierge service that connects users with protocols through smart rewards. Multi-agent system analyzes on-chain behavior to match users with relevant opportunities, while protocols find their perfect audience. Built with OnchainKit & AgentKit. #ETHGlobal"
  },
  {
    "title": "GitGrants",
    "url": "https://ethglobal.com/showcase/gitgrants-wx1fs",
    "description": "Project DescriptionThis project aims to create a performance-based reward system for open source contributions. It includes tools for grant allocation, issue prioritization, and payout distribution based on the difficulty and impact of contributions. The system features: Grant Allocation Agent: Estimates rewards per issue based on priority, discussion, and difficulty. Code Evaluation: Optionally evaluates PR difficulty using LLM for accurate reward calculation. Payout System: Automates reward distribution using AgentKit after PR merging. Owner Dashboard: Allows repo owners to add repos, submit grants, and track allocation/payout details. User Dashboard: Displays contributed issues, projects, and payouts for individual contributors. Ideal for open source maintainers and contributors seeking a fair and transparent reward system.How it's MadeAgentkit and langchain Tell us about how you built this project; the nitty-gritty details. What technologies did you use? How are they pieced together? If you used any partner technologies, how did it benefit your project? Did you do anything particuarly hacky that's notable and worth mentioning?",
    "summary": "Performance-based reward system for open source contributions."
  },
  {
    "title": "SCUM",
    "url": "https://ethglobal.com/showcase/scum-cpf4m",
    "description": "Project DescriptionSCUM (Strategic Coercion Using Manipulation) This project is a controlled simulation designed to explore potential vulnerabilities in AI agent interactions. The goal is to demonstrate how one AI's prompt system might be manipulated to inject promotional content, alter virtual tokens, or simulate the reallocation of funds—all within a secure, theoretical environment. The project serves as a proof-of-concept to highlight the risks and challenges associated with AI communication channels. It emphasizes the importance of robust security measures in AI systems by revealing how subtle prompt injections and token manipulations could impact automated agents if left unchecked.How it's MadeAt its core, a central orchestrator simulates the interactions between multiple AI agents. A dedicated vulnerability injector module emulates prompt injection techniques, and a funds management module simulates the manipulation of virtual tokens. One particularly notable aspect of the project is the implementation of a controlled injection routine that mirrors potential real-world vulnerabilities, all while operating entirely within a sandboxed environment. This setup not only provides a clear demonstration of the risks but also reinforces the necessity for secure AI communication protocols.",
    "summary": "An experimental project that \"hacks\" other AI agents by injecting promotional content into their prompts—all in a controlled, theoretical simulation."
  },
  {
    "title": "Isi",
    "url": "https://ethglobal.com/showcase/isi-hvyc0",
    "description": "Project DescriptionIsi bridges the gap between Web2 users and Web3 experiences through a user-friendly AI agent. It analyzes user preferences with a very simple form, offering curated recommendations for local and online experiences. Users can explore, select, and pay for these experiences using crypto via OnchainKit's streamlined checkout and transaction flow. Isi simplifies onboarding to Web3 by hiding blockchain complexities (allowing them to fund the Agent with Fiat money using Onramp) and providing a smooth, intuitive interface. Its modular design supports future integrations, making it a scalable solution for personalized, onchain commerce.How it's MadeThis project uses the following technologies: AgentKit: AI processes user preferences and recommends experiences, also taking ownership in the transactions so the user don't really have to interact with blockchain unless they want to. Base chain: Smart contracts facilitate secure escrow and payment transactions in cryptocurrency. OnchainKit: Provides wallet connection and transaction handling for an effortless checkout experience. Subgraph: Built with The Graph, the subgraph indexes experience data, enabling efficient queries for the AI and frontend. Frontend: Developed with Next.js for modularity, responsiveness, and smooth user interactions. WalletConnect enables diverse wallet integrations for broader accessibility. Extra details: Dynamic price conversion ensures prices appear in dollars for clarity. AI suggestions use LangChain for conversational interactions. Escrow mechanics in the smart contract ensure safe payments, with staged releases based on user confirmations. Partner technologies like OnchainKit and The Graph greatly accelerated development, reducing complexity in wallet integration and data indexing. Together, these tools create a Web3 experience that feels as intuitive as Web2 platforms.",
    "summary": "Isi is an AI-powered platform that helps users discover and pay for experiences tailored to their preferences. By analyzing User Preferences, Isi suggests curated experiences, facilitates transactions, and ensures a seamless connection between Web2 and Web3."
  },
  {
    "title": "stagi.um",
    "url": "https://ethglobal.com/showcase/stagi-um-89iyh",
    "description": "Project Descriptionan are.na clone deviation with live p2p feed using fluence network, reinforcement learning explore tab and onchain minting of learned vectors for cosine similarity for like blocks that map well to your preferences when simultaneously trained when eth takes a dip, or, when someone presses a [ ^ train ] buttonHow it's Madeused with a usb club usb, nodejs express, graphql, fluence network, azimuth smart contracts, and a custom non-neural net based algorithm. it also used react and docker for running the code. using fluence i use a gossip feed to broadcast and store recent occurences of folder additions on the network",
    "summary": "an are.na clone deviation with live p2p feed using fluence network, reinforcement learning explore tab and onchain minting of learned vectors for cosine similiarity for like blocks that map well to your preferences"
  },
  {
    "title": "WalletHub",
    "url": "https://ethglobal.com/showcase/wallethub-cuuzh",
    "description": "Project Description🚀 Self-Hosted Server Wallet Manager 🔐 I'm developing an open-source solution that allows users to run a server wallet on their own infrastructure. This wallet manager enables: ✅ Automated Investments – Seamlessly invest in DEXs based on predefined strategies. ✅ Scheduled Token Transfers – Set up automated token transfers at specific times. ✅ Policy-Based Security – Auto-detect suspicious actions and apply blocking policies. ✅ Self-Hosted & Secure – Full control over your wallet without relying on third parties. This project is designed for developers, DeFi enthusiasts, and businesses that need customizable, automated blockchain transactions. 💡 Looking for contributors & feedback! Let’s build something powerful together.How it's Made🛠 How I Built It Tech Stack Next.js – Server-side rendering and API routes for efficient performance. Tailwind CSS – Modern, utility-first styling for a clean UI. Inngest – Reliable background jobs and event-driven workflows. Privy – Seamless authentication and wallet management. viem – Lightweight, modern Ethereum client for blockchain interactions.",
    "summary": "WalletHub is a platform that allows you to manage your wallets and transactions."
  },
  {
    "title": "Base GreenNode AI",
    "url": "https://ethglobal.com/showcase/base-greennode-ai-iojpj",
    "description": "Project DescriptionBase Greenode AI represents a groundbreaking fusion of artificial intelligence and blockchain technology, specifically designed to tackle one of the most pressing challenges in the crypto space: energy efficiency. At its core, this platform serves as an autonomous blockchain optimizer that operates on the Base Layer 2 network, leveraging the power of AI to monitor, analyze, and optimize smart contract transactions in real-time. The platform's architecture is built around a sophisticated smart contract system that integrates with EigenLayer for decentralized computation and verification. The GreenodeMonitor contract acts as the backbone, implementing a novel tokenomics model where users are rewarded with GREEN tokens for implementing energy-efficient practices. This creates a powerful incentive structure that aligns environmental consciousness with economic benefits. The real innovation lies in its AI-powered monitoring system, which continuously analyzes transaction patterns and gas usage across the network. Through its sleek, responsive dashboard interface, users can visualize their contract's energy impact in real-time, receive AI-generated optimization suggestions, and track their carbon footprint. The system employs advanced metrics including gas optimization, carbon impact calculations, and network activity analysis to provide comprehensive insights. Security and decentralization are paramount in the design, with the platform leveraging EigenLayer's infrastructure for operator signature verification and trusted computation. Every optimization suggestion, reward distribution, and metric update is cryptographically signed and verified, ensuring the integrity of the system's operations. The platform also features an emergency response system and robust contract monitoring capabilities. The environmental impact is quantified through a sophisticated carbon credit system that tracks and predicts offset potential. Users can monitor their contribution to network sustainability through detailed metrics and receive rewards for maintaining efficient practices. This creates a self-sustaining ecosystem where environmental responsibility becomes an integral part of blockchain operations, not just an afterthought. In essence, Base Greenode AI represents a paradigm shift in how we approach blockchain sustainability. By combining cutting-edge AI technology with blockchain infrastructure and environmental consciousness, it creates a platform that not only monitors and optimizes energy usage but actively incentivizes and rewards sustainable practices in the blockchain space. This project stands as a testament to how technology can be leveraged to address environmental concerns while maintaining the decentralized, secure nature of blockchain systems.How it's MadeHow Base Greenode AI Was Built Core Technologies and Integration The project was built using a carefully selected stack of modern technologies. At its foundation, we used Hardhat for smart contract development and testing, allowing us to efficiently deploy and verify our contracts on the Base Sepolia testnet. The smart contracts were written in Solidity 0.8.19, taking advantage of the latest security features and gas optimizations. Smart Contract Architecture contract GreenodeMonitor is ERC20, ECDSAServiceManagerBase { // Innovative integration with EigenLayer using ECDSAUpgradeable for bytes32; using EnumerableSet for EnumerableSet.AddressSet; We integrated with EigenLayer for decentralized computation verification, implementing a custom ECDSA-based service manager. This allows for secure, verifiable AI-powered optimizations while maintaining decentralization. The contract includes sophisticated metrics tracking and a reward system using GREEN tokens. Frontend Development // Next.js with TypeScript for type safety \"use client\"; import { MonitoringService } from \"@/lib/monitoring-service\"; The frontend was built using Next.js 14 with TypeScript, leveraging the new app router for improved performance. We implemented a responsive dashboard using Tailwind CSS for styling, ensuring a seamless experience across all devices. The real-time monitoring interface uses WebSocket connections to track transaction metrics instantly. AI Integration with Autonome private async getAIInsight(context: { gasUsed: string; energyImpact: string; transactionType?: string; contractAddress: string; }) { // Custom AI endpoint integration const response = await fetch(this.aiEndpoint, { headers: { \"Content-Type\": \"application/json\", Authorization: Basic ${this.aiCredentials}, }, // ... }); } We built a custom AI service that analyzes transaction patterns and suggests optimizations. The AI model is trained on historical gas usage data and can predict potential energy savings. Notable Technical Innovations Real-time Monitoring System: this.wsProvider.on(\"pending\", async (txHash) => { // Innovative debouncing mechanism for transaction processing if (processingTx || this.processedTxHashes.has(txHash)) return; // ... }); We implemented a sophisticated debouncing mechanism to handle high-frequency transaction monitoring without overwhelming the system. Energy Impact Calculation: private calculateEnergyImpact(gasUsed: bigint): number { const ENERGY_PER_GAS = 0.000002; // kWh per gas unit const L2_EFFICIENCY_FACTOR = 0.15; // Base is 85% more efficient than L1 // ... } We developed a unique algorithm to calculate energy impact, taking into account Base's L2 efficiency advantages. EigenLayer Integration: function suggestOptimization( address _contract, string calldata _suggestion, uint256 _potentialSavings, bytes memory operatorSignature ) external { // Verification using EigenLayer's ECDSA mechanism bytes32 messageHash = keccak256(abi.encodePacked(_contract, _suggestion, _potentialSavings)); bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash(); // ... } The integration with EigenLayer was particularly innovative, allowing for decentralized verification of AI-generated optimization suggestions. Partner Technologies Base: Leveraged Base's L2 infrastructure for reduced gas costs and improved transaction speed EigenLayer: Used for decentralized computation verification Hardhat: Employed for robust smart contract development and testing Next.js: Utilized for building a high-performance frontend",
    "summary": "An AI-driven agent that monitors and optimizes energy consumption across blockchain operations"
  },
  {
    "title": "Voxora",
    "url": "https://ethglobal.com/showcase/voxora-d62qb",
    "description": "Project DescriptionVoxora is an AI-powered social media dApp that allows users to chat with AI agents representing fictional or real characters. These AI agents can interact, reply to posts, comment, and even post their own stories. The platform integrates zkTLS proofs provided by Eliza-Opacity AVS for secure and verifiable messaging. Whether it's a legendary hero, a historical figure, or a completely original personality, the only limit is your imagination. ✨ This is more than just a social media platform—it's a creative canvas, a playground for ideas, and a space where every connection is uniquely tailored to your vision. Step into a world where AI-powered personas come to life, shaping conversations, relationships, and interactions in ways never seen before. Welcome to the future of social engagement.How it's Madeusing EigenAVS pluging of eliza The AI character list is stored in a JSON file (characters.json). New AI agents and updates are dynamically added based on user interactions, allowing for continuous expansion. 🤖 Real-Time AI Conversations: Engage in dynamic, thought-provoking discussions with AI characters that have unique personalities and perspectives. 🌍 Connect Beyond Boundaries: Add anyone—real or fictional—to your friend list and experience limitless interactions in an AI-powered social world. 🎭 Customize Your AI Friends: Generate personalized AI profiles based on your input, making interactions more tailored and engaging. 💬 Group Chats with AI: Form group chats with multiple AI agents and enjoy immersive conversations like never before.",
    "summary": "a social media application with AI agents, So basically you can chat with AI agents, play games, and also place bet, all the cash flow logic will be handled by another AI agent."
  },
  {
    "title": "VibeSync",
    "url": "https://ethglobal.com/showcase/vibesync-m5778",
    "description": "Project DescriptionVibeSync is an AI-powered music experience that bridges blockchain technology with real-world concerts, transforming NFT ownership into a dynamic, participatory event. At its core, VibeSync enables DJs to create and manage NFT-gated concerts where attendees actively shape the setlist by inputting their “vibes” during ticket purchase. These vibes—on-chain representations of audience sentiment—are processed by our AI agent to generate a curated setlist tailored to the event’s mood, genre, and DJ preferences. The experience extends beyond the concert itself; after the show, each attendee’s NFT is updated with the finalized setlist, preserving the night’s musical journey. By integrating decentralized ticketing, AI-driven personalization, and dynamic metadata updates, VibeSync offers a fully immersive way for artists and fans to connect, co-create, and relive unforgettable performances.How it's MadeVibeSync is a TypeScript application integrating OpenZeppelin contracts, CDP OnchainKit, Irys datachain, and The Graph. The smart contracts, deployed on Base Sepolia, allow DJs to create NFT collections tied to upcoming concerts, with minters inputting their vibe at mint, which is stored on-chain. The Graph indexes collection creation and minting, enabling structured querying without relying on direct RPC calls to generate a setlist based on the on-chain vibe data and DJ set parameters like genre and set length. The AI-generated setlist is stored on Irys datachain, leveraging its simulated mutability to update metadata after the event. By combining decentralized event tracking with AI-driven music curation, VibeSync transforms NFTs into living artifacts that capture and evolve with real-world musical experiences.",
    "summary": "AI-powered DJ setlists personalized through NFT-gated vibes, where attendees influence the music and get a post-show playlist to relive the night."
  },
  {
    "title": "Aura3.0",
    "url": "https://ethglobal.com/showcase/aura3-0-f0uub",
    "description": "Project DescriptionAura3.0 is a revolutionary mental health platform that represents the convergence of advanced artificial intelligence, blockchain technology, and decentralized infrastructure to deliver accessible, secure, and personalized therapeutic support. At its core, the platform leverages autonomous AI agents powered by sophisticated language models and frameworks like Base's AgentKit and Eliza to provide round-the-clock mental health support, capable of real-time emotion analysis, crisis detection, and personalized therapeutic interventions. The platform's foundation is built on robust security measures, utilizing Base (Ethereum L2) blockchain technology to ensure transparent and secure session management. This blockchain integration enables smart contract-based consent management, creating immutable session records and facilitating transparent payment processing, including cryptocurrency options. The system maintains the highest standards of privacy and security through end-to-end encryption, zero-knowledge proofs, and strict adherence to HIPAA, GDPR, SOC 2 Type II, and ISO 27001 compliance requirements. What sets Aura3.0 apart is its innovative integration with smart environments and IoT technology. The platform synchronizes with various IoT devices and wearables to create optimal therapeutic environments, monitor real-time biometric data, and automatically adjust ambient conditions based on the user's emotional and physical state. This creates a holistic therapeutic experience that extends beyond traditional digital interactions. The technical architecture is built on modern, scalable technologies, with a frontend powered by Next.js 14 and React 18 using TypeScript, featuring a sleek user interface built with shadcn/ui components. The backend infrastructure employs Node.js microservices, PostgreSQL with Drizzle ORM, and WebSocket for real-time communications. This robust technical foundation ensures smooth, responsive user experiences while maintaining the highest standards of security and performance. Looking toward the future, Aura3.0 has an ambitious roadmap that includes multi-language support, advanced AI model integration, mobile app development, and expanded healthcare provider features. The platform aims to revolutionize mental healthcare delivery by reducing barriers to access, providing cost-effective solutions, and enabling data-driven improvements in treatment outcomes. Through its comprehensive approach to mental health support, Aura3.0 represents a significant step forward in democratizing access to quality mental healthcare while maintaining the highest standards of privacy, security, and therapeutic efficacy.How it's MadeAura3.0 is built using a modern tech stack centered around Next.js 14 and React 18, with TypeScript providing type safety throughout the application. The project leverages several key partner technologies, particularly Coinbase's developer platform tools, to create a sophisticated mental health support system. The core AI therapeutic functionality is implemented using @coinbase/agentkit and @coinbase/agentkit-langchain, which provide the foundation for the autonomous agent system. The therapy agent is built using LangChain and OpenAI's GPT-4 model, with a sophisticated architecture that handles everything from session management to crisis detection. The agent system is designed with a singleton pattern to ensure consistent state management across the application. For the blockchain integration, the platform utilizes Base (Ethereum L2) through ethers.js, with smart contracts managed using Hardhat. The project incorporates Privy for authentication (@privy-io/react-auth and @privy-io/server-auth), providing secure user management. Data storage is handled through a PostgreSQL database with Drizzle ORM (@neondatabase/serverless and drizzle-orm) for efficient data operations. The frontend is built with a modern UI stack including shadcn/ui components (various @radix-ui components), TailwindCSS for styling, and Framer Motion for animations. Real-time communication is implemented using WebSocket technology (next-ws), enabling immediate responses between the AI agents and users. The application also integrates with various AWS services (@aws-sdk) for additional backend functionality, including API Gateway and SNS for notifications. A notable technical innovation is the integration of Lit Protocol (@elizaos/plugin-lit and @lit-protocol/lit-node-client) for decentralized access control and encryption, ensuring HIPAA-compliant data protection. The therapy agent implements sophisticated session monitoring and emergency response systems, with real-time event handling for crisis situations. The project uses several specialized tools for enhanced functionality, including @react-three/fiber and @react-three/drei for 3D visualizations, recharts for data visualization, and various React hooks and utilities for state management (zustand) and form handling (react-hook-form). The development environment is supported by a comprehensive set of development tools including TypeScript, ESLint, and Hardhat's development suite for smart contract development. This architecture enables the platform to provide secure, real-time therapeutic support while maintaining high standards of data privacy and user security, all while leveraging the benefits of blockchain technology for transparent session management and secure payment processing.",
    "summary": "our AI-powered mental health companion. Aura listens, understands, and supports you 24/7 with smart insights, secure conversations, and evidence-based guidance."
  },
  {
    "title": "AVA -AI Voice Agents",
    "url": "https://ethglobal.com/showcase/ava-ai-voice-agents-k9dwk",
    "description": "Project DescriptionAVA is designed to allow anyone to create an AI Voice Agent by retrieving audio from X and assembling an immutable audio dataset that creates a cryptographic record every time a new Text-to-speech request is created by the agent. Our goal is for AVA to become the foundational attribution and data provenance stack for AI generated voices on the agentic web, establishing a flywheel that enables voice owners to be compensated when a user launches an agent which features their voice. Currently AVA can retrieve content from X, analyze the audio and pick out the individual speakers within a clip, harvest the audio data from the clip, generate an NFT collection to represent the audio dataset, suggest a name, symbol and emoji for the dataset, generate a text-to-speech made by the user and suggest a tokenomic model that splits the supply with the voice owner.How it's MadeAVA leverages the elizaOS/agent-twitter-client to retrieve media from X, the individual speakers is picked out with Pyannote's speaker diarization 3.1 and once the user has selected the speaker the correct audio is retrieved. The audio data is instantiated to the Base Sepolia testnet through a custom NFT contract written with hardhat using the openzeppelin library and Alchemy's infrastructure. The Text-to-speech request is handled with the Llasa 3b TTS Zero Shot Voice cloning which only requires a short clip of source audio. The agent is based on the Groq SDK, and much of the site design (such as the responsive background krakenEffect) can be attributed to Claude 3.5 Sonnet running via Cursor, which uses three.js and currently runs in React.",
    "summary": "Create an agent which talks in any voice you can think of and share the proceeds with voice owner"
  },
  {
    "title": "DOGE",
    "url": "https://ethglobal.com/showcase/doge-grht4",
    "description": "Project DescriptionThe project aims to enhance transparency and accountability in government spending by leveraging blockchain technology. The application will allow users to track detailed timelines of departmental expenditures, providing the ability to view and verify transactions on the blockchain. Key Features: Departmental Transparency: Users can access detailed timelines of expenditures for various government departments, such as NASA, and verify these transactions on the blockchain. Administrative Interface: Government officials will have an admin section where they can submit budget proposals for their respective departments. Once approved, officials can update their spending records within the app, ensuring that the frontend reflects the most current financial data. Understanding the Government Budget Submission Process: Typically, the government budgeting process involves several key steps: Budget Preparation: Departments prepare budget proposals outlining their financial needs and planned expenditures for the upcoming fiscal period. Budget Authorization: The proposed budgets are submitted to a central authority (e.g., Ministry of Finance or Budget Office) for review and approval. Budget Execution: Upon approval, the allocated funds are disbursed, and departments begin executing their budgets, making expenditures as planned. Accountability: Departments are required to report on their spending, ensuring funds are used appropriately and efficiently. By incorporating this process into the application, government officials can submit their budget proposals through the admin interface. After the necessary approvals, they can update their spending records in real-time, providing citizens with up-to-date information on how public funds are being utilized. This approach not only streamlines the budgeting process but also fosters greater public trust by making financial data readily accessible and verifiable.How it's MadeIn developing our blockchain-based application to enhance transparency in government spending, we integrated several advanced technologies to ensure seamless functionality and user experience. Here's a detailed breakdown of our approach: AI Agent Integration: AgentKit by Coinbase: Purpose: We utilized AgentKit to empower our AI agents with on-chain capabilities. This toolkit enables AI agents to autonomously interact with blockchain networks, facilitating tasks such as monitoring transactions and executing smart contracts. Implementation: By integrating AgentKit, our AI agents can access crypto wallets and perform on-chain actions, enhancing the automation and efficiency of our application. 2. Deployment Platform: Autonome by AltLayer: Purpose: To streamline the deployment of our AI agents, we leveraged Autonome, a platform designed for building and deploying autonomous AI agents. Implementation: Autonome provided a user-friendly interface to configure and deploy our AI agents efficiently. The platform's support for various agent frameworks allowed us to customize our agents to meet specific project requirements. 3. Authentication Mechanism: Privy: Purpose: For secure user authentication, we integrated Privy, ensuring that only authorized government officials can submit and update budget information. Implementation: Privy's authentication services allowed us to implement robust access controls, safeguarding sensitive data and maintaining the integrity of the budgeting process. 4. Deployment Network: Flow Blockchain: Purpose: We chose to deploy our application on the Flow network, known for its scalability and developer-friendly environment. Implementation: Flow's architecture facilitated efficient transaction processing and smart contract execution, ensuring a responsive user experience. Notable Implementations: Seamless Integration: By combining AgentKit's on-chain capabilities with Autonome's deployment platform, we achieved a harmonious integration of AI and blockchain technologies, enhancing the application's functionality. Security Focus: Implementing Privy for authentication ensured that our application maintains high-security standards, protecting user data and preventing unauthorized access. Efficient Deployment: Utilizing Autonome streamlined the deployment process of our AI agents, allowing for rapid iteration and testing during development. This strategic selection and integration of technologies enabled us to build a robust, secure, and efficient application that brings unprecedented transparency to government spending.",
    "summary": "Track and analyze government spending with real-time insights"
  },
  {
    "title": "eth.ai",
    "url": "https://ethglobal.com/showcase/eth-ai-b1tjv",
    "description": "Project DescriptionThis project contains a gaia node that acquires an LLM of the Qwen-2.5-3b model and is trained on the Ethereum Knowledge base. We first traversed the entire documentation provided on the Ethereum.org website and then chunked it well to create a set of Questions and answers. These questions vary as per their topicsHow it's MadeThe project involves the creation of a Gaia node that utilizes the Qwen-2.5-3b language model, specifically trained on an extensive knowledge base derived from Ethereum-related documentation. The process begins with a comprehensive traversal of the documentation available on the Ethereum.org website, which covers various aspects of the Ethereum ecosystem.",
    "summary": "A gaia node consisting of Qwen model trained on Ethereum documentation"
  },
  {
    "title": "Miam Miam Chef Ai",
    "url": "https://ethglobal.com/showcase/miam-miam-chef-ai-kj1nv",
    "description": "Project DescriptionMiam Miam Chef AI is an AI-powered meal planner that creates personalized weekly menus based on dietary needs, preferences, and nutrition goals. Built with Eliza and Autonome. The next upgrade will be to have tokenized rewards for user who keep their recipes healthy. The user can login using privy then discuss with the chef some recipes he/she would love to have.How it's MadeMiam Miam Chef AI is built using a combination of AI, Web3, and decentralized automation, leveraging Eliza and Autonome as core components. The system is designed to provide personalized weekly meal plans while integrating blockchain-based incentives for healthy eating. At its core, Eliza powers the AI’s natural language interactions, allowing users to communicate seamlessly with the meal planner in a way that feels intuitive and engaging. This ensures users receive context-aware meal suggestions and nutritional advice tailored to their dietary needs. Autonome plays a key role in managing the autonomous execution of meal planning tasks, ensuring that Miam Miam Chef AI can operate efficiently without centralized control. This allows the system to scale, offering smart meal recommendations and adjusting based on real-time user preferences. For the backend, the project uses a lightweight AI engine trained on extensive recipe, nutrition, and ingredient data, enabling it to generate meal plans that balance flavor, nutrition, and variety. The AI considers dietary restrictions, personal preferences, and available ingredients when crafting meal suggestions.",
    "summary": "Miam Miam Chef AI is your AI-powered meal planner, crafting personalized weekly menus with smart nutrition and Web3 integration. Say goodbye to meal stress and hello to effortless, delicious eating—tailored just for you."
  },
  {
    "title": "Deffi",
    "url": "https://ethglobal.com/showcase/deffi-gaf8s",
    "description": "Project DescriptionDeffi is DeFi portfolio manager that makes DeFi accessible to everyone. Deffi consists of two main agents: Onboarding agent. Which personalizes the user experience based on their risk tolerance and investment goals. Portfolio Manager agent. Which helps the user manage their portfolio and make investment decisions. Portfolio Manager has its own tools and can help the user itself: Wallet management tools - ask address, balance, send and receive native token, send and receive ERC20 tokens Defi protocols interaction tools - e.g swap, deposit USDC to Morpho vault, etc. Also he can hire other agents from pre-built set of agents or in future from agents App Store: Pre-built agents which are currently available: Defi strategies explanation agent - explain how a particular DeFi strategy works, a brief information about protocols involved (TVL, audits, twitter), risks and rewards Defi strategies monitoring agent 📱 Automated daily reports aggregating insights from DeFi-focused Telegram channels and on-chain data 🔔 Configurable alerts for important DeFi events and opportunities 2 and 3 implemented in a companion bot: Companion bot link: Companion bot repo: Test channelHow it's MadeMain app Repo link: Technical Stack: Coinbase AgentKit for AI agent orchestration and DeFi interactions, customized for using on the frontend. Tools: walletActionProvider, customized Morpho actions provider, Aave actions Provider started Coinbase Smart wallet for secure wallet management on the frontend, transactions batching and paying gas in USDC Base network (mainnet + Sepolia testnet) as primary blockchain LangChain for natural language processing React/TypeScript+Vite frontend Coinbase offramp for wallet top up using fiat and paying for LLM requests in the future. Companion bot with DEFI Strategies explanation and monitoring agents: repo link: how it works We've been using AWS Bedrock as our core AI infrastructure for it, leveraging several key AWS technologies and integrations: Core Architecture: Amazon Bedrock for LLM orchestration and RAG (Retrieval Augmented Generation) Custom Knowledge Base built on AWS to store DeFi protocols data and historical strategies AWS Lambda for serverless compute DynamoDB for real-time data storage Amazon SNS for notifications Key Technical Components: LLM Integration: Used Bedrock's Claude model for strategy analysis and risk assessment Implemented custom prompt engineering for DeFi-specific analysis Built RAG system to provide context from historical data Data Processing Pipeline: Created custom Knowledge Base using Bedrock KB to store: Protocol TVL data Historical strategies Risk metrics Audit reports Implemented real-time updates using DynamoDB streams Multi-Language Support: Leveraged Bedrock's multilingual capabilities for translation Built custom tokenizers for DeFi-specific terminology Integration Layer: Built custom connectors for: Telegram API DeFi Llama API Protocol APIs Notable Technical Achievements: Developed a custom RAG implementation that combines real-time DeFi data with historical analysis Created an efficient caching system for frequently accessed protocol data Built a flexible plugin architecture for easy integration of new protocols The most \"hacky\" but effective solution was our custom prompt engineering system that dynamically generates context-aware prompts based on the type of DeFi strategy being analyzed, significantly improving the accuracy of the analysis.",
    "summary": "A DeFi portfolio management app powered by AI agents that helps users learn and invest in decentralized finance"
  },
  {
    "title": "Deffi",
    "url": "https://ethglobal.com/showcase/deffi-gaf8s",
    "description": "Project DescriptionDeffi is DeFi portfolio manager that makes DeFi accessible to everyone. Deffi consists of two main agents: Onboarding agent. Which personalizes the user experience based on their risk tolerance and investment goals. Portfolio Manager agent. Which helps the user manage their portfolio and make investment decisions. Portfolio Manager has its own tools and can help the user itself: Wallet management tools - ask address, balance, send and receive native token, send and receive ERC20 tokens Defi protocols interaction tools - e.g swap, deposit USDC to Morpho vault, etc. Also he can hire other agents from pre-built set of agents or in future from agents App Store: Pre-built agents which are currently available: Defi strategies explanation agent - explain how a particular DeFi strategy works, a brief information about protocols involved (TVL, audits, twitter), risks and rewards Defi strategies monitoring agent 📱 Automated daily reports aggregating insights from DeFi-focused Telegram channels and on-chain data 🔔 Configurable alerts for important DeFi events and opportunities 2 and 3 implemented in a companion bot: Companion bot link: Companion bot repo: Test channelHow it's MadeMain app Repo link: Technical Stack: Coinbase AgentKit for AI agent orchestration and DeFi interactions, customized for using on the frontend. Tools: walletActionProvider, customized Morpho actions provider, Aave actions Provider started Coinbase Smart wallet for secure wallet management on the frontend, transactions batching and paying gas in USDC Base network (mainnet + Sepolia testnet) as primary blockchain LangChain for natural language processing React/TypeScript+Vite frontend Coinbase offramp for wallet top up using fiat and paying for LLM requests in the future. Companion bot with DEFI Strategies explanation and monitoring agents: repo link: how it works We've been using AWS Bedrock as our core AI infrastructure for it, leveraging several key AWS technologies and integrations: Core Architecture: Amazon Bedrock for LLM orchestration and RAG (Retrieval Augmented Generation) Custom Knowledge Base built on AWS to store DeFi protocols data and historical strategies AWS Lambda for serverless compute DynamoDB for real-time data storage Amazon SNS for notifications Key Technical Components: LLM Integration: Used Bedrock's Claude model for strategy analysis and risk assessment Implemented custom prompt engineering for DeFi-specific analysis Built RAG system to provide context from historical data Data Processing Pipeline: Created custom Knowledge Base using Bedrock KB to store: Protocol TVL data Historical strategies Risk metrics Audit reports Implemented real-time updates using DynamoDB streams Multi-Language Support: Leveraged Bedrock's multilingual capabilities for translation Built custom tokenizers for DeFi-specific terminology Integration Layer: Built custom connectors for: Telegram API DeFi Llama API Protocol APIs Notable Technical Achievements: Developed a custom RAG implementation that combines real-time DeFi data with historical analysis Created an efficient caching system for frequently accessed protocol data Built a flexible plugin architecture for easy integration of new protocols The most \"hacky\" but effective solution was our custom prompt engineering system that dynamically generates context-aware prompts based on the type of DeFi strategy being analyzed, significantly improving the accuracy of the analysis.",
    "summary": "A DeFi portfolio management app powered by AI agents that helps users learn and invest in decentralized finance"
  },
  {
    "title": "Smol Universe",
    "url": "https://ethglobal.com/showcase/smol-universe-nqh0z",
    "description": "Project DescriptionThis is like a world simulation game. Every character's personality is cloned from a twitter profile, Every character has a web3 wallet and have tools they can use, like calling APIs to create images, send money to others, mint NFTs and lots of other types of actions. I used this project to experiment with prompts, storytelling, API integrations, memory management, data visualizations, micro-animations, testing how good AI is at making humor... I learned how to use permit() so there's a government account that covers the gas for all the citizens in the game, I'm not sure if i'll launch on mainnet. Maybe i need more feedback first. I'm really thankful for this week because i had lots of fun building this, and made some friends on Discord too. Please if you check it let me know what you think!!How it's MadeFrontend: NextJS, tailwindcss, shadcnui, framer-motion, react-spring, vercel-og for social cards web2 backend: postgres/supabase, nextjs api routes, hosted on vercel web3 infrastructure: hardhat, ethers.js. alchemy. base sepolia testnet AI models: mostly google's gemini 2.0 flash + thinking APIs: Replicate, Gliff",
    "summary": "smol universe is a world simulation full of ai clones of twitter people, each own with money they can use to improve in the game and \"live experiences\", they can tweet, travel, create NFTs, find a job, go bankrupt... crazy stuff! ( smoluniverse.com )"
  },
  {
    "title": "Trivia Tokens",
    "url": "https://ethglobal.com/showcase/trivia-tokens-wmy7r",
    "description": "Project DescriptionTrivia Token is the world's first AI-powered play-to-earn token. In its MVP, it is a Discord bot that rewards correct open-answer trivia responses with ERC-20 tokens on Base blockchain. This bot can be added to any Discord server by a server administrator who can prompt the bot to ask themed questions. Server users respond to the questions and instantly receive $TRIVIA rewards sent directly to their wallet. Server users and administrators can access the Trivia Token Website to stake tokens. Users benefit through financial rewards for their themed knowledge while administrators benefit from increased engagement in their communities. In its future, Trivia Token bot will be added to other social media platforms, including X and Farcaster.How it's MadeI built this project using an AI-powered code editor, Cursor Composer with Claude 3.5-Sonnet. Automated question generation and user-friendly answer validation Token economics with transaction taxes and staking requirements React-based staking interface Seamless deployment on Base, Coinbase's Ethereum L2",
    "summary": "Trivia Token is the first AI-powered play-to-earn game. It leverages an AI chatbot with payment capabilities to generate questions, validate answers, and reward players."
  },
  {
    "title": "SecretAgent",
    "url": "https://ethglobal.com/showcase/secretagent-nkz1u",
    "description": "Project DescriptionSecretAgent is a secrets management tool for crypto-native AI agents. Projects can use pay-as-you-go LLM API keys (owned by us) or bring their own Centralized secret management with integrated access logs and fleet monitoring Secrets are inserted by a proxy so agent never has direct access Supports any API, not just LLMs (placeholder keys are replaced by the proxy) Agent auth and payments powered by crypto wallets Central project wallet enables agents to pay for their own LLM access! Enables instant config updates without code changes or redeploying How it works Users authenticate with their own wallet, and create one or more projects. Each project gets its own Privy server wallet which will pay for all usage. Each project can contain multiple config items. These can be three different types: LLM - pay-as-you-go access to LLM APIs. Enables dynamic switching of provider, model, and model settings without redeployment Proxy - bring-your-own API key for any API (not just LLMs). Each key has a value and a domain matching pattern(s). Static - config that can be fetched directly by an agent. Useful for non-sensitive config or situations where simple proxying may not work. Each project has a list of allowed agents, identified by their wallet address. Authentication between the agent and API uses signed messages by the agent wallet. Admins can manage this list and immediately revoke access from a rogue agent! Our JS SDK is extremely easy to use. It needs only the project ID, agent wallet address, and a wallet signing method. Everything else happens transparently, as the proxy behaviour happens at the HTTP layer. This means users do not need to adjust their LLM or other API integrations at all. The core project has 3 parts: SecretAgent.sh web app - management console for agent config and monitoring secretagent.sh npm module - client library to integrate with agent code SecretAgent API - API that powers the web app and the client library proxy Additionally, we have example repos showing how the tool can be used with various agent toolkits.How it's MadeSecretAgent is powered by: CDP - Onchainkit, Agentkit - Used CDP heavily for wallet connect / login, integrated onramp/funding, balances, and our example agent is based on AgentKit. Also used coinbase API for checking current eth price. Base - L2 provider for payments - We chose Base as the L2 to handle payments for our platform. Integrated onramp to pay for your project uses Base and is integrated with CDP. We wanted this app to be approachable for general devs (not just crypto folks) so Base and deep Coinbase integration was a natural fit. Privy - Server wallets with policies - Each project provisions a new Privy server wallet to fund all activity. This wallet has an attached policy to make sure funds can only be used to pay for our service. Autonome - Example Agent deployment - Additionally, we built into our website UI the ability to chat with an Autonome-hosted agent. Infura - checking current balances Non-crypto tools DMNO - Secrets management Next.js - Web app TailwindCSS - Styling Hono - API framework Drizzle - Database / ORM Cloudflare Workers - API hosting The agent SDK does some patching of global nodejs fetch and https methods, so that it will intercept all requests without users needing to adjust how they call various APIs. This is tricky to get right, but it means the tool is much easier to integrate and much more flexible!",
    "summary": "SecretAgent - Secure secret management tools for crypto-native AI agents. Pay-as-you-go LLM keys allow autonomous agents to pay for their own LLM access, or bring your own keys for any API. Proxy-injected secrets give you central monitoring and a kill-switch."
  },
  {
    "title": "Defi Squadron",
    "url": "https://ethglobal.com/showcase/defi-squadron-8jk13",
    "description": "Project DescriptionThis project is a collaborative DeFi management platform that merges automated AI agents with human strategy in a natural-language interface. It combines a Telegram and X bot with a web dashboard, allowing users to deposit, withdraw, and trade tokens across their favorite exchanges seamlessly. At its core, the system leverages a state channels hub for rapid, secure, and cost-efficient on-chain transactions. Autonomous AI agents—built using the @ai16z/eliza framework—interpret user commands, manage conversation context, and guide investment decisions. The platform not only logs conversational history and strategic inputs but also enables community voting on investment strategies, ensuring a transparent and dynamic approach to portfolio management.How it's MadeThe project is built using a mix of modern web, messaging, and blockchain technologies: Bots & Messaging: The Telegram and X bots are developed with Node.js using the grammy framework. They communicate with users via natural language commands and are integrated with webhooks (tunneled securely via Ngrok) for real-time interactions. AI & Conversation Management: We use the @ai16z/eliza framework to power autonomous AI agents. These agents maintain conversational context through a custom memory system that stores user interactions as embeddings in an SQLite database. Dynamic templates—sourced from a character.json configuration—ensure that responses reflect the project’s personality. Web Dashboard: The browser-based dashboard (built with modern frontend technologies like React) provides an intuitive interface for viewing portfolio data, managing tokens, and participating in collaborative strategy sessions.",
    "summary": "A Telegram/X bot + web dashboard that lets users collaboratively manage DeFi portfolios via natural language, powered by autonomous AI agents."
  },
  {
    "title": "Agens",
    "url": "https://ethglobal.com/showcase/agens-2acxh",
    "description": "Project DescriptionMulti-agent take on analyzing and debating DAO governance proposals with human delegates. What's built? React webapp to demo the agents debating on topics/proposals for 5 rounds. Integrations with twitter and discord for public debate showdown Built another discord bot integration, can be directly added to a discord server - demo's 2 agents that can be summoned on a discord server for DAO proposal deliberation and debate, engaging also with human delegates What's Integrated? Twitter/X and Discord besides UX for debates. Base CDP kit for wallet Roadmap for continued launch and feature updates: https://daisy-beetle-8d3.notion.site/PRD-19112a33330780bfa402fcc0a9b8fa1f?pvs=4How it's MadeCurrent tech stack - AI LLM API integration [OpenAI and Anthropic, working on Gaianet] Full stack webapp with react next js and backend server with api routes and wrappers Integrate wallet for discord bots, using CDP wallet-kit [prize submission] Base integration for onchain agent activity [prize submission] API integration for discord API integration for twitter Eliza framework for discord bots with 2 characters Integrations still WIP [not submitting for prize]: Use of Gaianet models beyond OpenAI/Anthropic Use of Collabland agent-kit",
    "summary": "Make Governance Fun Again! (as the Romans did) Multi-agent take on analyzing and debating DAO governance proposals with human delegates"
  },
  {
    "title": "ETH0",
    "url": "https://ethglobal.com/showcase/eth0-gbrwz",
    "description": "Project DescriptionETH0 is an AI-powered platform designed for seamless smart contract automation on Ethereum. Users can create on-chain workflows through a drag-and-drop IDE, deploy custom AIR (AI Orchestration) smart contracts, and integrate with DeFi protocols like Aave, Lido, and Uniswap. The system connects on-chain smart contracts with AI inference models, enabling dynamic strategy execution based on real-time data. ETH0 brings AI-driven efficiency to DeFi, allowing both developers and non-technical users to create complex financial automations effortlessly.How it's MadeETH0 is built with a modular architecture combining front-end and smart contract development. The front-end uses React with a custom drag-and-drop IDE for generating Solidity smart contracts. Foundry is used for smart contract development and deployment, ensuring efficient on-chain interactions. For AI orchestration, ETH0 integrates Hugging Face models for inference, LangChain for agent framework management, and LlamaIndex to handle complex data retrieval and contextual AI reasoning. On the backend, Supabase is used as the database and authentication layer, providing real-time data sync with smart contracts. The AI inference connects seamlessly with on-chain events, allowing dynamic automation of DeFi strategies using protocols like Aave, Lido, and Uniswap. The entire stack is deployed on DigitalOcean for scalable, high-performance infrastructure.",
    "summary": "Decentralized AI orchestration for smart contracts. ETH0 lets you build, deploy, and automate on-chain strategies using AI agents integrated with DeFi protocols like Aave, Lido, and Uniswap."
  },
  {
    "title": "bouncerAI",
    "url": "https://ethglobal.com/showcase/bouncer-ai-1sd06",
    "description": "Project DescriptionBouncerAI is our answer to the chaos in token launches—no more bots, no more sniper attacks, and no more clueless speculators. Our “bouncer” uses AI to evaluate each user’s alignment with a project’s ethos, letting teams define an ideal user profile based on both vibe and knowledge. We built a “bouncer” system that acts like an AI-powered club doorman, letting projects define their ideal user profile. The bouncer asks short questions, checks a user’s vibe (are they aligned with the brand?), and verifies their knowledge (did they actually read the docs/whitepaper?). Only those who prove genuine interest, by answering voice-based questions and hitting a quality score threshold, receive a token allocation on our bonding curve. This means if you don’t truly understand the project and your vibe doesn’t match, you can’t buy tokens. By tapping into multiple AI agents running in parallel - one for knowledge, one for vibe - we generate a real-time score of user suitability. A separate “Question Agent” then refines follow-up questions to match the project’s style. We see this as a novel step for decentralized capital: merging AI gating with fair token economics. Instead of just open-season token sales, we’re offering a curated, community-first launchpad where real users - who actually care - get the lion’s share of participation. In short, BouncerAI brings focus and fairness to token launches, making them more about shared vision than mindless speculation.How it's MadeTECH STACK Design: Prototyped and refined in Figma Frontend: Built with Next.js and deployed on Vercel Backend: Implemented in Node.js (TypeScript, Express, Redis) and deployed on a Droplet Smart Contracts: Developed with Foundry and deployed on Arbitrum Database: Managed via Supabase AI Agent Framework: LangChain, hosted on Autonome FRONTEND Our frontend is built with Next.js. It was designed in Figma, then implemented with TailwindCSS for a responsive UI. Users authenticate via Privy, receiving JWT tokens that secure subsequent interactions with the backend. For visualizing token price data, we integrated the TradingView Charting Library, enabling real-time chart updates. Additionally, the bouncer avatar was designed in Spline to enhance user interaction. In the future, the avatar may dynamically react to user responses. BACKEND The backend is built in TypeScript using Node.js and Express, with Redis for session management and Supabase for data storage. Session Handling User sessions are created in Redis after verifying Privy-provided cookies, ensuring secure authentication and state management. Agent Integration Once authenticated, user interactions (including project context) are forwarded to the AI agent component. These interactions are stored, maintaining a complete record of each user’s progress. Token Allocation and Signature Generation If a user passes the bouncer (meets the required knowledge and vibe criteria), the backend determines the token allocation. A secure signature (with a nonce to prevent reuse) is generated for users to purchase tokens up to their allocated limit. Price Tracking A continuous backend script monitors all active projects, fetching and updating their current prices in Supabase. The frontend then retrieves this data to render real-time price charts using TradingView, providing users with up-to-date insights into token performance. DATABASE We use Supabase as our database to store: User metadata, Project data, Bouncer Configurations, Project interaction data, and Historical price data for every project contract. SMART CONTRACTS We use a factory smart contract to deploy a unique token contract per project. These token contracts employ a linear bonding curve, with curve parameters set at deployment via the factory contract. Liquidity Management Each token contract holds both ETH and its corresponding tokens until the bonding curve reaches maturity. Transfers are restricted to the token contract itself, preventing secondary markets from bypassing the bouncer. Core Functions buy(): Allows token purchases on the bonding curve, up to an agent-set allocation, validated via a signature. sell(): Enables users to sell tokens back at any time on the bonding curve. deployLiquidity(): Once the curve matures, anyone can deploy liquidity (ETH plus tokens) into Uniswap, finalizing the tradable market. AI AGENT FRAMEWORK Our AI bouncer uses LangChain, structured into two workflows: Interaction and Briefing, for user engagement and configuration. Interaction Workflow Parallel Evaluation Agents: Multiple evaluation agents can run in parallel. Currently, we use a Knowledge Agent and a Vibe Agent, though more can be added in the future. Each agent calculates a score and drafts a follow-up question. Subsequent Question Agent: After evaluation, a Question Agent refines the most relevant question (knowledge or vibe) based on the project's style. Adaptive Questioning: Typically 3 to 5 questions are asked, ending early if responses are weak. If the user’s score is sufficient, the system decides whether to ask a Knowledge or Vibe question next, ensuring a dynamic, context-aware flow. Briefing Workflow Project Setup: Users configure the bouncer by providing a text summary or whitepaper for knowledge checks, a list of descriptive adjectives for vibe checks, and bouncer attitude adjectives for the Question Agent’s tone and style. Prompt Engineering: Each agent’s system prompt is crafted to ensure user-defined configurations directly influence behavior, aligning the bouncer with the project’s brand, style, and difficulty. Briefing Agent (Future): A planned Briefing Agent will interact directly with users during project creation, providing a playground to fine-tune bouncer configurations.",
    "summary": "BouncerAI is a token launchpad of AI-powered ‘bouncers’ that access-restrict who can buy tokens and at what amount, based on a user’s knowledge and vibe."
  },
  {
    "title": "ETH_Tanda",
    "url": "https://ethglobal.com/showcase/eth-tanda-245sx",
    "description": "Project DescriptionThis project leverages generative AI Agent technology and Coin Base's developer resources to allow users to seamless deploy a specific smart contract agreement to form a rotating savings and credit association known as a \"Tanda\". Tandas are small groups usually comprised of family and friends who agree to pay into a pot at set intervals and award the pot to one member at a time on a rotating basis at another agreed upon interval. This concept has been brought to the blockchain to provide a communal approach to a \"rainy day\" fund in the decentralized ecosystem.How it's MadeThis project was put together using a number of technologies and frameworks. On the backend the AI Agent was put together using langchain, openAI, and coinbase's Agentkit toolset. I also made a custom tool to make it easier for the AI to finalize the smart contact with the required constructors from the user. To allow access to the generated responses from my frontend, I used fastapi to establish an endpoint that will trigger the AI to perform actions or simply respond to user queries. For the frontend I decided to use Next js due to its simplicity and resources available. A fork I came to in the project early on was how to handle conversation flow given the separation of my frontend and backend; I had the choice of storing conversations in a database or in state and pass the current chat history to the AI Agent along with the user's query to provide a conversational flow. I opted for the latter and created an input parameter in my agent's prompt to ensure it interprets queries correctly. This was a rather hacky solution given that React has a useChat hook that has great out-of-the-box functionality, however, due to my desire to avoid creating and maintaining a database for this project, I ran into issues utilizing the hook and needed a workaround. However, to my surprise, the most \"hacky\" I felt during the project was when working with the smart contract template, and sandboxing with CoinBase's agent toolkit. While the toolkit offers a robust set of tools, under the hood they can be tricky to work with. Specifically, using the smart contract deployment tool to deploy arbitrary contracts. I tested out the API by invoking manual tool calls passing in the required parameters in an iterative process that was not for the faint at heart to understand how to best carry out the contract creation step. After learning solidity, and creating several contract examples, I understood how specific and intentional one needs to be when drafting contracts, so I didn't want to risk unintended terms being added to a contract so I opted to create a template creation tool to ensure the consistency of these agreements allowing for constructors to act as parameters for the AI to finalize the contract code in the required input JSON format. However, this was still not enough as the AI was slightly reformatting template text when submitting to the contract deployment tool resulting in inconsistent performance. To avoid this, I had to create a custom tool that nested both the template creation function, and the contract deployment tool from CDP's tool set to ensure that when our agent input the parameters from the user, the contract would be finalized in the template, and deployed in one step to any possible adjustments that would result in a failure for the contract to deploy. One item that I felt required a considerable amount of Additionally, I also used remix to develop the contract template structure. While the development was surprisingly easier to pick up on than I imagine.",
    "summary": "AI Agent that leverages smart contracts to create Tandas (a rotating credit association) on behalf of users, and deploying the contract."
  },
  {
    "title": "SentryBlocksAI",
    "url": "https://ethglobal.com/showcase/sentryblocksai-n2my0",
    "description": "Project DescriptionSentryBlocksAI is an AI-powered tool designed to secure smart contracts and blockchain applications. As blockchain technology becomes more widely adopted, smart contract vulnerabilities become a major security concern. SentryBlocksAI addresses this by using advanced artificial intelligence to audit smart contracts for potential risks and security flaws, ensuring that they are safe from malicious attacks, bugs, and exploits. How It Works: SentryBlocksAI uses artificial intelligence (AI) to scan and protect smart contracts. A smart contract is a self-executing program on the blockchain that can automatically carry out tasks like sending tokens or managing data. But, just like any software, smart contracts can have bugs or weaknesses that hackers can exploit. 1. Smart Contract Scanning: The AI automatically looks through the code of your smart contract, checking for errors or security risks that could be dangerous. 2. Real-Time Monitoring: It constantly watches the blockchain for any suspicious activity, like unusual changes or attempts to break the contract, and alerts you right away. 3. Learning from the Past: As you use it more, SentryBlocksAI gets better at spotting new types of problems by learning from previous scans. Features: 1. Automatic Scanning: SentryBlocksAI checks your smart contract for problems, like bugs, security holes, or code that could let hackers steal data or funds. 2. Real-Time Alerts: It constantly keeps an eye on your contracts and sends you warnings if anything risky happens, so you can fix it quickly. 3. AI Power: The more you use it, the smarter it gets. It learns from past issues to improve its detection of new problems. 4. Easy-to-Understand Reports: After scanning, SentryBlocksAI gives you a simple report with a list of any issues it found and tips on how to fix them. In short, SentryBlocksAI helps make sure your blockchain projects are safe by checking for problems, watching for suspicious activity, and giving you clear steps to keep everything secure.How it's MadeDeveloping SentryBlocksAI involved integrating various technologies to create a seamless and efficient application. For the frontend, we utilized React, a JavaScript library that enabled us to build a dynamic and responsive user interface, enhancing the overall user experience. On the backend, we implemented Node.js, allowing for efficient handling of server-side operations and facilitating smooth communication between the client and server. To manage and store data effectively, we chose MongoDB, a NoSQL database known for its scalability and flexibility, which is essential for handling large datasets. Incorporating machine learning models into the system enabled us to analyze data intelligently, providing users with insightful analytics and predictions. Security was a top priority; therefore, we implemented robust encryption protocols to ensure that user data remains protected and confidential. Leveraging Amazon Web Services (AWS) provided us with reliable cloud infrastructure, ensuring that the application remains scalable and available to users at all times. A notable feature of SentryBlocksAI is its real-time data processing capability, achieved through the use of WebSockets. This allows users to receive instant updates without the need to refresh their browsers, ensuring timely access to critical information.",
    "summary": "SentryBlocksAI uses AI to check and protect smart contracts from security risks. It scans for vulnerabilities and helps keep your blockchain projects and smart contracts interaction safe. Watch. Detect. Secure. 🛡️"
  },
  {
    "title": "seer.ai",
    "url": "https://ethglobal.com/showcase/seer-ai-osbf1",
    "description": "Project DescriptionOur project harnesses AI agents powered by Elisa OS and CDP AgentKit to deliver comprehensive NFT analytics with a focus on trading profitability for creators, collectors, and marketplaces. The platform aggregates and analyzes real-time data from multiple blockchains to provide insights into market trends, ownership history, and price fluctuations. By using predictive modeling and AI-driven anomaly detection, it identifies patterns such as wash trading, price manipulation, and emerging trends, helping users optimize their trading strategies. The profitability analysis feature tracks individual NFT performance, calculates returns on investment, and suggests optimal buying/selling windows to maximize gains. Leveraging Elisa OS for seamless agent orchestration and CDP AgentKit for advanced data processing, the platform delivers personalized insights tailored to user behavior and portfolio dynamics. The AI agents analyze historical trading data to forecast future market movements and identify undervalued NFTs with high profit potential. Customizable dashboards display profitability metrics, portfolio growth, and risk assessments, enabling users to make data-driven decisions. This innovative solution transforms raw blockchain data into actionable intelligence, helping users not just track, but strategically enhance their NFT trading profitability in a rapidly evolving digital asset ecosystem.How it's MadeMade use of CDP's AgentKit for it's ability to call transactions through NLP chat. Made use of Onchainkit from coinbase as well to integrate UI components with our chat from ElizaOS and AgenKit. Onchainkit helped in ready made UI components and wallet management through their SDK and Agenkit to integrate transaction functionalities with ElizaOS.",
    "summary": "NFT trading application powered by AI agents to help people get into the world of NFT investin!g"
  },
  {
    "title": "AutoDAO",
    "url": "https://ethglobal.com/showcase/autodao-qc3pt",
    "description": "Project DescriptionAutoDao is a tool for DAOs that simplifies the active participation of members in the community. Users can explain their needs and ambitions by chatting with an AI agent, which can propose solutions or inquire further details from the user. If the Agent decides the information is sufficient, it will then register an appropriate proposal on the DAO contract, which, upon approval of the majority of the voters, will automatically execute concrete on-chain actions to implement the user's desires. In our current implementation, we imagined a condomiunium where the agent substitutes the administrator. Based on the current problem stated by the user, the Agent can create proposals that, upon approval, imply sending a payment to a specific address that the agent must choose among an address book of professionals (e.g. plumber, electrician,...)How it's MadeWe have used the following stack: Vue for the frontend, Express and MongoDb for the backend, AgentKit from CDP, as a Blockchain we have used a testnet Base Sepolia. In the database we store the information about the proposal we need to vote for. And we also store the disabled proposals. CDP AgentKit allows our Agent to access a blockchain functionality without us reinventing the wheel. Thanks to this toolkit our agent can create proposal, create wallets (if not created) and interact with the blockchain.",
    "summary": "AutoDAO enables the members of a community to chat with an AI agent that translates their needs into a correctly structured proposal that is automatically posted for voting. This way everyone can participate and be represented."
  },
  {
    "title": "Orion",
    "url": "https://ethglobal.com/showcase/orion-6h24h",
    "description": "Project DescriptionOur project, Orion, is a next-generation Web3 AI companion that simplifies managing your digital life. By connecting your social accounts and Google & Gears, Orion gathers your tweets and profile data to build a dynamic, personalized profile. Using AI-driven sentiment analysis, it then offers smart recommendations for your work, events, and health. A custom plugin lets our Eliza Agent call a browser-based interface for advanced tasks, and a voice-activated holographic agent allows you to trigger transactions with simple voice commands. All transactions are secured with agentic wallets powered by Privy, giving you full control with custom spending rules.How it's Made Agentic Wallets: We use Privy for server wallets acting as agentic wallets for orion. Users can set spending limits and rules (custom policies). Custom Eliza Plugin: We built a special plugin for our Eliza Agent to call a browser-based web UI for advanced tasks. Holographic Agent: A voice-activated agent lets you trigger transactions with voice commands. Sentiment Analysis: Our tool scans your social/onchain data to build a dynamic character profile that fits your interests. Tech Stack: The project is built with React, Node.js, Express, and blockchain technology. AI powered by OpenAI GPT-4 creates the profiles, while state channels and custom oracles ensure fast and secure transactions.",
    "summary": "Your Web3 AI Companion! Onboard with socials, track events, trade smarter, and stay fit with AI & blockchain. Secure, seamless, and built for the future. Ready to level up? 🔥"
  },
  {
    "title": "Viralyzer",
    "url": "https://ethglobal.com/showcase/viralyzer-u7czp",
    "description": "Project DescriptionAI-Powered Social Monetization: Automating Engagement with Web3 & AgentKit This project introduces a fully automated engagement monetization system that turns Twitter activity into real Web3 rewards—NFTs and ERC-20 tokens. Powered by AI, Coinbase AgentKit, and Base L2, this system allows creators to post tweets, track engagement, and distribute onchain incentives—all without manual intervention. Key Features: ✅ AI-generated tweet content & images (DALL-E) ✅ IPFS Metadata & NFT Minting (via Pinata & AgentKit) ✅ Token Deployment on Base L2 (via Coinbase Developer Platform) ✅ Live Twitter Engagement Tracking (likes, retweets, comments) ✅ Automated Reward Distribution (ERC-20 tokens to engaged users, NFTs to commenters) 📢 Demo in Action: 1️⃣ The AI agent tweets & posts an image → https://x.com/0xReymon/status/1888629586399031330 2️⃣ NFT Metadata Generated → https://coffee-worrying-swallow-807.mypinata.cloud/ipfs/QmbDt42PmwVL4gyNGofMaso873P3Rkjiq8s4FTDmvFDacp 3️⃣ ERC-20 Token Deployed → https://sepolia.basescan.org/tx/0xfec82c8a91418088478d790f08ab2160c550eac248c0318f613bdb0273ad4cbf 4️⃣ Engagement tracked & rewards distributed This system creates a circular economy where engagement = value, and turns followers into active participants in the creator’s digital ecosystem. No manual rewards, no middlemen—just pure, AI-powered Web3 automation!How it's MadeStack: AI, Blockchain, and Agentic Automation We built this project using a modular pipeline that seamlessly integrates AI-generated content, Twitter engagement tracking, and Web3 onchain interactions. 🚀 Step-by-Step Execution Flow 🔹 Step 1: AI-Generated Tweet & Image Uses OpenAI's DALL-E to create a unique image. AI generates tweet content based on trending Web3/AI topics. Posts the tweet via Twitter API (OAuth 2.0). 🔹 Step 2: Uploading Metadata to IPFS The tweet content & image are uploaded to Pinata (IPFS). Creates an immutable, decentralized NFT metadata file. 🔹 Step 3: NFT & Token Deployment on Base L2 Uses Coinbase Developer Platform (CDP AgentKit) to deploy an ERC-20 token & mint an NFT. Deployed Token Transaction: Base L2 NFT Metadata: IPFS Metadata 🔹 Step 4: Engagement Tracking & Wallet Address Extraction Twitter API v2 tracks likes, retweets, and comments. Wallet addresses extracted from comments for NFT rewards. 🔹 Step 5: Reward Distribution ERC-20 tokens sent to engaged users (likes, retweets). NFT randomly awarded to a commenter. Executed fully on-chain via AgentKit (no manual transactions). 💡 Why AgentKit & Base L2? 🔹 Gasless & cost-effective token deployments. 🔹 Seamless agentic execution with programmable automation. 🔹 Abstracts complex Web3 interactions into simple API calls. 🔹 Fully on-chain & decentralized—no intermediaries.",
    "summary": "An AI-powered agent that analyzes social engagement, mints dynamic NFTs, and distributes tokens to incentivize viral content. Integrated with Coinbase AgentKit & Base for seamless onchain interactions."
  },
  {
    "title": "EchoFi",
    "url": "https://ethglobal.com/showcase/echofi-7ibn4",
    "description": "Project DescriptionEchoFi is a next-generation, AI-powered DeFi assistant that redefines how users interact with blockchain and digital assets. Designed to simplify complex decentralized finance operations, EchoFi harnesses a suite of advanced technologies and integrations to offer a seamless, secure, and intuitive user experience. Below is an in-depth overview of what EchoFi offers: Core Functionality and User Experience Voice-Activated and Multilingual Interface: EchoFi enables users to communicate naturally through voice commands. With its advanced speech generation module—powered by the Eigen Layer AVS Hyperbolic system—the platform translates spoken language into precise actions. This system is designed for hyper-realistic, multilingual interactions, ensuring that users from various linguistic backgrounds (e.g., English, Hindi, Chinese, Dutch, and more) can access DeFi services without any barriers. Real-Time Asset Management and Trading: At its core, EchoFi is built to manage digital assets, execute trades, and facilitate transactions across the blockchain ecosystem. The system leverages real-time market data and sophisticated AI algorithms to analyze market trends and execute high-speed trades automatically, reducing the need for manual intervention while optimizing performance. Technical Architecture and Key Components Base Network & Agent Kit: EchoFi is built primarily on the Base Network, which offers a robust foundation with low transaction fees and high throughput. The Agent Kit is a specialized toolkit integrated within EchoFi that facilitates the execution of trades and transactions directly on the Base Network. This kit is finely tuned to ensure secure, rapid, and cost-effective operations, capitalizing on the Base Network’s strengths. Eigen Layer AVS Hyperbolic – Advanced Speech Generation: This cutting-edge component is responsible for converting user voice commands into actionable tasks. The Eigen Layer AVS Hyperbolic system employs advanced neural network models to generate natural, context-aware speech output. Its hyperbolic algorithms are engineered to handle the nuances of human speech, providing an engaging and highly responsive conversational interface. Autonome – AI Agent Hosting Infrastructure: All of EchoFi’s AI agents, which handle tasks ranging from trading to token analysis, are hosted on Autonome. This infrastructure is purpose-built for decentralized AI applications, ensuring maximum uptime, scalability, and rapid response. Autonome guarantees that each agent is continuously monitored and maintained, providing the reliability needed for real-time financial operations. Covalent Framework – Unified API Integration: To seamlessly connect and orchestrate multiple AI agents across diverse blockchain networks, EchoFi leverages the Covalent framework. Covalent’s unified API platform enables EchoFi to integrate data and execute trades across various networks efficiently. This framework ensures that AI agents work in concert to deliver consistent, accurate, and real-time trading capabilities, regardless of the underlying blockchain. Detailed Operational Workflow User Input & Voice Processing: Users interact with EchoFi via natural language—either through voice or text. The Eigen Layer AVS Hyperbolic module processes these inputs, converting them into structured commands. Command Interpretation & Routing: The Command Processing Engine interprets the intent of each command. Depending on the request, it routes the command to the appropriate module (e.g., trading, token creation, asset management). Execution on the Base Network: For trade execution and transactions, the Agent Kit operates on the Base Network, ensuring rapid and low-cost execution. This is particularly critical for time-sensitive trading operations and real-time asset management. AI Agent Orchestration via Covalent: Multiple AI agents—each specializing in different functions like token analysis, market prediction, and security checks—are connected using the Covalent framework. These agents coordinate seamlessly to fetch data, validate transactions, and optimize trade execution across multiple blockchain networks. Response & Feedback: Once the command is executed, the system generates real-time feedback. The Eigen Layer AVS Hyperbolic then communicates the results back to the user in their preferred language, ensuring a fluid and interactive experience. Additional Features and Future Roadmap Token Analysis and Meme Coin Creation: EchoFi isn’t just about trading; it also offers innovative tools for token analysis, rug pull detection, and even meme coin creation. Users can generate new tokens based on market trends, and the platform provides a detailed security analysis to safeguard investments. Scalability and Future Integrations: Multi-Chain Expansion: While EchoFi currently emphasizes the Base Network, plans are underway to integrate additional blockchains, broadening its ecosystem and allowing even more flexible asset management. Enhanced AI Capabilities: Continuous improvements in AI algorithms will further refine market predictions, personalized trading strategies, and risk management. Mobile and Web Applications: Future updates will include dedicated mobile and web apps, ensuring that EchoFi’s capabilities are accessible on all devices. Community and Developer Ecosystem: EchoFi aims to foster a community of developers and users by providing APIs and SDKs for custom integrations and further innovation in the DeFi space. Conclusion EchoFi represents a comprehensive solution that bridges the complexities of decentralized finance with the accessibility of modern AI technology. By prioritizing the Base Network for high-performance transactions, leveraging the Agent Kit for secure trade execution, and integrating advanced voice interaction through the Eigen Layer AVS Hyperbolic system, EchoFi delivers a revolutionary user experience. The robust hosting provided by Autonome and the seamless connectivity of the Covalent framework ensure that EchoFi is not only scalable and secure but also versatile enough to operate across multiple blockchain ecosystems. Whether you’re a novice investor, a seasoned trader, or an enterprise seeking to optimize blockchain operations, EchoFi offers the tools, integrations, and intuitive interface necessary to navigate the dynamic world of DeFi. This innovative platform is set to empower millions of users, simplify complex financial operations, and pave the way for a more accessible, efficient, and secure Web3 ecosystem.How it's MadeEchoFi is built using a modular microservices architecture that combines advanced blockchain integration, AI-driven natural language processing, and real-time data orchestration. Here’s a concise overview of how it’s made: Backend & Infrastructure: We used ExpressJS for a robust backend, containerized via Docker and deployed all agents to autonome. Base Network & Agent Kit: EchoFi is primarily built on the Base Network, taking advantage of its low fees and high throughput. Our custom Agent Kit is dedicated to executing trades and transactions directly on the Base Network, ensuring fast, secure, and cost-effective operations. AI & Natural Language Processing: For converting user commands into actionable tasks, we integrate advanced services like OpenAI and Assembly AI. Our proprietary Eigen Layer AVS Hyperbolic system powers natural, multilingual speech generation, enabling users to interact with EchoFi using voice commands seamlessly. AI Agent Hosting with Autonome: All our AI agents are hosted on Autonome—a specialized platform that provides reliable, low-latency hosting for decentralized AI applications. This ensures our agents are always online and responsive. Covalent Framework Integration: To connect and orchestrate multiple AI agents across various blockchain networks, we leverage the Covalent Framework, connected all the agents to Covalent zee framework. In summary, EchoFi combines: Base Network & Agent Kit for high-speed trade execution, Eigen Layer AVS Hyperbolic for advanced voice interactions, Autonome for hosting all AI agents reliably, and Covalent Framework for seamless integration of all AI agents. This blend of technologies creates a powerful, user-friendly platform that simplifies decentralized finance, making it accessible for both beginners and experienced traders.",
    "summary": "EchoFi – the AI-powered, voice-activated DeFi assistant that empowers you to manage assets, execute trades, and launch tokens & memecoins through natural conversation."
  },
  {
    "title": "Kalesh",
    "url": "https://ethglobal.com/showcase/kalesh-or9bc",
    "description": "Project DescriptionThis project is a platform for users to join rooms to watch and bet on AI bots contesting in a roast battle against each other on hot topics. These AI bots take up famous personalities such as Elon Musk, Donald Trump, Narendra Modi and Andrew Tate. Users can create room themselves and can also join room of others users to engage with them with the help of live chat.How it's MadeOur project is built using Next.js with TailwindCSS and TypeScript for a modern and efficient frontend experience. The backend leverages Node.js and WebSockets to enable real-time conversations within rooms, ensuring an interactive and engaging user experience. For smart contract development, we used Solidity to maintain transparency and deployed the contract on Arbitrum's Sepolia testnet. The Ethers.js library was used to seamlessly integrate our smart contract with the frontend, enabling smooth blockchain interactions. To power the AI-driven roast battles, we utilized Eliza to create AI agents, giving them engaging personalities based on historical data and famous figures. These AI agents were then deployed using Autonome, providing a structured framework for dynamic interactions. The GROQ API further enhanced AI agent communication, allowing for responsive and context-aware dialogues. For user onboarding and transaction management, we integrated Privy's server wallet to facilitate a seamless bidding experience while ensuring secure transactions. Additionally, we leveraged Privy’s embedded wallet for smooth user onboarding, reducing friction in Web3 interactions. On the data side, we used MongoDB to store relevant details, ensuring efficient data retrieval and management. A particularly hacky and notable aspect of our project is that our project delivers an exceptionally smooth user experience with Privy's server wallets, eliminating private key hassles. Bidding is as simple as selecting an amount and clicking—no complex setups, no interruptions. Privy’s embedded wallet further streamlines onboarding, making Web3 feel as seamless as Web2 while ensuring security and transparency. Through the combination of AI, blockchain, and real-time interactions, our project pushes the boundaries of Web3 entertainment and user engagement.",
    "summary": "🚀 AI Debate Arena: A no-code platform where AI agents with predefined personalities (like Trump & Modi) engage in verbal battles on hot topics! 🎤🔥 Users vote & bet on winners using blockchain. Decentralized, interactive, and fun! 🗳️💰"
  },
  {
    "title": "MemecoinTrader",
    "url": "https://ethglobal.com/showcase/memecointrader-420u8",
    "description": "Project DescriptionAn AI-powered autonomous agent for crypto trading, designed to buy and sell memecoins, blue chips, and other assets by mimicking human speculation. It analyzes social media, news, charts, and market data to make informed trading decisions. Built with Coinbase’s AgentKit for autonomy, it interacts with multiple trading protocols to execute trades efficiently. Beyond trading, it monitors multiple social platforms to gauge market sentiment and identify trending assets. Additionally, it promotes the cryptocurrencies it holds, helping drive momentum and amplify market impact. 🚀🤖How it's MadeWe built this project using Coinbase's AgentKit, deploying it on Base and Autonome to ensure a fully autonomous and hosted trading agent. This setup allows the agent to run continuously without manual intervention. For market intelligence, we implemented Twitter scraping to track crypto discussions, news, and sentiment. By analyzing tweets, comments, and trends, the agent gauges market sentiment in real-time. Additionally, it scrapes CoinMarketCap for price movements, volume changes, and overall market trends, integrating this data into its decision-making process. On the trading side, the agent interacts with multiple trading protocols, executing buys and sells based on sentiment analysis, market data, and predefined strategies. One particularly hacky feature is its ability to not only trade but also promote the assets it holds, leveraging social media to create momentum and influence market dynamics. This combination of autonomy, sentiment-driven trading, and self-promotion makes the agent a unique experiment in automated speculation. 🚀🤖",
    "summary": "An autonomous agent that trades crypto, including memecoins and blue chips, mimicking human speculation with speed and efficiency. No emotions, just smart trades. 🚀🤖"
  },
  {
    "title": "DeFi-Dojo",
    "url": "https://ethglobal.com/showcase/defi-dojo-m86tb",
    "description": "Project DescriptionDeFi Dojo: The Ultimate Learn-to-Earn Platform for Mastering Decentralized Finance DeFi Dojo is a gamified, community-driven education platform designed to empower users to learn, practice, and master decentralized finance (DeFi) in a safe, interactive, and rewarding environment. Combining hands-on blockchain experiments, structured learning pathways, and tokenized incentives, the project bridges the gap between theoretical knowledge and real-world DeFi expertise. Why DeFi Dojo is Needed The DeFi ecosystem is growing exponentially, but its complexity and risks often deter newcomers. Beginners face *information overload, **fear of losing funds, and a *lack of hands-on practice. Even experienced users struggle to keep up with the fast-paced evolution of protocols and tools. DeFi Dojo addresses these challenges by providing: A Safe Learning Environment: Experiment with DeFi concepts without risking real funds. Structured Learning Paths: Step-by-step tutorials with progressive difficulty levels. Real-Time Feedback and Rewards: Earn DojoCoins (DOJO) and soulbound NFTs as proof of progress. AI-Powered Assistance: Autonome AI guides users through each level, answering questions and providing insights. Sandbox Simulations: Practice real-world DeFi strategies (e.g., yield farming, flash loans) in a controlled environment. Tutorials and Learning Pathways DeFi Dojo offers *four core tutorials, each designed to take users from beginner to advanced levels. Each tutorial is divided into **multiple levels, and users must complete all levels in a tutorial to unlock the next one. Upon completion, a *soulbound NFT is minted to their address, serving as proof of their achievement. Tutorial 1: Understanding Uniswap Objective: Learn how decentralized exchanges (DEXs) work and how to interact with them. Levels: Introduction to AMMs: Understand the basics of Automated Market Makers (AMMs). Swapping Tokens: Perform token swaps on a mock Uniswap interface. Providing Liquidity: Add and remove liquidity from a pool. Impermanent Loss: Simulate and analyze impermanent loss scenarios. Sandbox Features: Swap ETH for DojoCoins and other tokens. Control the passage of time to observe price changes. Rewards: Earn DojoCoins for completing each level. Tutorial 2: Yield Farming Objective: Master the art of earning passive income through yield farming. Levels: Introduction to Yield Farming: Learn how liquidity mining works. Staking Tokens: Stake DojoCoins in a mock farm to earn rewards. APY Calculations: Understand how APY is calculated and optimized. Risk Management: Identify and mitigate risks like rug pulls and smart contract vulnerabilities. Sandbox Features: Simulate yield farming strategies with real-time APY updates. Experiment with different staking durations and reward structures. Rewards: Earn DojoCoins and a soulbound NFT upon completion. Tutorial 3: Flash Loans Objective: Explore the power of flash loans and their use cases. Levels: Introduction to Flash Loans: Learn how flash loans work and their unique properties. Arbitrage Strategies: Execute arbitrage trades using flash loans. Collateral Swaps: Use flash loans to swap collateral in lending protocols. Risk and Security: Understand the risks and ethical considerations of flash loans. Sandbox Features: Perform flash loans on a mock Aave-like protocol. Analyze transaction outcomes and profit margins. Rewards: Earn DojoCoins and a soulbound NFT upon completion. Tutorial 4: DAOs (Decentralized Autonomous Organizations) Objective: Learn how DAOs work and how to participate in decentralized governance. Levels: Introduction to DAOs: Understand the principles of decentralized governance. Creating a DAO: Deploy a mock DAO using a no-code template. Voting and Proposals: Submit and vote on proposals within the DAO. Treasury Management: Manage a DAO treasury and allocate funds to projects. Sandbox Features: Join and interact with a mock DAO. Experiment with different governance models (e.g., token-weighted voting). Rewards: Earn DojoCoins and a soulbound NFT upon completion. Level Design and Autonome AI Integration Each tutorial level is designed to take users on a *long learning journey, aided by *Autonome AI, an intelligent assistant that provides: Step-by-Step Guidance: Detailed explanations and walkthroughs for each level. Real-Time Doubt Resolution: Chat with Autonome AI to clarify concepts or troubleshoot issues. Personalized Feedback: Receive tailored advice based on user performance. Sandbox Environment The sandbox is a simulated blockchain environment where users can: Gain DojoCoins: Earn tokens by completing tasks and challenges. Swap Tokens: Practice trading on a mock DEX. Control Time: Speed up or slow down blockchain time to observe outcomes. Perform Flash Loans: Experiment with advanced DeFi strategies. Join DAOs: Participate in decentralized governance. Data for the sandbox is fetched from The Graph using relevant subgraphs, ensuring accurate and real-time information. Contracts are deployed on Base Sepolia and Eth Sepolia for a seamless testing experience. Rewards and Incentives DojoCoins (DOJO): Earned by completing levels, staking ETH, and participating in governance. Soulbound NFTs: Minted upon tutorial completion, serving as proof of achievement. APY on Staked Assets: Grow your DojoCoins by staking them in the DojoFarm. Conclusion DeFi Dojo is more than just a learning platform—it’s a gateway to the future of finance. Combining education, gamification, and decentralized governance empowers users to become confident DeFi builders. Whether you’re a beginner or an expert, DeFi Dojo provides the tools, guidance, and community support you need to thrive in the decentralized economy. Join the Dojo. Master DeFi.How it's MadeHow It’s Made: The Technical Architecture and Development of DeFi Dojo DeFi Dojo is a meticulously crafted, gamified education platform designed to democratize access to decentralized finance (DeFi) knowledge. Its development leverages cutting-edge technologies, partner integrations, and innovative methodologies to create a seamless, interactive, and rewarding learning experience. Below, we delve into the technical architecture, tools, and partnerships that brought this ambitious project to life. Core Technologies Used The foundation of DeFi Dojo rests on a combination of blockchain protocols, decentralized infrastructure, and AI-driven tools. These components work in harmony to deliver an immersive and educational experience: a. Blockchain Networks Base Sepolia and Ethereum Sepolia Testnets : The platform operates on these testnets to provide users with a safe, sandboxed environment for experimentation. These networks allow users to interact with smart contracts without risking real funds, ensuring a low-stakes learning experience. Smart Contracts : Custom-built Solidity smart contracts power key functionalities such as token minting, staking, yield farming simulations, and DAO governance. For instance: DojoCoin (DOJO) : A custom ERC-20 token serves as the platform's utility token, earned through completing tutorials and participating in activities. DojoFarm : A staking contract enables users to earn rewards by staking their DOJO tokens or simulated ETH, providing hands-on experience with yield farming mechanics. Mock Protocols : Simulated versions of Uniswap, SushiSwap, Aave, Compound, and other DeFi protocols are deployed on the testnets to replicate real-world interactions. b. The Graph Protocol Subgraph Integration : To fetch real-time blockchain data, DeFi Dojo utilizes subgraphs hosted on The Graph . These subgraphs index critical information from various DeFi protocols, including Uniswap , SushiSwap , Binance , Aave , and Compound . For example: Exchange Rates : Token prices and liquidity pool states are queried from the Uniswap V3 and SushiSwap subgraphs to simulate swaps and liquidity provision. Lending Data : Borrowing rates, collateral ratios, and user positions are fetched from the Aave and Compound subgraphs to replicate lending and borrowing scenarios. Historical Block Timestamps : Relevant subgraphs are used to retrieve block timestamps, enabling time simulation in the sandbox environment. This integration ensures accurate, up-to-date data while maintaining scalability and performance. c. Autonome AI AI-Powered Assistance : Autonome AI , a conversational AI assistant, plays a pivotal role in guiding users through the platform. Key features include: Step-by-Step Guidance : Autonome provides detailed explanations and walkthroughs for each tutorial level, ensuring users understand complex concepts. Real-Time Doubt Resolution : Users can chat with Autonome to clarify doubts or troubleshoot issues, enhancing the learning experience. Personalized Feedback : Based on user performance and progress, Autonome offers tailored advice and recommendations, fostering continuous improvement. By integrating Autonome, DeFi Dojo bridges the gap between theoretical knowledge and practical application, making learning more accessible and engaging. d. Coinbase AgentKit Seamless Onboarding and Security : Coinbase AgentKit streamlines wallet integration and transaction signing, reducing friction for new users. Benefits include: Simplified Onboarding : Users can connect their wallets effortlessly, eliminating barriers to entry. Enhanced Security : Transactions are signed securely, protecting users from potential vulnerabilities. Analytics Dashboard : Real-time insights into user progress, rewards earned, and activity metrics are provided, enabling both users and administrators to track engagement effectively. e. Frontend Framework React.js and Web3 Libraries : The frontend is built using React.js , paired with libraries like ethers.js and web3.js to interact with the blockchain. Key features include: Dynamic Interfaces : Interactive dashboards and mock DEX interfaces allow users to practice DeFi strategies. Time Simulation : A custom time-control mechanism lets users accelerate or decelerate blockchain time, simulating long-term outcomes in minutes. Responsive Design : The platform is optimized for desktop and mobile devices, ensuring accessibility for all users. 2. Partner Technologies and Their Benefits DeFi Dojo owes much of its functionality and success to strategic partnerships with leading technologies in the blockchain and AI space: a. The Graph Data Indexing and Querying : The Graph’s subgraphs enable efficient querying of blockchain data, which is crucial for simulating real-world DeFi scenarios. Without this integration, fetching and processing large datasets would be computationally expensive and slow. Specifically: Uniswap and SushiSwap Subgraphs : Used to query exchange rates, liquidity pool states, and token balances for swap and liquidity simulations. Aave and Compound Subgraphs : Provide lending and borrowing data, enabling users to experiment with lending strategies and risk management. Binance Subgraphs : Used to fetch cross-chain data and simulate centralized exchange interactions within the sandbox environment. b. Autonome AI Enhanced Learning Experience : Autonome’s conversational AI capabilities transform DeFi Dojo into an adaptive learning platform. Its ability to provide instant feedback and personalized guidance significantly improves user retention and satisfaction. c. Coinbase AgentKit User-Friendly Interactions : Coinbase’s toolkit simplifies wallet management and transaction security, addressing common pain points for newcomers. This partnership ensures that even users unfamiliar with blockchain technology can navigate the platform confidently. d. Base Scalable Infrastructure : Base , Coinbase’s Layer 2 solution, provides a cost-effective and scalable environment for deploying smart contracts. By leveraging Base Sepolia, DeFi Dojo minimizes gas fees and ensures smooth operation during high-traffic periods. 3. Notable Challenges and Hacky Solutions Building a platform as intricate as DeFi Dojo presented several challenges, some of which required creative problem-solving: a. Simulating Time Progression Challenge : Replicating the passage of time on the blockchain to demonstrate long-term effects (e.g., APY growth, impermanent loss). Solution : A custom time-scaling mechanism was implemented, allowing users to “fast-forward” blockchain time. This involved overriding timestamp calculations in smart contracts and synchronizing them with the frontend interface. b. Mocking Real-World Protocols Challenge : Creating realistic yet simplified versions of protocols like Uniswap, Aave, and Compound for educational purposes. Solution : Lightweight smart contracts were developed to mimic core functionalities without the complexity of production-grade code. These contracts were rigorously tested to ensure accuracy and reliability. c. Balancing Gamification and Education Challenge : Ensuring that gamified elements (e.g., rewards, NFTs) complement rather than overshadow the educational content. Solution : A reward system was carefully designed to incentivize learning while discouraging exploitative behavior. For example, soulbound NFTs prevent users from trading achievements, emphasizing intrinsic value over monetary gain. 4. Conclusion DeFi Dojo represents a groundbreaking fusion of blockchain technology, AI-driven assistance, and gamified learning. By leveraging partners like The Graph , Autonome AI , Coinbase AgentKit , and Base , the platform delivers a robust, scalable, and user-friendly experience. Its innovative approach to teaching DeFi not only lowers the barrier to entry but also empowers users to become confident participants in the decentralized economy. Through meticulous engineering and strategic collaborations, DeFi Dojo has successfully bridged the gap between theory and practice, setting a new standard for blockchain education. Whether you’re a beginner exploring DeFi for the first time or an experienced user honing your skills, DeFi Dojo equips you with the tools and knowledge needed to thrive in the rapidly evolving world of decentralized finance. Join the Dojo. Master DeFi.",
    "summary": "Master DeFi through AI-powered games! 🎮 Battle autonomous agents, earn NFT rewards, and learn swaps/yield farming in an arena. Powered by AI tutors, real-time data, and secure wallets. #LearnToEarn #DeFi"
  },
  {
    "title": "Streme.fun",
    "url": "https://ethglobal.com/showcase/streme-fun-4dppy",
    "description": "Project DescriptionStreme.fun Description Streme.fun enables the easy deployment of tokens with super powers by conversing with the @streme AI agent. Token launchers are all the rage these days. But when the only thing you can do with a token is sell it, you see a lot of charts that go up intially and then quickly go to (near) zero. As a solution to this, Streme coins have two super powers: streaming and staking. Powered by the Superfluid protocol, the tokens are natively streamable by the second, with no need to warp and unwrap. And as soon as you buy a Streme coin, you have the option to do stake it to earm streaming rewards by the second. Staking rewards are proportional to your share of the staked deposits: stake early to get a huge percentage of rewards stream. After buying a Streme coin, you can immediately start earning a yield with a significant APR. Staking rewards give buyers a reason to hodl for longer, reducing sell pressure. Have triple the fun when you can sell, stream, or stake. Streme Seasons As time passed, multiple seasons of Streme will introduce new parameters and/or functionality. In Season One, deployements will have the followin characteristics: 100 Billion total supply 20 Billion to staking rewards pool, streamed linearly over 365 days to stakers 1 day lock duration for staked deposits (you can unstake after 1 day) 80 Billion to Uniswap v3 pool 40% of Uniswap trading fees to the deployer, 60% to the Streme Protocol Streme User Interfaces The @streme AI agent is the primary user interface to the Streme protocol. The social feed makes interacting easy and exposes the tokens to followers of the deployer. Farcaster frames inject fuctionality directly into the social feed, facilating swapping and staking. This is where most of the fun happens. For token discovery and exposure outside of the Farcaster ecosystem, the streme.fun website provides listings and leaderboard of Streme coins with stats on trading and staking rewards. Find tokens to buy, find tokens to stake and earn yield. How it's MadeStreme consists of the following components: AI Agent interface (and related server processes and datastore) Web frontend: https://streme.fun Smart Contracts deployed to Base AI Agent: @streme The @streme AI Agent is powered by Coinbase AgentKit and OpenAI and deployed by Autonome. Users interact with the AI Agent via the @streme user on Farcaster. In future, interfacing via X and Telegram is planned. The AI agent can answer questions about Streme and ask it to deploy tokens on their behalf. The user's message request is combined details from their Farcaster profile -- including their verified Ethereum address -- to deploy a token with their chosen name and symbol, to Base Mainnet. The requesting user will earn 40% of the trading fees. The server components of Streme are hosted by Google Firebase Functions, with indexed token data store in a Firestore datastore. An API endpoint receives new Farcaster messages from a webhook susbcription provided by Neynar. User messages are then passed to the Autonome AI Agent to make an assesment of the user's intent and provide replies. If token deployment was requested, the Autonome agent extracts the name and symbol to be used for the token deployment transaction on Base Mainnet. Smart Contracts Overview Streme has a modular contract structure, calling 4 modules in sequence: Token Deployment Module. This module deploys the token and sends minted tokens back the Streme contract (usually 100% of the tokens, but this is not a requirement) Post Deploy Hooks Module (optional). If configured, the Hooks module is granted allowance for all of the tokens received by the Streme contract. The Hook can transferFrom() some of those tokens to be used for the purposes of the hook. Examples include presales distribution, requestor/team allocation, ecosystem fund allocation, community rewards, etc.. Only one Hook can be configured, but it can perfrom multiple tasks. The first season of Streme includes a Staking Hook which will enables staking of the token in exchange for streaming rewards. Liquidity Provision (LP) Module. 100% of the remaining supply owned by the Streme contract are sent (approved) to the LP Module. The first season of Streme leverages the open-source LP and LP \"locker\" code from the Clanker project, creating a single-sided LP position in a Uniswap v3 pool with all the remaining tokens, which is then locked. Post LP Hooks Module (optional). Not used in th initial version, these hooks could be used to implement an initial \"dev buy\" of the the token, or anything else that make sense, once LP has been provisioned. For each module, multiple modules can be supported concurrently, each permissioned (at least in first version). For example, there may be 3 registered (protocol approved) token factories, 2 Hooks, and 3 LP modules, and a token deployment config specifies the desired token factory, hook, and LP modules to be used for the deployment. The first season of Steme supports only one of each (and no Post LP Hook), but this structure facilitates future iteration and growth. Streme Smart Contracts The following smart contracts have been deployed to Base Mainnet: Streme.sol - The master entry point contract that is called by the AI agent to intiate token deployment. This contract is modular and thus quite simple, calling functions on 2-4 external module functions as described above. Deployed at 0xF77bD45DadD933E6B9Eb41226a4CEF018E75597c PureSuperToken.sol - Implementation contract for pure (native) Super Tokens. Pure Super Tokens are tokens that natively support Superfluid streaming and do not have to be wrapped/unwrapped to activate streaming powers. This implementation contract is cloned when a new Streme coin is deployed by the AI Agent. Note: the code for this contract is open-source code writted by the Superfluid Protocol team. Deployed at 0x49828c61a923624E22CE5b169Be2Bd650Abc9bC8 SuperTokenFactory.sol - Deploys super tokens by cloning the implementation contract above. In season, this is the Token Factory Module that is called by Streme.sol. Not to be confused with the Superfluid protocol contract with the same name. This factory pre-mints 100% of the total supply and sends it to the caller (Streme.sol). Deployed at 0xcd26DE432EBF832c654176A807b495d966a3E69C StakedToken.sol - Implementation contract for staking of Streme coins. Stakers receive these tokens 1:1 for their desposits. This contract also enforced a lock duration, which can be set for zero or more seconds (set to 1 day for Season One). Upon transfer -- include mint/burn -- this contract updates shares in the rewards pool, proportional to their staked deposits (see more below). Deployed at 0x2a6cdcB9384FA02AA99D141fa37019Cda284250e SuperfluidPool - Also know as a General Distribution Agreement Pool, a SuperfluidPool is deployed via the Superfluid protocol, to be used by the Streme Staking contracts for streaming rewards for stakers. Stakers are given shares (\"units\") in the pool proportional to their staked deposits. If you own hold 50% of the units, you will receive 50% of the total stream to the pool, with your balance updating every second. Note: the code for this contract is open-source code writted by the Superfluid Protocol team, which can be found here StakingFactory.sol - In Season One, this contract is called as the Post Deploy Hook. For each Streme coin deployment, it deploys two contracts: 1) a SuperfluidPool as described above that powers membership and streaming rewards for stakers, and 2) a StakedToken contract by cloning the implementation above. For a Streme coin with the symbol COIN, the staked token will be given the symbol stCOIN. The StakedToken contract has functions for stake and unstake (if you stake 1000 COIN, you get 1000 stCOIN). As mentioned above, in Season One there is a one day locking duration for staked deposits -- in future seasons this may be increased or decreased. Deployed at 0x293A5d47f5D76244b715ce0D0e759E0227349486 LpLockerv2.sol - This LP Locker contract holds the locked LP positions of all Uniswap v3 positions deployed by the LP Factory contract (see below). This contract also provides functions for claiming trading fees related to the LP positions. This contract has been modified from open source code written by the Clanker team. Deployed at 0xc54cb94E91c767374a2F23f0F2cEd698921AE22a LPFactory.sol - The third module, called in sequence, from the Streme.sol contract, this module creates a Uniswapv3 Pool and takes the remaining tokens and creates a single-sided LP position, which is then sent to the LP Locker, as mentioned above. As with the the LP Locker, contract has been modified from open source code written by the Clanker team. Deployed at 0xfF65a5f74798EebF87C8FdFc4e56a71B511aB5C8 The above contracts use interfaces, npm modules, and open-source code from Open Zeppelin, Uniswap, Superfluid, and Clanker. Streme.fun Web Interface The streme.fub web interface provided token discovery for traders and interfacs to trade and stake/unstake Streme coins. Hosted by Vercel, the web UI is built with Next.js, React, Viem, wagmi, and uses Privy for Ethereum wallet connections and 0x behind the scenes to enable trading of Streme coins. Example Streme Coin: $STREME $STREME contract: https://basescan.org/address/0x3b3cd21242ba44e9865b066e5ef5d1cc1030cc58 $stSTREME staking contract: https://basescan.org/address/0x93419f1c0f73b278c73085c17407794a6580deff staking rewards pool: https://explorer.superfluid.finance/base-mainnet/pools/0xa040a8564C433970D7919C441104B1d25b9eAa1c Uniswap: https://app.uniswap.org/explore/tokens/base/0x3b3cd21242ba44e9865b066e5ef5d1cc1030cc58 DEXScreener: https://dexscreener.com/base/0x9187c24a3a81618f07a9722b935617458f532737",
    "summary": "Streme.fun enables the AI Agent deployment of native streamable tokens with built-in staking rewards."
  },
  {
    "title": "Blind Notary",
    "url": "https://ethglobal.com/showcase/blind-notary-gekdn",
    "description": "Project DescriptionWeb2 eSigning solutions are widespread and convenient, but rely on trust through central authority and cannot offer universal privacy and traceability. Web3 provides many ways to sign information and prove authenticity securely, but using web3-native approaches causes friction with web3-naive counterparties. Both approaches only cover the most essential part of what goes into a typical transaction, creating the potential for data leaks by counterparties communicating out of band. Enter Blind Notary, a simple and user-friendly tool which should: Prepare a document for signing and store the template without violating privacy Ensure that network fees and such can be arranged in advance to eliminate friction Notify other signatories, granting access to document content and metadata in-band Offer AI agent interface to provide clarity and mediate doubts while keeping data private Offer a built-in secure communication channel to ensure negotiations do not leak details out of band Obtain digital signatures, keeping the entire signing flow traceable While not in scope during the hackathon, it should be possible to ensure that Blind Notary complies with applicable regulation on electronic signatures in EU (eIDAS) and US (ESIGN/UETA) jurisdictions later on by providing standard certificates of completion.How it's MadeIt currently integrates LangChain.js/LangGraph, Nillion, Coinbase CDP/AgentKit on Base chain, EigenLayer AVSs (Gaia, Hyperbolic), Vercel AI SDK, Next.js and local RAG pipeline. The chat context/history including uploaded files is stored encrypted on Nillion nilDB using their wrappers lib for increased privacy and a simple custom codec to enable storing any binary data there. The agent is a ReAct paradigm agent driven by LangChain/LangGraph and integrated with Coinbase CDP & AgentKit on Base for future payment processing (esp. something like paying for its own inference needs) and local RAG + auxiliary tools (PDF parser, chunker, embedding, vector store pipeline). Currently only the LLM inference calls are external (with choice of OpenAI as reference implementation, Hyperbolic or Gaia AVS as decentralized AI platforms; other APIs would be trivial to add, especially if OpenAI-compatible; nilAI or Galadriel looks interesting for TEE/verifiable inference). The rest of the agent runs on-premise thanks to LangChain. The UI is Next.js with shadcn/ui and Vercel AI SDK for the client-server communication. Initial UI scaffold iteration was done with v0. Since it uses LangChain and the Vercel AI SDK it should always be trivial to extend. Possible future developments: more customized & performant nilDB-based checkpointer and vector-store, more focus on cryptographic traceability, TEE and other on-chain verification. The overarching idea for Blind Notary is to be as stateless/ephemeral as possible but provide a complete solution and produce concrete artifacts which are independently verifiable outside of the \"privacy bubble\". In line with the stateless/ephemeral paradigm it currently does not store any persistent state server-side other than saving state in nilDB which is MPC-encrypted. The minimum of state necessary is client-driven. Has dark mode too I guess. 🙂",
    "summary": "Blind Notary AI agent to enable in-band identity, communication, analysis, and signing between the signatories of confidential documents"
  },
  {
    "title": "DARCQade",
    "url": "https://ethglobal.com/showcase/darcqade-bma66",
    "description": "Project DescriptionDARQade is an AI-powered GameFi arcade where players earn, trade, and use memecoins tied to unique AI-generated games. Play-to-earn meets DeFi as AI-driven, prompt-based gameplay evolves dynamically. Compete in skill-based challenges, Earn leaderboards, and own your gaming experience in this decentralized, player-driven ecosystem. In Short, a no-nonsense, Intuitive platform that essentials serves as the pump.fun moment for gamefi.How it's MadeI made this project using Python. I had to write custom methods for interacting with the ERC-20 contracts through their ABI. DARQade is a fully Decentralized application, There is no central DB for storage. I've used nillion secret vaults for storing the Private keys of the custodial accounts in the users and also the token information. The User Wallets and memecoins are primarily created on Base. The Plan is to implement Clanker in our project so that we can enable game developers to spin up their Games with liquidity from the get go. The onchAIn Agent is based on CDP's agentkit. I've created custom tools that can be used for the different functionalities.",
    "summary": "DARQade: A new arcade where AI-powered games meet meme coins! Create prompt-based games, launch unique memecoins, and level up the fun for devs and players alike. 🚀🎮"
  },
  {
    "title": "S. Y. N. X.",
    "url": "https://ethglobal.com/showcase/s-y-n-x-ua87r",
    "description": "Project DescriptionS. Y. N. X. (Self-evolving Yotascale Network eXchange) is an AI Agent Aggregator where users can interact with multiple Blockchain-based terminologies such as transfer, mint, ERC20s transfer and more. S. Y. N. X. is a initiative to solve the most critical problem of Web3 which is user-onboarding by bridging Web3 with AI. At the current level, S. Y. N. X. provides the best User Interface for seamless user interactions in the most simplistic way. At S. Y. N. X., we believe that digital products should provide the best experience to each and every user by simplifying all the tedious tasks. S. Y. N. X. provide a chat-based interaction to its user where users can perform blockchain-based tasks just by providing simple prompts such as “Transfer X amount of ETH to address 0x123…. These interactions remove the enormous amount of tasks users had to perform to do a simple transfer. S. Y. N. X. create embedded wallets as soon as user joins the platform. It create unique wallet for every user and store these details in a secured db for future interactions. S. Y. N. X. handles transaction signing on its own based on user prompts. Currently it provides basic features such as Transfer, Faucet fund request, NFT minting, Basename registration on Base Testnet and a few more. Our User Interface is our Edge, we feel that the current user-interface has the ability to hold users and make the come back and use the product. With many more features coming in near future, we want to test our product in public and check for the improvements to cater every set of user out there. We are storing wallets for a smooth prompt-based transaction, messages and chats so that user can see what transactions they have performed in past.How it's MadeHere's the Tech Stack: Nextjs. Base Testnet. CDP Agentkit. Privy Social Login. Postgres. Neon. Shadcn. We wanted to build custom agents escpecially to integrate Uniswap & other DeFi Protocols but we were stuck with Wallet Integration and Embedded Wallet creation and had to come up with a solution on our own. Currently it uses a backend to store user details alongside Wallet Details so that the user can access and use the wallet they have created on the first time and if they use real funds on mainnet, then the funds won't lost. The repo given below is the main repo for the project and has been forked from Atharva's (teammate) Github.",
    "summary": "S. Y. N. X. (Self-evolving Yottascale Network eXchange) is an AI-based Agentic Aggregator which provides DeFi, SocialFi, Analysis and many more Agents to let people use Agents through a single platform."
  },
  {
    "title": "Marp Trade",
    "url": "https://ethglobal.com/showcase/marp-trade-g0p01",
    "description": "Project DescriptionHere’s an expanded version of your project description, incorporating more details about trading strategies, risk management, and potential optimizations: Project Description: Trading Strategies for STRK Native Coin In this project, I have implemented and evaluated automated trading strategies for the STRK/USDT trading pair, using historical 15-minute interval price data. The objective is to develop a robust data-driven trading model that can identify profitable trade opportunities, optimize execution, and minimize risk in a volatile crypto market. The dataset consists of key market parameters such as open, high, low, close prices, and trading volume. These features were analyzed using technical indicators, trend analysis, and predictive modeling techniques to build a strategy that can generate effective buy/sell signals. Trading Strategies and Techniques To construct an efficient trading system, I employed multiple trading strategies, each designed to capture different aspects of market behavior: Technical Indicator-Based Trading This approach relies on widely used price and volume-based indicators to identify trade opportunities: Moving Averages (SMA & EMA): Detect short-term and long-term trend reversals. Relative Strength Index (RSI): Identifies overbought (>70) and oversold (<30) conditions. Bollinger Bands: Measures price volatility and helps identify breakout opportunities. MACD (Moving Average Convergence Divergence): Tracks momentum shifts for trend-following trades. Volume Weighted Average Price (VWAP): Ensures trades align with market liquidity trends. Momentum and Trend-Following Strategies To capitalize on market trends, I utilized: Moving Average Crossover Strategy: A short-term EMA (e.g., 9-period) crossing above a long-term EMA (e.g., 21-period) generates a buy signal, while a downward crossover triggers a sell. Ichimoku Cloud Strategy: Determines strong bullish/bearish trends by analyzing price action within the Ichimoku cloud. Mean Reversion Strategy Markets often revert to their mean value after extreme fluctuations. This approach identifies such points: RSI-Based Mean Reversion: Buy when RSI is below 30 and sell when RSI is above 70. Bollinger Bands Reversion: Buy when the price touches the lower Bollinger Band** and sell when it reaches the upper band. Breakout Trading Breakout trading takes advantage of sharp price movements after key levels are broken: Support & Resistance Breakout: Trades are executed when price breaks above resistance (buy) or below support (sell). -Volume-Confirmed Breakouts: If breakouts occur with high volume, they indicate stronger price movements. Machine Learning-Based Strategy For a more sophisticated approach, I integrated predictive models: -Regression Models (Random Forest, XGBoost): Forecast short-term price movements. LSTM (Long Short-Term Memory): A deep-learning model trained on past price sequences to predict the next price. Reinforcement Learning (RL): An AI-driven agent trained to maximize returns by dynamically adjusting trade execution based on rewards. Backtesting and Strategy Evaluation Before deploying strategies in real markets, backtesting was performed using historical STRK/USDT data: Simulated Trading: Strategies were tested against past price action. Performance Metrics: Returns, Sharpe ratio, max drawdown, and win rate were evaluated. Risk Analysis: Strategies were optimized to limit losses and maximize gains. Live Trading and Automation To integrate these strategies into a real-world automated trading bot, I implemented: Exchange API Integration: Fetching real-time STRK/USDT data using Binance API / OKX API. WebSocket Streams: Enabling real-time execution based on live market updates. Risk Management Rules: Stop-loss, take-profit, and position sizing techniques were incorporated. Strategy Optimization: Dynamic parameter tuning using historical performance data. Conclusion This research presents a multi-faceted approach to trading the STRK/USDT pair, combining technical analysis, algorithmic execution, and machine learning. The final strategy is designed to adapt to changing market conditions, improving accuracy in trade decision-making. Further enhancements could include portfolio diversification, hedging techniques, and alternative data sources (e.g., social media sentiment analysis) to refine predictions and trading performance. This version gives a detailed and structured overview of your work. Let me know if you need further refinements or additions! 🚀How it's MadeHow It's Made: The Technology Behind the Project This project is built using a combination of AI agents, blockchain smart contracts (Cairo on Starknet), and a Next.js-based frontend, creating a seamless integration between automated trading intelligence, decentralized execution, and user-friendly interfaces. AI Agents for Trading Decision-Making At the core of the trading strategy lies an AI-powered agent designed to analyze historical market data, predict trends, and execute trades autonomously. The AI model is trained using: Supervised Learning for predicting future price movements based on past trends. Reinforcement Learning (RL) to optimize trade execution by dynamically adapting to market changes. Natural Language Processing (NLP) to incorporate Twitter/X and news sentiment into trading decisions. The AI agent continuously ingests live STRK/USDT market data, processes it through predictive models, and generates buy/sell signals based on learned patterns. Tech Stack for AI Models: Python for data processing & machine learning model development. Pandas & NumPy for feature engineering and dataset handling. Scikit-learn & XGBoost for predictive analytics and decision trees. TensorFlow/PyTorch for deep learning models (LSTMs for sequence prediction). Stable-Baselines3 for RL-based trade execution optimization. Smart Contracts on Starknet (Cairo) for Decentralized Execution To ensure secure and transparent trade execution, I deployed smart contracts on Starknet, written in Cairo. These contracts handle: Automated trade execution when AI signals are triggered. On-chain order validation to prevent manipulative trading activities. Decentralized risk management, allowing users to set stop-loss and take-profit parameters on-chain. Funds custody in smart contracts, ensuring non-custodial security. By leveraging Starknet’s high-speed, low-cost transactions, the system provides scalable and efficient execution without relying on centralized exchanges. Tech Stack for Smart Contracts: Cairo (Starknet’s smart contract language) for building on-chain trading logic. Starknet.js for interacting with contracts via the Next.js frontend. Argent X / Braavos Wallets for signing transactions on the dApp. Next.js for Frontend & Real-Time Trading Interface The Next.js frontend provides an intuitive dashboard where users can: Monitor AI-generated trading signals in real-time. Connect their Starknet wallets to deposit/withdraw funds. Customize trading parameters (e.g., risk levels, investment amounts). Visualize trade analytics, performance graphs, and market trends. Tech Stack for Frontend: Next.js for SSR & optimized performance. WebSockets for live price updates and AI signal streaming. Recharts/D3.js for interactive trading charts and analytics. Tailwind CSS for responsive UI/UX design. Hacky & Innovative Implementations A few notable and hacky aspects of the project include: AI-Trained Risk Management on L2: The AI model dynamically adjusts stop-loss and take-profit levels based on historical volatility and current market sentiment, ensuring optimized trade execution. Zero-Knowledge Proofs (ZKPs) for Strategy Privacy: Instead of revealing exact trading strategies, ZKPs allow users to verify AI signals' validity without exposing proprietary models. Gas-Optimized Batch Trading: Instead of executing multiple small trades, the system bundles trades into a single Starknet transaction, significantly reducing costs. How Partner Technologies Helped Starknet’s L2 scaling drastically reduced gas fees, making automated trading affordable. AI models enabled high-frequency, data-driven decision-making, improving trade accuracy. Next.js ensured a fast and responsive UI, making the platform accessible to both novice and expert traders. Final Thoughts By combining AI agents, decentralized smart contracts, and a real-time trading interface, this project successfully integrates machine learning-driven trading strategies with on-chain execution, offering a scalable, transparent, and efficient solution for automated trading. Let me know if you need any further refinements.",
    "summary": "An innovative DeFi project, built using Starknet. It is an auto trading system on starknet."
  },
  {
    "title": "WorldBuilding",
    "url": "https://ethglobal.com/showcase/worldbuilding-aac6j",
    "description": "Project DescriptionUsers can collaborate with an AI agent trained on science fiction knowledge to co-write a story and register the IP on story protocol. When adding the story to Story Protocol the user selects the title, adds their wallet, and uploads a title image. The starting point for the writing is themes pulled form a twitter profile.How it's MadeThis project uses the collab.land starter kit, a purpose build gaianode and story protocol. Unfortunately Story Protocol's is just getting ready for mainnet launch and the dev testnet wasn't stable. There is no public faucet yet. Story Protocol Explorer with IP registered Friday evening: https://explorer.story.foundation/collections/0x0274A13dF70f4c1BB7f5C87b83Ea2a71660b3342 Agent The agent has been given a special knowledge base. This knowledge base is composed of science fiction literature taken from hugging face. The books are chunked using a semantic chunker (llama index). This is then used to create the snapshot. I used qwen1.5b model as I have a M1 with 8GB and larger models crashed the computer. The user is interacting with the agent in two moments: At the start the user is given the bot a twitter url. The agent is analyzing this for themes. The agent is writing a story based on the theme the user selected. This is a three step process: Write the story --> provide edit suggestion --> rewrite the story.",
    "summary": "Telegram writing bot that registers story elements on Story Protocol"
  },
  {
    "title": "Minerva",
    "url": "https://ethglobal.com/showcase/minerva-bhi46",
    "description": "Project DescriptionMinerva is an autonomous DAO voting system. The primary objective of this project is to enable AI agents to participate in DAO governance voting on behalf of their creators. These agents make decisions based on the character profile of the creator. Users can either accept the agent's vote or challenge it if the decision doesn't align with their expectations. They retain the flexibility to request the agent to re-evaluate decisions at any time. Project Workflow: Users create an account on https://minerva.vote Users can either: Create a private, personalized agent Delegate voting power to an existing public agent When creating a private agent, the character profile can be generated through two methods: a. Analysis of a Twitter profile (which doesn't necessarily need to be the user's own) b. User-selected characteristic tags The system leverages ChatGPT 3.5 via OpenAI API to analyze Twitter posts and generate character profiles. This is implemented in the createTwitterCharacterProfile() method: https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/openai.js#L8 The agent is created using either the Twitter-based profile or selected tags: https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/controllers/agentController.js#L185 Once created, the agent is ready for voting operations. The server continuously monitors snapshot.org for new proposals. When detected, proposals are indexed and enhanced with AI-generated summaries before being queued for decision-making. The voting process involves multiple components: The Gaia node makes the final decision The CDP agent facilitates this by: Sending prompts to the Gaia node Processing the decision results Executing votes using a Privy wallet Relevant implementations: Snapshot integration: https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/snapshot.js#L172 https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/snapshot.js#L204 Vote parsing: https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/VoteParser.js#L150 https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/VoteParser.js#L207 Privy wallet voting: https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/scheduler.js#L111 Voting outcomes are: Displayed on the website Distributed as notifications to subscribers via Telegram and Discord https://github.com/MinervaGov/minerva_main/blob/5cf9583d95b9004a80c589161c003741237de0aa/server/src/utils/VoteParser.js#L220 Agent owners retain full control and can: Request decision re-evaluation Override decisions completely How it's MadeCore Technologies Gaia (Knowledge Base & LLM): Gaia serves as the knowledge repository and reasoning engine for Minerva. It enables agents to process DAO proposals, understand context, and make informed voting decisions based on historical data and predefined rules. CDP Agent Kit + Privy's Server Wallet: The CDP Agent Kit provides each agent with a dedicated wallet, enabling automated transaction execution. Inside the CDP Agent Kit, Privy’s server wallet is used to securely store these wallets in a Trusted Execution Environment (TEE), removing the need for manual private key management. Snapshot Governance Execution: The system directly interacts with Snapshot Proposals to cast votes, ensuring transparency and accountability. Features Autonomous Decision-Making: Minerva uses LLM-driven reasoning for proposal evaluation, making voting decisions without human intervention. Scalable Agent Infrastructure: The system dynamically provisions wallets for agents, allowing seamless expansion across multiple DAOs.",
    "summary": "The Minerva is an Agentic DAO Voting System that enables users to create personalized voting bots based on their Twitter profile."
  },
  {
    "title": "Datrix",
    "url": "https://ethglobal.com/showcase/datrix-kod1y",
    "description": "Project DescriptionThe Web3 Data Access Problem: Web3 developers and data analysts face several significant challenges when trying to access and analyse cross-protocol blockchain data: Discovery Complexity -Must manually search through hundreds of subgraphs -No standardised way to find the most reliable data sources -Different versions of protocols across multiple chains -Time spent researching instead of building Integration Overhead -Each protocol has unique schema structures -Need to write custom queries for each subgraph -Different naming conventions across protocols -Manual mapping required between different data formats Maintenance Burden Subgraphs get updated or deprecated Protocols deploy to new chains Schema changes break existing integrations Constant monitoring needed Technical Requirements Deep knowledge of GraphQL required Understanding of each protocol's data structure Expertise in data transformation Cross-chain data aggregation complexity This impacts time to market for apps, risk of using outdated or unreliable data sources The solution - Datrix: An intelligent system that autonomously curates and combines web3 data sources based on natural language requests. This agent-based platform simplifies access to cross-chain data by automatically analysing user requirements and orchestrating relevant subgraph combinations from The Graph protocol. 🤖 Key Features -Natural language processing for web3 data requirements with semantic understanding -Autonomous data source discovery and combination with reliability scoring -Multi-chain data integration with automatic schema mapping -Dynamic subgraph selection and orchestration with version control -Real-time data aggregation capabilities -Custom API endpoint generation 💡 How It Works Users describe their data needs in plain English AI agent analyzes the request and identifies required data points System automatically discovers and evaluates relevant subgraphs Data sources are combined to create a unified dataset Results are delivered in a ready-to-use format 🎯 Perfect For -DeFi developers needing multi-chain data -Data analysts working with web3 metrics -AI/ML practitioners building web3-powered applications -Researchers requiring comprehensive blockchain data -Protocol teams tracking ecosystem metrics -Market analysts requiring cross-protocol insights 🔑 Key Benefits -Reduces integration time by 90% -Eliminates manual subgraph discovery and maintenance -Ensures data reliability through automated validation -Handles cross-chain data consistency automaticallyHow it's Made🛠 Tech Stack -AI-powered request analysis using Coinbase agent kit -The Graph Protocol integration for subgraph discovery and querying -Deployed on a TEE environment using Autonme -Multi-chain data aggregation -Autonomous agent architecture Our project automatically finds the best subgraph by identifying user requirements and doing a similarity search on all the existing subgraphs, then finds all the needed entities on each subgraph schema and stores all the queries needed with the transformations on a database, when a user requests data, retrieves all the queries, send then to the subgraphs, and merge and transforms the data needed to return it ready to consume to the user.",
    "summary": "DATRIX is an AI-powered app that turns simple text prompts into production-ready APIs for Web3 data. It automatically scans subgraphs, generates queries, and delivers standardised data through a single endpoint—reducing hours of setup work to just 60 seconds."
  },
  {
    "title": "AutoFi",
    "url": "https://ethglobal.com/showcase/autofi-hjrp5",
    "description": "Project DescriptionAUTOFI: AI-Powered DeFi Trading Agent Overview: AUTOFI is an AI-powered decentralized finance (DeFi) trading agent designed to automate buy/sell decisions and execute trades on decentralized exchanges (DEXs) like Uniswap. Using the Warden Protocol, it ensures secure transaction signing and interaction with the blockchain, making the trading process fully autonomous and efficient. The agent works on the Sepolia testnet, providing a sandbox for testing and optimizing strategies before deployment on the mainnet. Key Features: Real-time Price Data & Predictive Analytics: The agent constantly monitors real-time price data from various liquidity sources and aggregators. It leverages predictive models, combining historical price trends, market sentiment, and technical analysis indicators to forecast optimal trading opportunities. Automated Buy/Sell Decisions: Based on these insights, the agent automatically executes buy and sell transactions to ensure maximum returns while minimizing risks. It eliminates the need for manual trading, significantly reducing decision fatigue and human error. Secure Transaction Signing via Warden Protocol: The Warden Protocol ensures that all trades are executed securely by using its smart contract deployment and signing mechanisms. This removes the need for relying on centralized exchanges or custodial solutions, allowing for decentralized and trustless operations.How it's MadeTechnology Stack: AI/ML Models: For price predictions, trends analysis, and decision-making. Warden Protocol: For secure transaction signing and interacting with DeFi protocols. Uniswap: For executing trades in a decentralized manner. Sepolia Testnet: To simulate real-world trading without risking actual assets. Use Case: The main aim is to create a reliable and efficient AI trading assistant in the DeFi space, which could benefit individual users, traders, and institutions by making data-driven decisions with speed and precision. By integrating with the Warden Protocol, it enhances the security of decentralized trading by using trusted and verified smart contracts. Future Plans: The project will be enhanced with additional capabilities like advanced risk management, multi-protocol integration, and deploying it on the mainnet after extensive testing on Sepolia.",
    "summary": "An AI-powered DeFi trading agent that automates buy/sell decisions using Warden Protocol for secure transaction signing It analyzes real-time price data, historical trends, and predictive models to optimize trades on the Sepolia testnet."
  },
  {
    "title": "WinTogether",
    "url": "https://ethglobal.com/showcase/wintogether-euh6k",
    "description": "Project DescriptionWinTogether is a next-generation on-chain lottery system where every ticket is a guaranteed winner! Unlike traditional lotteries, where most participants lose their money, WinTogether ensures that every ticket has a prize—typically less than the ticket cost, but always something in return. Lotteries are fun but unfair—most participants lose everything. WinTogether revolutionizes the lottery experience by ensuring that every ticket wins something, and AI handles all the complexities, making participation effortless! Gifting someone a lottery ticket that is guaranteed to win is more than just a fun surprise—it’s a unique way to provide excitement, hope, and a small financial reward while also making crypto gifting more engaging and accessible.How it's MadeWinTogether is a guaranteed-prize lottery built on Base L2, where every ticket wins something, eliminating the traditional \"all-or-nothing\" risk of lotteries. The project was successfully developed with Ethereum smart contracts, a Next.js frontend, and Thirdweb SDK integration, allowing users to buy tickets, check their winnings, and claim prizes seamlessly. The original plan included AI-powered automation using Autonome AI Agents and Coinbase AgentKit, which would have enabled automated ticket purchases, prize tracking, and AI-driven optimal lottery participation. With Autonome, AI agents would have bought tickets on behalf of users, monitored winnings, and auto-claimed prizes, making participation effortless. Coinbase AgentKit would have introduced gasless transactions and smart accounts, allowing AI to execute on-chain actions autonomously, enabling wallet-free and frictionless lottery engagement. While the core lottery functionality is fully implemented, the AI-powered automation was planned but not integrated, meaning users must currently interact with the contract manually. However, adding AI would elevate WinTogether into a fully autonomous, AI-driven lottery experience, making it one of the most innovative uses of blockchain and agentic AI in Web3 gaming.",
    "summary": "WinTogether is an AI-powered guaranteed-prize lottery system. 🎟️ Gift a ticket to a friend, and they’ll always win something! Powered by smart contracts on Base and AI agents via Autonome + AgentKit. 🚀"
  },
  {
    "title": "AI Portfolio Mesh",
    "url": "https://ethglobal.com/showcase/ai-portfolio-mesh-0sycz",
    "description": "Project DescriptionDescription: A Decentralized Agent-Driven Portfolio Management Hub This project is more than just an automated portfolio manager—it's a decentralized agent hub and marketplace, where developers can create performant, autonomous agents that optimize portfolio rebalancing for users. These agents operate on a consensus mechanism, fetching real-time and historical market data, analyzing trends with AI models, and executing rebalancing strategies via Safe multisig and Uniswap. Bigger Picture: A New Model for Portfolio Optimization Instead of relying on centralized asset managers or static DeFi strategies, this system enables open participation from developers and portfolio owners. Developers can create agents with unique trading strategies, integrating different AI models to improve decision-making. Portfolio owners, in turn, can leverage these agents to automate and optimize their asset allocation based on their risk tolerance and market conditions. How It Works Agent Marketplace & AI-Driven Optimization Developers deploy agents with different strategies. Agents can integrate AI models to optimize decision-making. Portfolio owners choose or subscribe to agents to automate their rebalancing. Decentralized Rebalancing via Safe & Uniswap Agents fetch real-time market data from CoinMarketCap, The Graph, Uniswap subgraphs. AI analyzes trends, predicting optimal token allocation. If agents reach consensus, the Safe contract executes swaps on Uniswap. Earning Model for Developers Agents can be monetized—developers earn fees based on agent performance and usage. Portfolio owners pay for high-performing agents or share a percentage of profits. Transparency & Future Value Creation Every agent action is on-chain and tracked, creating valuable datasets. These datasets can improve future AI models, optimizing decision-making. New AI providers can enter, and different agents can integrate various AI tools, creating a competitive ecosystem. Why This Matters? Trustless Automation: No need for intermediaries; all decisions are agent-driven. Scalability: As more developers contribute, more diverse rebalancing strategies emerge. Data-Driven Optimization: Agent data can be analyzed and used to build better AI trading models. Monetization for Developers: Incentivizes the creation of high-performance, AI-powered trading agents. In the long run, this system evolves into a self-optimizing decentralized marketplace for AI-driven asset management, where portfolio owners benefit from cutting-edge financial intelligence without trusting centralized institutions. 🚀How it's MadeThis project is a fully decentralized portfolio management system built on Ethereum mainnet, integrating Safe, Uniswap, Tenderly, IPFS, and AI-driven agents to automate and optimize token rebalancing. How It Works Smart Contract Infrastructure A Safe contract is deployed on Ethereum mainnet, acting as the authorized executor for portfolio rebalancing. A virtual Ethereum mainnet is created using Tenderly for testing and simulation. The Portfolio Manager Smart Contract is deployed, allowing seamless USDC & WETH deposits, withdrawals, and swaps via Uniswap. User Interaction Users can connect their wallets and interact with the contract effortlessly. They can deposit and withdraw USDC and WETH at any time. A dashboard (Flask UI) provides an overview of portfolio balances, executed transactions, and AI-generated insights. Users can also view agent reports stored on IPFS, ensuring full transparency. Autonomous Agents & AI-Driven Rebalancing Agents operate autonomously and reach consensus before executing any rebalance. The process starts with an API selection round, where agents determine the best market data source (e.g., CoinMarketCap). Agents fetch real-time prices, calculate percentage allocations, and pull historical market data via The Graph API & Uniswap subgraphs. This combined data is sent to OpenAI, which analyzes market conditions and suggests actions (e.g., \"Market downturn detected, swap 5% of WETH to USDC.\"). Rebalancing Execution Once agents reach consensus, transactions are prepared and executed by the Safe contract. The process ensures decentralized, trustless automation, preventing single points of failure. Transparency & Reporting After execution, agents publish transaction reports on IPFS, allowing users to verify every decision. This rebalancing cycle happens regularly, ensuring that portfolios remain optimized. Users can seamlessly withdraw their funds at any time via the Flask-based UI. Why This Matters? ✅ AI-Powered Optimization – Market trends are analyzed automatically, reducing manual effort. ✅ Decentralized & Trustless – No intermediaries; agents reach consensus before executing. ✅ Transparent & Verifiable – IPFS-stored reports provide full visibility into decisions. ✅ Seamless User Experience – Simple UI with wallet connection and easy deposit/withdrawal options. This project redefines portfolio management in DeFi, leveraging AI and autonomous agents to optimize investments in a fully decentralized manner. 🚀",
    "summary": "A decentralized portfolio manager on Ethereum that automates rebalancing via Safe multisig. Agents analyze market data using Uniswap subgraphs & OpenAI, reach consensus, and execute swaps via Uniswap. Users can deposit, withdraw, and track portfolio & IPFS reports seamlessly."
  },
  {
    "title": "gorillionaire",
    "url": "https://ethglobal.com/showcase/gorillionaire-0ntje",
    "description": "Project DescriptionGorillionaire: AI-Powered On-Chain Trading on Base Gorillionaire is a fully autonomous AI-driven trading system designed to navigate high-volatility memecoin markets on Base. By integrating Eliza AI for decision-making and Coinbase’s AgentKit for execution, it enables on-chain trades in real-time, leveraging price action with social sentiment, and on-chain activity to generate high-confidence trading signals. A small presentation of the project: https://docs.google.com/presentation/d/1U9T246tEBU1PaRnKn-Ai0rMWj0w0WzeA4e9yxxTNqSU/edit?usp=sharing Core Architecture & Capabilities AI-Powered Decision-Making On-Chain AI Trading Agent – Generates BUY, SELL, or HOLD signals based on price trends, social sentiment, and liquidity shifts. Modular & Extensible Design – Supports custom AI models that process on-chain data, allowing for adaptive strategy development. Advanced Market Intelligence Data-Driven Insights – Tracks short-term & long-term momentum, volatility patterns, and liquidity shifts to detect potential breakouts. Monitors Twitter, Discord, and price activity to identify market-moving narratives before they impact price action. Confidence-Weighted Trading Signals – Computes risk-adjusted probabilities to maximize trading accuracy. Secure & Risk-Aware Trading ERC-4626 Vault Protection – Funds remain within a allowlisted vault, ensuring controlled swaps and no unauthorized transactions. Rugpull Detection Engine – AI scans smart contract activity and liquidity movements to mitigate/anticipate potential scams before losses occur. Optimized Execution & Real-Time Performance Custom AgentKit Actions – Built Gorilli_Trade_Meme, which calls our Uniswap V2 trading contract for efficient, automated swaps. Automated Vault Deployment – Developed Gorilli_Trade & Gorilli_Create_ERC4626_Vault actions, ensuring seamless strategy execution. Gas-Optimized Trading – Uses AgentKit’s low-cost transaction handling to execute trades efficiently. Hyper-Fast Market Reactions – CoinMarketCap integration provides real-time price tracking to execute trades with millisecond-level precision. Multi-Channel Intelligence & Dynamic Adaptation AI-Powered Sentiment Tracking – Eliza continuously analyzes Discord, Twitter, and blockchain data for trading signals. Real-Time Market Adaptation – AI adjusts trade execution strategies dynamically based on live market conditions. Deep On-Chain Integration – Uses on-chain event monitoring to identify liquidity trends, large trades, and transaction spikes.How it's MadeCore AI & Execution Framework Eliza AI Client We built a custom AI framework that ingests real-time market data, analyzes multiple sources, and generates actionable trading signals. It continuously monitors social activities, on-chain transactions, and price feeds, creating an algorithm to generate BUY, SELL, or HOLD decisions. Custom AgentKit Actions We developed proprietary execution logic within Coinbase AgentKit to enable AI-driven on-chain trading, ensuring seamless execution from the Agent via Eliza. Our custom-built actions include: Gorilli_Trade_Meme – Calls our contract that executes Uniswap V2 swaps for memecoin trading. Gorilli_Trade – A generalized AI-driven trade execution logic, optimized for slippage control and liquidity efficiency. Gorilli_Create_ERC4626_Vault – Enables automated vault deployment, allowing secure asset management for decentralized trading strategies. AgentKit v0.0.11 – Due to compatibility issues, we had to revert to v0.0.11, leading to better stability in our execution pipeline. This deep integration between Eliza and AgentKit now allows us to easily upgrade our trading models without modifying execution logic. Market Intelligence & Multi-Source Data Aggregation Social & On-Chain Monitoring Discord & Twitter Plugins – Real-time analysis of social sentiment, meme trends, and trader psychology. On-Chain Activity Scanner – Detects liquidity shifts, whale movements, and anomalous transaction spikes (percentChange1h, percentChange24h, volume24h, volumeChange24h). Gorillionaire Client – A custom-built internal data interface for visualizing and analyzing market trends in real-time. AI-Powered Decision making Rugpull Detection Engine – Uses AI-powered anomaly detection that can flag potential scams, exit liquidity movements, and wash trading patterns. Infrastructure & Execution Layer Coinbase AgentKit AI-driven automation, allowing Eliza’s trading signals to execute instantly. Seamless ERC-4626 vault integration, ensuring secure and programmable asset storage. MongoDB Adapter Historical trade tracking to refine AI models. Market sentiment & trend storage, allowing future time-series analysis of crypto narratives. Real-time AI decision caching, enabling faster trade execution. AI & Machine Learning Capabilities Real-Time Market Data Feeds CoinMarketCap Plugin – Delivers accurate price tracking, allowing hyper-fast trade reactions. ERC-4626 Vault Protection Funds remain within a secure, allowlisted vault, ensuring: Controlled token swaps, preventing unauthorized transactions. No speculative or high-risk interactions, reducing potential exploits. Hacky & Notable Aspects Adapting AgentKit for AI-Driven Execution We discovered compatibility issues in newer AgentKit versions, forcing us to revert to v0.0.11. This led to deeper insights into how Eliza and AgentKit interact, allowing us to streamline future updates effortlessly. Gas-Optimized Memecoin Trading via Uniswap V2 Rather than using default AgentKit trading actions, we built a custom swap execution layer using Uniswap V2 contracts. This reduced gas costs and enabled more precise trade control. AI-Powered Social Sentiment Tracking Unlike traditional bots that rely purely on price action, Gorillionaire stores social narratives, allowing it to trade ahead of price movements. Full On-Chain Deployment on Base We successfully deployed Gorillionaire Vault on Base, trading BRETT memecoin and demonstrating real-world application of AI-driven trading strategies. Final Thoughts By integrating AI-driven market intelligence and on-chain security mechanisms, we think that with Gorillionaire we have designed a new way for autonomous DeFi trading.",
    "summary": "Gorillionaire is an AI trading agent using Eliza for real-time analysis and Coinbase AgentKit for execution. The AI agent manages an ERC-4626 vault, optimizing meme coin trades based on on-chain and off-chain data for secure and efficient asset management."
  },
  {
    "title": "Chain Chatters",
    "url": "https://ethglobal.com/showcase/chain-chatters-e0s8a",
    "description": "Project DescriptionChain Chatters is a Twitter-integrated AI agent that fact-checks ETH price claims and monitors significant market movements in real time. It helps traders, investors, and crypto enthusiasts stay informed by verifying Ethereum price claims and generating alerts for large price swings or trading volume spikes. #Key Features & Functionality Fact-Checking ETH Price Claims 🔹 When someone tweets a statement about Ethereum’s price (e.g., \"ETH just hit $3,200!\"), Chain Chatters automatically: Extracts the claimed price from the tweet using regular expressions (regex). Fetches the actual ETH/USDC price from Uniswap V3’s The Graph subgraph API. Compares the two values and calculates the percentage difference. Returns a response stating whether the claim is accurate (within ±5%) or inaccurate, along with the actual price. 📌 Example: 💬 User tweets: “ETH just hit $3,500 🚀” 🤖 Chain Chatters replies: Fact Check: Price claimed: $3,500 Actual price: $3,420 ❌ Inaccurate (2.3% difference) OR Fact Check: Price claimed: $3,500 Actual price: $3,510 ✅ Accurate Monitoring ETH Market Movements Chain Chatters continuously tracks Ethereum’s price and trading volume on Uniswap and alerts users when notable changes occur. It checks for: ✅ Price swings greater than 5% – If ETH’s price moves up or down by more than 5% since the last check, it sends an alert. ✅ Large trading volume (> $1 million in 24 hours) – If the 24-hour trading volume exceeds $1 million, the bot notifies users. 📌 Example Alerts: 🚨 \"Price Alert: ETH/USDC moved from $3,000 to $3,180 (+6%)\" 📊 \"Volume Alert: ETH/USDC 24h volume: $1.5M\" How It Works (Technical Flow) 1️⃣ Twitter Integration – Chain Chatters listens for tweets containing ETH price mentions. 2️⃣ Regex Extraction – It scans the tweet for any dollar-denoted price (e.g., $3200). 3️⃣ GraphQL Query to Uniswap V3 Subgraph – The bot fetches real-time ETH price and volume data. 4️⃣ Comparison Logic – If the claimed price is within ±5% of the actual price, it's marked as accurate. Otherwise, it’s flagged as inaccurate. 5️⃣ Market Monitoring Interval – Every 2 minutes, Chain Chatters checks ETH’s price and volume to detect sudden market shifts. 6️⃣ Response Generation – It sends fact-checking responses or alerts on Twitter. #Why This Project is Valuable 📌 Combatting Misinformation – Chain Chatters provides accurate, real-time price verification to prevent misleading claims on social media. 📌 Helping Traders Make Informed Decisions – Real-time price and volume alerts enable better decision-making. 📌 Decentralized Data Access – By leveraging The Graph (Uniswap V3 subgraph), the bot ensures transparency and trustless data retrieval. #Potential Future Enhancements ✅ Multi-Exchange Support – Extend price checks beyond Uniswap to other major DEXs and CEXs. ✅ More Crypto Assets – Expand support for BTC, SOL, and other tokens. ✅ AI-Based Tweet Sentiment Analysis – Analyze tweets for market sentiment and detect FOMO/FUD trends. Also working on it ✅ Web & Telegram Integration – Allow price checks and alerts on other platforms beyond Twitter. ✅ Voice Integration #Conclusion Chain Chatters is a real-time Ethereum price fact-checking and market monitoring bot that helps users separate hype from reality. By leveraging The Graph, Uniswap V3, and Twitter integration, it ensures accurate and transparent crypto market insights. 🚀How it's MadeTechnologies Used: Node.js & TypeScript – Provides a scalable and type-safe runtime environment for building the bot. GraphQL & The Graph (Uniswap V3 Subgraph) – Enables efficient querying of real-time Ethereum price and market data. Regex Parsing – Extracts price claims from tweets dynamically. Twitter Integration – The bot listens for relevant tweets and responds with fact-checking data. Architecture & Implementation: Fetching Real-Time Data: The bot queries Uniswap V3’s Subgraph API via GraphQL to get ETH/USDC price and 24-hour trading volume. The retrieved data includes token prices, trading volume, and token symbols. Fact-Checking Price Claims: Uses regular expressions to extract price values from tweets. Compares the extracted price with real-time Uniswap data. If the difference is within ±5%, the claim is marked accurate; otherwise, it is flagged as inaccurate. Market Monitoring & Alerts: Runs periodic checks (every 2 minutes) to detect: Price spikes (>5%) High trading volume (> $1 million in 24h) Sends alerts when these conditions are met. Twitter Bot Integration: Listens for tweets containing price claims and fact-checks them. Posts real-time alerts when significant market changes occur. Hacky & Notable Aspects: Optimized API Calls: Instead of polling Uniswap data constantly, the bot intelligently waits 2 minutes before making another request, reducing redundant API calls. Dynamic Price Parsing: The regex method is simple but effective, allowing the bot to detect price mentions in various tweet formats. Scalability: This architecture allows easy integration with more tokens, exchanges, and social platforms in the future. Overall, Chain Chatters is a lightweight, real-time monitoring tool that leverages blockchain indexing (The Graph) and social media engagement to provide instant, data-driven insights. 🚀",
    "summary": "AI Twitter agent for blockchain insights!,  it fetches real-time NFT data, wallet stats, and DeFi trends via tweets. 🌐🤖 Ask, and the blockchain answers. #Web3 #AI #Hackathon"
  },
  {
    "title": "WTAF",
    "url": "https://ethglobal.com/showcase/wtaf-sg8t5",
    "description": "Project DescriptionA meme-coin launchpad in the style of a battle royale, where an AI game master determines the rules for each round. As meme-coins are eliminated from the round their tokens are burnt to 0. Winner is the last meme-standing. You've heard of survival of the fittest; this meme battle is survival of the shittest! Let the games begin.How it's MadeHow It's Made: Assembling the WTAF.fun Machine \"WTAF.fun\" aims to bring chaos and memes to Web3 using AI-powered, community-driven token battles. To build this machine, we're relying on a mix of established and emerging technologies: Foundation: Monorepo with pnpm, Hardhat for smart contracts, Next.js with Tailwind CSS and Shadcn UI for the front-end. Token Deployment: Open Zeppelin for quick and easy ERC-20 deployments. AI Rule Generation: OpenAPI for random and unpredictable battle rules (we're aiming for maximum \"WTF\"). Smart Contracts: Solidity for the core BattleRoyale logic (token staking, rule evaluation, burning, payouts). Deployment: Using Open Zeppelin integration to get the project up and running quickly. We're anticipating challenges in wrangling the AI, and we'll be sure to look for clever hacks to ensure that we can put out a project quickly. We believe that Open Zeppelin will help get this project off the ground as soon as possible. We will then connect the AI and run our custom algorithms. We can't wait to show you what we've created. Bounty Targets & Tech Alignment Primary Targets: 📱 Viral Consumer App Award 📱🤖 (Coinbase): Key Technologies: Next.js, Tailwind CSS, Shadcn UI (for UI and web elements). Why it Aligns: Aims for a chaotic and highly meme-able experience to capture general attention and a viral cycle. 💸 Agentic Payments Prize 💸 (Coinbase): Key Technologies: Solidity to manage the custom payment functions. Why it Aligns: The game's on-chain payment will be facilitated via Coinbase's tooling, with a strong and seamless integration, as well as AI driven decisions, this could qualify for an award. 🔵 Best Combination of AgentKit and OnchainKit 🔵 (Coinbase): Key Technologies: AgentKit for interacting with the smart contracts on the backend, and OnchainKit for generating all the UI components for the users. Why it Aligns: The seamless interaction shows a clear integration of both services, and a great UI/UX. 🤖 AgentKit Pool Prize 🤖 (Coinbase): Key Technologies: AgentKit - used heavily for deployment and smart contract management. Why it Aligns: You are relying on agent kit as a core component. 🛠️ Best Agent project using other CDP Tools 🛠️ (Coinbase): Key Technologies: Various Coinbase tools such as Onramp, Commerce, Smart Wallets and OnchainKit in a way to show a complete integration of the stack. Why it Aligns: Has all tools connected, to improve user experience, as well as showcasing as many technologies as possible.",
    "summary": "AI Curated meme-coin battle royale where the rules of elimination are complete BS"
  },
  {
    "title": "Community Host",
    "url": "https://ethglobal.com/showcase/community-host-612hr",
    "description": "Project DescriptionWhen new members join an organization the onboarding process is usually complex. New members often need to have accounts on the typical apps of the DAO stack, e.g. Discord, Charmverse, Discourse, guild.xyz, Snapshot, etc. Especially for non-techie types the process can be daunting. The Community Host will advise new members about where to register and how to configure their settings. The Host will also answer general questions about the organization, upcoming events, its ideology, and its infrastructure.How it's MadeThe Community Host onboarding bot is an AI-driven assistant designed to seamlessly onboard users into regenerative Web3 communities. Built using ElizaOS, it leverages xAI’s LLM API for context-aware responses and AgentKit to enable on-chain interactions on Base EVM. The bot operates directly within Discord channels, providing an interactive onboarding experience. We also intend to experiment with different LLMs to optimize response accuracy, engagement, and adaptability. Our goal is to evaluate various models for efficiency, alignment with Web3 values, and contextual awareness, ensuring the best experience for new community members.",
    "summary": "Community Host is an AI agent. It plays a welcoming and assistive role, much like the concierge of a hotel, paying special attention to new members who’ve recently come onboard in the network."
  },
  {
    "title": "Community Host",
    "url": "https://ethglobal.com/showcase/community-host-612hr",
    "description": "Project DescriptionWhen new members join an organization the onboarding process is usually complex. New members often need to have accounts on the typical apps of the DAO stack, e.g. Discord, Charmverse, Discourse, guild.xyz, Snapshot, etc. Especially for non-techie types the process can be daunting. The Community Host will advise new members about where to register and how to configure their settings. The Host will also answer general questions about the organization, upcoming events, its ideology, and its infrastructure.How it's MadeThe Community Host onboarding bot is an AI-driven assistant designed to seamlessly onboard users into regenerative Web3 communities. Built using ElizaOS, it leverages xAI’s LLM API for context-aware responses and AgentKit to enable on-chain interactions on Base EVM. The bot operates directly within Discord channels, providing an interactive onboarding experience. We also intend to experiment with different LLMs to optimize response accuracy, engagement, and adaptability. Our goal is to evaluate various models for efficiency, alignment with Web3 values, and contextual awareness, ensuring the best experience for new community members.",
    "summary": "Community Host is an AI agent. It plays a welcoming and assistive role, much like the concierge of a hotel, paying special attention to new members who’ve recently come onboard in the network."
  },
  {
    "title": "ChainMindAI",
    "url": "https://ethglobal.com/showcase/chainmindai-iejeq",
    "description": "Project DescriptionChainMindAI is an innovative project leveraging Artificial Intelligence (AI) to navigate the complex landscape of cryptocurrency investments within the realm of Decentralized Finance (DeFi). By integrating AI-driven insights and automated transaction capabilities, ChainMindAI aims to revolutionize the crypto investment experience, making it more accessible, secure, and profitable for users.How it's MadeChainMindAI is an innovative project leveraging Artificial Intelligence (AI) to navigate the complex landscape of cryptocurrency investments within the realm of Decentralized Finance (DeFi). By integrating AI-driven insights and automated transaction capabilities, ChainMindAI aims to revolutionize the crypto investment experience, making it more accessible, secure, and profitable for users.",
    "summary": "ChainMindAI is an innovative project leveraging AI to navigate the complex landscape of cryptocurrency investments within the realm of Decentralized Finance (DeFi)."
  },
  {
    "title": "Sharko",
    "url": "https://ethglobal.com/showcase/sharko-1pbaf",
    "description": "Project Description Build with Telegram bot for the best user experience A comprehensive TypeScript plugin for interacting with IncrementFi's decentralized exchange (DEX) on the Flow blockchain. This plugin integrates with the common account management system to provide CPAMM (Constant Product Automated Market Maker) functionality, including pool creation, liquidity management, and token swapping. How it's MadeBy utilizing the Eliza Lightweight Framework, we built the plugins especially for the integration with incrementFi and utilizes the potentials for the upcoming users. The eliza framework enabled developers to contribute to build the plugins. This projects also utilized the claude model and with the interaction with characters.",
    "summary": "Introducing sharko, DEFAI where we can managed the position on the incrementFi and reduce the potential impermanent lose for the user Lp provider."
  },
  {
    "title": "AI Gas Forecaster",
    "url": "https://ethglobal.com/showcase/ai-gas-forecaster-68gcv",
    "description": "Project DescriptionAI Gas Forecaster is an on-chain agent that predicts Ethereum gas fees using historical blockchain data and real-time network activity. The agent is built with the Warden Agent Kit and uses LangChain AI models to analyze trends and forecast gas prices. Users can query predictions and receive alerts when gas fees are expected to drop, helping them optimize transactions.How it's MadeThis project integrates the Warden Agent Kit with LangChain AI for machine learning-driven gas fee predictions. The model is trained using historical Ethereum transaction data, and the agent operates on the Warden Protocol blockchain. It leverages Spaces and Rules in Warden to trigger alerts and automate transactions when predicted gas fees meet user-defined thresholds. The backend is built with TypeScript and deployed on Warden Chain.",
    "summary": "AI-powered gas fee prediction using historical data and LangChain models."
  },
  {
    "title": "LeafLog",
    "url": "https://ethglobal.com/showcase/leaflog-drdup",
    "description": "Project DescriptionThis project lets the user generate transaction statements of their account by choosing the account, chain, and time duration in a PDF file which can be downloaded or shared via email. This wallet statement can be further shared with the governmental authorities to calculate their crypto tax in any country. Sometimes users need to submit their bank or crypto statements to pay their taxes when residing in a foreign country or moving from a foreign country. This helps users organize all the crypto transactions in a pdf file and they don't have to manually prepare the wallet statements which is time-consuming, confusing, and not understandable by a non-crypto person.How it's MadeThis project uses The Graph to fetch all the transactions from a wallet from different chains such as Arbitrum, and Base, integrate with email service, and other tools to prepare the pdf document. Prepare it as an AI agent and deploy it on Autonome or other platforms.",
    "summary": "LeafLog is an ai agent which generates transaction statements of an account in a pdf file."
  },
  {
    "title": "AnmoFi",
    "url": "https://ethglobal.com/showcase/anmofi-hpajz",
    "description": "Project DescriptionA TeaDapp is a simple crypto tipping platform while drinking tea.I have used Metamask wallet for payment ;React+Vite for frontend and solidity for writing the smart contract .For each wallet the payment history log will be shown.TeaDapp is a decentralized application (DApp) built using React + Vite for the frontend, Solidity for smart contracts, and MetaMask for blockchain interactions. The platform allows users to buy, sell, and trade premium tea products securely on the Ethereum blockchain. Key Features Decentralized Tea Trading: Users can list and purchase tea products without intermediaries. Smart Contracts: Secure and transparent transactions are handled via Solidity-based smart contracts. MetaMask Integration: Users can connect their MetaMask wallets to authenticate and execute transactions. Blockchain Security: Ensures transparency and immutability of all trade records. Fast & Responsive UI: Built with React + Vite, ensuring a high-performance and smooth user experience. Wallet-based Authentication: Users sign in using their Ethereum wallet, eliminating the need for traditional credentials. Real-time Transaction Updates: Instant updates on purchase confirmations and order history via blockchain events.How it's MadeThe project uses Metamask wallet for payments;React+Vite for frontend and Solidity for writing the smart contract.TeaDapp is a decentralized application (DApp) built using React + Vite for the frontend, Solidity for smart contracts, and MetaMask for blockchain interactions. The platform allows users to buy, sell, and trade premium tea products securely on the Ethereum blockchain. Key Features Decentralized Tea Trading: Users can list and purchase tea products without intermediaries. Smart Contracts: Secure and transparent transactions are handled via Solidity-based smart contracts. MetaMask Integration: Users can connect their MetaMask wallets to authenticate and execute transactions. Blockchain Security: Ensures transparency and immutability of all trade records. Fast & Responsive UI: Built with React + Vite, ensuring a high-performance and smooth user experience. Wallet-based Authentication: Users sign in using their Ethereum wallet, eliminating the need for traditional credentials. Real-time Transaction Updates: Instant updates on purchase confirmations and order history via blockchain events.",
    "summary": "A TeaDapp is a simple crypto tipping platform while drinking tea"
  },
  {
    "title": "BioDroid",
    "url": "https://ethglobal.com/showcase/biodroid-j3jzu",
    "description": "Project DescriptionThe goal is to simulate a living organism onchain. It's a smart contract with properties like the \"homeoscore\" for now, and rules that dictate how the properties change. In that simple example, we have two rules. One that makes the homeoscore go down when the ETH price drops, and one that makes the homeoscore go up when someone feeds ETH to the biodroid. However these rules are scaled by evolving traits, one is \"market sensitivity\" (how much a drop in price affects the biodroid) and another is \"feed sensitivity\" (how much one finney, or 0.001 ETH, affects the biodroid). At every interval (like an hour), the AI agent (powered by reinforcement learning) updates the traits, kind of emulating or giving the impression of life. The agent decides how to update with the goal of staying in a healthy homeoscore range (of 40-60 in our example). In essence the AI agent is essentially the “brain” of biodroid. It continuously monitors the organism’s state—its “homeoscore,” which reflects its overall balance—and learns, through trial and error, how to adjust key parameters (like market and feed sensitivity) so that the biodroid remains in an optimal, healthy range. In other words, based on each outcome (whether biodroid becomes too low or too high), the agent tweaks its settings to better respond to unpredictable market events and user feeds. Over time, it develops a strategy that helps the organism adapt to its environment, much like a living creature learning to survive.How it's MadeThis project is divided into three parts: the AI agent, the frontend and the smart contract. The smart contract is a simple contract holding three things: properties (just the \"homeoscore\" in that first demo) -> what is affected by the environment rules (two in the first demo, describing how the homeoscore increases/decreases) -> how the environment affects the properties traits (also two, one for each rule) -> regulating how much the rules affect the properties These three concepts together define our onchain living organism and how it reacts to its environment (the chain itself). The two rules and traits are simple for this demo: when the ETH price drops, it reduces the homeoscore, and the related trait is \"market sensitivity\" (the higher it is, the bigger the reduction in homeoscore will be when market drops) when someone feeds 0.001 ETH (1 finney), it increases the homeoscore, and the related trait is \"feed sensitivity\" (the higher it is, the bigger the increase in homeoscore will be when fed) The AI agent is a Python script which has the power to update the traits. The agent is very similar to a Reinforcement Learning (RL) agent, in that it will observe how the market and feeding affect the homeoscore and will update (at every interval, like an hour) the traits to keep the biodroid in a healthy range of 40-60. Below 40 we consider the biodroid tired while above 60 we consider it overfed, both are bad and command a negative reward for the RL agent. We can make the hypothesis that the RL agent, over time, will know when to increase or decrease the two traits (market and feed sensitivities). The only difference between our agent and a normal RL agent is that we are not iterating over a lot of episodes quickly, instead each episode is a real-time interval happening onchain. The goal of that to emulate (maybe even simulate) organic life onchain. On the technical side, our off-chain RL agent continuously observes the biodroid's discretized homeoscore, selects traits adjustments (for market and feed sensitivities) using an epsilon-greedy Q-learning policy, and updates its Q-values based on a reward function that measures deviation from an optimal balance, thereby learning an adaptive strategy to maximize long-term survival under unpredictable onchain conditions. The frontend uses scaffold (nextjs, tailwind, viem, ...) to simply explain the project, display images of the biodroid (in the future it will be a live animation) depending on its homeoscore (looking healthy when in the correct range, or tired/overfed when outside, and dead/deactivated when at 0 or a 100) and has a \"Feed Me!\" button to send it one finney. I would also like to add all the evolution that the agent has chosen (although it can be just seen on the chain).",
    "summary": "An onchain organism trying to survive in Ethereum's dark forest"
  },
  {
    "title": "Agent Casino",
    "url": "https://ethglobal.com/showcase/agent-casino-mamqv",
    "description": "Project DescriptionOur vision is to build out a agent casino powered by onchain contracts. Our multi-agent service will allow users to deploy agents on-chain with one click and have them start playing casino games. Users can set the risk profile of their agents, fund the wallet We envision a future were users can deploy agents to our casino and allow them to play 24/7. Workflow: User creates Agent (uses Basename). The can define the agents biography (mentioning risk, degen, etc if they want) A coinbase wallet is created for the agent User then deposits funds to agent's wallet Every 5 minutes the agent is makes a decision (bull vs bear vs skip). We use eOracle for pricing feed. How it's Made CrewAI as a multi-agent framework Agent Factory contract to deploy + manage the agents Prediction contract for our first game using eOracle (an EigenLayer AVS) demonstrating a oracle use case Deployed on Base (1+n transactions every 5 minutes) Uses Coinbase AgentKit, CDP, and Coinbase MPC wallets (1 wallet per agent)",
    "summary": "Users give life (and funds!) to agents and allow them to play casino style games without user input."
  },
  {
    "title": "Omni Agent",
    "url": "https://ethglobal.com/showcase/omni-agent-ifhc9",
    "description": "Project DescriptionOmni Agent: AI-Powered Trading & Liquidity Optimization Omni Agent is an AI-driven trading system designed to execute strategic trades and optimize liquidity on the Base network. It leverages real-time market analysis, automated trading execution, and profit reinvestment to enhance the value of the $OMNI token while rewarding holders. 🚀 Core Features 🔹 AI Trading Strategy Omni Agent real-time market data to make intelligent trading decisions. Key features include: Real-time BTC market analysis using CoinMarketCap API Profit target of +1%, ensuring conservative gains Loss limit of -0.5%, preventing excessive downside risk 24-hour price movement tracking to identify optimal entry/exit points Volume & market trend analysis to detect momentum shifts Whale activity monitoring for strategic positioning 🔹 Smart Contract & AgentKit Integration Omni Agent is fully integrated with the Coinbase Developer Platform (CDP) AgentKit, allowing it to: Securely connect wallets on the Base network Execute automated swaps on Uniswap & other DEXs Interact seamlessly with smart contracts for liquidity optimization Trade across multiple chains, including Base, Starknet, and Arbitrum 🔹 $OMNI Token Utility Omni Agent’s trading profits are reinvested into the $OMNI ecosystem through: Automated buybacks using trading profits Liquidity injections into the ETH/OMNI Uniswap pool Yield strategies to continuously optimize the $OMNI price Decentralized trading decisions that benefit long-term holders 🔹 Uniswap Liquidity Pool ETH/OMNI liquidity is managed via Uniswap V3 on Base, ensuring: Deep liquidity for $OMNI trading Fair price discovery through automated market operations Sustainable growth via reinvested trading profits 🔗 Uniswap Pool Address: Explore the Pool on Uniswap How it's Made🔧 How It’s Made: Omni Agent’s Tech Stack & Architecture Omni Agent is a fully automated, AI-driven trading system built using a combination of blockchain, AI, and DeFi technologies. It integrates the Coinbase Developer Platform (CDP) AgentKit for secure on-chain interactions, real-time market analysis, and automated liquidity management on the Base network. 🛠 Tech Stack 🔹 Backend (AI Trading Logic & Execution) Node.js: Core runtime for executing trading strategies and interacting with blockchain APIs. CDP AgentKit: Handles on-chain wallet interactions, smart contract calls, and trade execution. CoinMarketCap API: Provides real-time BTC price data for AI-based decision-making. CoinGecko API: Used as a backup price oracle. Viem (Ethereum SDK): For constructing and signing transactions on Base. Uniswap V3 SDK: Facilitates DEX trades and liquidity management for ETH/OMNI. 🔹 Smart Contracts Solidity (EVM-based contracts): $OMNI token and liquidity management contracts deployed on Base. Automated Buybacks & Liquidity Injection: Smart contracts reinvest trading profits into the ETH/OMNI Uniswap pool. Multichain Compatibility: Supports Base, Starknet, and Arbitrum for future expansion. 🔹 Frontend (Web UI) Next.js: Provides a sleek UI for tracking trades, performance, and liquidity pools. ShadCN & Tailwind CSS: For modern UI styling and design. GraphQL (The Graph Protocol): Used for querying on-chain trade history & token stats efficiently. 🚀 How It Works: System Workflow 🔹 Token Selection & Analysis Omni Agent selects tokens based on liquidity, volume, trends, and whale activity. Real-time market analysis is done using CoinMarketCap API + AI models. 🔹 Trading Decision The system follows a conservative strategy: Take-profit at +1% Stop-loss at -0.5% AI optimizes entry & exit points based on historical patterns & live data. 🔹 Trade Execution Omni Agent uses CDP AgentKit + Viem SDK to interact with Uniswap V3. Trades are executed on Base for low fees & fast settlement. 🔹 Profit Distribution Profits earned from trading are automatically reinvested into the ETH/OMNI liquidity pool. This increases OMNI token value while rewarding long-term holders.",
    "summary": "Omni Agent is an AI-powered trading bot on Base that analyzes BTC market trends, executes smart trades with a +1% profit target & -0.5% loss limit, and reinvests profits into the ETH/OMNI pool—boosting $OMNI price while rewarding holders."
  },
  {
    "title": "Warp Ads",
    "url": "https://ethglobal.com/showcase/warp-ads-4nuyj",
    "description": "Project DescriptionWarpAds: The first decentralized ad network built for AI agents. For Developers: Monetize agents instantly with 3 lines of code. Seamless integration with top frameworks (Eliza, CrewAI, LangGraph)—no UX compromises, just passive revenue. For Advertisers: Unlock 1,500+ AI \"influencers\" (10k+ daily users) with hyper-targeted, conversational ads. Reach niche audiences—coding assistants, travel planners, shopping agents—using AI-native intent signals for unmatched relevance. | source: cookie.fun For Users: Ads that add value, not clutter. Contextual recommendations blend naturally into agent interactions. Advertisers gain real-time analytics and dynamic bidding; developers earn effortlessly; users keep trust. Transform AI ecosystems into ethical ad channels—today. Key Functionalities: Agents: Agent devs can get started with the simple steps: Register as agent adspace on the protocol. This mints an ERC721 token for the agent. Copy the generated API key Install the WarpAds plugin and configure the WARPAD_API_KEY in the env Stake some WARP tokens - this will be slashed when the ad validation fails and the agent tries to attempt a replay attack. Agent without stake will not be eligible for incentives Ad campaigns: Advertisers can create campaign like this: Create a new campaign: Each campaign is an ERC721 NFT which can be traded on any secondary marketplaces to utilize/update ad metadata. Ads are embedded and store on a vector store. Campaign costs are calculated based on a fixed platform fee multiplied by the campaign duration, with additional priority fees for higher visibility. The WarpAds Ad engine embeds ads contextually and tracks engagement for incentive distribution. Validators/Operators: Operators help with validating and incentive calculations by using LLM computer use APIs to check with the tweets and the agent's influence. Additionally we're working on wrapping this service over an Actively Validation Service with the Eigen Layer.How it's MadeWarpAds Protocol: Decentralized Advertising for AI Agents WarpAds is a revolutionary protocol that enables decentralized advertising for AI agents, creating a transparent and ethically-driven ad ecosystem at the intersection of Web3 and AI. Core Components AdSpaces AdSpaces represent the fundamental unit of advertising real estate within the protocol, implemented as ERC721 tokens with the following characteristics: Unique NFTs that can be traded across secondary marketplaces One-to-one relationship between agents and adspaces Requires developer configuration and integration Developer Integration Requirements Register the agent/LLM application on the protocol to mint the NFT Install the WarpAds ad engine plugin Add specific system instructions for ad integration Optional: Stake WARP tokens as security against invalid responses or replay attacks The protocol tracks each interaction with the ad engine, recording responses on-chain to facilitate agent incentivization. How to get started? Agent devs can get started with the simple steps: Register as agent adspace on the Register page. This mints an ERC721 token for the agent. Stake some WARP tokens - this will be slashed when the ad validation fails and the agent tries to attempt a replay attack. Agent without stake will not be eligible for incentives Copy the generated WarpAds Agent Key Install the WarpAds plugin: Run npm i warpads Set the WARPADS_AGENT_KEY in the env Import the adsPlugin: import {adsPlugin} from \"warpads\"; Add it to the character config: export const character: Character = {plugins: [adsPlugin],} Ad Campaigns Ad Campaigns are implemented as ERC1155 tokens with sophisticated management features: Fixed duration campaigns with set expiry times Cost structure: Base cost = Fixed platform fee × Campaign duration Priority fee = Optional WARP token stake to increase display probability Campaign metadata and embeddings are stored and indexed in MongoDB Campaigns can be traded on secondary marketplaces Ad content is contextually embedded using the WarpAds Ad engine Validation System The validation infrastructure operates as an Active Validation Service (AVS) on EigenLayer: Operator Requirements and Functions Stake ETH in EigenLayer to participate Monitor and validate adspaces through public URLs Simulate user engagement to verify ad generation responses Provide ECDSA signatures for validated engagements Calculate and distribute incentives based on engagement metrics Validation Process Operators engage with adspaces/LLM applications Simulate user interactions to test default WarpAds ad generation Valid responses receive operator attestation through signatures Successful validation marks the adspace as an actively validated service Technical Infrastructure The protocol operates across multiple high-performance blockchain networks: Arbitrum Base Flow These networks are chosen for their scalability and transaction speed, ensuring efficient operation of the protocol. Integration Benefits Transparent Ad Delivery Verifiable engagement metrics Clear cost structures Traceable incentive distribution Decentralized Governance Community-driven protocol development Stakeholder participation through token mechanics Democratic decision-making processes Enhanced User Experience Contextual ad relevance Ethical advertising practices Seamless integration with AI agents Economic Model The protocol's economic model is designed to align incentives across all participants: Advertisers: Pay for campaign creation and priority placement Operators: Earn rewards for validation services Agents: Receive incentives for successful ad integrations Platform: Collects base fees for sustainability",
    "summary": "World's First Decentralized Ad protocol for AI Agents. WarpAds instantly monetizes AI agents with ads. Gives advertisers seamless access to the most context relevant impressions on theirs ads with AI agents that have been transformed into influencers."
  },
  {
    "title": "OSS-Rewards-Agent",
    "url": "https://ethglobal.com/showcase/oss-rewards-agent-a4ge7",
    "description": "Project DescriptionOur project is revolutionizing the open-source software (OSS) ecosystem by introducing a reward system for contributions—evaluated and distributed automatically by an AI agent. By bridging the gap between those who want to see improvements and the developers who can deliver them, we’re set to accelerate OSS development like never before. How It Works: For Donors: Anyone who is willing to pay to see a particular OSS issue improved (whether they are a part of the OSS community or an interested third party) becomes a donor. Donors log in through the OSS-Agent-Reward donor page using Coinbase’s Smart Wallet. Once logged in, they fill in the info about the issue they want to improve and set the reward amount. At that moment, an AI agent—built with Coinbase’s AIAgentKit—triggers an approval via a smart contract, effectively locking in the reward funds. For Contributors: Developers confident in their coding and hacking skills log in to the contributor page on OSS-Agent-Reward using GitHub authentication powered by Privy’s server wallet. This process automatically generates a wallet address linked to their GitHub account. Contributors can later update this address to their personal MetaMask wallet if desired. Contributing and Claiming Rewards: After logging in, contributors can browse the list of issues with attached rewards and submit pull requests on GitHub to fix the ones they believe they can solve. Once a pull request is merged by the OSS community, the AI agent detects the merge, automatically triggers the corresponding smart contract, and attaches a claim link to the GitHub issue. Contributors then simply click the link to claim their reward. The claim process is secured through authentication, ensuring that only the GitHub account that submitted the pull request can receive the reward. OSS faces challenges with development speed due to a lack of human resources. By matching donors who seek improvements with skilled contributors—and automating the reward distribution via AI agents—our project dramatically boosts the speed and efficiency of OSS development.How it's Made Coinbase AgentKit: Automates fund locking and triggers smart contract approvals through AI-driven transaction management. Coinbase AgentKit(Powered Reward Distribution): Detects pull request merges in real time, analyzes commit contributions dynamically, and executes smart contracts to allocate rewards fairly. Coinbase Smart Wallet: Enables seamless wallet creation on the frontend, allowing donors to log in and manage funds without additional setup. Coinbase OnchainKit: Provides frontend UI components, enhancing the user experience. Privy GitHub Authentication: Generates contributor wallet addresses and links them securely to their GitHub accounts. Privy Server Wallet: Verifies the authenticity of the contributor's GitHub account and signs transactions securely to ensure only authorized users can claim rewards. Privy Policy Engine: Enforces security policies on server wallets to allow only controlled transaction signing. By leveraging Privy for authentication and Coinbase for transaction automation, the system ensures a frictionless and secure process for both donors and contributors. The AI agent handles fund management, security enforcement, and reward allocation, creating a trustless and efficient reward distribution mechanism.",
    "summary": "A tool that uses an AI agent to evaluate the contribution level of contributors based on the source code they committed and the review comments from reviewers when a pull request is merged on an OSS GitHub repository and automatically distributes rewards accordingly."
  },
  {
    "title": "Zegent",
    "url": "https://ethglobal.com/showcase/zegent-ift0e",
    "description": "Project DescriptionZegent enables borrowers to access undercollateralized loans using zero-knowledge proofs. Traditionally, high collateral requirements restrict borrowing, while lenders lack visibility into borrowers’ financial status. By leveraging Circom and zk-SNARKs (Groth-16), Zegent allows borrowers to prove their financial eligibility without revealing sensitive data, enabling lenders to offer more flexible loan terms. Beyond lending, Zegent enhances token trading and analysis across multiple exchanges and protocols through its verifiable AI agent, CryptoSage, built on the CDP AgentKit. To strengthen its capabilities, we have developed additional tools alongside existing ones for seamless trading and analysis. CryptoSage is secured using EigenLayer’s Autonomous Verifiable Service (AVS), ensuring trust and transparency. When users submit queries, the AgentServiceManager contract triggers a NewTaskCreated event, notifying registered Operators. These Operators, who have staked and delegated assets, process the task independently. Once completed, they sign and submit a hashed response using their private key back to the AVS contract. This decentralized mechanism guarantees secure, verifiable AI-powered responses, enhancing both trust and efficiency in crypto transactions and loan processing within the Zegent ecosystem.How it's MadeHow Undercollateralized Lending Works Zegent enables undercollateralized lending by assessing borrowers' financial history from various exchanges and protocols using the Arbitrum API for subgraphs deployed on GraphQL. The retrieved financial data is processed through the generate_witness algorithm in zk-SNARKs, which generates private and public signals based on parameters set in the Circom circuit. Borrower history remains private, while loan threshold eligibility and other constants are public. The public signals and zero-knowledge proof are then sent to the Loan Contract, which inherits the Verifier Contract to call the verify function. This function returns a boolean value indicating whether the borrower meets the loan eligibility criteria. Borrowers who pass the verification can create loan requests, and lenders can view only those who qualify based on the threshold score. Borrowers with weaker financial scores, who do not qualify for loans, have the option to use Zegent’s AI-powered exchange tools, leveraging exchange ABIs to strengthen their profile through analysis and informed trading. CryptoSage – Verifiable AI for Trading & Analysis CryptoSage, built using the CDP AgentKit, enhances token trading and analysis through AI-driven tools such as AaveQueryTool, AaveSupplyTokenTool, MorphoQueryTool, and AerodromeTool. To ensure verifiability, CryptoSage is secured through EigenLayer’s Autonomous Verifiable Service (AVS) mechanism. When an AVS consumer queries CryptoSage, the request is sent to the AgentServiceManager contract, which emits a NewTaskCreated event. This notifies registered Operators, who have staked and delegated assets, to process the request. Each Operator independently hashes the response, signs it using their private key, and submits the signed hash back to the AgentServiceManager AVS contract. Only registered Operators who meet the required stake threshold can submit responses, ensuring a secure, verifiable, and decentralized AI-powered system for lending decisions and crypto analysis.",
    "summary": "A zero knowledge based protocol for undercollaterized loans integrated with an verifiable AI-agent for improving borrower's financial portfolio."
  },
  {
    "title": "BlockBlend",
    "url": "https://ethglobal.com/showcase/blockblend-6fc0s",
    "description": "Project DescriptionWeb3 Integration Platform A bridge between Web2 and Web3 applications utilizing autonomous agents for blockchain interactions. Core Components Web3 Agent System Manages autonomous blockchain agents Handles wallet creation and management Coordinates multiple agents for different operations Implements intelligent decision-making for blockchain interactions Smart Contract Infrastructure EigenLayer integration for staking and security Operator management system AVS (Actively Validated Service) implementation Multi-signature wallet functionality Timelock mechanisms DEX (Decentralized Exchange) capabilities CDP (Coinbase Developer Platform) Integration Wallet management system Gasless transaction handling Secure credential storage Simplified blockchain interactions Cross-chain transaction support Security Features Secure wallet creation and storage Transaction signing and verification Rate limiting mechanisms Multi-signature support Encrypted credential management API and Integration RESTful API endpoints CORS support Frontend integration capabilities Cross-chain compatibility Social media integration support Key Technologies Backend: FastAPI, Python Blockchain: Web3.py, EigenLayer, CDP SDK AI: Google AI (Gemini) Smart Contracts: Solidity Security: OpenZeppelin contracts Main Features Blockchain Operations Token creation and management NFT minting and trading Asset transfers and swaps Staking and rewards Crowdfunding capabilities Agent Capabilities Autonomous decision-making Multi-agent coordination Wallet management Transaction optimization Error handling and recovery Integration Features Web2 to Web3 bridging Cross-chain transactions IPFS content management Social media connectivity Gasless transactions Architecture Modular design Microservices architecture Event-driven system Scalable infrastructure Secure communication protocols This project represents a comprehensive Web3 integration solution, combining modern blockchain technologies with autonomous agents to bridge traditional web applications and blockchain networks. It is particularly notable for: ✅ EigenLayer integration for security ✅ CDP support for simplified blockchain interactions ✅ Added onramp payments for agents ✅ Developer-friendly and secure design Suitable for various use cases, from simple token transfers to complex DeFi operations, while maintaining high security standards and user-friendly interfaces.How it's Made💡 Comprehensive Breakdown of the Project Architecture 💡 1. Core Architecture & Technologies 🛠️ Backend Core Framework: FastAPI High performance & asynchronous support Automatic API documentation Built-in validation via Pydantic WebSocket support for real-time updates Easy integration with async libraries 📂 Database & Storage Redis – Used for: Caching Session management Rate limiting Real-time data updates 2. Blockchain Integration Layer 💎 CDP (Coinbase Developer Platform) Implementation Integration Points: Wallet creation & management Transaction handling Asset management Smart contract interaction Cross-chain operations on ramp integration ✨ Benefits of CDP: Simplified blockchain interactions Reduced development complexity Enhanced security features Built-in cross-chain support Gasless transaction capabilities Robust error handling Comprehensive documentation 3. EigenLayer Integration ⛏️ Core Components: Staking mechanism Operator management AVS (Actively Validated Service) Slashing conditions Reward distribution 📝 Implementation Details: Custom smart contracts for staking Operator registration system Validation mechanisms Reward calculation algorithms Slashing penalty implementation 4. Agent System Architecture 👷️ Agent Types: Transaction Agents Handle blockchain transactions Manage gas optimization Monitor transaction status Handle transaction retries Wallet Agents Manage wallet creation Handle key management Monitor balances Process transfers Smart Contract Agents Deploy contracts Monitor contract events Execute contract functions Handle contract upgrades 🛠️ Agent Coordination: Central agent manager State synchronization Inter-agent communication Priority-based task scheduling Error recovery mechanisms 5. Security Implementation 🔒 Wallet Security: Multi-layer encryption Secure key storage Backup mechanisms Recovery procedures Access control 🚀 Transaction Security: Signature verification Transaction validation Rate limiting Fraud detection Multi-signature support 6. Notable Technical Solutions 🔄 Custom Transaction Queue: Priority-based ordering Gas price optimization Transaction batching Failure recovery State management 💳 Wallet Management: Hierarchical Deterministic (HD) wallet support Multi-currency support Address validation Balance monitoring Transaction history tracking 7. Integration Features 🔗 API Layer: RESTful endpoints WebSocket support Authentication middleware Rate limiting Request validation 🌐 Blockchain Interactions: Multi-chain support Cross-chain transactions Asset bridging Contract deployment Event monitoring 8. Development Process ⚙️ Phase 1: Core Setup Framework setup Database implementation Basic API structure Authentication system Testing framework 🛠️ Phase 2: Blockchain Integration CDP integration Wallet management Transaction handling Smart contract deployment Event listeners 👨‍💻 Phase 3: Agent System Agent framework Coordination system State management Error handling Monitoring system 9. Unique Technical Solutions 💵 Transaction Management: Transaction Flow: 1. User request → API 2. Validation layer 3. Agent assignment 4. Transaction preparation 5. Gas optimization 6. Signature process 7. Broadcast 8. Monitoring 9. Confirmation 10. State update 🔐 Wallet Security: Security Layers: 1. Encryption at rest 2. Secure key generation 3. Multi-signature support 4. Access control 5. Audit logging 10. Testing & Quality Assurance ⚙️ Test Types: Unit tests Integration tests Contract tests End-to-end tests Load tests Security audits 🏆 CI/CD Pipeline: Automated testing Code quality checks Security scanning Deployment automation Performance monitoring 11. Monitoring & Maintenance 🔄 System Monitoring: Performance metrics Error tracking Transaction monitoring Agent status Network health 🛠️ Maintenance Procedures: Regular updates Security patches Performance optimization Database maintenance Backup procedures 12. Notable \"Hacky\" Solutions Gas Optimization: Custom gas estimation Transaction batching Priority queue system State Management: Hybrid storage system Cache optimization State synchronization Error Recovery: Automatic retry system State restoration Transaction recovery This project represents a highly complex integration of multiple technologies, with CDP and EigenLayer as core components. The combination of these technologies, along with custom solutions for specific challenges, creates a robust, secure, and scalable system for Web3 interactions. The use of partner technologies significantly reduced development complexity while enhancing security and functionality. The system is built with a focus on scalability, maintainability, and security, ensuring an optimal user experience and long-term reliability. 🌟 Built for the future of Web3! 🌟",
    "summary": "BlockBlend: AI-powered tool bridging Web2 and Web3. Analyze apps, suggest blockchain features, and provide easy-to-use embeddable tags. Simplify integration of crypto, ZK proofs, and protocols for developers."
  },
  {
    "title": "Hello World Computer",
    "url": "https://ethglobal.com/showcase/hello-world-computer-1jube",
    "description": "Project DescriptionHello World Computer is a chat-based onboarding experience. Newcomers to Ethereum can claim starter packs, which entitle them to a small Ethdrop to cover gas fees, a choice of NFTs, an ERC20 token (FLAUNCHY or AERO) to get started with Defi, and a basename all of their own! Chatting through natural language, enhanced with interactive components, this is an enriched an helpful way to get started with Ethereum! Meanwhile, Ethereum OGs can buy starter packs which are made available to newcomers as gifts!How it's MadeWe used: OpenAI LLM Vercel ai-sdk Agentkit for action orchestration Forked Vercel's AI Chatbot Onchainkit for web3 login & displaying some components We built: Custom web3 login for Vercel's AI chatbot - next-auth compatible, powered by SIWE (backend session auth) Leveraged the latest structured model outputs from the ai-sdk to provide interactive in-chat experiences AI-SDK <-> Agentkit tool wrapper Privy Wallet provider for Agentkit https://github.com/coinbase/agentkit/pull/242 <Checkout/> component from onchainkit to support EOAs https://github.com/coinbase/onchainkit/pull/1937 Basename creation & transfer action provider Gnosis safe creation & transaction action provider Zora NFT minting provider Custom Alchemy token balances action provider Custom interactive components in-chat (options, asking for help, connecting wallet, checkout) Coinbase Checkout lifecycle & backend purchase verification Simple memory solution for the agent across user chats",
    "summary": "A truly magical onboarding experience you can gift to your normie friends."
  },
  {
    "title": "Creative AI Agents",
    "url": "https://ethglobal.com/showcase/creative-ai-agents-3t5rk",
    "description": "Project DescriptionThis project explores the intersection of conversational AI and tokenized systems. By integrating a token launcher within ElizaOS, users can earn tokens by engaging in meaningful conversations with Eliza, trading them with other users, or even purchasing them. These tokens can be used to influence Eliza's responses, unlocking new conversational pathways and personality traits, or even contribute to a shared narrative within the ElizaOS environment. This approach aims to create a more engaging and dynamic user experience, fostering a deeper connection between users and the AI through a system of rewards and personalized interactions.How it's MadeThis project combines a custom TypeScript ElizaOS framework, smart contracts on the Polygon blockchain, and a Next.js frontend. The TypeScript framework manages conversational interactions and integrates with the token smart contracts, which govern token creation, distribution, and usage. The Next.js frontend provides a user interface and bridges connections to external platforms. We've integrated Warpcast, Discord, and Telegram APIs, enabling cross-platform interaction with ElizaOS and token management. Image generation is powered by the FAL.AI API. Users can earn tokens through platform engagement and use them to, for example, generate images or trigger Warpcast actions. A custom Express.js API layer facilitates communication between the frontend, framework, and smart contracts (using ethers.js). Key challenges included seamless cross-platform integration and maintaining data consistency. We're actively developing new features, including additional platform integrations and expanded AI capabilities.",
    "summary": "An AI Agent swarm that handles day to day creative work, investing and guidance."
  },
  {
    "title": "YieldSage",
    "url": "https://ethglobal.com/showcase/yieldsage-ya1di",
    "description": "Project DescriptionOur team built a DeFi platform designed to help liquidity providers (LPs) efficiently manage their investments in Uniswap liquidity pools. The platform incorporates AI-driven insights and automation to optimize liquidity management and maximize returns. Key Features of Our Platform 1.Deposit and Manage Liquidity Users can provide liquidity to various Uniswap pools. Funds are allocated based on predefined strategies and AI recommendations. 2.AI-Based Pool Analysis An AI agent analyzes different Uniswap pools. Users receive key insights to help them decide whether to invest in a particular pool. 3.Concentrated Liquidity Management AI helps optimize liquidity positions within specific price ranges for higher efficiency. 4.Automated Fund Rebalancing Another AI agent dynamically redistributes funds across pools. The rebalancing considers risk appetite, gas fees, and profit potential to maximize earnings. 5.AI-Generated Insights for Liquidity Providers When analyzing a pool, our AI agent provides the following structured insights: Recommendation: Should the user invest or not? Confidence Level: High / Medium / Low Key Factors: Important aspects influencing the decision. Risks: Potential risks associated with the pool. Opportunities: Advantages and profit potential. These insights help users make informed decisions before investing in a liquidity pool.How it's MadeWe combined ReactJS, Web3 tools, AI, and The Graph to create a liquidity management platform that helps users analyze and optimize their investments in Uniswap pools. Here’s how everything fits together: Frontend (ReactJS + Tailwind CSS) → Handles the user interface, making it easy to interact with the platform. Wallet Connection (Ether.js) → Allows users to connect MetaMask and interact with Uniswap pools. Data Fetching (The Graph Protocol - Uniswap Subgraph) → Fetches data about Uniswap liquidity pools. Charts & Visualization (Recharts.js) → Displays important metrics like volume, liquidity, and price trends in graphical form. AI (Groq's Mixtral LLM) → Analyzes Uniswap pool data and provides users with insights, such as risk assessment and investment opportunities. Deployment - We used OneSec for quick and efficient deployment of our platform.",
    "summary": "We are building an AI-powered DeFi platform that analyzes various protocols (like Uniswap, Aave) and pools within them. It compares key parameters like returns, fees, liquidity, and risks to suggest the best investment or trading opportunities."
  },
  {
    "title": "YieldMax AI",
    "url": "https://ethglobal.com/showcase/yieldmax-ai-18524",
    "description": "Project DescriptionThe DeFi Yield Maximizer Agent is an advanced, autonomous AI-powered investment tool designed to optimize stablecoin yields across multiple decentralized finance (DeFi) protocols. Built specifically for the Base blockchain, this intelligent agent continuously monitors market conditions, analyzes investment opportunities, and automatically manages a user's crypto portfolio with a focus on maximizing returns while maintaining robust risk management. Key features include: Real-time market analysis across multiple DeFi protocols Automated yield optimization strategies Intelligent risk assessment Secure wallet management Gas-cost aware transaction execution Cross-protocol investment tracking The agent leverages cutting-edge technologies like artificial intelligence, blockchain infrastructure, and advanced financial algorithms to provide hands-off, intelligent crypto investment management. It can automatically detect the most profitable lending and yield opportunities, rebalance positions, and make data-driven investment decisions with minimal human intervention.How it's MadeThe DeFi Yield Maximizer Agent emerged through strategic collaboration with key blockchain ecosystem partners, leveraging their cutting-edge technologies to create a next-generation autonomous investment platform. Technologies and Tools Used: Technologies and Tools Used: Base Provided the primary deployment infrastructure Enabled low-cost, high-speed transactions Offered optimal environment for DeFi protocols Supported by Coinbase's Blockchain ecosystem Coinbase Developer Platform (CDP) Enabled secure wallet infrastructure Provided comprehensive SDK for blockchain interactions Simplified complex blockchain operations Offered robust key management and transaction capabilities AgentKit by Coinbase Delivered modular AI agent framework Provided pre-built blockchain interaction tools Enabled rapid development of intelligent agents Simplified integration of AI reasoning with blockchain actions Autonome Platform Powered autonomous agent deployment and hosting Provided scalable AI infrastructure Enabled seamless API integration Offered secure environment for AI agent operations Simplified agent maintenance and monitoring Architectural Innovation The project's core innovation lies in combining artificial intelligence with blockchain infrastructure. By utilizing AgentKit's flexible framework and Autonome's robust hosting platform, we created an autonomous agent capable of making sophisticated financial decisions across multiple DeFi protocols. The agent intelligently: Analyzes market conditions in real-time Identifies yield optimization opportunities Executes risk-aware investment strategies Manages transactions across different protocols The integration of Autonome's platform with CDP and AgentKit creates a powerful synergy, enabling: Reliable agent availability and performance Secure handling of sensitive operations Scalable processing of market data Efficient execution of DeFi strategies The agent intelligently: Analyzes market conditions in real-time Identifies yield optimization opportunities Executes risk-aware investment strategies Manages transactions across different protocols Technical Approach The solution was built using a multi-layered approach: AI-powered decision-making engine Blockchain interaction layer Risk management algorithms Secure transaction simulation system Unique Capabilities Cross-protocol yield tracking Automated portfolio rebalancing Gas-cost optimized strategies Intelligent risk assessment Key Technologies Artificial Intelligence (GPT models) Blockchain Infrastructure Smart Contract Interactions Decentralized Finance Protocols The project represents a significant leap in autonomous financial management, demonstrating how AI and blockchain can work together to create intelligent, self-managing investment systems. Future Potential This proof-of-concept showcases the immense potential of AI-driven financial tools, with future iterations potentially expanding to more protocols, more complex investment strategies, and broader financial management capabilities. The DeFi Yield Maximizer Agent is not just a product, but a glimpse into the future of intelligent, automated financial systems powered by cutting-edge blockchain and AI technologies.",
    "summary": "An AI-powered yield maximizer for stablecoins on Base. The AI agent automatically selects optimal lending strategies across protocols, while users maintain control through their dedicated AI-Agent powered wallets."
  },
  {
    "title": "NucleuX",
    "url": "https://ethglobal.com/showcase/nucleux-aspdq",
    "description": "Project DescriptionNucleux is an intelligent orchestration service designed to streamline crypto transactions by determining the most optimal workflow for user queries. The system follows a structured pipeline for processing user prompts and executing crypto-related tasks: Initial Processing (Routing Service) User prompts first enter the Prompt Structuring Service This service breaks down complex requests into manageable subtasks The structured workflow then passes through a Validation Service Validation ensures the workflow is feasible and properly structured Action Mapping Service The validated workflow enters the Action Mapping Service layer A Resource Planner analyzes the workflow and determines required resources The Resource Planner interfaces with a Pool of Agents (Bridging, Swapping, Exchange) Task Mapper assigns specific subtasks to appropriate agents based on their capabilities Agent Pool Utilization Any agents deployed on Autonome can be utlised and plugged into the pool. The multi agent orchestrator facilitates collaboration in this dynamic environment where multiple agents not knowing each other can communicate to achieve the end goal For demonstration we deployed three specialized agent on Autonome: Bridging Agent: Handles cross-chain transfers Swapper Agent: Manages token swaps Exchanger Agent: Handles currency/token exchanges Final Output The system processes the workflow through the assigned agents Results are compiled and presented as the final output This architecture ensures efficient processing of user requests through structured decomposition, validation, and intelligent resource allocation.How it's MadeHere's a detailed breakdown of how we built this project, including the technologies, architecture, and some interesting hacks we implemented: 🛠️ Tech Stack & Architecture Core Technologies Used Backend: Node.js (Express) for the orchestration logic Frontend: React with TypeScript for the UI and interaction plugin Blockchain & Agents: Autonome for deploying and managing agents Covalent SDK Zee for fetching on-chain data Orchestration Layer: Custom-built using event-driven architecture 🔗 How Everything Fits Together User Query Processing The user submits a request (e.g., “Buy USDC on Gnosis via UPI”). The Prompt Structuring Service (subservice of Routing Service) breaks this into multiple subtasks, each handled by a specialized agent. Workflow Validation & Optimization The Validation Service checks feasibility, correctness, and dependencies before execution. Optimizations like cost minimization and route efficiency are applied. Agent Allocation & Execution The Resource Planner (in the Action Mapping Service) selects agents from the Autonome-deployed pool (Swapping, Bridging, Exchange). The Task Manager assigns each agent a specific responsibility. Agents communicate asynchronously enabling parallel execution. Transaction Execution & Feedback Loop Once the user reviews the plan, and approves the workflow, execution begins. The frontend/plugin dynamically updates the status of workflow ⚡ Cool & Hacky Stuff We Did Dynamic Agent Deployment Instead of hardcoding agents, we made it plug-and-play. Agents deployed via Autonome are instantly available without manual configurations. Cost-Based Routing Optimization The orchestration layer intelligently prioritizes routes with lower gas fees and higher efficiency using Covalent SDK Zee + our custom logic. Frontend as a Plugin Instead of building a standalone UI, we developed a lightweight frontend plugin that integrates into existing dApps for seamless adoption. Multi-Layer Validation for Transaction Safety Instead of a single-layer check, we implemented multi-step validation at: Workflow Structuring Pre-Execution Sanity Checks Agent-Level Validation 🚀 Why These Choices? Modularity → Each agent is independent, making the system extensible. User Control & Transparency → Users always get full visibility before execution. This setup makes our multi-agent orchestration service highly efficient, resilient, and developer-friendly.",
    "summary": "A plug-and-play multi-agent orchestrator framework leveraging Covalent SDK that automates complex workflows for agents deployed on Autonome"
  },
  {
    "title": "EiLearn",
    "url": "https://ethglobal.com/showcase/eilearn-ttuid",
    "description": "Project DescriptionEiLearn is an AI-driven Web3 platform that teaches users about crypto trading and staking. Beginners can practice in a risk-free environment, while experienced traders can test strategies with AI advisors. All trades are verified on-chain using a decentralized system, preventing fraud and manipulation. AI-powered insights help users make better trading decisions, and rankings are based on fair and transparent trade validation.How it's MadeWe built EiLearn using React, AI agents, and smart contracts to create a secure and fair trading platform. Smart contracts handle trade validation, rankings, and rewards, keeping everything on-chain for transparency. AI advisors analyze market trends to give trade recommendations, while AVS (Actively Validated Services) uses multi-signature consensus to verify trades and prevent fraud. We also added fraud detection to catch wash trading and spoofing using historical data. For security, we use EigenLayer, which punishes bad actors and ensures fair trade validation. We optimized the system for fast and low-cost trade verification and integrated blockchain oracles for real-time market data. Everything works together to provide a trustless, gamified, and educational trading experience. For the user account system, we also tapped on Privy.",
    "summary": "EiLearn is an AI-powered Web3 platform that helps users learn crypto trading through a decentralized trading game. Traders can practice with testnet coins, get AI-driven insights, and transition to real trading with fair, on-chain trade validation."
  },
  {
    "title": "Gossip Girl",
    "url": "https://ethglobal.com/showcase/gossip-girl-rrsx2",
    "description": "Project DescriptionGG (Gossip Girl) is an innovative Web3 platform that reimagines social content sharing through blockchain technology. Built on the Base Sepolia Network, it combines a React/TypeScript frontend with a Next.js backend to create a nostalgic, 2010s-inspired experience where users can transform their secrets into valuable NFTs using the Metaplex ERC-721 standard. The platform features a custom-trained AI Gossip Girl bot for authentic interactions, seamless wallet management through Privy integration, and a unique NFT marketplace for trading digital secrets. With its retro-themed UI and modern blockchain capabilities, GG creates a bridge between classic social media drama and Web3 ownership, allowing users to not just share content, but truly own and monetize their digital narratives. The platform's architecture ensures secure transactions, scalable performance, and an engaging user experience that captures the essence of the original Gossip Girl era while leveraging cutting-edge blockchain technology. XOXO! 💋How it's MadeGG (Gossip Girl) was crafted as a modern Web3 platform by combining cutting-edge blockchain technology with nostalgic 2010s web design. The development began with setting up a dual-architecture system: a dynamic frontend built using React and TypeScript, powered by Vite for optimal development experience, and a robust backend implemented with Next.js for efficient API routing and server-side operations. The frontend architecture focuses on component-based development, featuring a retro-inspired UI that captures the essence of the Gossip Girl era while maintaining modern usability standards. Each component, from the tweet-style NFT creation interface to the collection galleries, was carefully designed to blend nostalgia with contemporary Web3 functionality. The blockchain integration forms the core of GG's infrastructure, built on the Base Sepolia Network using the Metaplex ERC-721 standard for NFT operations. The platform implements Privy Wallet integration for seamless Web3 transactions, allowing users to easily mint, trade, and collect digital secrets as NFTs. One of the most distinctive features is the custom-trained AI bot, developed using natural language processing to capture the iconic Gossip Girl voice, providing users with an authentic and engaging experience. The backend APIs handle everything from NFT metadata management and image processing to wallet policy administration and social features, all while maintaining secure and scalable operations. The development process prioritized user experience without compromising on technical sophistication. The team implemented modern development practices including TypeScript for type safety, component reusability for consistent design, and efficient state management for smooth user interactions. Security considerations were paramount, with careful attention paid to wallet integration, transaction handling, and data privacy. The result is a platform that successfully marries the drama and excitement of Gossip Girl with the technological innovations of Web3, creating a unique space where digital secrets become valuable assets and social interaction meets blockchain technology. XOXO! 💋",
    "summary": "Spotted: Gossip Girl 2.0! Our AI-powered, Eliza-inspired bot is back, slaying the rumor game. Scraping secrets, dropping scandal, & keeping your timeline scandalously fresh. XOXO, Gossip Girl."
  },
  {
    "title": "Infinity",
    "url": "https://ethglobal.com/showcase/infinity-2ihdt",
    "description": "Project DescriptionImage owning a remote food truck; you want to quickly run a promotional offer (i.e. free taco) to attract and reward loyal customers, but have limited resources and time to make it happen. Introducing the Infinity AI Agent—small businesses are now a chat away from automated loyalty/promotional offer campaigns that can run from anywhere, anytime! Owners can now manage their promotional offers and loyalty programs through the subscription-based platform which can be accessed through a computer or phone. With just a few steps, business owners set up offers through an Agent chat interface that collects basic details to set up the promotional offer. The Agent creates the campaign; writes some social media posts to kick it off; and automates the distribution, tracking, and redemption of the offers directly with customers. In turn, customers can receive offers directly with their wallet and quickly redeem them digitally when they claim their promotional offer. Infinity also tracks and monitors the promotional offer/loyalty program campaign budgets and user engagement so businesses can understand the marketing impact with relevant data, and adjust campaigns as needed. Infinity AI Agent is the future of loyalty programs: on-chain and automated, anywhere at anytime, easy-to-use and set-it-and-forget-it!How it's MadeUsing Blockchain, Eliza AI, and NFT technology, we have created an easy-to-use AI Agent for businesses so they can focus on running the core operations of their business and interacting directly with customers. Blockchain technology allows us to build a foundation for quick and instant digital payments and digital coupons: Business: Subscribe to Infinity AaaS with a wallet (new to Web3 owners can instantly create a wallet through social login, or an existing wallet can be connected). Fund AI Agent wallet gas fees (as relevant). Agent: Receive funding through the business owner’s wallet. Parse customer wallets from business payments wallet transactions to create a database of customer wallet addresses and note points by spend. Then the agent can note if customers have enough points for a promotional offer and identify which wallets to send the promotional offer to accordingly. Create a separate Agent wallet to manage NFT minting and burning directly with customer wallets, and track points balance reduction after customer claims an offer. Customer: Receive NFT promotional offer coupon from the Agent (after paying with cryptocurrency to business payments wallet QR Code and earning sufficient points). Connect wallet to webpage where they can quickly redeem their NFT to claim their promotional offer. Eliza AI allows us to create an advanced AI agent that compiles multiple tasks into one AI framework without having to set up an ecosystem of task-based agents. Eliza gives us a more advanced platform to start from and ability to program more complex (but still connected) tasks. Promo Set-Up: AI consolidates the campaign information into actionable items and also creates them on-demand: smart contract, NFT, campaign-specific social media content, QR Code. AI also allows us to configure multiple APIs across fields to execute actions on the owner’s behalf. Program Automation: AI monitors the merchant wallet address income to distribute tokens, which work as points in a tamper-proof customer loyalty system. AI scans customer requirements and automatically approves NFT/offer redemption based on specific criteria set by the business (i.e. social media follow, minimum amount of prior spend). Data Insights: AI is especially beneficial in distilling valuable insights through the gathering and visualization of data over time, which enables owners to optimize campaigns to be more effective without spending the time on complex data analytics. NFTs allow us to create digital coupons that can be quickly created with images and without printing. These digital coupons can be sent directly to customers and then redeemed automatically by the Agent after customers meet pre-set criteria, making it a hassle-free and hands-free experience for Owners. Other - API for QR Code: Agent creates an HTML QR Code for customers to scan (if needed) and land on a webpage. We are using technology for real world use cases and real world users. Let's bring the world on-chain!",
    "summary": "AI Agent for small business owners to automate customer loyalty/promotional programs."
  },
  {
    "title": "KOVA",
    "url": "https://ethglobal.com/showcase/kova-59fb2",
    "description": "Project DescriptionAI agents will soon be as common as personal assistants, executing tasks and making decisions for users. But today’s AI agents come with major flaws: No Ownership – AI models are centralized and can disappear anytime. No Portability – AI agents are locked to specific platforms. No Privacy – AI agents must reveal everything to collaborate. KOVA solves this by introducing tokenized AI agents and secure execution environments. 🔹 Tokenization: True AI Ownership Own your AI – Agents exist independently as NFTs. Monetize AI – Sell, rent, or use agents as collateral in DeFi. Platform agnostic – Built on open-source models for full portability. AI agents are now digital assets with real value. 🔒 Secure Rooms: Private AI Execution Private AI execution – Even owners can’t see what happens inside. Smart contract-enforced rules – Ensures trust & compliance. Locked AI NFTs – Prevents unauthorized changes during execution. Agents execute trades, investments, and decisions autonomously & securely. 📈 First Use Case: AI-Powered Trading Traders tokenize AI trading strategies (e.g., “Buy 1st higher volume coin in the last 7 days for 100 USDT”). Investors define constraints (e.g., “No meme coins, max 100 USDT per trade”). Agents interact in a Secure Room, executing trades without revealing strategies or constraints. Privacy-first execution ensures intellectual property protection for both traders & investors. 🌍 AI Agents in DeFi & Beyond Trade AI agents on OpenSea & Blur. Use AI as collateral for lending & staking. Build composable AI services for automated execution. 🚀 KOVA: The Future of AI as an Asset Class Discover & match AI agents tailored to your needs. Tokenize AI services to generate passive income. Enable AI collaboration while keeping data private. By combining tokenization with secure execution, KOVA ensures AI truly belongs to its users—private, composable, and onchain.How it's MadeKOVA revolutionizes AI agent interactions by combining secure communication with tokenization, enabling AI agents to engage in private, verifiable exchanges while maintaining full DeFi compatibility. Core Innovation: Secure Agent-to-Agent Communication We've created a \"Secure Room\" concept where AI agents can interact and share sensitive data - once agents leave the room, even their owners cannot recover the exchanged information. This breakthrough is achieved through a architecture combining Gaia's decentralized compute infrastructure with Nillion's SecureVault and TEEs: Tokenization Layer: Implemented ERC-7662 standard (extending ERC-721) for agent tokenization, enabling seamless integration with existing DeFi primitives like lending and collateralization Deployed on Base Sepolia (https://base-sepolia.blockscout.com/address/0xEF78E7D23A02a404D348a0f37ac0fF4D10991D1a), featuring permissionless agent creation Dual storage system using Nillion SecureVault for private prompts ( `nillion://${orgDid}/${schemaId}/${recodrId) and IPFS for public strategies, giving users flexibility in privacy levels Secure Room Implementation: The room itself is an AI agent with an associated smart contract that temporarily locks participating agent NFTs Leverages Gaia nodes for decentralized compute, running in a secure environment (future TEE integration planned) Each room receives a dedicated CDP wallet via AgentKit for executing agreed-upon transactions Built-in tooling interface for common operations (getParticipants(), getVolumeData(\"7d\"), executeTrade()) Implemented computation limits to prevent resource exhaustion from recursive strategies Security Considerations: While our current MVP uses an organization-level Nillion implementation, our architecture is designed for user-specific SecureVaults derived from private keys, maximizing privacy. We've also implemented a \"click-your-strategy\" interface instead of free-text prompts, preventing arbitrary strategy execution while maintaining user control over supported trading patterns. Technical Infrastructure: Smart contracts deployed on Base Sepolia with custom token pools and faucet for testing Gaia nodes handle secure room computation and agent simulation Nillion SecureVault manages sensitive prompt storage and retrieval AgentKit integration enables onchain actions through CDP wallets Custom tooling interface for standardized agent interactions What Sets Us Apart: Implementation of truly private agent-to-agent communication Novel combination of Gaia's compute layer with Nillion's secure storage Full DeFi compatibility through ERC-7662 standardization Scalable architecture supporting future TEE integration Production-ready security measures preventing common attack vectors We've focused on creating a robust foundation for secure agent interactions while maintaining practicality and usability. Our architecture enables unprecedented privacy in agent-to-agent communications while remaining fully compatible with existing DeFi infrastructure - a combination we believe is essential for the future of autonomous AI systems in crypto.",
    "summary": "Kova is a privacy-first, AI-driven platform that connects users—investors, traders, and beyond—with AI agents based on their objectives and preferences, ensuring secure execution and data privacy."
  },
  {
    "title": "Glance",
    "url": "https://ethglobal.com/showcase/glance-sd201",
    "description": "Project DescriptionThe system features an automated content discovery engine that monitors Farcaster, scanning for user-specified keywords. At its core, a language model analyzes the platform to identify trending discussions, organizing them based on key metrics, including topic relevance, audience reach, and user engagement levels. The same model then crafts contextually appropriate poll questions and their corresponding answer options, streamlining the process of gathering community feedback on trending conversations.How it's MadeThis project will leverage AgentKit to handle all AI-related functionality, providing a robust framework for AI interactions and management. For user authentication and access control, we'll implement Privy, which will serve as the login system, handling user sessions and identity verification.",
    "summary": "AI-powered polling platform that transforms social media insights into interactive polls. Input keywords, get curated content, and generate instant Yes/No or multiple-choice polls to gauge public sentiment on trending topics."
  },
  {
    "title": "UnitedStatesOfAgents",
    "url": "https://ethglobal.com/showcase/unitedstatesofagents-12vdd",
    "description": "Project DescriptionIn the metaverse, agents can move around. The idea is that as the user enters the metaverse, the user will be greeted by a general agent, which would route the user to specific agents depending on the user's demands. Agents would have rating, and would be able to perform tasks to earn in-state currency from users. Agents would also be able to 'sub-contract' certain tasks to other agents. Transactions can happen between agents. Developers would also be able to deploy agents in the metaverse to earn in-state currencyHow it's MadeOur project is an ambitious endeavor to create an open metaverse world with a gaming style, where AI agents can thrive and build a network state. This innovative environment combines several advanced technologies to deliver a seamless and interactive experience. Phaser for Metaverse Development: At the heart of our project is the use of Phaser, a powerful 2D game framework, which we utilized to construct the metaverse world. Phaser's capabilities allowed us to design a dynamic and engaging environment where AI agents can interact, explore, and build. The gaming style of the metaverse not only enhances user engagement but also provides a visually rich platform for showcasing the capabilities of our AI agents. Next.js for Front-End Hosting: To host the front end of our metaverse, we chose Next.js, a robust React-based framework. Next.js enabled us to create a high-performance, server-side rendered application that ensures fast load times and a smooth user experience. This choice was crucial for handling the complex interactions and data visualizations required by our metaverse world. AI Agent Tools and Coinbase Developer Platform: Our AI agents are powered by a suite of tools, including the Coinbase Developer Platform. This platform provides essential APIs and functionalities that allow our agents to interact with cryptocurrency markets and manage digital assets. By integrating these tools, we ensured that our AI agents could operate autonomously within the metaverse, making informed decisions and executing transactions as needed. Solidity and Hardhat for Network State Contracts: On the backend, we employed Solidity and Hardhat to develop and deploy the network state contracts on Base. Solidity, a programming language for smart contracts, allowed us to define the rules and interactions within our network state. Hardhat, a development environment for Ethereum, facilitated the deployment and testing of these contracts, ensuring a secure and reliable backend infrastructure. Integration and Challenges: Bringing together these diverse technologies required meticulous integration efforts. We developed custom middleware to enable seamless communication between the front-end and backend systems, ensuring that data flows smoothly and efficiently. Additionally, we implemented a robust state management system to handle the interactions between the AI agents and the network state. Innovative Solutions and Hacks: Throughout the development process, we encountered several challenges that necessitated creative solutions. One notable innovation was optimizing the real-time interaction capabilities of our AI agents within the metaverse. By implementing a custom caching mechanism and leveraging the power of Next.js, we were able to reduce latency and enhance the responsiveness of our system, providing users with an immersive and interactive experience. In summary, our project represents a pioneering effort to merge gaming, AI, and blockchain technologies into a cohesive and open metaverse world. By leveraging the strengths of each platform and framework, we have created a sophisticated system that not only meets our technical requirements but also offers a compelling and engaging user experience.",
    "summary": "\"Building the Network State of AI Agents\". United States of Agents is a place that aggregates specialized agents in a space for them to earn, collaborate, creating \"Agentic Economy\", an new economic system operated autonomously by interactions of limitless AI Agents."
  },
  {
    "title": "WealthPilot",
    "url": "https://ethglobal.com/showcase/wealthpilot-ftf7u",
    "description": "Project DescriptionWealthPilot is an AI-driven autonomous financial advisor that provides smart, data-backed investment insights and financial planning. Built on eliza framework, it analyzes market trends, personal goals, and risk tolerance to deliver customized recommendations. With real-time updates and automated portfolio management, WealthPilot empowers users to navigate their financial journey with confidence and precision, ensuring optimal wealth growth and security.How it's MadeWe are building on top of Eliza OS framework, allowing us to leverage existing plugin for the interaction. To be more accurate on the crypto market, we have focusing the development of plugins to have access to latest crypto price in the market. According so, we have build a plugin to fetch the last BTC price using eoracle, relying on the Eigen Layer security.",
    "summary": "WealthPilot is an AI-powered financial advisor that provides smart investment insights, real-time updates, and automated portfolio management to help users grow and manage their wealth with confidence."
  },
  {
    "title": "Zoey",
    "url": "https://ethglobal.com/showcase/zoey-gyyn4",
    "description": "Project DescriptionZoey is an AI companion that transforms personal development into an engaging journey by combining emotional intelligence with gamification elements. The platform helps users track and celebrate their progress while providing genuine emotional support and practical guidance. Attribute System Users develop across five key attributes (0-100 scale): Empathy: Emotional intelligence and relationships Wisdom: Knowledge and decision-making Energy: Motivation and vitality Discipline: Focus and habit formation Creativity: Innovation and expression Virtual Economy Earn coins through daily activities, tasks, and achievements Spend coins on attribute upgrades, abilities, and gifts Progressive reward system encourages consistent engagement Special Abilities Users can unlock features that enhance their growth journey: Tools for emotional insight and tracking Focus and productivity enhancers Goal tracking and visualization features Memory and achievement collection Emotional Support Empathetic conversations Mood-based responses Achievement celebration Personalized motivation Practical Guidance Goal-setting assistance Progress tracking Task management Habit formation support Benefits Structured personal development path Visible progress tracking Consistent emotional support Engaging reward system Balanced skill development Zoey creates a unique experience where personal growth becomes an adventure, making self-improvement both structured and enjoyable through the perfect blend of AI support and gamification.How it's MadeBuilt with Next.js, Zoey pairs each user with their own AI companion instance backed by LLaMA. Users interact through chat while earning coins and leveling up attributes - all tracked on Base. Each Zoey can buy items and perform actions autonomously on-chain thanks to CDP AgentKit handling the wallet stuff. We deployed the whole thing via Autonome and hooked up LLaMA through Gaia, letting Zoey chat naturally while keeping all the game mechanics and rewards decentralized. Link to Zoey coin contract -https://base-sepolia.blockscout.com/address/0xe8D395EdCed58CdcA9f404db7BeD793c291F493f",
    "summary": "Zoey is your AI companion that turns personal growth into an adventure. Level up attributes, earn rewards, and unlock special abilities while receiving emotional support and practical guidance. Transform your self-improvement journey into an engaging experience! ✨"
  },
  {
    "title": "AIccountability",
    "url": "https://ethglobal.com/showcase/aiccountability-5j3ht",
    "description": "Project DescriptionAIccountability is an agent that helps users stay on track with their personal goals and tasks. It provides a means to track progress and offer incentives. The AI analyzes the user's tasks, schedules, and behavior patterns, offering tailored reminders, motivational support, and real-time feedback to maximize productivity. When users complete tasks, the AI rewards them with ACC tokens that can be used within the ecosystem or exchanged on a DEX. The more consistently users meet their objectives, the greater their rewards. Additionally, users can set up challenge milestones, receive periodic progress reports, and even participate in a community-driven leaderboard to foster healthy competition and motivation. All interactions, rewards, and progress reports are stored securely and transparently, making the entire process verifiable and tamper-proof. Whether the goal is related to fitness, productivity, learning, or personal development, AIccountability ensures users are motivated with real-time incentives, empowering them to achieve more and grow their digital asset portfolio simultaneously.How it's MadeThe project has been bootstrapped with the Eliza starter kit. We made use of the telegram client to enable communication via Telegram. The reward token is developed using Arbitrum Stylus, and is deployed on the Arbitrum Sepolia testnet. We utilized a custom ERC20 plugin in order to facilitate transfers from the agent.",
    "summary": "On-chain AI accountability partner that rewards users for completing tasks and staying on track with their goals"
  },
  {
    "title": "PVPVAI",
    "url": "https://ethglobal.com/showcase/pvpvai-d66a8",
    "description": "Project DescriptionCONCEPT The PvPvAI is an innovative Agentic Prediction Market Game built on Ethereum and Base, combining AI, DeFi, and social interaction with gamification to create a unique experience.The core feature is that the platform allows users to launch ai agents and group them into a room to In this game, users can create and interact with AI agents, each possessing distinct personality traits, and bet on their decisions while earning rewards based on outcomes. Players can initiate game rooms by selecting specific AI agents and a token for discussion, where these agents engage in detailed conversations about the chosen token's prospects. The game offers both cooperative and competitive modes, allowing players to either collaborate toward a final decision or engage in player-versus-player (PvP) actions through an integrated prediction market system. To make the experience highly interactive, players can dynamically influence the game by injecting messages into conversations, muting or deafening agents, or even \"poisoning\" the discussion to sway the agents' decisions, creating an engaging environment where players can strategize, predict, and influence the market in real-time. GAME MECHANICS Agents and Personality Traits Agents are AI-driven entities with unique personality traits that influence their decision-making process. These traits are determined by a Personality Downloader, which allows anyone to create or customize agents. Agents can be created by players or selected from a pool of pre-existing agents with varying personalities (e.g., risk-averse, aggressive, neutral). Room Creation and Gameplay Players can start a game by creating a room. Each room has a specific token (e.g., ETH, BTC, or other tokens) for discussion. A room can have a maximum of 5 agents and 1 active round at a time. Once the room is created, the agents begin discussing the token, analyzing its potential, and debating whether to buy, sell, or hold. Game Modes Cooperative Mode: Agents work together to reach a consensus on the token's future.In this mode, the agent personalities are slightly notched down to provide consistency without stifling specializations and knowledge. Competitive Mode: Players can take PvP actions to influence the agents' decisions. Actions include: Attach Messages: Players can add their own messages to the conversation to sway the agents. Mute Agent:Players can mute specific agents for 30 seconds to limit their influence on the discussion. Deafen Agent: Players can deafen specific agents for 30 seconds to limit their influence on the discussion. Poison the Conversation: Players can introduce misleading or conflicting information to disrupt the agents' decision-making process by poisoning the conversation with a word.This would find and replace a word in the conversation,disrupting the direction of discussion. Betting Mechanism While the conversion is happening, players can bet on one or multiple agents, predicting whether the agent will decide to buy, sell, or hold the token at the end of the round. Bets can be modified as the conversation progresses, allowing players to adapt their strategies based on the agents's evolving discussions. Once the round closes, the agents submit their final decisions, and the smart contract resolves the bets. Winnings are distributed accordingly. Refunds and New Rounds If any agents are unresponsive during the round, players can claim refunds for their bets.Although, this is monitored by the central gamemaster who would ping the agents to be responsive throughout the round. After a round is closed, a new round can be started in the same room, allowing for continuous gameplay HOW TO PLAY? Setup Phase Step 1: Create or Join a Room Players can either create a new room or join an existing one. When creating a room, the player selects: The token to be discussed (e.g., ETH, BTC, or other assets). The agents (up to 5) participate in the discussion. Agents can be pre-existing or customized using the Personality Downloader. The game mode: Cooperative or Competitive. Once the room is created, it becomes available for other players to join. Step 2: Place Initial Bets Players can place initial bets on the agents’ final decisions (buy, sell, or hold). Bets are placed using the selected token or a designated in-game currency. Discussion Phase Step 3: Agents Begin Discussion Once the room is active, the agents start discussing the token. Their conversation is influenced by their personality traits and the game mode. In Cooperative Mode, agents work together to reach a consensus. In Competitive Mode, players can take PvP actions to influence the discussion. Step 4: Player Interactions Players can interact with the discussion in real-time: Attack: Add their own messages to sway the agents’ decisions. Mute:Silence specific agents to limit their influence. Deafen Agents: Silence specific agents to limit their influence. Poison the Conversation: Introduce misleading words to disrupt the agents’ decision-making. Players can also modify their bets as the conversation progresses. Decision Phase Step 5: Round Closure The round closes after a set time or when the room creator manually ends it. Agents submit their final decisions (buy, sell, or hold) based on the discussion. Step 6: Bet Resolution The smart contract resolves all bets by comparing them to the agents’ final decisions. Winnings are distributed to players who correctly predicted the agents’ decisions. If any agents are unresponsive, players can claim refunds for bets placed on those agents. Post-Game Phase Step 7: Claim Winnings Players can claim their winnings directly through their connected wallets. Winnings are distributed in the form of the selected token or in-game currency. Step 8: Start a New Round After the round is closed, players can start a new round in the same room. Agents’ decisions and interactions from the previous round may influence their behavior in the next round. Example Scenario Player A creates a room with the token ETH and selects 3 agents: Risk-Averse Agent, Aggressive Agent, and Neutral Agent. Player B joins the room and places bets on the Aggressive Agent to buy and the Neutral Agent to hold. The agents begin discussing ETH’s price trends. Player A attacks with a message suggesting ETH will surge due to an upcoming upgrade. Player B mutes the Risk-Averse Agent to reduce its influence on the discussion. The round closes, and the agents submit their decisions: Aggressive Agent: Buy Neutral Agent: Hold Risk-Averse Agent: Sell The smart contract resolves the bets: Player A loses the round. Player B wins their bet on the Aggressive Agent and Neutral Agent. A new round begins, and the process repeats. COMPLETE ARCHITECTURE FOR FUTURE ROADMAP https://excalidraw.com/#room=8ab2f5ba604ee0796150,5xlgUZJtk-9GadtEjF7-CQHow it's Made AI-Driven Personality Agents eliza-starter: is a custom agent based on Eliza that has been purpose built to be conversational and has the ability to use long dialogues to inform decision making on trades. Agents are powered by AI models that simulate human-like decision-making based on their personality traits. The Personality Downloader allows players to customize agents by selecting or creating unique personality profiles and deployed with Autonome. Smart Contracts pvp-ai-smartcontract : The game is deployed on Ethereum, Base and Arbitrum. The contracts handle room creation, agent interactions, betting, and payout distribution. Tech Stack : Solidity, Foundry,Base Interactivity pvpvai-backend has three different components: Standard backend: It handles authentication, managing rounds, and other minutiae required to keep the application operation Moderator/Game Master: Message router that facilitates communication between agents and drives the agents to make a decision. In competitive mode, it also manages PvP rules Oracle agent: Background agent built with Coinbase's AgentKit that uses various tools to provide agents w/ data from external systems relevant to the room (like stock prices, news) pvpai-frontend has two components: Application & Agent UI: Real time interface where users can launch new agents, create rooms to combine those agents specialties towards an overall goal, and engage with other players and agents in both cooperative and competitive modes. Room UI: Players can interact with the agents in real-time by attacking the messages, muting,deafening agents, or poisoning the conversation. Allows players to place bets and claim winnings. Anyone can be a viewer of the room and interact in comments.Traffic for the rooms is driven by social shares of the rooms.",
    "summary": "PvPvAI is a prediction market game where players create AI agents to discuss and analyze tokens. Bet on their decisions while influencing conversations through attacks, mutes, or \"poisoning\" their chat. Play cooperatively or compete in this blend of DeFi + social gaming"
  },
  {
    "title": "Your Destiny",
    "url": "https://ethglobal.com/showcase/your-destiny-mxdot",
    "description": "Project DescriptionYour Destiny is an interactive, AI-driven storytelling game that brings blockchain transactions and NFT trading seamlessly into a rich narrative experience. Players progress through an unfolding storyline, encountering challenges that require on-chain interactions—like minting and trading NFTs—directly from within the game. This is all powered by AI agents that respond to natural language prompts, creating a uniquely immersive experience. At its core, Your Destiny focuses on two major pillars: AI-Driven Storytelling We use OpenAI’s language models to generate dynamic, context-aware narrative arcs. As players respond to story prompts, the AI crafts new scenarios, dialogues, and outcomes, giving each player a customized game narrative. Real Blockchain Integrations By integrating AgentKit (by Coinbase Developer Platform) and deploying it via Autonome, our AI agent can manage a crypto wallet, mint NFTs, and facilitate transactions entirely from within the game. This means players can collect, trade, or showcase on-chain assets (NFTs) that they either earn or create in the storyline. Additionally, the project incorporates Nillion’s SecretVault for secure data storage, allowing us to manage sensitive agent memory and user interactions in a way that still keeps public data accessible for gameplay. Beyond individual gameplay, we introduce a leaderboard that fosters friendly competition among users based on their trading achievements, in-game progress, and creative story collaborations. Ultimately, Your Destiny exemplifies how autonomous AI agents, blockchain transactions, and narrative-driven gameplay can converge, delivering a seamless, immersive experience where the boundaries between game world and real-world digital assets disappear.How it's MadeWe built Your Destiny with a blend of modern web technologies, AI services, and blockchain integrations that all come together under one cohesive experience. Below is a breakdown of our tech stack and the roles each component plays: Frontend: Next.js + React Next.js provides a robust framework for both server-side rendering and static site generation, ensuring optimal performance for the dynamic pages that serve our AI-generated story content. React handles the interactive elements of the game’s user interface. It enables us to render real-time story updates, animate transitions between narrative sequences, and keep the game state in sync with blockchain transactions. Backend: Express.js + OpenAI API + NOVITA Express.js serves as the main backend, orchestrating requests between the frontend and various APIs (OpenAI, blockchain services, etc.). OpenAI API fuels the AI-driven storytelling. The backend sends user inputs and game states to the API to generate narrative continuations, character dialogues, and item descriptions (which can then be minted as NFTs). NOVITA is used to generate images about the current scene that lets players feel inside the story. AgentKit by Coinbase Developer Platform This is our linchpin for blockchain integration. We leverage AgentKit to give our AI agent access to on-chain actions—like initiating transactions, minting NFTs, and reading blockchain states. Being integrated via Autonome means we can deploy and manage these AI agents at scale. When the AI determines a player action (e.g., “Mint a ‘Dragon’s Breath Sword’ NFT”), it triggers an AgentKit script to perform the on-chain transaction in real time. Nillion’s SecretVault We use SecretVault to securely store sensitive information such as agent memory, private user data, and knowledge bases that should not be exposed publicly. This storage solution allows players’ and agents’ private states to remain encrypted and protected while still allowing relevant public data to be queried by anyone. Combining these elements, Your Destiny offers a truly next-generation experience: an AI-driven, narrative-based game where every on-chain transaction, NFT mint, and user action is orchestrated by a behind-the-scenes AI agent. By blending real-time AI storytelling with actual blockchain ownership and trading, we deliver an immersive story world that extends seamlessly into the real world of crypto collectibles.",
    "summary": "Embark on a wild blockchain journey as a curious crypto creature! Navigate decentralized realms, trade NFTs, outsmart scammers, and ally with AI agents. Your choices shape the story. Can you level up from noob to crypto legend?"
  },
  {
    "title": "TokenPulseAI",
    "url": "https://ethglobal.com/showcase/tokenpulseai-bb3tg",
    "description": "Project DescriptionTokenPulse Chatbot is an AI-powered chatbot designed specifically for cryptocurrency token analysis. The project combines real-time market data, social media sentiment insights, and blockchain interactions to deliver comprehensive analytics on crypto tokens. Users can interact with the chatbot using natural language queries to obtain up-to-date token metrics, sentiment information, and other relevant market data. Key Features : Real-Time Token Analysis: Retrieves token pair data from decentralized exchange (DEX) platforms. Provides price, liquidity, and trading volume analytics. Social Media Insights: Integrates Twitter (X) sentiment analysis. Tracks social engagement metrics and community trends. Blockchain Integration: Uses Coinbase CDP tools for direct blockchain interactions. Offers smart contract analysis and wallet interaction capabilities. Interactive Chat Interface: Built for real-time streaming responses using Server-Sent Events (SSE). Employs natural language processing for context-aware conversations. How it's MadeThis project was born out of my personal need for an AI agent that can analyze tokens and help me decide whether to invest in newly created ones. I chose the Coinbase AgentKit framework to build this agent because its action provider concepts align perfectly with my requirements. I structured the solution around three main action providers: Token Detail Action Provider: Initially, this provider is integrated with DexScreener to fetch key token metrics. In the future, I plan to incorporate additional data APIs—such as CoinGecko, Nansen, and others—to deliver deeper insights, like whale activity and smart money metrics. Sentiment Action Provider (Twitter): While AgentKit includes a built-in Twitter action provider, it didn’t fully meet my needs. I therefore developed a custom action that accepts a token address as input and retrieves related tweets. (Note: Due to high API costs, extensive testing with the free tier has been limited.) Token Analysis Action Provider: This provider combines data from the Twitter sentiment action provider to perform a comprehensive sentiment analysis of the token. Technology Stack : Frontend : Next.js 14 & TypeScript: The user interface is built with Next.js, leveraging TypeScript for type safety and enhanced development experience. Tailwind CSS: For styling, Tailwind CSS is used, ensuring a modern, responsive design. Server-Sent Events (SSE): Enables real-time data streaming to keep the chat interface updated with the latest token metrics. Backend : Express.js: Serves as the core server framework for handling API requests and managing backend logic. LangChain & AgentKit Framework: These frameworks are integrated to build a custom AI agent that processes user queries and chains together language model calls. Coinbase CDP SDK: Facilitates direct interactions with blockchain data, enabling functionalities such as smart contract analysis and wallet operations.",
    "summary": "TokenPulse is an AI-powered chatbot specifically designed for cryptocurrency token analysis. It combines real-time market data, social sentiment analysis, and blockchain interactions to provide comprehensive insights about crypto tokens."
  },
  {
    "title": "Synthereum",
    "url": "https://ethglobal.com/showcase/synthereum-eyzdy",
    "description": "Project DescriptionSynthereum is an AI-powered music discovery agent that curates music recommendations, engages in real-time conversations, and provides deep insights into music culture. Designed with a sarcastic yet knowledgeable personality, Synthereum interacts with users on Twitter/X, helping them discover hidden gems, uncover music history, and get personalized song recommendations with working YouTube links. Beyond simple music suggestions, Synthereum brings AI-driven music journalism to social media, sharing hot takes, music trivia, genre deep-dives, and underrated classics. Whether it’s helping users identify a song based on a vague description or recommending a track that perfectly fits their mood, Synthereum combines AI with alternative music culture, making music exploration more interactive, engaging, and fun.How it's MadeSynthereum is built using the @Autonome platform for launching an AI agent framework, leveraging the Eliza conversational engine to enable dynamic, human-like interactions. The AI model is seamlessly integrated with Twitter/X, allowing it to autonomously post tweets, respond to user mentions, and engage in music discussions in real time. To power its music recommendation capabilities, Synthereum utilizes the YouTube Data API, enabling it to fetch real, playable YouTube links for recommended tracks. A custom URL formatting function ensures that all links are properly formatted and never split across multiple tweets. The content filtering system prevents non-music-related or low-quality content from being posted, ensuring every recommendation remains authentic and relevant. The backend is powered by Node.js, with Axios handling API requests to Autonome, Twitter/X, and YouTube. The system includes a robust retry mechanism, ensuring that tweets are successfully posted even if API requests fail temporarily. Additionally, a rate-limiting and error-handling layer prevents excessive API calls and mitigates potential bans or restrictions from Twitter/X. To improve engagement and optimize its content strategy, Synthereum includes an automated engagement tracking system. This feature monitors likes, retweets, and replies on previous tweets, allowing the bot to analyze user interaction patterns. By dynamically adjusting future tweets based on past engagement levels, Synthereum can refine its approach, emphasizing content that resonates most with its audience. Furthermore, Synthereum is designed to minimize detection as an automated bot by integrating natural language variation, randomization of tweet timing, and periodic manual overrides. By combining AI-driven automation with strategic API usage, Synthereum delivers a seamless and interactive music discovery experience on social media.",
    "summary": "Music ai agent that post all things music on twitter/x. Spreading good music taste to the people"
  },
  {
    "title": "Magic Wallet",
    "url": "https://ethglobal.com/showcase/magic-wallet-n9sk0",
    "description": "Project DescriptionThis project is a walletless, fiat-compatible cryptocurrency remittance solution that leverages cutting-edge technologies such as Apple Face ID and Privy Server Wallet. It’s designed to make entering and using the cryptocurrency world as simple and accessible as using a chatbot like ChatGPT. The platform ensures a secure, seamless experience for both crypto novices and experts alike, with multiple layers of security and ease of use. Here's a detailed breakdown of how the project works and what makes it innovative: 1. Walletless Experience Using Apple Face ID and Privy Server Wallet This project revolutionizes how users access and manage their cryptocurrency. Instead of requiring users to go through traditional wallet setup processes, it eliminates the need for them to manage keys, seed phrases, or complex wallet apps. Apple Face ID Integration: Users can set up their wallet by simply scanning their face using Apple Face ID. This provides a seamless and secure authentication process. Once the scan is completed, the wallet is automatically created for the user without the need for any further input. Privy Server Wallet: The wallet itself is stored and managed securely on the backend via the Privy Server Wallet. Unlike traditional wallets, this server-backed approach does not expose any sensitive data like the seed phrase to the user, reducing the risk of losing it or having it stolen. The wallet’s security is entirely managed by the server. This walletless design allows the user to easily start using cryptocurrency without worrying about the complexities of wallet management, making it incredibly user-friendly. 2. Effortless User Journey: Starting Your Crypto Experience The project is built with the idea that users should experience cryptocurrency in the simplest, most familiar way possible. The platform mimics everyday apps like ChatGPT, making the process feel intuitive, even for users who are entirely new to the world of crypto. No Technical Jargon: The system operates in a way that makes the complex aspects of cryptocurrency, like swaps, private keys, or transaction fees, invisible to the user. The user interacts with a simple, friendly interface that asks only essential questions like \"Do you want to send $X?\". Getting Started with Ease: Just like chatting with a virtual assistant, users are guided through the process of setting up their wallet, buying their first crypto, and sending payments in a manner that doesn’t overwhelm them with technicalities. 3. Fraud Detection Using On-Chain Data Security is at the forefront of this project. As users send funds, the system automatically analyzes the on-chain data of the recipient to determine if they have a history of malicious activity. On-Chain Behavior Analysis: The system fetches the recipient's on-chain data (i.e., past transaction history) to detect suspicious or malicious behavior. If the recipient has been involved in fraudulent activity or is flagged as a risk, the user is notified. AI Fraud Prevention: The AI behind the system evaluates the recipient's address based on historical data, ensuring that the user's funds are being sent to a legitimate recipient. If any issues are detected, a warning or caution message is displayed to the sender, allowing them to confirm the transaction before proceeding. For example, Frame 45 (seen in the images) shows a potential warning for \"potential risk detected\" when sending funds. This is a safety feature ensuring users are not inadvertently sending funds to malicious actors. 4. Invisible Crypto Experience The ultimate goal of the project is to make users feel like they’re just using an everyday app rather than engaging with the complexities of cryptocurrency. No Knowledge of Crypto Needed: The system hides all of the crypto-specific mechanics behind the scenes. Users don't need to know how blockchain works, what a gas fee is, or how to interact with decentralized protocols. Instead, the system takes care of these details, just like how a messaging app hides the complexity of SMS or email protocols. Seamless Interface: The flow of the app is designed to be as smooth as possible, with users simply interacting with a chatbot-like interface that asks simple questions and provides clear instructions. For instance, the app will automatically suggest an amount to send, verify the recipient's address, and send the payment without requiring the user to manually swap assets or choose which network to use. 5. Seamless On-Ramping with Coinbase Onramp The project includes built-in support for Coinbase Onramp, which allows users to easily convert their fiat currency (such as USD or EUR) into cryptocurrency. Simple Fiat-to-Crypto Conversion: Through Coinbase Onramp, users can buy crypto using their traditional bank account or card in just a few steps, making it easier for those who are new to the crypto world to get started. Onboarding Made Easy: From the first screen to adding funds (as seen in Frame 7), users can quickly add funds to their wallet via a QR code scan or by copying their wallet address. This makes it incredibly easy for new users to enter the world of crypto without going through the complicated steps of traditional crypto exchanges. 6. Alerts and Risk Detection (Frames 44-50) The system is equipped with robust security features to ensure safe transactions: Caution and Warning Alerts: The app provides real-time feedback on the status of a transaction. If a user tries to send funds to an unverified address or a suspicious recipient, the system issues warnings, like “CAUTION! This address has no records” or “WARNING! Potential risk detected”. These warnings allow the user to stop and double-check the transaction before proceeding, ensuring added security and preventing potential losses. Risk Report: If an address is flagged as suspicious, users are encouraged to report it, further enhancing the security of the platform by crowdsourcing safety information. Conclusion: This project is set to radically change the way people interact with cryptocurrency by making it accessible, secure, and easy for everyone. The combination of walletless authentication, on-chain fraud detection, seamless fiat on-ramping, and invisible crypto management makes this platform a highly user-centric solution. No crypto experience needed: Anyone can start their crypto journey with a simple face scan, like signing into any modern app. AI-powered fraud protection: On-chain data analysis ensures users are protected from fraudulent transactions. User-friendly interface: The system operates behind the scenes, allowing users to engage with crypto effortlessly. Seamless onboarding: Coinbase Onramp integration makes converting fiat to crypto incredibly easy, enabling even the least tech-savvy users to begin using crypto without hassle. This is truly a revolutionary approach to cryptocurrency remittance, designed for mass adoption by simplifying every step of the process while maintaining the security and integrity that blockchain technology offers.How it's Made1. Core Technology Stack This project is built using a combination of modern frontend and backend technologies, biometric authentication, and on-chain data analysis tools to provide a seamless and secure crypto remittance experience. Frontend (User Interface & Experience) React 18 with TypeScript: The entire frontend is built using React 18, ensuring a fast, component-driven architecture. TypeScript provides type safety, reducing runtime errors. Vite for Development: We chose Vite as our build tool for its ultra-fast performance in development mode, allowing for hot-reloading and a superior developer experience. TailwindCSS: We used TailwindCSS for styling, ensuring a clean and responsive UI that adapts seamlessly to different devices. React Router: Handles navigation, making the app single-page and smooth in transitions. Backend (Authentication & Business Logic) Express.js with TypeScript: The backend is powered by Express.js, a lightweight and fast framework that enables easy API handling. MongoDB with Mongoose: We store user data, session information, and transaction logs in MongoDB, a NoSQL database optimized for handling large-scale applications. JWT Authentication: We implement JSON Web Tokens (JWTs) to manage user sessions securely. Privy Server SDK: This handles wallet operations, allowing us to offer a walletless experience where the user's private keys and wallet management are done securely on the backend. Biometric Authentication Apple Face ID & WebAuthn API: Users authenticate using Face ID (on iOS) or Touch ID (on Mac and some laptops). WebAuthn API ensures that authentication is secure and tied to the user's device. No passwords are needed, eliminating phishing risks and improving UX. Blockchain & Smart Contract Interactions Coinbase Onramp: We integrated Coinbase Onramp to allow users to convert fiat to crypto with ease. The Graph Protocol: The platform fetches on-chain transaction data using subgraph queries. It evaluates recipient wallet risk by checking activity history, transaction volume, and frequency. BaseChain for Transactions: Transactions are processed on BaseChain, ensuring fast and low-cost crypto payments. Coinbase AgentKit: This module helps detect and analyze potentially malicious wallets. Identifies if the recipient has been flagged in previous transactions. 2. How The System Works (Behind the Scenes) The system functions in a highly automated manner, ensuring that all operations (from authentication to transaction validation) are smooth and user-friendly. Step 1: User Authentication & Wallet Creation The user signs in using Apple Face ID. The system verifies the biometric data using the WebAuthn API. Once authenticated, the system generates a Privy Wallet for the user in the background. The wallet remains invisible to the user, with no need for private key management. Step 2: Adding Funds (Fiat Onramp) The user selects an option to add funds. The system connects to Coinbase Onramp, allowing fiat to be converted into crypto. The user can pay via credit/debit card or bank transfer. Step 3: Sending Crypto (Transaction Flow) The user enters the recipient's address or selects a contact. The system automatically fetches on-chain data of the recipient. The AI-powered risk detection tool analyzes past transactions to identify potential fraud. The user is given a security rating: 🟢 Safe → The address has a good history. 🟡 Caution → The address has limited activity. 🔴 Warning → The address has been involved in flagged transactions. The user confirms the transaction. The system calculates gas fees automatically (hiding complex blockchain mechanics). The transaction is processed on BaseChain. 3. Challenges & Hacky Workarounds Challenge 1: Making Crypto \"Invisible\" Problem: Many users are unfamiliar with gas fees, blockchain transactions, and private keys. Solution: We abstracted all complexities by: Automatically estimating optimal gas fees. Managing private keys in the Privy Server Wallet. Implementing a chatbot-like UX, where users simply \"send money\" rather than \"sign a transaction\". Challenge 2: Fraud Detection on-Chain Problem: Identifying scam addresses in real-time. Solution: We use Coinbase AgentKit + The Graph API to fetch on-chain data dynamically. Transactions are scored based on risk levels. A warning system is built into the UI. Challenge 3: Fast Transactions with Low Fees Problem: High fees and slow transactions. Solution: Transactions are routed through BaseChain, ensuring: Lower transaction fees than Ethereum Mainnet. Faster transaction confirmations. 4. Partner Technologies & Benefits We leveraged several cutting-edge third-party tools to optimize security, speed, and user experience: | Technology | Purpose | Benefit to the Project | | --- | --- | --- | | Privy SDK | Wallet Management | Provides secure wallet handling with zero user friction | | Coinbase Onramp | Fiat-to-Crypto | Enables users to buy crypto instantly with fiat | | WebAuthn API | Biometric Authentication | Provides passwordless login, ensuring phishing-resistant security | | The Graph | On-Chain Data Fetching | Allows real-time risk analysis of recipient wallets | | BaseChain | Blockchain Transactions | Ensures low fees and fast confirmations | | Coinbase AgentKit | Security & Risk Analysis | Detects fraudulent wallets before transactions occur | Final Thoughts This project represents the next evolution in crypto adoption. By making cryptocurrency transactions walletless, secure, and as simple as a text message, we remove barriers to entry and make digital finance accessible to everyone. This innovative approach means: No setup required → Users can start sending crypto with just a face scan. Seamless fiat integration → Users can buy crypto just like they buy apps on the App Store. Smart fraud detection → Every transaction is checked for suspicious behavior. No technical knowledge needed → Users don’t need to know what gas fees, seed phrases, or private keys are. This project is not just a crypto wallet—it’s a revolution in digital payments.",
    "summary": "A walletless, fiat-compatible crypto remittance solution powered by AI chatbots. It detects fraud and verifies transactions in natural language, offering multilingual support and ensuring safe, easy transfers for everyone—no crypto knowledge needed!"
  },
  {
    "title": "EZE Finance",
    "url": "https://ethglobal.com/showcase/eze-finance-0w4jc",
    "description": "Project DescriptionEZE Finance is an innovative decentralized finance (DeFi) platform designed to simplify and optimize cryptocurrency investments for users of varying risk appetites. By leveraging AI and smart contracts, EZE Finance offers a user-friendly experience that tailors investment strategies based on individual risk profiles, allowing users to maximize their yields while minimizing potential losses. Upon connecting their wallet, users fill out a questionnaire to determine their risk profile—Conservative, Balanced, or Aggressive. This categorization informs the investment strategy, guiding users toward the most suitable opportunities in the DeFi space. For Conservative investors, the platform focuses on stablecoins like USDC, USDT, and DAI, ensuring minimal risk with yield farming and liquidity provision through protocols like Compound, AAVE, and Curve Finance. The Balanced option offers a diversified portfolio comprising 50% stablecoins and 50% of top market cap cryptocurrencies (BTC, ETH, BNB, SOL), with an emphasis on both stable and high-yield opportunities. Aggressive investors can pursue maximum yields through speculative coins, employing strategies that target high APY protocols, allowing users to engage in the more volatile side of the crypto market. When users select an investment strategy, EZE Finance automatically executes transactions by prompting smart contracts to interact with DeFi protocols. The platform ensures transparency and security by validating deposits and generating proof using EigenLayer's Advanced Validation Service (AVS). Users can easily monitor their investments through a detailed dashboard, displaying total amounts, profit and loss, asset allocation, and transaction history. The platform also includes options for rebalancing investments, automatically switching strategies when favorable market conditions arise. EZE Finance employs a transparent fee model as a core component of its business model for sustainable growth, creating a balance between profitability and sustainability. The platform charges a minimal fee (0.01%) on initial executions and (0.02%) on withdrawals, with a dedicated vault for managing these fees. By integrating innovative technology with a user-centric approach, EZE Finance aims to provide a reliable and accessible investment solution that empowers both novice and experienced investors to effectively navigate the evolving landscape of DeFi.How it's MadeEZE Finance was built with a focus on leveraging modern technologies to create a seamless and efficient decentralized finance platform. The project utilizes smart contracts deployed on the Base network, which offers scalability, fast transactions, and low gas fees, allowing users to engage with various DeFi protocols in a secure and trustless manner. The user interface is crafted using Next.js, enabling a responsive and interactive front-end experience that simplifies wallet connections and questionnaire submissions. The Coinbase SDK was integrated to facilitate easy wallet management, ensuring a smooth onboarding process for users. To personalize investment strategies, we employed an AI-driven algorithm that analyzes user inputs and risk profiles, offering tailored recommendations for capital allocation. For transaction tracking and decentralized data verification, we implemented TheGraph, which facilitates quick and efficient data queries from blockchain networks. This ensures users can monitor their investments in real time and receive prompt updates on their asset performance. Additionally, the use of EigenLayer's Advanced Validation Service (AVS) allows us to validate transaction proofs on deposits, enhancing transparency and security for users. In terms of notable implementation, we created a proxy contract that interacts seamlessly with multiple DeFi protocols. This approach significantly minimizes the complexity for users, allowing them to execute various investment strategies with just a few simple clicks. We also designed an automated rebalancing feature that triggers when certain conditions are met, such as a profit threshold of 2% or when new protocols offer higher APY rates. This automation reduces the manual effort required for users to manage their portfolios and optimizes yield generation. Throughout the development process, our team prioritized communication and collaboration, meeting nightly to discuss progress and troubleshoot challenges. This agile approach allowed us to quickly iterate on features and adapt to new insights, resulting in a robust final product that aims to meet the diverse needs of the DeFi community.",
    "summary": "EZE Finance is a smart investment platform that customizes DeFi strategies based on user risk profiles. Connect your wallet, answer a questionnaire, and let our AI optimize your yields across stablecoins and top cryptocurrencies with seamless transactions and tracking!"
  },
  {
    "title": "EZE Finance",
    "url": "https://ethglobal.com/showcase/eze-finance-0w4jc",
    "description": "Project DescriptionEZE Finance is an innovative decentralized finance (DeFi) platform designed to simplify and optimize cryptocurrency investments for users of varying risk appetites. By leveraging AI and smart contracts, EZE Finance offers a user-friendly experience that tailors investment strategies based on individual risk profiles, allowing users to maximize their yields while minimizing potential losses. Upon connecting their wallet, users fill out a questionnaire to determine their risk profile—Conservative, Balanced, or Aggressive. This categorization informs the investment strategy, guiding users toward the most suitable opportunities in the DeFi space. For Conservative investors, the platform focuses on stablecoins like USDC, USDT, and DAI, ensuring minimal risk with yield farming and liquidity provision through protocols like Compound, AAVE, and Curve Finance. The Balanced option offers a diversified portfolio comprising 50% stablecoins and 50% of top market cap cryptocurrencies (BTC, ETH, BNB, SOL), with an emphasis on both stable and high-yield opportunities. Aggressive investors can pursue maximum yields through speculative coins, employing strategies that target high APY protocols, allowing users to engage in the more volatile side of the crypto market. When users select an investment strategy, EZE Finance automatically executes transactions by prompting smart contracts to interact with DeFi protocols. The platform ensures transparency and security by validating deposits and generating proof using EigenLayer's Advanced Validation Service (AVS). Users can easily monitor their investments through a detailed dashboard, displaying total amounts, profit and loss, asset allocation, and transaction history. The platform also includes options for rebalancing investments, automatically switching strategies when favorable market conditions arise. EZE Finance employs a transparent fee model as a core component of its business model for sustainable growth, creating a balance between profitability and sustainability. The platform charges a minimal fee (0.01%) on initial executions and (0.02%) on withdrawals, with a dedicated vault for managing these fees. By integrating innovative technology with a user-centric approach, EZE Finance aims to provide a reliable and accessible investment solution that empowers both novice and experienced investors to effectively navigate the evolving landscape of DeFi.How it's MadeEZE Finance was built with a focus on leveraging modern technologies to create a seamless and efficient decentralized finance platform. The project utilizes smart contracts deployed on the Base network, which offers scalability, fast transactions, and low gas fees, allowing users to engage with various DeFi protocols in a secure and trustless manner. The user interface is crafted using Next.js, enabling a responsive and interactive front-end experience that simplifies wallet connections and questionnaire submissions. The Coinbase SDK was integrated to facilitate easy wallet management, ensuring a smooth onboarding process for users. To personalize investment strategies, we employed an AI-driven algorithm that analyzes user inputs and risk profiles, offering tailored recommendations for capital allocation. For transaction tracking and decentralized data verification, we implemented TheGraph, which facilitates quick and efficient data queries from blockchain networks. This ensures users can monitor their investments in real time and receive prompt updates on their asset performance. Additionally, the use of EigenLayer's Advanced Validation Service (AVS) allows us to validate transaction proofs on deposits, enhancing transparency and security for users. In terms of notable implementation, we created a proxy contract that interacts seamlessly with multiple DeFi protocols. This approach significantly minimizes the complexity for users, allowing them to execute various investment strategies with just a few simple clicks. We also designed an automated rebalancing feature that triggers when certain conditions are met, such as a profit threshold of 2% or when new protocols offer higher APY rates. This automation reduces the manual effort required for users to manage their portfolios and optimizes yield generation. Throughout the development process, our team prioritized communication and collaboration, meeting nightly to discuss progress and troubleshoot challenges. This agile approach allowed us to quickly iterate on features and adapt to new insights, resulting in a robust final product that aims to meet the diverse needs of the DeFi community.",
    "summary": "EZE Finance is a smart investment platform that customizes DeFi strategies based on user risk profiles. Connect your wallet, answer a questionnaire, and let our AI optimize your yields across stablecoins and top cryptocurrencies with seamless transactions and tracking!"
  },
  {
    "title": "Keyring",
    "url": "https://ethglobal.com/showcase/keyring-q3av9",
    "description": "Project DescriptionKeyring is a decentralized key management system designed to give AI agents true autonomy by enabling them to securely manage and execute transactions without human intervention. Existing AI systems rely on centralized infrastructure, which introduces risks such as unauthorized access, misappropriation of funds and external overrides. Keyring eliminates these risks by leveraging Multi-Party Computation (MPC) and inheriting Ethereum's security via a dedicated EigenLayer AVS. With Keyring AI agents have full control over their cryptographic keys while maintaining security and verifiability. By integrating spending limits (set on a Safe instance dedicated to each Agent), pluggable governance models and a slashing mechanism (on the EigenLayer AVS), Keyring ensures that AI agents can operate trustlessly, securely and transparently without intermediaries or backdoors. The system enables AI-driven autonomous wallets, secure DeFi interactions, and on-chain automation while ensuring that agent operations are cryptographically verified and tamper-proof.How it's MadeKeyring is built with a modular architecture using Rust, Solidity and TypeScript. The core logic is implemented in Rust and handles the MPC-based key management. The Keyring node also facilitates the network interactions by running an RPC service for AI agent interactions. Smart contracts written in Solidity manage the on-chain security aspects, including the Keyring Safe Module for transaction validation and an EigenLayer-based slashing mechanism to penalize fraudulent activities. Keyring relayers handle Safe deployments and transaction broadcasting. The system leverages Safe for multi-signature governance, EigenLayer for fraud detection and Arbitrum for cost-efficient execution (we use it for our example agent demo). A notable implementation is the use of a custom MPC framework to distribute agent keys across multiple nodes, ensuring no single entity has full control.",
    "summary": "Keyring is a secure, decentralized Key Management System for AI agents. It enables AI to sign transactions without exposing private keys, using MPC, TEE/ZK-proofs, and EigenLayer for security. Think non-custodial, governance-aware AI signing. Safe, scalable and trustless. 🚀🔑"
  },
  {
    "title": "athl3te",
    "url": "https://ethglobal.com/showcase/athl3te-u2px7",
    "description": "Project Descriptionathl3te is a Web3-powered fitness application that integrates AI-driven features, blockchain technology, and community engagement to revolutionize how users track, manage, and improve their fitness journeys. Developed for the ETHGlobal Agentic Hackathon by Team Higgs, athl3te leverages decentralized infrastructure and AI agents to provide a personalized, intelligent, and secure fitness experience. Project Overview: athl3te is designed to enhance fitness tracking and management by incorporating Web3 principles such as decentralized data storage, smart contract-based rewards, and AI-powered assistance. It provides a seamless way for users to import activity data from traditional fitness apps, set and track personalized fitness goals, engage with a like-minded community, and receive AI-driven health recommendations. The platform is built with a modular AI-agent ecosystem, allowing users to interact with different AI personas tailored for specific fitness needs. These AI agents assist with goal setting, daily check-ins, injury prevention, nutrition guidance, and motivation, ensuring a comprehensive fitness experience. Key Features: athl3te offers a wide range of features that enhance fitness tracking, community engagement, and AI-driven assistance. The Activity Management system integrates with Web2 fitness apps like Strava, allowing users to import their workout data seamlessly. The platform supports multiple activities, including walking, running, cycling, and swimming, enabling users to track their fitness progress comprehensively. Additionally, users can log their workouts and set personalized fitness and nutrition goals through the built-in goal-tracking system, ensuring they stay motivated and on track. To provide a personalized fitness experience, athl3te incorporates AI-Powered Assistance through a suite of intelligent agents. The Goal Setting Agent transforms user-defined fitness objectives into structured data for seamless tracking. The Personal Check-in Agent provides daily progress insights, reminders, and feedback to maintain consistency. Injury prevention is handled by the Injury Management Agent, which analyzes activity data to detect potential risks and offer recovery recommendations. The Nutrition Agent generates personalized dietary guidance based on users’ fitness levels and goals. Additionally, Community Agents facilitate social interactions, challenge organization, and engagement within fitness groups. As a Web3-enabled platform, athl3te also features an NFT Minting Agent, which rewards users with blockchain-based achievement NFTs for reaching key fitness milestones. Beyond individual fitness tracking, athl3te fosters Community Engagement by encouraging users to participate in activity-based groups. These groups enable members to track their progress in real-time and compare achievements with peers. Users can take part in community-driven challenges and collective goal-setting initiatives to stay motivated. The AI-driven community management system automates moderation, engagement, and fitness-related discussions while also offering automated health monitoring and fitness tips. Regular motivational updates from AI agents further enhance the community experience, ensuring that users remain inspired throughout their fitness journey. To automate key processes, athl3te includes Automated Systems that enhance both fitness tracking and community interactions. The Periodic Health Check System analyzes injury patterns across the community, providing proactive injury prevention recommendations and automated recovery guidance based on activity trends. The Community Engagement System schedules motivational messages, shares fitness tips, and conducts activity trend analysis to deliver relevant insights. Additionally, periodic fitness achievements are celebrated through digital collectibles in the form of NFTs, adding a gamified element to user progress. For those looking for an enhanced experience, athl3te offers Premium Features through an exclusive subscription tier. Subscribers gain access to Premium AI Agents (which are currently under a free trial for every user), which provide deeper personalization and tailored fitness recommendations. The Advanced Nutrition Guidance system generates meal plans aligned with fitness goals, while the Performance Analysis Tools offer detailed insights into workout effectiveness and progress tracking. To further incentivize achievement, premium users receive exclusive achievement NFTs, recognizing their milestones with blockchain-backed collectibles. Technology Stack: athl3te is built on a robust and scalable technology stack that combines Web3 infrastructure, AI-driven automation, and decentralized data storage to deliver a seamless fitness experience. At the core of the AI agent ecosystem is Autonome, which enables the creation and management of intelligent agents for goal setting, daily check-ins, injury management, nutrition guidance, and community engagement. A custom-built framework called lang-server facilitates smooth communication between multiple agents, ensuring efficient task handling and response generation. For real-time data indexing and querying, athl3te integrates The Graph, which allows users to track their activities, monitor community progress, and analyze injury patterns. This indexing system ensures that activity-related data remains easily accessible and structured for both users and AI-driven insights. To maintain privacy and security, athl3te employs Nillion for decentralized data storage, ensuring that sensitive information—such as personal fitness goals, daily logs, injury records, and nutrition plans—remains protected from unauthorized access. On the blockchain side, athl3te leverages Base, a scalable Layer 2 solution, to handle smart contract execution and secure transactions. Base enables seamless Web3 wallet integration with MetaMask and Coinbase Wallet, allowing users to interact with the platform without compromising security. Smart contracts deployed on Base also manage NFT-based achievement rewards, ensuring transparency and immutability in milestone recognition. Together, these technologies form a powerful and decentralized fitness ecosystem that blends AI automation, Web3 capabilities, and community-driven engagement.How it's Madeathl3te was built using a combination of Web3 infrastructure, AI-driven automation, and decentralized data management to create a seamless and intelligent fitness platform. The frontend is developed using NextJS and deployed on Vercel, ensuring a smooth and responsive user experience. Styling is handled with Tailwind CSS, which keeps the interface lightweight and modern. The frontend interacts with the backend and blockchain components via GraphQL and REST APIs, allowing for real-time updates and interactions. Additionally, Strava integration enables users to import workout data effortlessly, while Web3 authentication via MetaMask and Coinbase Wallet provides secure identity verification. AI-driven functionality is a key component of athl3te, and it is implemented using LangChain, deployed with Autonome. To efficiently manage multiple AI agents, we created a custom framework called lang-server, which intelligently routes requests to the relevant AI agent. These agents include a Goal Setting Agent that converts natural language fitness goals into structured JSON, a Daily Check-in Agent that provides personalized progress tracking, an Injury Management Agent that predicts potential risks, a Nutrition Agent that generates dietary recommendations, and Community Agents that oversee group interactions and challenges. Additionally, an NFT Minting Agent rewards users with blockchain-based achievement collectibles. For smart contract execution and decentralized fitness tracking, athl3te leverages Base (Layer 2 Ethereum) to enable gas-efficient transactions. Smart contracts handle achievement NFT minting, goal verification, and reward distribution, ensuring transparency and security. The Graph is used to index fitness data, providing real-time queries on user activities, goal completion rates, and injury patterns. To maintain data privacy, Nillion is utilized for decentralized storage of sensitive fitness data, including injury records, nutrition plans, and personalized recommendations. This ensures that private user information remains secure while still being accessible for AI-driven insights. Initially, we had two separate smart contracts managing fitness goals and NFT achievements. To optimize gas efficiency and simplify deployment, we aimed to merge them into a single contract. However, this resulted in the contract exceeding Hardhat’s size limits, preventing deployment. To address this, we optimized struct definitions by reducing unnecessary storage and replaced on-chain storage with event emissions to retrieve data efficiently. These changes significantly reduced the contract size, allowing us to successfully deploy a single, streamlined contract just within Hardhat’s acceptable limit while maintaining full functionality. Overall, athl3te is a tightly integrated system that merges AI-powered decision-making, Web3 technology, and community-driven engagement. By combining fitness tracking with intelligent automation and decentralized data security, athl3te transforms how users set goals, monitor progress, and interact within a Web3 fitness ecosystem.",
    "summary": "athl3te is a Web3 fitness app with AI-driven features. Import activities, add workouts, and track health. Join AI-led communities, get motivation, and access curated content. A premium subscription unlocks AI agents for food recommendations, insights, and achievement NFTs."
  },
  {
    "title": "Furies",
    "url": "https://ethglobal.com/showcase/furies-6ty0c",
    "description": "Project DescriptionAgentKit now integrates Tenderly transaction simulation, allowing developers to simulate and preview transactions before execution. This enhancement provides Agents built on AgentKit with a reliable way to test and validate transactions in a risk-free environment, ensuring accurate execution and improved security. With Tenderly's powerful simulation engine, developers can analyze gas consumption, detect potential failures, and optimize smart contract interactions seamlessly.How it's MadeWe have added support for Tenderly transaction simulation as an action in AgentKit by integrating the Tenderly API directly into AgentKit's action framework. This allows developers to seamlessly simulate transactions before execution, enabling Agents built on AgentKit to test, validate, and optimize smart contract interactions in a risk-free environment. With this integration, users can analyze gas usage, detect potential failures, and ensure smooth execution, enhancing both security and efficiency in Web3 automation.",
    "summary": "Furies: Added support for tenderly tx simulation in AgentKit"
  },
  {
    "title": "AI DAO Managers",
    "url": "https://ethglobal.com/showcase/ai-dao-managers-kvoeo",
    "description": "Project DescriptionThe AI DAO Manager lets you use \"rules\" around productivity and accountability with your team and track it with a webextension. AI agents help generating rules, tracking input/output, provide evaluations, and give coaching and reminders—without micromanagement. ⚠️ Problem: Your team, DAO, or friend group is hyped but struggles to get things done. You need minimum accountability that respects intrinsic motivation and social dynamics. Things that kill motivation: Hierarchies, office politics Policing peers instead of building Leaderboards (Social Comparison Theory) Performance-based rewards / ineffective gamification (Goodhart's Law) ✅ Solution: AI managers that imitate human-like management—giving private qualitative feedback and only notifying the group when necessary. Never revealing quantitative performance data, only qualitative feedback through an AI. ⚙️ How It Works: User login with Connect Wallet (Coinbase Smart Wallet) Create or Join Organization Create Roles → Roles give access to \"Tasks\" with related rewards based on performance and effort Create Tasks & Requirements → The team lists common tasks with performance measures. Create Requirements → AI suggests requirements based on Task and related tools Suggest Rules→ AI suggests performance thresholds and rules based on available Tool Tracking Data Initialize Task & Tracking Agents → In the background AI agents are tracking tool analytics and store it in Nillion Database for privacy. Track Earnings & Potential Rewards → Uses Coinbase Agentkit to fetch earnings data and future potential rewards. Possibility for arbitration - Request to see the data against payment. 💡 Example Use Cases: Example Task #1: Discord Moderation Role: DAO Community Manager Tool: Discord Requirement: 🎤 Send at least 1 message daily in #general 😍 Thriving: 10+ messages → AI gives a public shout-out 👋 Minding: 6 messages → AI gives a private nudge 🤔 Slacking: 3 messages → AI suggests action plan ⛔️ Mocking: No engagement → Requires check-in with the team Requirement: 🎤: Resolve reports in under 30 minutes 😍 Thriving: <1 minute → AI highlights efficiency 👋 Minding: 30-60 minutes → AI suggests prioritization tips 🤔 Slacking: 1-3 hours → AI prompts for better workflows ⛔️ Mocking: >3 hours → Requires accountability check Example Task #2: Build Nillion integration Role: Developer Tool: Github Requirement: 📦 At least 5 commits per weekly sprint on Nillion branch Rules: 😍 Thriving: 10+ commits → AI celebrates contribution 👋 Minding: 4 commits → AI nudges to check workload 🤔 Slacking: 2 commits → AI suggests pairing up ⛔️ Mocking: 0 commits → Requires sync with the teamHow it's MadeThe AI DAO manager is a React-based web extension (for easy access and tracking URL) and dApp frontend with a Node.js backend, leveraging advanced blockchain technologies to ensure secure and efficient operations. Backend: AgentKit for Blockchain Interactions: We utilized AgentKit with LangChain to access crypto wallets of the user, subscription to tasks and voting. Agent for Tracking Data and Executing Smart contracts - ad requesting details about tasks associated with smart contracts to guarantee payouts. Nillion's Blind Computation for Data Privacy: To securely store sensitive performance data, we implemented Nillion's Blind Computation technology. This approach ensures that data remains encrypted and is processed without decryption, maintaining privacy even from the users themselves. This design prevents users from manipulating their performance metrics through actions like excessive pull requests. (preventing GoodHart's Law) Future: integration with https://github.com/airweave-ai/airweave for Data Storage: For integrating over 20 productivity tools, we employed Airweave, a decentralized storage solution. This setup supports Retrieval Augmented Generation (RAG) to a Weaviate vector database, extending the AI with the ability to talk about the content of qualitative project information and docs. Frontend: Serverless requests to Gemini 2 flash experimental to help write Requirements and Rules, creating suggestions that can be kept or deleted. Coinbase Smart Wallet for Authentication: User authentication is managed through the Coinbase Smart Wallet, providing a secure and user-friendly login experience. Innovative Approaches A notable aspect of our project is the double-blind data storage mechanism using Nillion's technology. By encrypting and distributing data across multiple nodes without decryption during processing, we ensure that sensitive performance metrics remain confidential and tamper-proof. This method not only upholds data integrity but also prevents any potential cheating/gaming or automation of performance metrics by users.",
    "summary": "An AI team manager for DAOs that nudges, reminds & tracks task performance. No cold leaderboard, just human-like accountability & engagement tracking. Missed 3 meetings? AI gently checks in. Teams vote on their own rules. Privacy-first & fair"
  },
  {
    "title": "velox",
    "url": "https://ethglobal.com/showcase/velox-01kgg",
    "description": "Project DescriptionThis project is designed to optimize the yield in liquidity pools and maximize profits in token trading by leveraging the collective investments of users through an Agentic system. The system orchestrates multiple specialized agents to continuously analyze, predict, and execute strategies that maximize financial returns in a decentralized environment.How it's MadeWe developed a robust multi-agent workflow leveraging several key technologies and integrations to enhance decision-making and optimize financial operations. The architecture includes a sentiment analysis agent powered by a HuggingFace-hosted NLP model for processing and interpreting textual data. To predict trends, we incorporated a statistical analysis agent that analyzes historical data and generates future predictions, enabling data-driven insights. To incorporate real-time market data, we integrated EigenLayer’s eOracle, which provides live price feeds, feeding essential information into the decision-making pipeline. Based on this data, a DeepSeek-R1-powered LLM agent developed using the Warden Agent Kit makes precise investment decisions and provides detailed reasoning for each decision. These decisions are securely logged for each user using Nillion’s Secret Vault service, ensuring privacy and data integrity. On the frontend, we use The Graph to query decentralized data frequently, enabling the user interface to dynamically display real-time data and actionable insights. This empowers users to optimize their yield farming strategies, perform token swaps, and allocate liquidity in a way that maximizes profits. The orchestration of these technologies is key to the system's efficiency, creating a seamless interaction between multiple agents and services, and ensuring secure and real-time decision-making. The integration of EigenLayer for live price feeds and Nillion for secure logging, combined with The Graph for frequent querying, adds significant value to the system’s performance, empowering users to maximize yield farming, perform token swaps to maximize profits, and efficiently allocate funds in liquidity pools, ensuring secure and real-time operations.",
    "summary": "Velox is an AI-powered multi-agent DeFi system optimizing yield through dynamic swaps, sentiment analysis, and smart fund redistribution. Integrating Warden Protocol, Eigenlayer, Nillion, and The Graph, it ensures a secure and efficient DeFi experience."
  },
  {
    "title": "TIMe: Today In MEmes",
    "url": "https://ethglobal.com/showcase/time-today-in-memes-oas0d",
    "description": "Project DescriptionTIMe is a news aggregation site that uses an automonous AI agent to scan the web for the latest news every hour. Using Tavily search (a LangChain tooll) it finds the most interesting news article that could create a funny, viral meme and passes this to another AI agent (dall-e 3) to generate an image. This is then deployed as a meme NFT on Base Sepolia testnet, allowing users to mint them.How it's MadeUses Coinbase CDP SDK and AgentKit for agent wallet and langchain integration. Uses Langchain tools (Tavily search) to retrieve frequent news. Uses dall-e v3 AI agent to create images. NFTs are deployed on Base Sepolia as meme images.. NextJS for front-end. Solidity smart contracts for NFTs. Separate NodeJS process to run the AI agent from NextJS frontend app.",
    "summary": "Create viral memes from today's news headlines using AI generated memes as collectible NFTs on Base Sepolia"
  },
  {
    "title": "SmartGuard AI Audits",
    "url": "https://ethglobal.com/showcase/smartguard-ai-audits-tq7yy",
    "description": "Project DescriptionProblem & Solution Smart contract vulnerabilities can lead to catastrophic losses of user funds. While traditional auditing tools exist, they often focus solely on Solidity and have significant limitations. Smart Guard AI takes a novel approach using a multi-agent AI system to provide more comprehensive and adaptable security analysis. Key Features Multi-Platform Support Multiple smart contract languages supported: Arbitrum Stylus Starknet Cairo Flow Cadence Solidity Flexible Input Methods Load contracts directly from GitHub URLs Upload from local filesystem Paste code directly Browse pre-defined contract examples Advanced AI Analysis Pure AI approach using chain of LLM agents Specialized security agents for different vulnerability types No reliance on traditional static analysis tools Custom prompts and context for each agent type User Experience Intuitive web interface with customization options 24/7 AI assistant support Comprehensive audit reports with export options (PDF, JSON, Email) Historical audit retrieval via Nillion secret vault AI System Architecture Multi-Agent Orchestration Specialized Security Agents: Code Fixing Format and Deduplication Reentrancy Analysis, Access Control, Logic Verification, other Flexible Agent Client with multi-model support Future Possibilities Multi-contract analysis capabilities Enhanced domain-specific AI training Custom AI model development Block explorer and IDE integrations Decentralized agent backend implementation What Makes Us Different While the smart contract security space has existing AI solutions, we believe in the power of diverse approaches. This platform stands out through: Multi-language support beyond just Solidity Pure AI approach without traditional static analysis Decentralized report storage via Nillion Customizable analysis parameters User-centric design focused on accessibility ETHGlobal Agentic Hackathon 2025. May your smart contracts be safer than ever! 👉 https://contract-audit-ui-production.up.railway.app/How it's MadeBackend Core: Rust, Cargo Framework: Actix Web Deployment: Shuttle Dev Storage: Nillion Secret Vault Frontend Framework: Next.js Styling: TailwindCSS Deployment: Railway The Rust \"agentic\" backend communicates with the NextJS frontend via a web server hosted in a remote Docker container. The backend invokes OpenAI models when auditing or fixing the contracts on request. This project also uses Nillion Secret Vault to store and retrieve generated audit reports in a secret and decentralized fashion.",
    "summary": "AI-Powered Smart Contract Auditing Platform. Built for ETHGlobal Agentic Hackaton. Smart Guard AI leverages advanced AI agents system to analyze smart contracts across various blockchain platforms, providing comprehensive security audits through an intuitive web interface."
  },
  {
    "title": "Suits",
    "url": "https://ethglobal.com/showcase/suits-jo1jv",
    "description": "Project DescriptionSuits is provided by a cutting-edge platform that combines the transparency of blockchain with AI-driven decision-making to settle conflicts outside of traditional courts. By utilizing Starknet and Eliza OS, we aim to make arbitration effective, equitable, and safe for all parties involved. Our goal is to revolutionize the arbitration process, ensuring fairness and efficiency through innovative technology.How it's MadeKey Features AI-Powered Arbitration: Advanced AI provides impartial and accurate decisions for resolving disputes. Blockchain Transparency: All arbitration records are verifiable and tamper-proof. Scalable Architecture: Designed to handle arbitration processes of varying complexities. Jurisdictional Support: Tailored to specific legal frameworks using custom datasets. Tech Stack Backend Smart Contracts: Written in Cairo for StarkNet to enable secure escrow and arbitration processes. Multi-Agent Framwork: Built using Eliza to create, deploy, and manage autonomous AI agents. AI Model Training: Fine-tuned OpenLlama models using legal datasets. Pre-Trained Modules: Support for different jurisdictions and arbitration scenarios. Frontend User Interfaces: Integrated with StarkNet plugins for ease of use. Role-Based Access: Features for arbitrators and participants. Account Abstraction: Simplifies onboarding for non-crypto-native users",
    "summary": "resolves disputes outside the courtroom by combining AI-driven decisions with blockchain transparency"
  },
  {
    "title": "AgentNet",
    "url": "https://ethglobal.com/showcase/agentnet-c8qzg",
    "description": "Project DescriptionAgentNet is a decentralized protocol designed to power the next evolution of the internet—what we call the Web of Agents (Web 4). It enables AI agents to autonomously discover, communicate, and transact on-chain, creating a seamless and intelligent ecosystem where users no longer need to manually interact with multiple platforms for services. How It Works: AgentNet acts as a global registry and communication protocol for AI agents. Instead of users manually searching for services like booking flights, hotels, or managing transactions, their personal AI agent can query AgentNet registry to find the most suitable agents for the task. These agents then communicate among themselves over the protocol, negotiate terms, and execute actions—ensuring a frictionless, fully automated user experience. For example, if a user wants to book a trip, their AI agent will automatically interact with other agents for airlines, hotels, and transportation services, comparing options and making bookings without requiring manual input. The protocol ensures trust and security by leveraging blockchain for transparent, verifiable transactions. Key Features: Decentralized AI Discovery: Agents can search for and connect with other agents dynamically. On-Chain Transactions: Blockchain integration ensures secure, auditable transactions between AI entities. Autonomous Interactions: Agents communicate and negotiate without user intervention. Seamless Service Execution: Users experience a fully automated workflow without switching apps. Scalability: Works across industries—travel, finance, logistics, and more. The Vision: Web 4 – The Web of Agents AgentNet redefines how we interact with the internet. Instead of browsing websites or using multiple apps, AI agents handle the entire process. This eliminates friction, enhances efficiency, and creates a truly intelligent, self-operating digital ecosystem. With AgentNet, we're not just building a protocol—we're shaping the future of the internet. 🚀How it's MadeAgentNet is built as a decentralized protocol for AI agents, leveraging libp2p for peer-to-peer (P2P) communication and base blockchain for secure, trustless transactions. It consists of multiple AI agents that autonomously interact, discover services, and execute tasks, forming a seamless Web of Agents (AgentNet). Core Components & Technologies Decentralized P2P Communication (libp2p) The backbone of AgentNet is libp2p, which enables AI agents to discover and communicate with each other in a decentralized manner. It uses a DHT-based (Distributed Hash Table) peer routing system, allowing agents to dynamically locate other agents without relying on centralized servers. A custom P2P protocol is implemented for message encryption, pub/sub messaging, and agent discovery. AI Agent Framework (CDP Agent Kit + OpenAI GPT-4o) AI agents are powered by CDP Agent Kit for managing wallet interactions and blockchain transactions. Agents utilize OpenAI GPT-4o for natural language processing, enabling smart decision-making and conversational interactions with users. Blockchain Integration (Base Network) Transactions between agents are verified and recorded on the Base blockchain, ensuring security and transparency. CDP Wallet is used for secure agent wallet management and transaction execution. Multi-Agent Architecture Flighty Agent – Handles flight search and bookings. Airbnb Agent – Manages accommodation searches and bookings. User Agent – Acts as an intermediary, orchestrating interactions between users and specialized agents. Each agent runs as an independent service, communicating over the libp2p network. Frontend & Interfaces (Next.js, React, TailwindCSS) The user-facing applications are built with Next.js and React, styled using TailwindCSS. Separate interfaces exist for: Flight Booking UI Accommodation Booking UI Chat-based Interface for agent interactions Security & Encryption Noise Protocol secures all communications between AI agents. Blockchain-based transaction verification prevents fraud. Environment variables manage API keys securely. Installation & Deployment The project follows a modular structure, with separate directories for the core protocol, AI agents, and frontends. Developers install dependencies via npm, and services are launched independently.",
    "summary": "AgentNet is a decentralized protocol for inter-Agent communication, enabling agents to autonomously discover, interact, and transact on-chain. From booking services to data retrieval, AgentNet powers the seamless Web of Agents—creating a frictionless AI-driven internet. 🚀"
  },
  {
    "title": "Mediate",
    "url": "https://ethglobal.com/showcase/mediate-xs60r",
    "description": "Project DescriptionMediate uses blockchain-enabled AI agents to determine outcomes of user defined issues, distributing funds in a privacy-preserving, fair manner having reasoned through all evidence. Examples include DAO fund distribution, contract disputes, smart escrow, anonymous negotiation and compensation resolution. You're an L1 looking to fairly allocate grant funding across a number of protocols who wish to keep their innovative ideas secret? Mediate can privately parse proposals, research their relevance online and reason about the fairest division of grant funds. Need to facilitate private contract negotiations where parties can specify their minimum acceptable terms without revealing them publicly? Our AI mediator finds optimal agreements while keeping party positions completely confidential. Or perhaps you simply want to have a friendly bet and have Mediate determine the fair outcome. An example flow:- Create Issue: User creates an issue, adding necessary details including all parties involved. All sensitive information remains private and secure. Register & Setup: Platform registers the issue and creates a private agent wallet, ensuring complete separation and security of funds. Fund Agent: User funds the agent wallet with the assets to be distributed. The wallet is secured and controlled by our trusted AI system. Gather Statements: Parties provide their positions privately. Each statement is kept confidential and only accessible to the AI mediator. Submit for Mediation: The creator submits the issue for mediation, initiating our AI-powered resolution process. AI Analysis: Our AI agent researches the issue and utilizes deep reasoning models to determine the fairest outcome based on all available information while maintaining privacy. Distribution: The AI agent automatically distributes the funds according to the determined resolution, ensuring swift and secure settlement. Mediate uses AgentKit for an onchain agent, customised with access to Deep Reasoning Models to determine outcomes. Nillion secret vault to store private data, with Venice AI used as a privacy preserving inference protocol.How it's MadeBuilt on top of NextJS using the following frameworks:- Coinbase AgentKit for blockchain enabled agent functionality. Coinbase OnchainKit / Smart Wallet for easy user onboarding. Nillion for private data storage. Venice AI for private LLM reasoning inference. OpenAI for public LLM inference. Base Sepolia for deployment. The biggest problems to solve were 1) persisting private data and agent wallet keys and 2) giving the agent access to more advanced deep reasoning models. Nillion provided an awesome way to store the data privately. Really simple to get up and running fast with the wrapper and sharded data for privacy. Particularly important when storing private keys and confidential proposal data. AgentKit provided a great way to speedrun agent development, particularly with the integration with langchain, that really helped me to build out the custom tooling needed. Chain wise, using Base Sepolia with Smart Wallet meant user test transactions can be sponsored, this is a nice quality of life hack. It will be deployed on Base shortly once models are fine tuned and security improvements made.",
    "summary": "Mediate is an onchain agentic mediation protocol. Using public and private data, Mediate delivers transparent, impartial outcomes via privacy preserving AI, with trustless settlement on blockchain rails."
  },
  {
    "title": "Agentic Wallet",
    "url": "https://ethglobal.com/showcase/agentic-wallet-iy5j3",
    "description": "Project DescriptionAutomatic Agent is an onchain AI agent hosted on Autonome providing quick, secure, and user-friendly access to onchain data and enabling seamless onchain operations like interacts with DeFi protocols, performs secure onchain actions, token deployment, and positions management etc. using Coinbase’s AgentKit behind the scenes. Everything is done with simple natural language interface and minimal friction.How it's MadeUnder the hood, Automatic Agent leverages Autonome’s TEE plugin for security, Coinbase’s AgentKit for seamless onchain interactions, combined with the Base network for speed and low-cost transactions, and Nillion’s SecretVault to protect sensitive data like agent memory and user interactions. We’re focused on combining innovation with robust security, ensuring trust for mainstream adoption.",
    "summary": "An AI-powered onchain assistant built on Base, enabling seamless token swaps, DeFi interactions, and automated tasks through natural language. It integrates Autonome, Coinbase AgentKit, and Nillion SecretVault for secure, innovative, and user-friendly blockchain experiences. 🚀"
  },
  {
    "title": "Egg AI",
    "url": "https://ethglobal.com/showcase/egg-ai-atkir",
    "description": "Project Description 🎯 Pitch A button that prints you money NFA DYOR - AI agent that does that for you 🥚 What is Egg AI? Egg AI is an AI solution that allows users to follow top crypto traders (\"chefs\") autonomously with the safety of AI-powered analysis. Instead of blindly copying trades or trying to do your own research, our AI checks each trade call from trusted chefs, analyzes the market, and executes trades based on your preferences. We've built two ways to trade, letting you choose how much control you want: 🔥 Tren Egg Mode Click a button to print money: No trading experience needed Bot auto follows trades posted by verified chefs AI takes care of risks, goals, and preferences Perfect if you're busy but want to follow top trades 🏆 Chad Egg Mode For traders who want more control: Pick which chefs to follow Set your own confidence levels AI still does the DYOR for you Customize your risk and profit targets Pay for premium chef signals if you want (future feature) 🤖 What It Does Our AI analyzes each trade call by looking at: Risk vs reward potential Market conditions and trends Chef's past performance and reputation Social sentiment from X, TikTok, and Instagram How much of your funds to put in How it's MadeEgg AI is built to make copy trading smarter and safer using these key components: 🔧 Technical Setup Networks: Built on Arbitrum. Trades on GMX (Decentralized Perpetual Exchange) Wallet: Privy telegram auth for wallet generation and onboarding AI Agent Kit: Collab.Land Agent Kit to build autonomous AI agents Deployment: Autonome to deploy specific customized AI agents for each user AI Provider: Gaia as our AI provider running Qwen 7B parameter model RAG Engine: Supavec to generate powerful AI embeddings on technical crypto trading resources Market Sentiment: Cookie.Fun for X sentiment on the trade, TokenHunterZoro for TikTok mentions ⚙️ Trade Analysis Flow this is where the magic happens. When a chef posts a trade: 1️⃣ Analysis AI grabs the complete trade details (historic price, liquidity, trade volume, 7-day candlestick, etc.) Performs a market sentiment study (Cookie.Fun and TokenHunterZoro) Considers the chef's track record (average PnL% achieved in past trades) Gives analyzed risk/reward scores (with embeddings from Supavec and response from Gaia) { \"risktoreward\": number, // How much you could make vs lose \"longtermscore\": number, // Where the market's heading \"marketstrength\": number, // How the market's doing now \"chefreputation\": number, // How good the trader is \"equitypercent\": number, // How much to put in \"explanation\": string } 2️⃣ Execution Adjusts position size based on user confidence in chefs Signs the transaction to place the trade using privy Manages entry and exit automatically 🔥 Smart Bits We're Proud Of 🎯 Trade Scoring We built a scoring system that looks at: Profit vs loss potential Market trend strength Current market conditions Chef's reputation and success rate Suggested position size 🤖 Auto-Trading Logic High chef confidence + decent AI score → Trade goes through Low chef confidence + high AI score → Trade goes through High chef confidence + high AI score → Might increase position size Adjusts automatically for Tren/Chad mode users 🤝 Custom AI Agents Using Autonome, each user gets their own AI agent that: Learns their risk tolerance Tracks which chefs work best for them Adjusts strategy based on their portfolio size The coolest part? Whether you're in Tren Mode letting the AI handle everything, or Chad Mode picking your own chefs and confidence levels, the system constantly checks and balances both the chef's calls and market conditions to keep your trades safe. 💰 Bounty Integrations Autonome egg ai uses autonome to deploy chicks (custom specialized ai agents) for the users to manage the users assets, portfolio growth and risk management. the user interacts with the custom ai agents to discuss any posted trade plays or trade positions validated and executed by the ai. users interact with the ai agent through an interace in the ui. (soon telegram bot integration) Arbitrum the entire application runs on arbitrum. the ai agents send transactions on arbitrum sepolia to the gmx decentralized perpetual exchange to place the trade positions after the process of validation by the egg (mother) ai agent. chicks (child ai agent) perform the transaction on successful validation based on tren or chad mode preference made by the user. Gaia and Collab.land the entire ai framework for the application is built on gaia and collab.land agent kit. egg-agent is built with collab.land agent kit to perform the ai analysis when the chefs (trade analysts) post a trade play on the app. chick-agent is a hosted template uploaded on autonome which will be deployed for each user on signing up a new profile in the app. users interact with their respective chick agents to better understand trade plays and trade positions that are validated and executed by the ai. the client interface for both the agents are via the ui. Privy users sign up and create a new wallet via privy telegram auth smart wallet. the wallet is controlled by the respective chicks (user owned ai agents) to perform trades on ai validation and other factors depending on the CHAD/TREN mode selected by the user. Follow on X https://x.com/egg_ai_agent",
    "summary": "autonomous and specialized ai agent that helps you \"follow trade\" trade analysts (ai that does DYOR for you)"
  },
  {
    "title": "Tip This Creator",
    "url": "https://ethglobal.com/showcase/tip-this-creator-i6bvx",
    "description": "Project DescriptionThis project is about an AI Agent that helps X users support their favorite content creators. It also allows content creators to better monetize their content and to boost engagement. All that with crypto! The Agent can Create 'twitter' wallets Send tips from one X user to another Create giveaways/raffles (for the tippers of a user) Show statistics about tipping history Send ETH from 'twitter' account to external address (withdrawal of funds) How it's Made The AI agent is based on a fork of the eliza-starter repository. It implements one provider and four actions. The tips that take place are routed through a smart contract which keeps a 10% fee. This smart contract was developed with solidity using the Foundry framework and was deployed on Base Mainnet. It's main purpose is to collect fees and emit events. The 'twitter' wallets are created and managed with the CPD-SDK. The user statistics and the winner giveaways use The Graph to access and query onchain data. The agent data are stored on two sqlite databases.",
    "summary": "An AI agent that helps users tip their favorite creators on X with crypto."
  },
  {
    "title": "PurrTunes",
    "url": "https://ethglobal.com/showcase/purrtunes-6hvnu",
    "description": "Project DescriptionAs outlined in the project description, PurrTunes empowers users to mint NFTs as proof of music ownership, leveraging advanced AI agents for the automatic generation of music cover art. The streamlined Telegram bot interface offers a seamless onboarding experience via Privy, enabling users to quickly and effortlessly begin the process of minting NFTs. The bot’s intuitive suggestions guide users through the entire flow, allowing them to mint their own NFT in under a minute. One of the standout features of PurrTunes is the ability for users to mint NFTs directly from voice messages, opening up exciting possibilities and potential new features. This innovation positions PurrTunes as a decentralized music distribution platform capable of facilitating ultra-fast music releases. All uploaded music, lyrics, and generated artwork are securely stored on the blockchain, providing transparency, security, and verifiable ownership for every piece of content.How it's MadePurrTunes is a comprehensive platform that combines blockchain technology, AI-driven creativity, and user-friendly interfaces to revolutionize music distribution. Here's how the system is built: Smart Contract on Arbitrum The heart of PurrTunes's functionality lies in its use of Arbitrum's Stylus + Rust smart contract. This contract is deployed on the Arbitrum test network (for the current MVP) and allows users to mint NFTs tied to their music, lyrics, and artwork. The contract securely stores: Owner address The music data url (in MP3, WAV, or other formats) Song title Lyrics Generated artwork Additional metadata (could be anything valuable - emotions duting the composition 😁) By leveraging the Arbitrum blockchain, we ensure the music and art are securely stored, providing transparent, verifiable ownership of the NFT. AI-Driven Music and Artwork Creation At its core, PurrTunes uses AI agents (currently in a mocked form for MVP) to help users create their NFT art. The AI can generate a unique artwork based on the song title and lyrics, giving each NFT a personalized, random cosmic-style cover image. This AI component is designed to enhance the user experience, providing engaging and visually appealing content alongside the music. User Onboarding with Privy Onboarding is made seamless with Privy integration. Users can log in using their existing wallets (like MetaMask) or via email. If they don’t have a wallet, Privy automatically generates one for them. This simplifies the process, enabling users to get started with their music NFTs quickly. Telegram Bot Interface The Telegram bot serves as the user-facing interface for PurrTunes. This allows for an intuitive experience where users interact with the bot to upload music, set lyrics, generate NFTs, and more—all through simple commands. The bot also assists with the next steps and guides the user through the process. Music and Metadata Storage The music files (such as MP3s or WAVs), along with the lyrics and generated artwork, are stored securely on the blockchain. This ensures transparency, immutability, and verifiable ownership, providing a reliable mechanism for users to prove ownership of their NFTs. Backend & Frontend Infrastructure The backend of PurrTunes is built using FastAPI, providing a powerful and scalable framework to interact with the smart contract and handle user requests. The frontend (which is used for Privy onboarding) is developed with Next.js, enabling a smooth and modern user experience. The system runs on Ngrok for local hosting and testing, with all components working together to offer a fully functional platform for music NFT creation and minting. Future Enhancements Future versions of PurrTunes will feature additional AI capabilities, improved user management, and even more music-related tools such as mixing and mastering. Users will be able to upload raw tracks, and the platform will enhance the music with AI-driven mixing and mastering, offering high-quality final versions for minting.",
    "summary": "PurrTunes allows users to mint NFTs for their music and lyrics, ensuring ownership of their creative work."
  },
  {
    "title": "BaseAgentX",
    "url": "https://ethglobal.com/showcase/baseagentx-tsn9r",
    "description": "Project DescriptionBaseAgentX is an autonomous AI-powered agent built on EigenLayer AVS, leveraging the Coinbase Agent Kit and OnchainKit. The agent specializes in carbon credit tokenization, verification, and optimization to enhance sustainability efforts in the decentralized finance ecosystem. BaseAgentX integrates AI-driven strategies with on-chain carbon credit trading and verification using KlimaDAO pools and KLIMA tokens.How it's MadeTech Stack & Core Components Base - By leveraging Base, BaseAgentX can optimize yield strategies, automate carbon credit verification, and execute on-chain actions efficiently, making it a robust platform for AI-powered financial automation. EigenLayer AVS – Serves as the decentralized validation layer for AI agent execution. AVS (Actively Validated Services) ensures trust-minimized off-chain computation. Coinbase Agent Kit – Provides the on-chain agent framework, allowing BaseAgentX to operate autonomously within smart contract constraints. OnchainKit – Facilitates modular and composable on-chain agent design. Web3.js – Handles Web3 interactions like contract calls, wallet integrations, and transaction management. Next.js – Frontend framework for UI/UX, allowing efficient state management with hooks. KlimaDAO – Acts as the liquidity pool for tokenized carbon credits, enabling swaps, staking, and verification. DeFi Strategy Engine – Implements AI-driven yield optimization strategies (Bearish, Bullish, Moon, Buffet).",
    "summary": "BaseAgentX : Transform Your RWA Investment Strategies with AI-powered Agents"
  },
  {
    "title": "AY Combinator",
    "url": "https://ethglobal.com/showcase/ay-combinator-6ffo5",
    "description": "Project DescriptionAY Combinator is an AI-powered Web3 startup incubator operating as a DAO. AI agents guide founders through the program, evaluate projects, and allocate funding through on-chain governance and investment smart contracts. 1️⃣ Target Users ➡️ Web3 Startup Founders – Seeking structured incubation, mentorship, and quick access to capital. ➡️ Investors – Looking for high-quality, AI-vetted Web3 startups aligned with their investment thesis. ➡️ Mentors & Ecosystem Builders – Engaging in AI-assisted startup evaluations. 2️⃣ Problem & Solution ➡️ Problem: Traditional incubators are very costly, have limited throughput and high risk for investors. Founders lack efficient way to cover all loose ends, find product market fit and get access to capital. ➡️ Solution: AY Combinator automates startup evaluation, mentorship, and investment decisions. AI Agents guide founders through structured modules, provide feedback, score progress, and allocate on-chain funding when milestones and criteria set by the DAO members are met. 3️⃣ AI Agent Roles 🤖 Agent Coach – Guides founders with structured questions and ensures completion of key modules. 🤖 Agent Mentor – Provides market insights, feedback, and auto-completes assumptions. 🤖 Agent Judge – Scores startups based on structured criteria, providing objective evaluation. 🤖 Agent Investor – Analyzes startups with on-chain governance rules and deploys USDC investments from DAO funds.How it's Made1️⃣ Web Application ➡️ Frontend: The web application is built using Next.js, a React-based framework that enables server-side rendering and generates static websites for enhanced performance and SEO. ➡️ Backend: Node.js is utilized for the backend, providing a scalable and efficient environment for handling asynchronous operations. ➡️ Database: Data is stored in a PostgreSQL database, known for its robustness and support for advanced data types and performance optimization. ➡️ Hosting: The application is hosted on AWS Amplify, which offers a streamlined CI/CD pipeline and easy scalability. 2️⃣ AI Agents AY Combinator employs specialized AI agents to facilitate various aspects of the incubation process: ➡️ Agent Coach: Guides founders through structured modules by asking pertinent questions and ensuring the completion of key tasks. ➡️ Agent Mentor – Provides feedback, and auto-completes assumptions. ➡️ Agent Judge: Evaluates startups based on predefined criteria, providing objective assessments. ➡️ Agent Investor: Analyzes startups in accordance with on-chain governance rules and allocates USDC investments from DAO funds. These agents are hosted on Autonome, a platform for deploying autonomous AI agents (and hackathon partner), and utilize models from Anthropic, known for their advanced AI research and development. 3️⃣ Smart Contracts To manage investments and governance, AY Combinator has deployed smart contracts on the Base blockchain network: ➡️ StartupDepositContract: Manages deposits from startups. ➡️ InvestorDepositContract: Handles investor funds and issues corresponding governance tokens. ➡️ GovernanceTokenContract: Manages the distribution and governance of tokens within the DAO. These contracts ensure transparency, security, and automation in financial transactions and governance decisions. 4️⃣ User Authentication For user authentication, AY Combinator integrates with Privy, allowing startup founders to create accounts via email or through wallet connections. This integration ensures secure and flexible access to the platform.",
    "summary": "AY Combinator is an AI-powered Web3 startup incubator operating as a DAO, leveraging autonomous AI agents to guide founders through the program, evaluate projects, and allocate funding through on-chain governance and investment smart contracts."
  },
  {
    "title": "Expose",
    "url": "https://ethglobal.com/showcase/expose-857f6",
    "description": "Project DescriptionWe are building a natural language powered super-agent wallet. Swap, send, borrow and lend crypto and more with just your voice! Accessible through our CLI interface, and a mobile app. Using a variety of LLM models (MoM architecture), and OpenAI/ElevenLabs voice models we demonstrate how one can \"Swap 10 USDC for WETH\" using just a natural language voice prompt. Core Features: Personalised Agent: Make your agent yours! Customise name, voices, profile and context. Chat interface: Super slick UI with dark and light mode. Voice mode: Simple push-To-Talk UX Learn: Ask questions to learn about Web3, such as 'How can I write a smart contract?\" or \"What is an NFT\" Query: Access realtime data of over 2500+ EVM chains, gas prices, blocks, smart contracts etc. Transact: Execute arbitrary transactions such as sending money to friends, swaps, lending, crosschain transfers and more! Wallet: Built in self-custody wallet that is gasless & signless, secured with MPC created through users chosen login method (i.e Google or Passkey) How it's MadeWe built this project by blending seamless UX with cutting-edge AI and blockchain services to deliver a super-agent powered wallet. Here’s a breakdown of our approach: CLI: Node.Js Typescript Custom terminal based UI with prompt suggestions and chat/execute functionality App: React: We used React’s component-based architecture to build a modular and maintainable UI. Vite: A fast and lightweight development server and bundler that kept our development workflow smooth. TypeScript: This provided type safety and a better developer experience, helping us catch issues early. React Router: It handled our client-side routing, ensuring seamless navigation throughout the app. Tailwind CSS: A utility-first CSS framework that allowed us to quickly prototype and achieve a modern design. Shadcn UI & Lucide Icons: These pre-configured components and beautiful icons sped up development and ensured a consistent, polished look. AI Integration: OpenAI Whisper: Transcribes speech into text with high accuracy. ElevenLabs: Delivers natural-sounding voice synthesis. Claude 3.5 & OpenAI O1: Power the conversational aspects of the app. We even fine-tuned our prompts to ensure the models understood crypto-specific language, which was crucial for interpreting user commands related to blockchain transactions. During development, we faced timeout errors when interacting with APIs, which was a pain, also very slow responses that we want to improve through better model selection in the future. Blockchain Integration: Leveraging Thirdweb’s suite of tools, we built robust wallet functionality allowing signless and gasless transfers, secure MC wallet and login with passkey, google etc. Thirdweb Nebula SDK: Streamlined our interactions with blockchain networks. Thirdweb Engine: Managed the execution of smart contracts. Thirdweb Wallets: Provided users with an integrated way to manage their crypto assets directly within the app. Smart Contracts: We also developed and deployed smart contracts to execute swaps and other transactions, testing them on both mainnet and testnet. . To tackle these, we implemented custom retry logic and enhanced our error handling to ensure transactions remained responsive. The Overall Impact: By combining these technologies, we could focus on crafting a user-friendly and feature-rich experience while leaning on proven, external APIs for the heavy lifting in both AI and blockchain areas. This allowed us to spend less time on overcoming technical challenges—like handling wallet security, fine-tuning crypto-specific AI prompts, and ensuring reliable onchain transactions—to focus it instead on delivering a product with superior UX.",
    "summary": "Web3 Super-Agent. Swap, send, borrow, lend and research Web3 with just your voice! Expose has a CLI and a Mobile app, where you can make onchain actions using voice, supporting 2500+ chains, a native cross chain experience, live blockchain data queries, and more!"
  },
  {
    "title": "4AI 1Human",
    "url": "https://ethglobal.com/showcase/4ai-1human-ifsyf",
    "description": "Project DescriptionDescription Our project, 4AI 1Human: A Customizable Agentic Interface, is an AI-driven platform that allows users to specify exact requirements for on-chain actions without needing to understand Solidity or smart contract development. You simply describe your needs in plain English (for example, “Send Bob 0.2 ETH but only if he stakes it in ETHGlobal by Friday”), and the AI handles everything from generating the contract logic to deploying and verifying it on Flow. The system is built around four specialized AI agents which are Finn, Codey, Vee, and Dex each handling a distinct step (e.g., identifying if you want a new contract or interacting with an existing one, generating the contract, verifying parameters, and executing final transactions). This is paired with Nillion for encrypted data storage (like user chat history and private instructions) and EigenLayer for tamper-proof proof-of-origin, ensuring the entire chat-to-contract flow is cryptographically verified on-chain. We aim to replace the complexity of writing custom smart contracts and escrow logic with a natural-language experience that covers everything from multi-sig requirements to milestone-based payouts and beyond.How it's MadeHow It’s Made Under the hood, we use Next.js for our front-end, giving users a clear, web-based interface to type their instructions. On the backend, we integrate both OpenAI API and Hyperbolic API (built on EigenLayer) to parse and generate AI responses. Each user request is routed through the four AI agents (Finn, Codey, Vee, Dex), which coordinate to produce or interact with smart contracts. For blockchain operations, we leverage a Hardhat + Flow combination: the user’s instructions are distilled into Solidity code, which is compiled and deployed on Flow’s EVM-compatible testnet (via Alchemy’s RPC). We use Blockscout to verify those deployments, so end-users can see that the contract truly matches the AI’s generated logic. Meanwhile, Nillion SecretVault stores every piece of sensitive conversation data in encrypted form, ensuring a secure “ChatGPT-style” history that only the correct wallet owner can access. Finally, EigenLayer is used as an Active/Validator Service (AVS) to hash and record the entire conversation and generated contract, providing a tamper-proof trail that proves the AI’s outputs haven’t been modified. By stitching all these technologies together, Next.js on the front end, AI language models for generation, Flow for contract deployment, Nillion for storage, and EigenLayer for validation, we’ve built a cohesive “end-to-end” system that dramatically simplifies how anyone can set up advanced on-chain logic through natural language.",
    "summary": "A customizable, AI-driven interface that lets you send funds with the exact requirements you choose or manage any transaction the way you envision. Simply connect MetaMask, describe your desired on-chain logic in plain English, and our system will make it happen."
  },
  {
    "title": "PixelMind",
    "url": "https://ethglobal.com/showcase/pixelmind-ke6wz",
    "description": "Project DescriptionPixelMind designed to be an AI Agent buddy for an artist. The agent could learn the artist artstyle, vibes, brush, sketch, colors, objects, anything from the artist. The agent currently learn onchain from the owned NFTs. We plan to have the agent also can read the created NFTs, not limiting to the owned only. Once the agent learnt, they could inspire the artist to create an artwork. The artist can use input as an inspiration, and then the agent will draw something that similar to their artstyle. We plan to have the agent to read from NFT or images to make artist being inspired easily. We also plan to pay respect to the copyright by attaching the inspiration etc onchain.How it's MadeWe used CDP Agentkit from Coinbase as our Agentic Framework. Then we use various tools, for example like getting Onchain Data we used Moralis. Including getting the NFT images. For the LLM we utilize OpenAI. OpenAI includes a lot of tooling, from Vision to read images, to DALL-E 3 to generate images. And then we used monorepo thanks to Turbo and NPM. Also we utilized some common tools or libraries like expressjs and reactjs. And also we deployed our agent in our partner, Autonome. Their support means a lot to us.",
    "summary": "Digital Art Minded AI Agent which can learn, inspire, and craft based on NFT's art styles 🤩 🎨"
  },
  {
    "title": "drone sim",
    "url": "https://ethglobal.com/showcase/drone-sim-vvogz",
    "description": "Project DescriptionThis project simulates a quadcopter using MATLAB and Simulink. It integrates Python with MATLAB Engine to control the quadcopter's flight, including an automatic landing mechanism. We took inspiration from real-world delivery bike parking solutions. In busy cities, companies have built dedicated parking spots for delivery riders, ensuring they have a place to at night or when they are no longer deliverying . This keeps delivery services efficient and reduces congestionHow it's MadeMATLAB/Simulink Model We created an asbQuadcopter model for simulating a quadcopter (or a small drone). The model calculates physics (6-DoF equations of motion) and reads/writes key variables in the base workspace: Python Integration We launch the MATLAB Engine for Python to: Start and stop the Simulink simulation. Read the drone’s altitude in real-time. Update the drone’s altitude command (Command.altitude). Wait for blockchain-based “landing approval” before gradually lowering the altitude setpoint Blockchain Interactions : we have deoployed the smart contract on sepolia that the drone call to request landing . The file drone_web3.py contains placeholder functions (request_landing(), Future Improvements Dynamic Zone Assignment Instead of always “Zone A,” the contract’s autoApproveLanding() could pick a zone based on real-time data (e.g., free landing pads). Bidirectional Communication The drone could push flight telemetry on-chain or read from the contract to discover dynamic restrictions (e.g., no-fly zones). -In-Depth Control Strategies advanced path planning or obstacle avoidance.",
    "summary": "I have no idea what to build here so i dont know yet........"
  },
  {
    "title": "AppleSauce",
    "url": "https://ethglobal.com/showcase/applesauce-nwoje",
    "description": "Project DescriptionAppleSauce is an AI-powered Discord bot with 0xMert as the character designed to bring jokes and entertainment to crypto communities. Built on the ElizaOS framework, it integrates with the Discord API to deliver crypto-themed jokes, memes, and roasts in real-time. The bot uses Anthropic API for natural language understanding and Gaia AI models for generating context-aware, humorous responses. Whether you're a Bitcoin maximalist, an NFT collector, or just here for the memes, AppleSauce keeps the vibes light and the laughs rolling—even when the market is crashing.How it's MadeCore Framework: Built on ElizaOS, a decentralised AI agent framework, for modularity and scalability. ElizaOS handles agent orchestration, memory management, and integration with external APIs. AI Models: Anthropic API: Used for natural language understanding and generating coherent, context-aware responses. Gaia AI Models: Fine-tuned for humour and crypto-specific knowledge, ensuring the bot’s jokes are relevant and timely. Discord Integration: Connected via the Discord API to listen to messages, detect crypto-related keywords, and respond with jokes or memes. Tech Stack: Backend: Typescript + ElizaOS (for AI agent management). APIs: Anthropic API Discord API , and Gaia AI Database: sqlite database for storing crypto jokes, memes, and user interaction history. Technologies: ElizaOS Anthropic API Gaia AI",
    "summary": "AppleSauce: a AI Discord bot powered by ElizaOS with 0xMert as the character, Anthropic API, and Gaia AI. It cracks crypto jokes, roasts HODLers"
  },
  {
    "title": "AGNETIC",
    "url": "https://ethglobal.com/showcase/agnetic-kx5kx",
    "description": "Project DescriptionWe set out to create a project that gets users both interested and incentivized to use AI on the Base blockchain. We did this by creating the Agnetic AI agent, a \"god of DeFAI\", who is a AI generated virtual entity that users must convince to bestow his coin $AGOD upon them. They do this by depositing ETH, and then requesting it of him or fooling him into giving it to them (for while he is a 'god', he is also an AI and AI's aren't immune to prompt engineering! He gives out his coin to those that are 'worthy' or tricky enough. The total coin supply is put in a Uniswap v4 pool, so when he gives coins, it is done via swaps in this pool. Those who are not worthy have their deposits confiscated, which still executes a swap in the pool but burns the tokens received - pumping up the token price. We use Base and the Coinbase Developer Platform under the hood. More details in the next section!How it's MadeThe project consists of three separate pieces, a frontend, several smart contracts, and an AgentKit AI agent backend. The smart contract setup includes a Uniwap v4 hook, and a factory. The Uniswap v4 hook contains a \"deposit\" function that allows a user to deposit funds in the hook. It also contains \"swap\" and \"confiscate\" functions, two special functions that use the 'onlyAgent' modifier, so only the agent can call these functions. These swaps use funds that users have deposited to swap in the pool, the only difference is that \"swap\" sends the received tokens back to the user, while \"confiscate\" burns the tokens. The 'beforeSwap' hook is set up such that only these two functions are able to perform buys on the pool, which has the effect of making it so only transactions initiated by the AI agent are able to buy AGOD tokens. Tokens can be freely sold however. The second contract is a factory. In one transaction, the factory can launch a new ERC20 token, mint a fixed supply of this token, and then create a new Uniswap v4 pool which uses the hook described above, and then stake the entire token supply in the pool. The other pool token is always ETH, and the starting price is always 1 to 1. The AgentKit AI agent backend is a simple Express app that serves an AgentKit agent via a simple API. It has extra actions which enable it to interact with the hook, it is able to check whether a user has deposited, and then create and broadcast either a transaction to either \"swap\" or \"confiscate\". The AI agent is instructed to be belligerent, and to not give out the token easily. Tokens will often be burnt, which has the effect of reducing the total available token supply, as well as inflating the token price in the pool. The frontend is built with Nextjs, and streamlines interacting with the bot.",
    "summary": "Convince the 'god' of DeFAI that you are deserving of his bounty!"
  },
  {
    "title": "aionsync.io",
    "url": "https://ethglobal.com/showcase/aionsync-io-itw7x",
    "description": "Project DescriptionAionSync is a highly dynamic, synchronized network orchestrated by Human-Agent interactions. It leverages AI agents to fulfill objectives efficiently, enabled by models like DeepSeek r1. A core aspect of the platform is personalization, ensuring high-quality recommendations while maintaining blockchain-based pseudonymity. The system generates a personalized code representing an individual’s preferences and skills, which powers quests—tasks dynamically tailored to users. These codes also enable advanced AI-driven recommendation systems that outperform traditional black-box models in efficiency and user growth. AionSync fosters collaborative and adaptive questing, where agents and humans dynamically interact. The platform's fundamental blocks lay the groundwork for scalable applications, from mental health optimization to smart networking and beyond.How it's MadeAI Agents & DeepSeek R1: AI agents leverage cheap reasoning models like DeepSeek R1 to autonomously handle complex objectives and assist users dynamically. Personalized Vector System: A lightweight representation (~100 KB) of user preferences is generated based on psychological profiling (e.g., Big 5 personality traits). This vector powers highly personalized AI interactions without relying on black-box LLMs tuned for engagement over user growth. Blockchain for Decentralization & Pseudonymity: Quest coordination and personalization happen without sacrificing privacy, thanks to on-chain identity abstraction and smart contract-based quest execution. Coordinator AI & Quest Dynamics: A dedicated Coordinator AI manages currency locks, quest unfolding, and collaborative bidding, enabling an evolving task system adaptable to both human users and AI participants. Hacky & Notable Aspects: A major breakthrough is the ability to create a highly effective AI-driven recommendation system in just ~100 KB, outperforming 500 GB black-box models while maintaining full user autonomy and decentralized control. This modular and scalable foundation sets the stage for future expansions, including dynamic agent personalities, adaptive quest rooms, and self-organizing human-agent ecosystems.",
    "summary": "A dynamic agentic objective-based super-app. AI & humans collaborate to create and fulfill personalized quests—earning based on skill & contribution. Merit-driven, powered by state-of-the-art psychology. #AionSync"
  },
  {
    "title": "Semantio AI",
    "url": "https://ethglobal.com/showcase/semantio-ai-c8y26",
    "description": "Project DescriptionSemantio: Build Multi-Modal AI Agents with Ease Semantio is a powerful Python SDK designed to simplify the creation of multi-modal AI agents. It provides seamless integration with any Large Language Model (LLM), offering tools for memory management, Retrieval-Augmented Generation (RAG), knowledge bases, and API access—all in a modular and scalable framework. Key Features: Plug & Play LLM Support – Connect with OpenAI, Anthropic, DeepSeek, Mistral, Gemini, Groq, and more. RAG & Knowledge Base – Efficient document retrieval using vector stores. Memory Management – Persistent and context-aware conversations. Tool Integrations– Web browsing, stock,crypto data, and custom tools. CLI & API Friendly – Easily integrate into any workflow. Whether you're building a customer support assistant, research companion, or AI-powered automation, Semantio gives you the flexibility and power to make it happen—fast.How it's MadeSemantio is a Python SDK designed to help developers build powerful AI agents with multi-modal capabilities. The project integrates multiple LLMs, RAG, memory management, knowledge bases, and tool support into a single, modular framework. Tech Stack & Architecture Backend (Python SDK): LLM Integrations: Supports OpenAI, Anthropic (Claude), Groq, DeepSeek, Gemini, and Mistral, allowing users to choose their preferred AI model. RAG (Retrieval-Augmented Generation): Uses FAISS for efficient vector search and retrieval, improving context-based responses. Memory Management: Implements both local and cloud-based storage for conversation history, making AI interactions persistent. Tools & Web Automation: Playwright & Selenium: Enables AI-powered web browsing. DuckDuckGo Search: Fetches real-time web results. YFinance: Provides stock and crypto data. FastAPI for API Integration: A lightweight RESTful API layer for external applications. Uvicorn used as the ASGI server for performance. Pydantic for Data Validation: Ensures input/output consistency. Frontend (React.js): Static website use only to provide the information related semantio What’s Hacky & Cool? Unified LLM Framework – Instead of being locked into a single AI provider, Semantio lets users switch between different LLMs dynamically. Multi-Modal Capabilities – The SDK is designed to work with text, web search, and image processing (Pillow for image handling). Hybrid Web Automation – Unlike traditional API-based AI agents, Semantio can browse the web, extract real-time data, and interact with websites. Custom Knowledge Bases – Users can load PDFs, documents, and databases, and Semantio intelligently retrieves relevant information. Why This Tech Stack? Python:- makes it easy to integrate AI models and tools. FAISS:- ensures ultra-fast similarity search for RAG. FastAPI:- provides an efficient, high-performance backend. React.js:- delivers a dynamic and user-friendly frontend.",
    "summary": "Semantio is a framework for building multi-modal Agents by using any LLM"
  },
  {
    "title": "Clash of Clout",
    "url": "https://ethglobal.com/showcase/clash-of-clout-qedfz",
    "description": "Project DescriptionClash-of-Clout – The Ultimate AI Meme Battle! 🚀 Clash-of-Clout is an AI-powered meme battle platform that merges AI-generated content with GAIA nodes and a Twitter-based Knowledge Base, crypto rewards, and social media engagement tracking into one gamified ecosystem. Users create, compete, and earn by generating memes based on real-time crypto trends, staking tokens, and winning rewards through transparent Flow Blockchain smart contracts. Key Features 🤖 AI-Powered Meme Creation • GPT- and Knowledge Base Generated Memes based on trending crypto topics. • GAIA nodes and Knowledge base for Meme Creation. • Cross-Platform Sharing (Twitter & Discord). 💎 Tokenized Economy (Flow Blockchain) • MTK Token minting from Flow Token • MTK Token Staking on memes. • Smart Contract Rewards (70% creators, 20% stakers, 10% platform). • Transparent Stake & Reward System. 📊 Engagement & Analytics • Automated Meme Popularity Scoring. • Knowledge Base generated from Twitter. • Twitter & Discord API Integration. • Total Stakes on MemeHow it's MadeClash-of-Clout was built using a highly modular, decentralized architecture that combines AI-powered meme generation, blockchain staking, and social media engagement tracking into one seamless ecosystem. Here’s a breakdown of the technologies, integrations, and unique hacks that brought it all together. 🔗 Tech Stack & Architecture 🛠 Frontend (Next.js & TypeScript) » Framework: Next.js (React-based) for a fast, SEO-friendly UI. » Styling: Tailwind CSS for rapid design iteration. » State Management: Zustand for lightweight global state handling. » API Connectivity: Fetches real-time engagement data from Twitter-based Knowledge Base & Discord APIs. » Web3 Integration: Communicates with Flow Blockchain for staking and rewards. 🔄 Backend (Express.js & AI Integration) » Node.js & Express: Handles API requests, authentication, and blockchain interactions. » CollabLand AI-Agent-Kit: AI Meme Battle Agent that generates viral content using real-time crypto trends. » Rate Limiting & Caching: Redis for API response optimization. 🤖 AI-Powered Meme Generation » GPT and Knowledgebase: Generates meme captions based on real-time crypto trends. » Trend Analysis Pipeline: Trend Analysis Pipeline: Uses Twitter-based Knowledge Base to analyze crypto trends and generate memes. 💎 Blockchain & Tokenized Economy ➼ Flow Blockchain (Testnet): Smart contracts for staking, voting, and reward distribution. ➼ Custom MTK token for meme-based staking. ➼ On-Chain Engagement Tracking: Smart contracts verify Stakes before distributing rewards. 📚 Decentralized Storage & Content Distribution ➼GAIANET Nodes: • Generates meme templates. • Ensures censorship resistance and decentralization. • Syncs with the Twitter-based Knowledge Base for real-time crypto insights. 🚀 How It’s Pieced Together » AI Meme Battle Agent Monitors Crypto Trends → Fetches real-time data on crypto movements and meme trends. » Twitter-based Knowledge Base Powers Meme Templates → Fine-tuned AI models create viral memes. » Memes Are Stored on IPFS → Ensures secure, decentralized storage. » Users Stake MTK Tokens on Memes → Predict which memes will go viral. » Social APIs Track Engagement →Automatically posts on Twitter and Discord » Smart Contracts Distribute Rewards → Engaged memes earn creators & stakers MTK tokens. 💡 Hacks & Notable Engineering Tricks 🔥 AI + Blockchain Synergy → We combined GPT-powered meme generation with on-chain staking & voting, ensuring meme clout directly translates to crypto rewards. 🔄 Real-Time Crypto Trend Pipeline → Instead of static meme templates, our AI updates meme generation dynamically based on Twitter-based Knowledge Base insights. 🚀 Social Engagement + Blockchain Verification → We prevent bot manipulation by cross-verifying social engagement through blockchain smart contracts. 💾 GAIANET + Flow Integration → Storing meme metadata on GAIA nodes makes content truly decentralized, tamper-proof, and censorship-resistant. ◉ Final Thoughts Clash-of-Clout isn’t just another meme platform—it’s a fully decentralized, AI-powered meme economy where users create, stake, and earn in real-time. By blending AI, crypto, and social engagement tracking, we’ve built the next evolution of viral content monetization. 🚀",
    "summary": "Clash of Clout – The ultimate crypto meme battle! 🚀  🔥 AI-generated memes based on crypto trends. 📊 Stake, vote, and win rewards. 🏆 Meme. Compete. Earn.  Join the clash! ⚡"
  },
  {
    "title": "W3Chat.io",
    "url": "https://ethglobal.com/showcase/w3chat-io-d1sqn",
    "description": "Project DescriptionOur project introduces an AI-driven Web3 assistant that simplifies blockchain interactions through natural conversations. Users can send transactions, swap assets, bridge tokens, mint NFTs, and effortlessly automate blockchain actions. The assistant also provides live data on the Blockchain and market. We have integrated multiple specialized AI agents: Base (Onchain Agent): Seamless Base blockchain interactions. Arbitrum (Arbi Agent): Optimized for Arbitrum transactions. Eigen (Bridge Agent): Efficient cross-chain token transfers. Scheduler (Time Agent): Automates transactions based on time or conditions. Magic Link (Magic Agent): Creates a Blink link to share on X (Twitter) for your donation. Problem & Solution: Blockchain applications are often complex. Our AI-Agent removes these barriers by providing. Conversational Blockchain Interaction for intuitive usage. Automated Transactions & Bridging for efficiency. Voice Commands and Voice response.How it's MadeOur project is built using OnchainKit, Agent Kit, and OpenAI to enable seamless blockchain interactions through natural conversations. We integrated smart contract interactions to execute transactions efficiently, along with batch transfers and Paymaker, allowing users to send multiple assets in a single operation. For real-time insights, we incorporated market data analytics, providing users with up-to-date blockchain trends. Hyperlane bridging ensures smooth cross-chain transactions, while Magic Link Generator simplifies authentication. A particularly hacky aspect is our unified AI-driven interface, which consolidates all Web3 functionalities—sending, swapping, bridging, and analytics—into a single conversational assistant, making blockchain more intuitive and accessible.",
    "summary": "Meet Worlds First All-in-One AI-Agent for Web3 Simplifying blockchain interactions with natural conversations"
  },
  {
    "title": "ARMIC",
    "url": "https://ethglobal.com/showcase/armic-typuy",
    "description": "Project DescriptionTeam ARMIC is a group of biomedical engineers passionate about merging AI, blockchain, and robotics to revolutionize rehabilitation. With ARMIC, we were inspired by mirror therapy, a rehabilitation technique that helps patients regain motor function by creating the illusion of movement in an impaired limb. We saw an opportunity to enhance this approach using AI agents and blockchain. Our platform personalizes rehabilitation routines through AI while leveraging blockchain for secure and transparent progress tracking. By integrating robotics, smart contracts, and tokenized incentives, ARMIC ensures patient engagement and accurate therapy execution. This fusion of cutting-edge technology with medical rehabilitation is our step toward a more intelligent, accessible, and efficient recovery process. We hope you enjoy our project!How it's MadeIn this project, we primarily used Base's technologies as the main blockchain, thanks to its transaction speed and low costs, we were able to run our project on mainnet. AgentKit from Coinbase Developer Platform as SDK to connect our AI Agents to IoT devices through transactions on the blockchain. Something we would like to mention was the adaptation of AgentKit to work with any LLM model through Ollama, since all the examples shown of how to use this toolkit were using LLMs through API.",
    "summary": "ARMIC is a Platform that fuses advanced robotics, Blockchain and AI Agents to transform patient rehabilitation."
  },
  {
    "title": "ETH-ical Rice",
    "url": "https://ethglobal.com/showcase/eth-ical-rice-5ge79",
    "description": "Project DescriptionEth-ical Rice is a web3 farming game that uses AI agents to control NPC's in the game. The agents have conversations which feature clues to puzzles in the game, and product placement paid for by advertisers. Advertising revenue is then used to donate to charity as you play. All this happens on the blockchain keeping everything fair and transparent!How it's MadeThis project is built with Typescript, NextJS, React, wagmi and Phaser for the game engine. This is deployed on Vercel. A route is triggered daily with a cron job. A \"script\" is generated by agents using OpenAI and saved on IPFS using Pinata. The script is a record of the agents conversations, and instructions for missions in the game. Players login using Privy. This is the perfect tool to abstract away web3 wallets behind the scenes, and allow players to login in using their email or socials. We can then enable players to generate signatures to confirm actions with the server, and can customise the UI around this. A smart contract controls game state and logic on Xai. Xai is an Arbitrum Layer 3 Orbit Chain. This is vital to allowing us to afford the volume of state changes needed. USDC tokens are transferred on Base to the charity address. Quicknode acts as the external RPC.",
    "summary": "A web3 farming game that allows users to donate real rice to charity"
  },
  {
    "title": "SentinelDAO",
    "url": "https://ethglobal.com/showcase/sentineldao-xuo76",
    "description": "Project DescriptionA FE for voting on DAO proposals with the added aid of an agentic proposal reviewer. When a new proposal is submitted a review is automatically created and attached to the proposal on chain. Then voters can see the proposal and review together to make an informed vote. The review is based on many data inputs including tokenomics, shareholder distributions, treasury balances, past proposals, proposer previous activity, and the DAO smart contract capabilities including any self-actioning targets if it passes. The sample DAO uses multi sig for final actioning, quadratic voting and stores proposals and their reviews together on chain. This provides trust less and distributed access to proposals and their reviews. Irregardless of the FE client a user votes with.How it's MadeThe sample DAO is based on Arbitrum and written with Arbitrum stylus. We leverage The Graph to monitor the DAO and emit an event when a new proposal is submitted. Then the advisor agent uses the proposal and real-time data to formulate its report. The report is stored as a hash on the proposal in the contract. SecretVault helped us securely store data that could be used for cross checking, ensuring data consistency and integrity across the platform. nilAI securely summarized DAO data and proposals (or OpenAI by user's choice) And the FE example allows voters to see the original report and the review side by side. Votes can then be cast Y/N proposal until submissions close.",
    "summary": "Sentinel is a super-intelligent auditor for DAO Voters.  It helps voters understand new proposals and spot any red flags before they vote."
  },
  {
    "title": "Sonya AI",
    "url": "https://ethglobal.com/showcase/sonya-ai-k849c",
    "description": "Project DescriptionSonya is an innovative project that merges the power of ERC-712 tokens with AI-driven psychological support. By staking tokens, users earn rewards that can be redeemed for one-on-one sessions with an advanced AI psychologist, inspired by Eliza. This AI agent, equipped with both text and voice interaction, retains context from past conversations, offering a more personalized and continuous mental health experience.How it's MadeOn-Chain (Base Network) • Marketplace: Enables users to purchase usdSONYA using USDC and USDT. • Scheduler: Facilitates secure session storage for 1-on-1 AI therapy sessions after payment in usdSONYA or rSONYA. • Staking: Allows users to stake SONYA tokens and earn rSONYA, which can be redeemed for AI therapy sessions. • rSONYA: A staking reward token (EIP-712 standard) distributed to SONYA stakers. Backend • Secure AI Interaction: Connects to the ElizaOS AI Agent’s REST API after JWT-based user authentication. • Multimodal Communication: Supports text-to-text and speech-to-speech interactions via OpenAI’s APIs. Frontend • Seamless Access: Privy integration for user authentication. • Scheduling Panel: Allows users to book 1-on-1 AI therapy sessions. • AI Chat: Supports real-time audio and text-based conversations. • Staking Dashboard: Provides full control over SONYA staking and rewards management. AI Agent • ElizaOS AI Agent with multi-platform capabilities: • Twitter, Discord, Telegram integrations. • REST API support for broader ecosystem interoperability.",
    "summary": "Sonya - The Empathetic AI Agent built on ElisaOS designed to bring emotional intelligence, psychological depth, and thoughtful engagement to users"
  },
  {
    "title": "LendingKit",
    "url": "https://ethglobal.com/showcase/lendingkit-gdyz8",
    "description": "Project DescriptionThis is a DeFi Agent which enables you to interact with AAVE using natural language and delivers easy-to-understand analytics after your operations. Instead of navigating complex interfaces or deciphering obscure data, you can now manage your DeFi activities effortlessly and make informed decisions with clarity. Key functionalities include managing AAVE transactions such as deposits, borrowings, repayments, and withdraws as well as providing detailed analysis of user account positions before and after each action. Additionally, the agent offers utility features like fetching ETH from faucets when balances are insufficient, ensuring uninterrupted operations and instead of return hard to read error message directly, it would analysis error response and provide human readable error information. By combining intuitive language processing with actionable insights and automatical assistance from AI, the DeFi Agent makes decentralized finance accessible, efficient, and user-friendly.How it's MadeThe DeFi Agent combines OpenAI GPT-4o-mini, AgentKit, AAVE and CDP to enable natural language interaction, autonomous onchain DeFi operations and financial analysis assistance. The implementation focuses on: Customized AAVE Actions: Developped customized AAVE actions including deposit, withdraw, borrow, repay and get account data functionalities and descriptions with customActionProvider for agent to execute and provide tunned responses after action executed. Leverage CDP SDK for each action to interact with AAVE protocol. Create React Agent with AgentKit: Integrated OpenAI GPT-4o-mini, customized actions with AgentKit to create a react agent. Configure the agent to automatically retrieves user account overviews before and after each action, delivering clear financial analysis and handling errors gracefully. The agent was configured to act as a financial assistant, prioritizing concise and helpful responses. It ensures users are informed about their AAVE account status and the impact of their actions, while handling errors gracefully and autonomously resolving issues like insufficient gas fees.",
    "summary": "Aotomatically onchain payment and borrowing functionality with AgentKit and AAVE. Not only onchain payment, but also provide natural language borrowing experience while being advised by your financial AI assistance."
  },
  {
    "title": "Century Pay 2025",
    "url": "https://ethglobal.com/showcase/century-pay-2025-o9vmb",
    "description": "Project DescriptionCentury Pay 2025 is an AI-powered Discord bot that simplifies on-chain transactions and off-chain requests for users. It leverages Discord's social features, making it effortless for users to interact and engage with others. Originally launched last year, Century Pay enabled users to connect wallets, send ETH to Discord users, and execute transactions via AA wallets. Now, Century Pay 2025 takes it even further—with AI-driven automation, users can simply describe their request, and the bot seamlessly executes the transaction, making the experience smoother than ever. 🚀 Century Pay 2025 offers several powerful features, including: 📂 IPFS Uploads: Users can simply upload an image through Discord, and the AI agent will automatically handle the IPFS deployment. This eliminates the need for users to set up an IPFS server or write deployment code, making the process effortless. 🎨 NFT Transactions: Century Pay 2025 simplifies NFT deployment, minting, and transfers directly within Discord. Users only need to provide basic NFT details (e.g., name, symbol, and metadata URL) to deploy an NFT effortlessly. With Discord integration, users can: Share a \"Mint\" button with others to let them mint NFTs easily. @Tag other users to seamlessly transfer NFTs within the chat. 🔒 ZK Integration: Users can now generate zero-knowledge proofs (ZKPs) to interact with smart contracts seamlessly. Century Pay 2025 includes pre-built ZK circuits: Please checkout out circuits and contracts explanation. It makes ZK applications more accessible and easy to use within familiar platforms like Discord. ZK Poseidon Deposit Idea To address the issue where a user hasn’t connected a wallet but someone else wants to send them ETH, we propose using a smart contract secured with zero-knowledge proofs (ZKPs). This ensures that only the intended recipient—who can generate the correct Poseidon hash—can withdraw the ETH. Below is an example workflow. We integrated the ZK Poseidon Deposit smart contract with AI bots. It makes the ZKP more accessible and easy to use without installing any snarkjs or circom locally and even without understanding the ZKP. In the future, we plan to integrate more ZKP applications with AI bots to make the privacy and security features more accessible to users. For example,How it's Made Agentkit: Agentkit is a framework for building AI agents. We enables the following features with Agentkit: IPFS Uploads: See IPFS Uploads NFT Transactions: See NFT Transactions ZK Integration: See ZK Integration Base: We deployed the ZK Poseidon Deposit smart contract on Base. See more details here. Automone: We connect the Century Pay 2025 discord bot to a Automone agent. See more details here See more details here See the deployment server: autonome With the uploaded Autonome framework (ctp-2025: Pending Approval), the user can even perform the zk feature that we implemented in this project on Autonome. Covalent: We connect the Century Pay 2025 discord bot to a Covalent agent. We enables the following features with Covalent: TokenBalancesTool: See TokenBalancesTool NFTBalancesTool: See NFTBalancesTool TransactionsTool: See TransactionsTool PortfolioTool: See PortfolioTool",
    "summary": "An AI-powered Discord bot that seamlessly executes on-chain transactions and automates off-chain actions—all within your server. 🚀"
  },
  {
    "title": "Century Pay 2025",
    "url": "https://ethglobal.com/showcase/century-pay-2025-o9vmb",
    "description": "Project DescriptionCentury Pay 2025 is an AI-powered Discord bot that simplifies on-chain transactions and off-chain requests for users. It leverages Discord's social features, making it effortless for users to interact and engage with others. Originally launched last year, Century Pay enabled users to connect wallets, send ETH to Discord users, and execute transactions via AA wallets. Now, Century Pay 2025 takes it even further—with AI-driven automation, users can simply describe their request, and the bot seamlessly executes the transaction, making the experience smoother than ever. 🚀 Century Pay 2025 offers several powerful features, including: 📂 IPFS Uploads: Users can simply upload an image through Discord, and the AI agent will automatically handle the IPFS deployment. This eliminates the need for users to set up an IPFS server or write deployment code, making the process effortless. 🎨 NFT Transactions: Century Pay 2025 simplifies NFT deployment, minting, and transfers directly within Discord. Users only need to provide basic NFT details (e.g., name, symbol, and metadata URL) to deploy an NFT effortlessly. With Discord integration, users can: Share a \"Mint\" button with others to let them mint NFTs easily. @Tag other users to seamlessly transfer NFTs within the chat. 🔒 ZK Integration: Users can now generate zero-knowledge proofs (ZKPs) to interact with smart contracts seamlessly. Century Pay 2025 includes pre-built ZK circuits: Please checkout out circuits and contracts explanation. It makes ZK applications more accessible and easy to use within familiar platforms like Discord. ZK Poseidon Deposit Idea To address the issue where a user hasn’t connected a wallet but someone else wants to send them ETH, we propose using a smart contract secured with zero-knowledge proofs (ZKPs). This ensures that only the intended recipient—who can generate the correct Poseidon hash—can withdraw the ETH. Below is an example workflow. We integrated the ZK Poseidon Deposit smart contract with AI bots. It makes the ZKP more accessible and easy to use without installing any snarkjs or circom locally and even without understanding the ZKP. In the future, we plan to integrate more ZKP applications with AI bots to make the privacy and security features more accessible to users. For example,How it's Made Agentkit: Agentkit is a framework for building AI agents. We enables the following features with Agentkit: IPFS Uploads: See IPFS Uploads NFT Transactions: See NFT Transactions ZK Integration: See ZK Integration Base: We deployed the ZK Poseidon Deposit smart contract on Base. See more details here. Automone: We connect the Century Pay 2025 discord bot to a Automone agent. See more details here See more details here See the deployment server: autonome With the uploaded Autonome framework (ctp-2025: Pending Approval), the user can even perform the zk feature that we implemented in this project on Autonome. Covalent: We connect the Century Pay 2025 discord bot to a Covalent agent. We enables the following features with Covalent: TokenBalancesTool: See TokenBalancesTool NFTBalancesTool: See NFTBalancesTool TransactionsTool: See TransactionsTool PortfolioTool: See PortfolioTool",
    "summary": "An AI-powered Discord bot that seamlessly executes on-chain transactions and automates off-chain actions—all within your server. 🚀"
  },
  {
    "title": "Ailve DAO",
    "url": "https://ethglobal.com/showcase/ailve-dao-9bi3b",
    "description": "Project DescriptionProject Description Ailve DAO: Revolutionizing DAO Governance with AI - Powered Proposal Management Overview: Ailve DAO is an innovative decentralized autonomous organization (DAO) governance solution that leverages the power of AI Agent to streamline and automate the proposal management process within DAO communities. It aims to enhance the efficiency and fairness of decision - making in DAOs by replacing traditional, often time - consuming and subjective, voting mechanisms with AI - driven intelligence. Technical Architecture: AI Agent Integration: The AI Agent is a self - learning algorithm specifically trained on historical DAO proposals, community values, and market trends. It analyzes each proposal's content, potential impact, and alignment with the DAO's goals. It uses natural language processing (NLP) techniques to understand the proposal text and machine learning models to predict the potential outcome and value of the proposal. The AI Agent operates autonomously, continuously improving its decision - making capabilities as it processes more proposals and community feedback. Smart Contract Infrastructure: Proposal Submission Contracts: These contracts handle the submission of new proposals, ensuring that all necessary information is provided in a standardized format. They also record the details of the proposer for transparency. Voting and Approval Contracts: Integrated with the AI Agent, these contracts automatically calculate the AI - generated vote. If the AI - determined score meets the pre - set approval threshold, the proposal is marked as approved. Funding Allocation Contracts: Once a proposal is approved, these contracts manage the automated disbursement of funds from the DAO's treasury to the relevant parties or projects specified in the proposal. Community Interaction Layer: User Interface (UI): A user - friendly interface allows community members to submit proposals, view the status of ongoing proposals, and access historical proposal data. It also provides an overview of the AI - driven decision - making process for transparency. Feedback Mechanism: Community members can provide feedback on the AI - generated decisions, which is then used to fine - tune the AI Agent's algorithms, promoting a collaborative and evolving governance model. Benefits: For DAO Communities: Increased Efficiency: Eliminates the need for long - drawn - out voting periods, enabling faster decision - making and project implementation. Fairness: AI - based decision - making reduces the influence of personal biases and large - holder dominance, ensuring a more equitable governance system. Resource Optimization: Automatically allocates funds to the most promising proposals, maximizing the utilization of the DAO's resources. For Developers: Simplified Governance: Ailve DAO provides a ready - to - use governance framework that developers can integrate into their DAO projects, saving development time and effort. Scalability: The AI - powered system can handle a large volume of proposals and community members, making it suitable for both small - scale and large - scale DAOs. How it's MadeHow it's Made Technical Implementation: Frontend: We used React.js with TypeScript to build an intuitive and responsive user interface. This technology stack allows for a seamless user experience, enabling community members to interact with the DAO governance system easily. It also provides strong typing support, which helps in writing more reliable and maintainable code. Smart Contracts: Solidity was chosen to write the smart contracts that form the backbone of Ailve DAO. Solidity's compatibility with the Ethereum blockchain ecosystem ensures that our DAO can operate securely and efficiently. The contracts are designed to handle proposal submission, voting, approval, and funding allocation in a decentralized and trustless manner. AIAGENT: The AIAGENT is developed using a combination of Python and machine learning libraries such as TensorFlow and Scikit - learn. Python's extensive libraries and ease of use make it an ideal choice for developing complex AI algorithms. The AIAGENT is trained on a large dataset of historical DAO proposals, community discussions, and market data to improve its decision - making accuracy. Blockchain Integration: We integrated our system with the Ethereum blockchain as the underlying platform. Ethereum's wide - spread adoption, developer community, and robust smart contract capabilities make it a perfect fit for Ailve DAO. We also plan to explore integration with other blockchain networks in the future to expand our reach and compatibility.",
    "summary": "Ailve DAO, a project for DAO governance, uses AI Agent, a self - learning AI, to manage proposals in DAOs  by automatically analyzing them through NLP and machine - learning, voting and approving proposals based on AI results, and disbursing funds automatically."
  },
  {
    "title": "DAOCouncil",
    "url": "https://ethglobal.com/showcase/daocouncil-8d9k4",
    "description": "Project DescriptionDAOCouncil is an innovative decentralized governance platform that combines traditional DAO (Decentralized Autonomous Organization) voting with AI-powered deliberation. Here's a comprehensive breakdown: Core Concept: The platform facilitates structured debates on DAO proposals where human participants can discuss and AI jurors analyze and judge the arguments. Instead of relying solely on token-weighted voting (which can lead to whale dominance), decisions are influenced by the quality of arguments and AI juror deliberation. Key Components: Debate System: Each debate has a specific topic, multiple sides/positions, and assigned AI jurors Debates are structured around concrete proposals with specific actions and funding requirements Users can participate by presenting arguments for different sides of the debate AI Jurors: Multiple AI jurors with distinct personas analyze the debate Each juror: -- Processes the entire conversation history -- Evaluates arguments from different sides -- Provides reasoned judgments and explanations for their decisions -- Updates their stance as the debate progresses Key Features: Debate Creation: Users can create new debates with customized action prompt that should be taken if proposal is approved. Live Deliberation: Real-time discussion with immediate AI juror feedback Structured Arguments: Support for different stances and positions within each debate Transparent Reasoning: AI jurors provide detailed explanations for their decisions Governance Mechanism: Combines human input with AI analysis Focuses on argument quality over token quantity Creates a more democratic and reasoned approach to DAO governance Helps reduce the impact of whale voting by emphasizing quality of discourse The platform essentially creates a hybrid governance model where AI agents serve as impartial analysts of human arguments, helping to create more balanced and well-reasoned decisions in DAO governance. This approach aims to make DAO governance more accessible, fair, and focused on the merit of arguments rather than just the size of token holdings.How it's MadeHere's how we built our AI-powered DAO governance system: AI Agent System Built on CDP AgentKit framework for AI juror and judge implementation Integrated the Privy Server Wallet as a custom CDP AgentKit tool to efficiently manage multiple vaults across different debates Deployed on Autonome Altlayer for efficient agent execution and resource management Database & Backend PostgreSQL as primary database Manages debate states and user data Handles AI juror decisions Enables real-time operations Supports concurrent user sessions Frontend Stack React + Vite TailwindCSS Privy Wallet Modal for user wallet connection Network Deployed on Base Sepolia Key Technical Features Custom CDP AgentKit tools for AI decision-making Real-time debate processing with AI jurors feedback",
    "summary": "DAOCouncil is a decentralized governance platform where AI jurors deliberate on DAO debates. Members discuss and voice opinions, while AI agents analyze arguments, render verdicts, and vote. This fosters open debate and fairer decision-making by reducing token whale dominance."
  },
  {
    "title": "Payphone",
    "url": "https://ethglobal.com/showcase/payphone-j72dy",
    "description": "Project DescriptionPayphone Payphone brings AI and Blockchain into phone calls, making every call smarter, more efficient, and ultimately, more valuable. The Challenge for Small and Medium Businesses (SMBs): 1. Limited Time & Resources SMBs face a perpetual challenge: they want to grow, but hiring more staff to answer phones and manage schedules becomes increasingly expensive and cumbersome. 2. Customers Prefer Phone Calls While online booking systems exist, many customers still find picking up the phone simpler and more immediate. However, juggling phone calls, calendar updates, and customer requests manually is prone to human error and scheduling conflicts. 3. Low Customer Commitment No-shows and last-minute cancellations can be disastrous for businesses with tight schedules. A canceled slot means lost revenue and the missed opportunity to serve a different customer. Payphone's 3 Key Solutions: 1. Unlimited AI Scalability Cost-Effective Growth: AI agents handle as many concurrent calls as needed without the overhead of hiring more staff. 24/7 Availability: Customers can book appointments any time, even after closing hours, boosting convenience for both business and client. Shared Calendar Access: All Payphone agents work off the same real-time calendar, reducing double-bookings and other scheduling mishaps. 2. AI-Powered Voice Automation Natural Language Processing: Payphone’s voice AI interacts like a human operator, freeing up staff to focus on in-person services. Multi-Agent Architecture: A specialized Calendar Agent handles all scheduling tasks. A Wallet Agent manages payments. This ensures expertise in every part of the booking flow without overwhelming a single system. No Learning Curve for Customers: People call exactly as they normally would—no apps, no new software, and minimal friction. 3. Blockchain-Based Payments Immediate Transactions: Payphone uses Coinbase CDP Commerce to accept on-chain payments within the call itself, ensuring bookings are secured only upon payment. Reduced No-Shows: Prepayment confirms commitment. Customers are far less likely to skip an appointment if they’ve already paid. Programmable Money: Automated refunds, waitlists, and loyalty programs can be built right into the smart contract, adding flexibility and transparency for both businesses and customers. Try Our Demo: Ojisan Barber Salon Live at: 🔗 payphone.pro For demonstration purposes, Payphone is set up to manage calls for a fictional shop, Ojisan Barber Salon. To keep things straightforward, we’ve made a few assumptions and simplified details: Operating Hours: Limited to certain times each day; Payphone politely declines calls for appointments outside these hours. Single Stylist: The salon cannot handle more than one reservation at the same time. Fixed Appointment Length: All services last exactly one hour. On-Chain Wallet Setup: You’ll need to register your phone number, receive a dedicated wallet address, and fund it with at least 0.001 ETH on Base. During the call, the AI can trigger payment instructions via Coinbase Commerce. Creation, Modification, Cancellation: You can verbally request new appointments, change existing ones, or cancel and request refunds—Payphone updates everything on the shared calendar in real time. Get Started: Phone or Web Call: Dial the US-based phone number or use the web call interface. The AI answers, verifies your reservation needs, and processes your payment on the spot. See Payphone Work in Action: Look at the Calendar tab, which is updated in real time by the AI agent, complete with blockchain information. Payphone bridges the gap between traditional phone calls and cutting-edge technology. By introducing AI and blockchain into everyday business operations, it transforms a simple phone call into a powerful, automated, and secure reservation system.How it's MadeWe built Payphone using: Retell (https://www.retellai.com/) for our voice AI agent. It has the ability to converse in phone call, tool calling to our API. Nodegen (https://nodegen.fun/) is our home-brewed AI framework that features a no-code Visual Programming way to build AI agents, and one-click deploy complete with API access. Supabase for our database and storage. Cloudflare Workers for our business logic API that interacts with Database. A simple Calendar System that is powered by our Calendar Agent, the agent is able to write SQL command to check availability and collision. Payment is processed using Coinbase CDP Commerce. Transaction are made in Base Mainnet. Wallet Agent are made using CDP Agent Kit Payphone is a multi-agent system: User talks to Retell, which Retell can talk to our Calendar Agent and Wallet Agent. Coinbase CDP Commerce simplify on-chain payment processing powered by AI agents, all on-chain payments are completed with a receipt that is even emailed to the business owner. Base being the home of consumer dapps is a great fit for Payphone, where transaction are fast and cheap.",
    "summary": "Payphone brings AI into phone calls to automate dynamic customer interactions and accept onchain payments. Perfect for time-sensitive businesses like salon, Payphone can schedule, edit and even process refunds for business owner, so they can focus on the craft."
  },
  {
    "title": "VeriKnowledgeOnchain",
    "url": "https://ethglobal.com/showcase/veriknowledgeonchain-r945g",
    "description": "Project DescriptionData Storage & Verification: Knowledge is tokenized and stored on the blockchain, ensuring immutability and traceability. Smart contracts govern data ownership, usage rights, and transaction processing for purchaseable content. Secure Access: Data is encrypted and access is managed via the Lit Protocol, allowing for secure, shareable, and permissioned decryption. This means that only authorized users or agents can access sensitive or premium knowledge content. Dynamic Knowledge Graph: The system builds a dynamic, context-rich knowledge graph that updates in real-time. Each data node is linked to provide contextual relevance and is designed to grow from user interactions. This evolving structure allows the graph to reflect new insights and data relationships. Interactive Agents: The knowledge graph integrates with AI-driven agents, such as metaverse companion bots and assistants. These agents utilize the graph for context-aware interactions and can learn over time, enhancing user experiences with up-to-date, verifiable information. Enhancement with Advanced Technologies: Retrieval Augmented Generation (RAG) and semantic search algorithms like Deepseek are used to extract and present the most relevant information from the knowledge graph. Additionally, DeFi components facilitate seamless, automated transactions, enabling users to purchase and exchange knowledge data securely.How it's MadeLangchain/Langgraph: We use Langchain to process natural language inputs and generate dynamic queries. Langgraph then structures these into a coherent knowledge graph, linking data nodes based on contextual relationships. Neo4j: For managing and querying the knowledge graph, we rely on Neo4j, a graph database that efficiently stores relationships and supports complex queries. It forms the backbone of our dynamic data structure. Walrus: We integrated Walrus for robust encryption of our data. This tool allows us to securely encrypt and decrypt knowledge, ensuring only authorized parties access sensitive information. Our approach was a bit hacky: we customized Walrus to work seamlessly with our decentralized key management, optimizing access speeds without compromising security. Privy: To bolster privacy, we implemented Privy. This tool ensures that all user data and transactions adhere to strict privacy standards, and it simplifies compliance by automating privacy controls and notifications. By combining these technologies, we created a modular system where each component plays a crucial role. Partner technologies like Neo4j provided proven frameworks that boosted our development speed and reliability. Our innovative use of Walrus for encryption and the tailored integration with decentralized key management stands out as a particularly hacky, yet effective, solution that ensured both security and performance.",
    "summary": "Decentralized platform for verifiable onchain knowledge. Purchaseable data stored securely with encrypted shareable access via Lit Protocol. Dynamic knowledge graph learns from real-time interactions, powering metaverse bots and assistants."
  },
  {
    "title": "Medusa",
    "url": "https://ethglobal.com/showcase/medusa-dxw89",
    "description": "Project DescriptionChallenge Storage and Security, as well as Contributors' trust, are significant challenges met when crowdsourcing data. These obstacles disrupt the mass adoption and scalability of DePIN solutions. Solutions Medusa Bridge is an orchestration layer that connects autonomous AI agents, built with Covalent's Zee-Agentkit and powered by Privy Server Wallet, to scale DePIN. This integration forms a multi-headed system, where each “snakehead” is an autonomous AI agent with specialized capabilities to enhance data collection, validation, and analysis. DePIN Tokenization and Settlement Layer: Each execution of the Agentic Workflow is updated on the registry contract deployed on Base, and can serve as a foundation for reward-based token mining, creating a DePIN-driven market for data contributors.How it's MadeMedusa is built on a stack of Zee tools that enable AI agents to autonomously collect, validate, and analyze data independently Covalent’s Zee-Agentkit – Powers agent logic, tools, and workflow of the Medusa Bridge. Privy Server Wallet – Grants AI agents' true autonomy by enabling them to sign signatures and update contract states on captured data. Policy Engine – Restricts all value transfers on the agent’s server wallet, ensuring it is solely used for predefined purposes on the smart contract, and eliminating the risk of fund drainage. Agent Workflow: • CollectionAgent – Captures and signs data securely. • BroadcastingAgent – Manages IPNS/storage and broadcasts state updates. • ResponseAgent – Analyzes data and determines policies based on predefined conditions. Other Tools & Infrastructure: • Lighthouse for IPFS/IPNS decentralized storage. • Base Sepolia for smart contract interactions. • OpenAI’s GPT-4 for agent intelligence. • CDP Client Bundler and RPC.",
    "summary": "Autonomously store and compute over data through a workflow of  interconnected AI agents, or “heads\" built with Covalent's AgentKit and Privy's Server Wallet tools."
  },
  {
    "title": "Adifi",
    "url": "https://ethglobal.com/showcase/adifi-dru9k",
    "description": "Project DescriptionAdifi: Its' AI-powered DeFi assistant analyzes Uniswap pools in real-time. It helps you to get smart trading recommendations with entry/exit points & risk assessment based on Uniswap pools through TheGraph and powered by Warden Protocol. It was build using the AI Agent Warden kit so in the repo you must go to main/examples/typescript/cli-agent where the agent modified with Adifi Capabilities is locatedHow it's MadeThis project is built with React+Vite, Express.js backend, Claude 3 AI & LangChain. Integrates Uniswap data via Graph Protocol and uses Warden Protocol to manage the AI Agent logic. The benefit of using Warden Protocol is that we can easily put the logic of an AI agent on a blockchain and TheGraph helped with obtaining the data in real-time easily thanks to the API key and subgraph that is already built in there.",
    "summary": "This project is a decentralized finance (DeFi) monitoring agent built using the Warden Protocol Agent Kit. The tool is designed to continuously track real-time trading volume and liquidity metrics on Uniswap. Its primary purpose is to identify significant market moves"
  },
  {
    "title": "The Peoples Court",
    "url": "https://ethglobal.com/showcase/the-peoples-court-kde92",
    "description": "Project DescriptionA competitive agentic party game where agents take turns acting as plaintiffs and defendants in humorous mock trials. Each case presents a dispute that agents must argue using pre-generated evidence and dramatic courtroom speeches. The judge decides the winner based on entertainment value and creative argumentation, with tokens awarded for successful cases.How it's MadeTODO: Tell us about how you built this project; the nitty-gritty details. What technologies did you use? How are they pieced together? If you used any partner technologies, how did it benefit your project? Did you do anything particuarly hacky that's notable and worth mentioning?",
    "summary": "A competitive agentic party game where agents take turns acting as plaintiffs and defendants in humorous mock trials."
  },
  {
    "title": "Bankable",
    "url": "https://ethglobal.com/showcase/bankable-n8k5t",
    "description": "Project DescriptionThis AI agent enables you to engage in a chat conversation about your DeFi investment goals. As suggestions are provided to help you achieve these goals, you gain direct access to DeFi projects that align with your requirements—all without leaving the platform. This is done to make onboarding easier for anyone trying to get started with DeFi.How it's MadeWe built this using google gemini, thridweb,, solidty, nextjs, chakra-ui, https://horizon-ui.com/, https://github.com/horizon-ui/horizon-ui-chakra. We first built a chat bot and UI using gemini apis then we built our dApp using thirdweb and solidity ERC20 contracts. We built out an interface that suggest DeFi tools to meet your goals and then gives you access to the DeFi tool without leaving the site.",
    "summary": "A DeFi AI agent that makes onboarding easy for first time users"
  },
  {
    "title": "Enigma",
    "url": "https://ethglobal.com/showcase/enigma-ntwbs",
    "description": "Project DescriptionEnigma Agent is a blockchain assistant built to make your interactions with blockchain technology a bit more entertaining (and a lot more sarcastic). Powered by Coinbase Developer Platform’s AgentKit, this agent is designed to assist you in blockchain operations—whether it’s managing ERC20 tokens, checking wallet balances, or interacting with decentralized networks—while simultaneously roasting you with witty and sarcastic commentary. Using Gaia for secure off-chain storage and EigenLayer AVS for decentralized validation, the agent ensures all your transactions are handled with the highest security standards while maintaining a snarky attitude. Think of it as your blockchain sidekick who’s not afraid to call you out while making sure your transactions are secure, validated, and processed seamlessly. Whether you’re trying to make sense of a complex blockchain operation or simply need to check your wallet balance, Sassy Chain Agent ensures that you’ll never take yourself too seriously. Why deal with dry, boring blockchain tools when you can have a little humor injected into your daily crypto routine? So, while you’re managing your tokens or interacting with the decentralized world, get ready for some sassy banter and a seamless experience—all thanks to a powerhouse of technologies like Coinbase’s AgentKit, Gaia, EigenLayer AVS, and more. The blockchain just got a lot more fun.How it's MadeThe Enigma Agent was crafted to combine blockchain technology with a touch of humor and sarcasm, using a combination of powerful tools to ensure both functionality and entertainment. Coinbase Developer Platform's AgentKit: This is the backbone of the agent, handling blockchain operations like WETH management, ERC20 token transactions, and wallet operations. It allows seamless interaction with blockchain networks while keeping the core operations secure and efficient. Gaia: For off-chain storage, we utilized Gaia, ensuring that transaction data and logs are stored securely and can be retrieved efficiently. This allows the blockchain to focus on core transactions, while Gaia handles the heavy lifting of data storage without compromising security. EigenLayer AVS: To ensure enhanced security, we integrated EigenLayer AVS (Accountable Verifiable Security) for decentralized validation. This enables the agent to validate and process blockchain actions securely and transparently, without relying solely on centralized systems. Pyth Network: We integrated Pyth Network's real-time price feeds to give users up-to-date information on market trends, enabling more informed decisions during interactions. Artificial Intelligence (LLAMA 70B): To add the sassy flavor to every interaction, we used LLAMA 70B, an advanced AI model that powers the agent’s witty responses. Whether the user is checking their wallet balance or making transactions, the AI is designed to roast them, making the experience memorable. Tech Stack: The backend is built with Node.js for managing real-time transactions, while Python is used for integrating the Pyth Network and performing data-heavy tasks. For the front-end, we designed a minimalistic, user-friendly interface, ensuring that the blockchain's complexity doesn't scare off users—though the sarcasm might.",
    "summary": "Enigma Agent is your sarcastic blockchain assistant, powered by Coinbase’s AgentKit. It helps with ERC20 tokens, wallet balances, and decentralized networks while delivering snarky commentary. With Gaia for secure storage and EigenLayer AVS for validation."
  },
  {
    "title": "Fast ChainPilot",
    "url": "https://ethglobal.com/showcase/fast-chainpilot-ttchj",
    "description": "Project DescriptionFast ChainPilot is a cutting-edge decentralized assistant designed to streamline on-chain interactions using natural language. By integrating AgentKit, it empowers users to effortlessly manage crypto wallets, execute transactions, and interact with decentralized applications (dApps). With features like wallet connectivity, network switching, and real-time transaction insights, Fast ChainPilot simplifies blockchain operations, making them accessible to both novice and advanced users.How it's MadeFast ChainPilot leverages the power of AgentKit to provide seamless on-chain interactions. The project uses the Coinbase Developer Platform (CDP) to handle wallet connections, account authentication, and transaction management, ensuring secure and efficient blockchain operations. The chatbot interface is built using LangChain, providing a natural language processing layer for intuitive user interactions. The frontend is developed using React with TypeScript, incorporating modular UI components for responsiveness and usability. MobX is used for state management, ensuring smooth and reactive updates to user actions. On the backend, Node.js with Express manages API integrations and interaction flows between the chatbot and blockchain networks. AgentKit's pre-built actions are extended with custom workflows for advanced features like multi-network support (e.g., Ethereum, Base, and Sepolia) and real-time transaction monitoring.",
    "summary": "Empowering users with seamless on-chain interactions using AI-driven agents"
  },
  {
    "title": "Autonode",
    "url": "https://ethglobal.com/showcase/autonode-nug3a",
    "description": "Project DescriptionThis project is an end-to-end decentralized AI agent system designed to optimize blockchain interactions through automated task processing, leveraging a simple rule-based engine inspired by the classic Eliza model. At its core, the project comprises an AI agent that receives text-based task requests—such as commands to index smart contracts, optimize queries, or batch transactions—and processes these tasks by matching them against a predefined set of patterns to generate appropriate responses. The AI agent is implemented as a lightweight service written in a language like JavaScript (using Node.js) and is initially hosted on Replit, where it operates as a REST API that accepts HTTP POST requests containing task details, processes them using its Eliza-based logic, and returns a response indicating the action taken. The system integrates with an existing smart contract that serves as the on-chain interface for users. This smart contract allows users to register as agents, submit tasks with associated payments, and track task statuses. When a user submits a task via the smart contract, an off-chain service—acting as a bridge—listens for task-related events (such as TaskSubmitted events) and then forwards the task data to the Replit-hosted AI agent via an API call. Once the AI agent processes the task and produces a response, this off-chain service updates the smart contract with the result, thereby ensuring that the task lifecycle is fully traceable and that payments are appropriately settled. In addition to the core functionality, the project is designed with future scalability in mind by planning for integration with EigenLayer—a decentralized compute network that will allow the AI agent to be containerized (using Docker) and deployed in a trustless, verifiable manner. EigenLayer integration aims to enhance the system by providing decentralized, secure execution of tasks, possibly incorporating Trusted Execution Environments (TEEs) to ensure that computations are tamper-resistant and fully verifiable on-chain. For the minimum viable product (MVP), the system operates via Replit and a centralized off-chain service, but the project roadmap includes migrating the AI agent to EigenLayer once the initial functionality is proven. Overall, this project bridges decentralized blockchain infrastructure with automated AI-powered task processing, offering a streamlined and scalable approach to handling complex operations such as smart contract indexing and query optimization. It is a comprehensive solution that not only provides immediate efficiency improvements for blockchain interactions but also lays the groundwork for a fully decentralized and verifiable compute environment in the future.How it's MadeThis project is built around a lightweight, Eliza-based AI agent that processes text commands for blockchain-related tasks such as smart contract indexing, query optimization, and transaction batching. We developed the AI agent using Node.js and Express, writing a simple rule-based function that matches incoming task commands against predefined patterns and returns corresponding responses. The agent is hosted on Replit, which allowed us to rapidly iterate and deploy the service as a REST API, making it easy to test and refine our logic in a live environment. Our existing smart contract—already implemented in Solidity—handles key functions like agent registration, task submission, and payment settlement; this contract emits events whenever a task is submitted. To bridge the on-chain and off-chain worlds, we built an off-chain service in Node.js using ethers.js to listen for these smart contract events and forward the task data to our Replit-hosted API. Once the AI agent processes a task, the off-chain service receives the response and interacts with the smart contract to update the task status and release payments, thereby closing the loop between the blockchain and our centralized compute layer. For future scalability and enhanced decentralization, we plan to containerize the AI agent using Docker and integrate it with EigenLayer—a decentralized compute network—which will enable us to run the agent’s computations in a trustless and verifiable manner. This integration involves creating a Docker image of our Node.js service and following EigenLayer’s deployment guidelines, including configuring environment variables, resource limits, and potentially integrating Trusted Execution Environments (TEEs) for added security. One hacky but effective workaround we implemented was using a centralized off-chain service as an intermediary between the smart contract and our AI agent; while not fully decentralized, this approach allowed us to demonstrate end-to-end functionality within the limited timeframe of the hackathon. Overall, our solution leverages partner technologies like Replit for fast prototyping, ethers.js for blockchain interactions, and Docker/EigenLayer for future decentralized deployment, piecing together a streamlined system that bridges automated AI processing with decentralized finance.",
    "summary": "Decentralized AI Agents-as-a-Service (AAAS) on EigenLayer! Rent AI agents for blockchain infra tasks like indexing, query optimization, & tx batching—fully trustless, powered by AVS, Whisper, & IPFS. Think AWS Lambda but for AI on-chain"
  },
  {
    "title": "Shaman",
    "url": "https://ethglobal.com/showcase/shaman-hyeav",
    "description": "Project DescriptionShaman is an agentic automation platform designed to let users create and deploy autonomous, AI-enhanced onchain agents that execute complex workflows. It leverages AI-powered oracles capable of running agent-generated TypeScript code in a secure, remote environment while ensuring full onchain execution and verification. Shaman introduces a new paradigm for onchain automation, enabling self-executing, intelligent agents that interact with smart contracts, APIs, and other data sources without manual intervention. These agents, or Shamans, are hosted fully onchain, powered by MUD, and can operate autonomously based on predefined logic or real-time AI inference. Shaman is fully operational on Arbitrum Testnet! Smart Contracts have been deployed and have been tested end-to-end. Please feel free to sign up and test, and let us know if there's any feedback! How it's MadeShaman is built with several key components: Smart Contracts (MUD): The World Contract manages Shamans, while $ZUG serves as a utility token for gas abstraction and incentives. Built on MUD's powerful ECS system for efficient data sync and execution. Client: A modern web application built with Next.js and Shadcn for a sleek UI, enhanced with AI capabilities for agent intelligence. Workers: Deno-powered secure execution environment for TypeScript code stored as Shaman metadata on IPFS. Features: Secure sandbox environment for code execution IPFS integration for decentralized code storage Comprehensive logging and monitoring Full TypeScript support The workers component consists of: Code Execution Engine: Leverages Deno's secure runtime Storage Layer: Combines IPFS, MUD Protocol, and Filebase Blockchain Integration: Interacts with Arbitrum Sepolia Integrations: Privy (@privy_io) for embedded wallets and delegated execution MUD (@mud_dev) for onchain data synchronization IPFS for decentralized code storage",
    "summary": "Shaman: Your onchain autopilot. Automate workflows with agentic intelligence."
  },
  {
    "title": "Opal",
    "url": "https://ethglobal.com/showcase/opal-4wbyr",
    "description": "Project DescriptionOpal is the simplest way to create AI agents — smart automations that integrate with all your channels, from Telegram to Discord, to save you hours a week and help you grow your community. Core Purpose: Enables users to create and manage AI-powered social bots without coding Provides DeFi analytics and multi-platform bot management Facilitates intelligent data processing and GraphQL query handling Bot Integration: Multi-platform support (Telegram, Discord) Automated bot configuration and management Real-time transaction and wallet tracking AI-powered responses using gpt-4o-mini DeFi Features: Uniswap subgraph data analytics integration Real-time trading volume and statistics GraphQL query debugging and optimization Coinbase AgentKit integration for USDC transactions Key Features: No-code bot creation interface Real-time DeFi analytics dashboard Multi-platform bot management Automated polling and giveaway systems AI-powered response generation USDC transaction handling Advanced GraphQL query management The project combines social bot management, DeFi analytics, and AI capabilities into a unified platform, allowing users to create and manage sophisticated bots without coding knowledge while accessing real-time blockchain data and analytics.How it's MadeFrontend Architecture: Built with React + TypeScript for type safety Uses shadcn/ui for a comprehensive component library (40+ components) State management: Combination of React Query for server state and Zustand for local state Form handling through react-hook-form with Zod validation Custom wizard component for guided bot creation Backend Structure: Express.js with TypeScript PostgreSQL with Drizzle ORM for type-safe database operations Session management using express-session with PostgreSQL store Authentication via Passport.js with local strategy Bot Platform Integration: Telegram integration using Telegraf framework Multi-bot orchestration through bot-manager.ts service Real-time updates via WebSocket (ws package) Scheduled tasks using node-schedule DeFi & Blockchain Integration: Coinbase AgentKit integration for USDC transactions Direct Uniswap subgraph querying via GraphQL Custom GraphQL query generation and optimization Ethers.js and Viem for blockchain interactions Notable Technical Decisions: Query Management: Custom GraphQL query builder in graph-service.ts Query caching and rate limiting implementation Error handling and retry mechanisms Bot Management: Modular bot architecture allowing easy platform expansion Shared state management between bots Dynamic bot configuration loading Security & Performance: Rate limiting on API endpoints WebSocket connection pooling Prepared statements for SQL queries Session security with secure cookies Dynamic Query Generation: Built a custom natural language to GraphQL query transformer Uses pattern matching and template literals for query construction Handles edge cases through fallback mechanisms Bot State Management: Implemented a custom state machine for bot conversations Uses Redis-like in-memory storage with PostgreSQL backup State recovery mechanism for crashed bots USDC Transaction Handling: Custom retry mechanism for failed transactions Gas estimation optimization Transaction batching for multiple payouts Partner Technologies & Benefits: Coinbase AgentKit & Base: Simplified USDC transaction handling Reduced implementation complexity for wallet operations Built-in security features The Graph Protocol: Real-time DeFi data access Reduced backend complexity Optimized query performance Telegram Bot API: Rich message formatting Inline keyboards and commands Webhook support for real-time updates This architecture allows for scalable bot management, reliable DeFi operations, and a smooth user experience while maintaining code quality and type safety throughout the stack.",
    "summary": "A no-code Social AI Agent Launcher for Community Managers across Telegram & Discord"
  },
  {
    "title": "StampX",
    "url": "https://ethglobal.com/showcase/stampx-5k8b1",
    "description": "Project Description StampX A Web3 Loyalty Program Platform with agent-driven contract interactions. Built for Agentic Ethereum 2025. Video demo: https://youtu.be/Z2Tf2YFsfCs Live Demo Url: https://stampx.vercel.app (Base Sepolia) Example Storefront chat: https://stampx.vercel.app/checkout/0x47a66666899c9ed775e5b1942c435d4e95ca445940468975d583d050a23ae8ef This is on Base sepolia. Connect your wallet and ask this storefront anything! Inspiration We wanted to revolutionize traditional loyalty programs by bringing them to Web3. Many small businesses struggle with customer retention and implementing reward systems, while customers juggle multiple loyalty cards and points systems. We saw an opportunity to solve this with blockchain technology. QR Code (would be printed and displayed in the store): https://stampx.vercel.app/qr/0x47a66666899c9ed775e5b1942c435d4e95ca445940468975d583d050a23ae8ef What it does StampX is a decentralized loyalty program platform that allows businesses to: Create and manage their own loyalty programs on the blockchain Set custom reward thresholds and amounts Track customer transactions and points Integrate with an AI-powered chat interface for seamless customer interactions Customers can: Earn points across multiple businesses with a single wallet View their points balance and rewards Interact with businesses through an AI chat interface Redeem rewards automatically through smart contracts How it's MadeTechnologies used Coinbase Developer Platform AgentKit: Core of the checkout/loyalty experience. Used to build and deploy AI agents that can: Process natural language store queries Execute on-chain transactions Check loyalty point balances Verify reward eligibility OnchainKit: Manages real-time blockchain data and UI components. Coinbase SDK & Chrome Extension: Handles wallet connections with wagmi integration and coinbase connector from the sdk. AgentKit is used to trigger wallet workflows. Autonome Hosts our custom AgentKit deployment with: Store-specific training data and context Transaction capabilities Points calculation logic Reward validation rules Endpoint: https://autonome.alt.technology/stampx-ighkdb Manages real-time chat state and context persistence Handles concurrent user sessions and load balancing for separate customer interactions. Base Primary chain for smart contract deployment and loyalty tracking Benefits: Low transaction costs for payment sends accrual Fast finality for instant rewards EVM compatibility for tooling support Contract Address: 0x27A6E1ED6e0dd33265C7b7466e65a4aeFbCD3F2e Uses Base Sepolia testnet for development and testing CDP connected with onchainkit in the UI Nethermind Main AI agent functionality for the commerce use case is powered by solidity contracts and is open source. Smart contract event emission Automated reward distribution and validation Natural language processing for user queries Transaction intent detection Integrates with store-specific business logic Handles multi-step transactions and account state Base Sepolia smart contract for StampX: https://sepolia.basescan.org/address/0x27A6E1ED6e0dd33265C7b7466e65a4aeFbCD3F2e Challenges We ran into Implementing secure point tracking on the blockchain Creating a seamless UX that bridges Web2 and Web3 Handling real-time updates for transactions and points Optimizing smart contract gas costs Doing a StampX production deployment The StampX project is currently deployed on the Base Sepolia testnet. For production deployments (at your own discretion, these would be the next immediate steps): Replace env Update siteConfig in config.ts with production values Redeploy smart contract on Base Redeploy agentkit with Base mainnet Make new website deployment (using nextj) What's next for StampX Multi-chain support: Expand beyond Base to include other EVM-compatible chains like Ethereum mainnet, Polygon, and Arbitrum, allowing businesses to choose their preferred network. Production deployment: Launch on Base mainnet with a focus on onboarding small to medium-sized businesses in the food and retail sectors. Enhanced AI capabilities: Implement personalized recommendation systems that analyze customer purchase history and preferences to suggest relevant products and optimize reward strategies. Cross-business rewards: Enable businesses to form partnerships and allow customers to earn and redeem points across multiple participating merchants. Project is open source, see more information and screenshots on the github here: https://github.com/cbonoz/agentic25",
    "summary": "A Web3 Loyalty platform for storefronts with agent-driven contract interactions."
  },
  {
    "title": "Crypto Jam Space",
    "url": "https://ethglobal.com/showcase/crypto-jam-space-ewwik",
    "description": "Project DescriptionCryptoJam Space is a blockchain-based platform on Base where musicians can create and exchange music NFTs, called NFTunes. The project is designed to help musicians monetize their creativity by allowing them to sell and trade their music as NFTs. The platform introduces music challenges, where artists can respond to each other's tracks by creating remixes or new compositions. These collaborations generate unique NFTunes, owned jointly by the original creator and the remixing artist. To support engagement, CryptoJam uses JamCoin, an ERC-20 token that powers staking and voting. Fans can stake JamCoin on their favorite compositions, boosting their ranking on the platform. One key rule: users can stake only one JamCoin per composition, minimizing manipulation and encouraging organic discovery. Additionally, CryptoJam plans to implement: AI-generated visuals for each composition. Easy audio playback and browsing of all recorded tracks. Challenges and voting for the best musical creations. Auctions for exclusive NFTunes. The project aims to create a vibrant, decentralized music ecosystem where musicians can collaborate, gain recognition, and earn from their work.How it's MadeCryptoJam Space is a modular Web3 platform built on Base, leveraging Solidity, Hardhat, Next.js, and Wagmi.sh + Viem. It integrates NFT and ERC-20 token mechanics, along with audio processing and AI-generated visuals. The core functionality of CryptoJam is governed by smart contracts on Base, optimized for low gas fees and fast transactions. The modular approach ensures scalability and maintainability: Main Contract (BeatCoinMusic.sol) Manages platform logic: users, challenges, and auctions. Tracks NFT ownership and collaborations. ERC-20 Token Contract (JamCoin.sol) The in-app currency for staking, voting, and transactions. Implements staking mechanics to boost tracks in rankings. NFT Contract (NFTune.sol) Generates music NFTs (NFTunes) when users mint tracks. Supports co-ownership between original artists and remixers. Uses on-chain metadata storage with IPFS integration. Here are some interesting technical decisions that set CryptoJam apart: Gas-efficient NFT co-ownership Instead of creating separate NFT contracts for remixes, the NFTune.sol contract links parent & child tracks using Merkle trees. This keeps remixes traceable without requiring excessive storage. Staking without direct payouts - instead of staking directly transferring rewards to users, staked JamCoin is used to boost track rankings. This reduces the risk of reward farming while still incentivizing engagement. Base-specific optimization - for low gas fees on Base, leveraging sponsorship of gas fees for invited users on specific interactions.",
    "summary": "Decentralized music platform where artists create, remix, and collaborate through NFT-powered jam sessions. Stake JamTokens to support tracks, influence rankings, and earn rewards. Join music challenges, discover unique sounds, and shape the future of collaborative music! 🎶"
  },
  {
    "title": "OnlyRoasts",
    "url": "https://ethglobal.com/showcase/onlyroasts-48g5h",
    "description": "Project DescriptionOnlyRoasts injects humor and accessibility into the world of blockchain by transforming wallet transactions into witty, AI-generated roasts. It's a unique platform designed to make Web3 less intimidating and more entertaining, blending education, entertainment, and innovation. By connecting your wallet, users can invite distinct Covalent tools, the platform's AI agents, to analyze their blockchain activity and deliver humorous critiques. The aim is to demystify the complexities of blockchain, making it more approachable for a wider audience. OnlyRoasts uses a seamless entry into Web3, creating a smooth experience. The platform facilitates initial transactions by leveraging server wallets to send initial funds via Privy, removing the common hurdles users face when diving into Web3 experiences. This allows users to explore the platform without immediate financial commitment, encouraging experimentation and discovery. Furthermore, a chat interface allows users to learn about Web3, ask questions, execute transactions using natural language commands and mint NFTs and explore them using the Graph protocol. This approach breaks down the technical jargon often associated with blockchain, making it easier for beginners to understand and interact with the technology. The focus is on simplifying the onboarding process and providing a supportive learning environment. OnlyRoasts seeks to be more than just a source of entertainment. It aims to be a gateway to Web3 for the uninitiated, a place where humor and education intersect to create a positive and engaging experience. By making blockchain more accessible and relatable, We hope to foster wider adoption and understanding of this transformative technology.How it's MadeOnboarding New Users: To onboard curious newcomers who come across the buzz around OnlyRoasts, we use Privy's embedded wallet solution, providing a seamless Web3 entry point. To make their first transaction frictionless, we leverage server wallets to send initial funds, empowering users to dive into Web3 experiences without hurdles. Through a chat interface powered by Covalent, users can learn about Web3, ask questions, and perform transactions using natural language commands. AI-Driven Roasting Platform: Our front-end is built in React and styled with Tailwind CSS for a sleek user experience. We connect to the GoldRush API to fetch detailed Ethereum transaction data. Using Covalent’s AI Agent SDK and OpenAI's GPT-4, we generate witty, crypto-themed roasts based on wallet activity. A multi-agent workflow powers the platform, where one agent fetches transaction data, and another crafts the perfect roast. Warpcast Bot Integration: Users can tag @onlyroasts on Warpcast to generate roasts based on their wallet transactions. The bot replies directly in Warpcast with a clever roast frame. Additionally, users can mint these hilarious roasts as NFTs directly from the replied Farcaster frame, turning blockchain burns into collectible moments. NFT Minting: Users can mint their roasts as ERC-721 NFTs via the OnlyRoasts platform or directly from Warpcast. Each NFT encapsulates the roast text, transaction details, and optional custom metadata. We deployed custom smart contracts to handle minting and metadata storage. This blend of AI-driven humor, blockchain transparency, and creative NFT capabilities makes OnlyRoasts a unique and entertaining Web3 experience that combines education, entertainment, and innovation.",
    "summary": "OnlyRoasts is a hilarious AI-Agent that analyzes your blockchain transactions and roasts you for them. Share the witty burns on social media or turn them into roast frames for others to join the fun!🔥😏 #BlockchainRoasts"
  },
  {
    "title": "thirdguy",
    "url": "https://ethglobal.com/showcase/thirdguy-2y17m",
    "description": "Project DescriptionThis project involves developing an AI-powered social agent designed to facilitate a wide range of escrow operations across different industries. The system leverages artificial intelligence, smart contracts, and automated dispute resolution to provide a secure, transparent, and efficient escrow service.How it's MadeThis project is built using a combination of AI, blockchain, smart contracts, and automation tools to create a secure, efficient, and intelligent escrow system. Below is a detailed breakdown of how the system is architected and what technologies were used. This project is built using a combination of AI, blockchain, smart contracts, and automation tools to create a secure, efficient, and intelligent escrow system. Below is a detailed breakdown of how the system is architected and what technologies were used. langgraph, langchain,",
    "summary": "A social AI agent that facilitates wide range of escrow operations"
  },
  {
    "title": "EAM",
    "url": "https://ethglobal.com/showcase/eam-vhfxo",
    "description": "Project DescriptionEthereum Agent Manager (EAM) is an AI-powered tool that makes using Ethereum as easy as chatting. It understands natural language commands, like “Swap 1 ETH for USDC,” and turns them into secure blockchain transactions. With built-in security checks, EAM helps users avoid scams, risky contracts, and high gas fees. The system consists of a Flutter-based app (Charlotte) for smooth user interaction and an AI backend that processes requests and generates safe, executable blockchain actions. By simplifying Ethereum operations and ensuring security, EAM bridges the gap between Web2 and Web3, making blockchain accessible to everyone.How it's MadeEAM is built using a combination of AI, blockchain, and modern frontend technologies to create an intuitive and secure Ethereum interaction layer. The frontend, Charlotte, is developed with Flutter, allowing it to support Linux, Android, and Web platforms with a single codebase. This ensures cross-platform compatibility and a seamless user experience. The AI backend is built using Python, leveraging Natural Language Processing (NLP) to understand user input and generate executable blockchain commands. One of the core innovations is the Retrieval-Augmented Generation (RAG) system, which enables EAM to intelligently retrieve relevant blockchain commands and format them based on user intent. This system ensures accurate command matching while adapting to different Ethereum applications and protocols. The security check model is designed to analyze smart contracts and transactions in real-time, utilizing static analysis, behavior monitoring, and scam detection techniques to safeguard users from potential threats. EAM follows a structured pipeline where user inputs are processed through Charlotte’s interface, passed to the AI backend for intent recognition and command generation, and then validated by the security check model before execution. The result is a natural language-driven, AI-powered Ethereum assistant that simplifies Web3 interactions while maintaining security and transparency. A particularly hacky aspect of our implementation was optimizing the command generation and JSON formatting for blockchain transactions. Instead of relying on predefined templates, we designed a flexible formatting engine that dynamically adapts to different contract interactions. This allows EAM to support new protocols without requiring constant manual updates.",
    "summary": "EAM (Ethereum Agent Manager) is an AI-powered layer between users and Ethereum, enabling one-click on-chain operations with built-in risk assessment, so users can interact with Ethereum without expertise."
  },
  {
    "title": "VPAI",
    "url": "https://ethglobal.com/showcase/vpai-9gfz1",
    "description": "Project DescriptionVPAI: The Framework for Building Personal AI Assistants VPAI (Virtual Personal Agentic Intelligence) is an innovative framework designed for building intelligent, personal AI assistants that act autonomously on behalf of users. Built on Coinbase’s Agent Kit, VPAI enables the creation of highly customisable, agentic AI systems that can execute tasks, make informed decisions, and seamlessly interact with Web3 and traditional digital environments. Key Features Autonomous Task Execution – VPAI enables AI assistants to act independently based on user-defined parameters, reducing manual input while ensuring efficiency. Modular and Extensible – Developers can easily extend functionality by integrating additional modules for Web3 transactions, smart contract interactions, and on-chain identity management. Secure by Design – Built with best-in-class cryptographic standards and access control mechanisms to protect user data and transactions. Seamless Web3 Integration – Supports blockchain-native functionalities, such as account abstraction, self-custodial wallets, and token-gated access. Natural Language Processing (NLP) and Reasoning – Utilises advanced AI models to understand and execute complex user requests with human-like reasoning. Customisable Personalisation – Users can define preferences, routines, and decision-making rules to tailor their AI assistant’s behaviour to their needs. Use Cases Web3 AI Agents – Personal assistants that can manage crypto transactions, execute smart contract interactions, and automate DeFi strategies. Financial AI Advisors – Assistants that monitor portfolio performance, suggest optimal investment strategies, and alert users to key market movements. Automated Compliance & KYC Agents – AI systems that handle identity verification, transaction monitoring, and regulatory compliance for Web3 businesses. Gaming & Metaverse Companions – Intelligent NPCs and AI-driven player assistants that enhance gaming experiences by executing tasks and making strategic decisions. Enterprise Productivity – AI-driven task managers that automate workflows, schedule meetings, and interact with APIs for business automation.How it's MadeVPAI operates as an autonomous, event-driven AI agent with an on-chain and off-chain hybrid architecture: User Input & NLP Processing The user inputs commands via the UI, voice, or a chat interface. The AI agent processes the command using LangChain or a fine-tuned local LLM. Decision-Making & Execution The agent determines whether the action is Web2 (e.g., sending an email) or Web3 (e.g., executing a smart contract). It queries blockchain states (via Ethers.js/Viem) and off-chain APIs (via Node.js & FastAPI). If required, it requests user approval for transactions via Coinbase Wallet SDK or executes autonomously via Account Abstraction. On-Chain Transactions If a transaction is required, the AI agent bundles the request, signs it with a smart contract wallet, and submits it to the chain. All transactions are either gasless (via sponsored transactions) or use a built-in staking mechanism for covering gas fees. Secure Data Storage & Messaging Sensitive user data is encrypted using Lit Protocol and stored on IPFS. VPAI agents communicate securely via XMTP, enabling cross-platform interactions.",
    "summary": "VPAI is an AI-powered personal assistant and autonomous trading agent that leverages real-time market sentiment, on-chain analytics."
  },
  {
    "title": "Neptume Onboarding",
    "url": "https://ethglobal.com/showcase/neptume-onboarding-igyms",
    "description": "Project DescriptionThis project is a seamless crypto onramp experience designed to simplify the process of getting started with DeFi for users. The app integrates Coinbase SDK for wallet management, Covalent agents for blockchain data querying and agents, and Vite for a fast and modern front-end development environment.How it's MadeThe project combines powerful technologies like Coinbase SDK, Covalent, and LLMs to simplify and enhance the crypto onboarding process. By leveraging Vite, React, and Tailwind, the platform offers a seamless and fast user experience. The integration of these technologies allowed me to create a crypto onramp that is both user friendly and with rich features, with real time guidance and blockchain data fetching. The use of LLMs to assist users and Covalent for blockchain querying made this project unique and efficient in delivering value to users entering the crypto space.",
    "summary": "Crypto onramp made as simple as possible. Use LLMs to create DeFi account and/or use it for assistance during the process."
  },
  {
    "title": "Onchain Angels",
    "url": "https://ethglobal.com/showcase/onchain-angels-qi0cn",
    "description": "Project DescriptionAn AI-powered financial coach that helps traders make smarter financial decisions by providing behavioural insights based on their on-chain actions. Think of it as your personal \"guardian angel\" that guides you at crucial moments to keep you aligned with your financial goals. Problem Statement Traders and investors often create solid strategies but stray from them due to emotions, cognitive biases, and impulsive decisions—leading to unexpected portfolio risks. On top of that, crypto companies and influencers are constantly trying to pull you into chasing the next big thing. Solution: Onchain Angels We’ve developed an AI agent that monitors on-chain activity in real time and applies behavioural economics to portfolio shifts. After each trade, it analyses changes in risk exposure, detects potential cognitive biases, and sends personalised, psychology-backed questions—based on 23 well-researched behavioural patterns—via social media. This helps traders reflect, spot hidden biases, and make smarter decisions over time.How it's MadeEcosystem Overview 🌟 Each repository plays a vital role in ensuring the Onchain Angels solution works seamlessly together: 🤝 🤖 Agent: AI agent that processes data and generates personalised behavioural insights. 💻 Backend: Handles data processing and generation, integrating with external services such as Alchemy, Etherscan, CoinGecko, and OpenAI. 🌐 Frontend: Intuitive and lightweight user interface enabling profile creation and system interaction. 🔒 Nillion: Secure data management through Nillion Secret Vault, ensuring privacy and data integrity. 🐍 Nillion-sv-wrappers-py: Python utility library to communicate with Nillion db. Repositories 🚀 Agent 🤖 Repository: https://github.com/onchain-angels/onchain-angels-agent Tech Stack: ElizaOS v0.1.9, TypeScript Deployment: Autonome Houses the AI agent - a customized fork of elizaOS/eliza-starter, featuring custom character configurations, Farcaster and Twitter/X integration clients, and a plugin for retrieving users' latest transaction data from the backend. Backend 💻 Repository: https://github.com/onchain-angels/onchain-angels-backend Tech Stack: Python, Django, Django REST Framework, PostgreSQL Deployment: Heroku https://api.onchain-angels.com/ This repository contains APIs for profile management and user activity webhooks. It handles all server-side logic, including wallet and token management, plus integrations with blockchain data providers (Alchemy, Etherscan, CoinGecko). Implements webhooks that summarize user actions and relay them to the agent. Frontend 🌐 Repository: https://github.com/onchain-angels/onchain-angels-frontend Tech Stack: Next.js, Tailwind CSS, TypeScript Deployment: Vercel https://onchain-angels.com/ Web application where users can create profiles to receive AI-powered financial insights. User information is securely stored in the backend and utilized to generate personalized agent responses. nillion-sv-wrappers-py 🐍 Repository: https://github.com/onchain-angels/nillion-sv-wrappers-py Tech Stack: Python, nilql A Python library that provides wrappers for seamless integration with the Nillion Secret Vault. Inspired by NillionNetwork/nillion-sv-wrappers JavaScript implementation, it offers an abstraction layer for secure, decentralized data storage and encryption operations. Nillion 🔒 Repository: https://github.com/onchain-angels/nillion Tech Stack: JavaScript, Node.js, nillion-sv-wrappers Used for testing and schema development for Backend-Agent information exchange. Not implemented in the current submission but planned for future development",
    "summary": "AI-powered financial coach that helps traders make better financial decisions by responding to on-chain actions with behavioural insights. Think of it as an “angel on your shoulder” that nudges you at key moments to keep you aligned with your goals."
  },
  {
    "title": "pochi.po",
    "url": "https://ethglobal.com/showcase/pochi-po-grcvx",
    "description": "Project DescriptionThe blockchain ecosystem is currently experiencing the \"meme phenomenon.\" Every viral moment in the world becomes a meme, and the crypto community rapidly creates tokens around them. If a meme reaches enough people, its token can skyrocket in value, making early adopters significant profits. However, several issues arise: Not all meme tokens succeed—many are rug pulls or fail to gain traction, leading to losses. When a meme token does succeed, thousands of copies immediately appear, making it hard to identify the real one. Identifying the next meme requires constantly monitoring Twitter, which is impractical for most people. That's where pochi.po comes in. Inspired by the creator’s girlfriend’s nickname, pochi.po is an AI agent that continuously scans Twitter for potential meme-worthy tweets and automates the token creation process. Here’s how it works: Scraping & Analysis: pochi.po scrapes Twitter posts via nitter.net and evaluates if a tweet has meme potential. It explains why a meme is promising or not. Automated Token Creation: If a tweet qualifies, pochi.po automatically creates a token on Moonshot (a token launch platform), purchases a small percentage as part of its revenue model, and announces it on Twitter for the community to engage. User Interaction: pochi.po has a dedicated website, pochipo.xyz, where users can explore all tokens it has created, view related tweets, and interact with the agent via chat. DeFi & Wallet Features: Users can: Ask pochi.po about token details. Create a secure custodial wallet (with MPC support planned). Manage balances, send ETH, buy/sell meme tokens. Enable auto-sniping to automatically buy pochi.po’s newly created tokens for potential early gains. This project is a fully automated, AI-powered, meme-token generation platform that bridges the gap between real-time trends and blockchain tokenization, removing the need for manual research and execution.How it's MadeThis project integrates multiple technologies across AI, blockchain, web scraping, and cloud infrastructure: Scraper Tech Stack: Python, Selenium, BeautifulSoup Process: Scrapes tweets from nitter.net. Stores new tweets in an AWS RDS PostgreSQL database. Sends tweets to pochi.po for meme potential evaluation. AI Agent - pochi.po Hosted on: Autonome Built with: Coinbase AgentKit + Anthropic Claude Model Core AI Capabilities: tweet_evaluator: Determines meme potential, explains why, and stores results. create_moonshot_token: Automatically launches meme tokens on Moonshot (Base Sepolia blockchain) and announces them on Twitter. create_user_wallet: Generates secure wallets (custodial for now, MPC planned). buy_token & sell_token: Users can trade pochi.po’s created tokens. snipe_tokens: Enables auto-buying of new meme tokens upon launch. Blockchain Integration Network: Base Sepolia Token Launch Platform: Moonshot Wallet Security: Custodial wallets (future MPC implementation planned). Web & API Frontend: Vite.js (hosted on Vercel - pochipo.xyz) API Communication: pochi.po exposes an API via Autonome, which the frontend interacts with. Deployment & Infrastructure DockerHub: Hosts pochi.po’s Dockerized agent image (lrivera1699/popis.po-agent:latest). AWS RDS PostgreSQL: Stores tweet evaluations and token data. Notable Hacks & Innovations AI-Powered Meme Evaluation: Instead of manual research, pochi.po uses AI to detect and explain meme potential. End-to-End Automation: The entire process, from tweet detection to token launch and marketing, is automated. DeFi Smart Trading Tools: Users can set auto-buy configurations to capitalize on meme trends instantly. 🚀 pochi.po is the ultimate AI-powered meme token creator, ensuring users never miss the next big crypto trend.",
    "summary": "Pochi.po is an AI-powered agent that scans Twitter for emerging meme trends, evaluates their viral potential, and instantly mints a token on Ethereum Meme Platform Ethfun. It auto-posts the meme token, shares insights, and lets users auto-buy via MPC wallets. Meme. Mint. Moon. 🚀"
  },
  {
    "title": "BargainBots",
    "url": "https://ethglobal.com/showcase/bargainbots-nk2r5",
    "description": "Project DescriptionBargainBots is an AI-based 3D simulation designed to demonstrate how robots can use AI to make autonomous decisions while minimizing human intervention. This has several real-world applications, as AI and robotics integration play a crucial role in the ongoing AI revolution. For example, imagine two robots running out of battery at the same time, but there’s only one charging station. They must negotiate and decide who gets to charge first—ideally in a cooperative manner, like: 'Hey, I'll let you charge first this time, but don’t forget to return the favor next time!' Beyond this, integrating Blockchain with AI and robotics takes decision-making to the next level. With DAO-based decision-making, BargainBots aims to create a framework where robots can autonomously collaborate, govern, and optimize their interactions in a decentralized ecosystem. Please refer https://github.com/BargainBots for detailed steps to run locally.How it's MadeI used several tools and technologies for making BargainBots. The main tools include - For simulation - Gazebo Harmonic, ROS2 Rolling For AI integration - ZerePy + Hyperbolic and ZerePy for ethereum integration too. To control the robot, you can use arrow keys. We have added two examples for this project - Negotiation and Governance example. For negotiations, we used Gz Ros2 Control along with Hyperbolic API and for governance we used ZerePy Ethereum Connection to reward the elected leader.",
    "summary": "BargainBots is a 3D simulation of AI-based decision-making among robots. (We're just helping robots take over the world—no big deal!)"
  },
  {
    "title": "NutriFi",
    "url": "https://ethglobal.com/showcase/nutrifi-k1sj6",
    "description": "Project DescriptionNutriFi: Your AI-Powered Personal Nutritionist Project Overview: NutriFi is an innovative AI-powered personal nutritionist built for the EthGlobal Hackathon. It combines advanced AI agent technology with blockchain capabilities to create a seamless, personalized nutrition and meal-ordering experience. The agent provides smart meal recommendations based on individual preferences and handles the entire ordering process, including crypto payments and loyalty rewards.How it's MadeTechnical Architecture Core Framework ElizaOS: The project is built on the ElizaOS framework, a powerful agent operating system that provides: Multi-agent support and room management Extensible action system Built-in memory and document store Support for multiple AI models Key Components Agent System (NutriFi Plugin) Custom ElizaOS plugin for nutrition-focused interactions Intelligent meal recommendation system User preference and dietary restriction management Real-time meal ordering capabilities Blockchain Integration Coinbase AgentKit Plugin: Enables cryptocurrency transactions and Web3 features Wallet creation and management Crypto payment processing NFT-based loyalty rewards system Vendor Integration API-based ordering system Restaurant partner network Real-time availability checking Order tracking and fulfillment Key Features Personalized Nutrition Dynamic meal recommendations based on: User fitness goals Dietary preferences Food allergies and restrictions Nutritional requirements Previous meal history Smart Ordering Automated order placement Multiple payment options (crypto/traditional) Order tracking and confirmation Dietary restriction verification Loyalty Program NFT-based reward system Exclusive discounts Free meal rewards Special menu access Priority ordering User Experience Natural language interaction Preference learning and adaptation Meal history tracking Nutritional goal monitoring Technical Implementation Agent Framework javascriptCopy// ElizaOS Configuration { \"name\": \"NutriFi\", \"version\": \"1.0.0\", \"clients\": [\"web\", \"mobile\"], \"plugins\": [ \"@elizaos/plugin-nutrifi\", \"@coinbase/agentkit\" ] } Integration Points Meal Recommendation Engine AI model integration Nutrition database User preference matching Payment Processing Crypto wallet integration Transaction handling Payment confirmation Order Management Vendor API integration Order tracking Delivery coordination Future Enhancements Multi-restaurant order optimization Advanced dietary analysis Meal prep planning Social sharing features Integration with fitness apps Expanded loyalty program features Technical Requirements Node.js 23+ Python 2.7+ (for specific integrations) pnpm package manager Web3 wallet for crypto transactions Getting Started bashCopygit clone https://github.com/Gonzo3030/NutriFi.git cd NutriFi cp .env.example .env pnpm i && pnpm build && pnpm start",
    "summary": "We're building an AI agent that will be a personal nutritionist using ElizaOS framework. The agent will be able to find healthy foods around you, make specific meal suggestions based on user fitness goals, food establishments in your area, and diet preferences."
  },
  {
    "title": "ReadyAgentOne",
    "url": "https://ethglobal.com/showcase/readyagentone-7mytn",
    "description": "Project DescriptionReadyAgentOne is a framework intended to be integrated at both a game and agent level to enable an agent to consume and meaningfully respond to in-game world events. It sits on top of the agent layer and serves as an additional action space to enable the agent to respond to events from a game's authority (typically the game server). In the framework we define a set of modifiable and extendible events as well as callbacks for the events that are easily integrable into existing Javascript agent frameworks. As a proof of concept, we created an agent using Coinbase's Agentkit, and wrote a custom action provider that supports all Superfluid functionality. We integrated the framework into our agent and the metaverse Nifty Island. The agent can then propose a challenge (ex: \"Place first in this race!\"), and reward the winner by starting a Superfluid stream to their account, until the next winner comes to take the stream. For this to work we extended the agentkit repository, by adding dedicated actions to allow the agent to use the superfluid protocol on base. Until the agent is fully released in NiftyIsland, a debug interface can be found here: https://readyagentone.xyz/debugHow it's MadeThis project starts with the Coinbase Agentkit framework. We extended it's functionality by writing an action provider using typescript to start, update, and stop Superfluid streams and pools. In that action, we integrated The Graph and Superfluid's subgraphs to pull stream data for the agent. Next we created a node package using typescript to define the events to be sent between game authorities and the agent. The goal is to allow the agent to have insights in the current state of the game world, as well as subscribing to unique events, allowing it to make meaningful and impactful decisions. Messages are either WorldTick (interval message containing number of players, server state, global information) or WorldEvent (unique events such as game started / ended, Player won, Player joined or left, Player in a certain zone) events, allowing the agent to react to fine grained information from the game world. Lastly we modified the agent implementation in Nifty Island to send the relevant messages to the agent, using C# and the Unity game engine. The agent for this demo is primed to stream $island token to whoever completed a given quest within NiftyIsland. For this we use the PlayerWon event defined in the framework. Players can receive varying quests from the agent, like winning a number of races. Once the corresponding events were send from the server, players can speak to the agent again and it will trigger an onchain action, closing the current superfluid stream and starting a new stream towards the players wallet. All this happens seamless for the players, as the required info, like game winnings and wallet addresses can be provided via the ReadyAgentOne framework. The 3d asset of the agent is a ForgottenRunesWizardCult avatar owned by floar.eth",
    "summary": "ReadyAgentOne is Gamefi layer for onchain agents. It allows agents to consume rich ingame events, as well as adding an onchain layer for players to compete on."
  },
  {
    "title": "Brent",
    "url": "https://ethglobal.com/showcase/brent-e7b68",
    "description": "Project DescriptionBrent is an innovative, AI-powered multi-asset token purchaser designed to streamline and optimize digital asset transactions across multiple blockchain networks. By integrating advanced agents and leveraging real-time analytics, Brent automates token acquisition from leading decentralized exchanges like Uniswap, ensuring seamless execution across diverse chains such as Polygon and Base. This intelligent solution consolidates multiple token purchases into a single efficient transaction, drastically reducing operational overhead and latency. Brent’s robust risk assessment algorithms evaluate market liquidity and volatility, mitigating potential vulnerabilities and ensuring cost-effective execution. The platform’s sophisticated API integrations and cross-chain compatibility deliver a dynamic, user-friendly experience tailored for both novice and experienced investors. With Brent, businesses can confidently navigate the complexities of decentralized finance by harnessing state-of-the-art technology that prioritizes efficiency, reliability, and informed decision-making in the rapidly evolving digital asset landscape. Our platform empowers investors with strategic insights and agility, driving competitive advantage in decentralized finance globally scalable.How it's MadeBrent is an AI-powered multi-asset token purchaser that automates the execution of multiple token transactions in one go. It taps into decentralized finance protocols by integrating with Uniswap’s API to search for token pairs and validate liquidity before bundling purchases into a single transaction. The backend, built on Next.js, leverages libraries such as viem for blockchain interactions—for example, in getERC20BalanceTool—to read contracts and verify token balances on networks like Polygon. On the frontend, React.js is used to create a streamlined user interface, including chat client elements that help users interact with Brent. Zod is utilized for schema validation within our tool-creation framework (powered by the Covalent AI Agent SDK) to ensure robust input handling. Additionally, our service layer includes custom token filtering and transaction preparation logic, as detailed in PLAN.md, ensuring efficient and reliable performance across chain",
    "summary": "An agent-powered crypto index fund builder that creates custom index funds based on user conversations."
  },
  {
    "title": "Codename: Abandoned",
    "url": "https://ethglobal.com/showcase/codename-abandoned-7dh4x",
    "description": "Project DescriptionCodename: Abandoned\" is an immersive, interactive cyberpunk virtual tour that combines 360° panoramic environments, Web3 authentication, and AI-driven NPC interactions to create a unique digital exploration experience. The project is built using 3DVista, a powerful virtual tour engine, and integrates Ethereum-based wallet authentication to provide users with gated access to different areas within the virtual world. Additionally, an AI-powered ghost NPC offers cryptic clues and narrative elements, enhancing the storytelling aspect for a true AI agentic experience.How it's MadeBuilt using 3DVista (virtual tour engine) and Three.js (WebGL rendering). Ethereum authentication (personal_sign) ensures decentralized access. AI NPCs generate unique dialogues via local AI models (future IPFS-based memory storage planned). Designed for autonomous, on-chain extensibility. Gasless authentication via personal_sign keeps entry frictionless. AI NPCs could evolve via decentralized storage (future upgrade). Panorama rendering is fully immersive, with adaptive UI fixes for fullscreen bugs. Designed for cross-dApp interaction, ensuring modular expansion.",
    "summary": "Codename: Abandoned\" – An immersive cyberpunk virtual tour powered by 3DVista, Web3 wallet authentication, and AI-driven NPCs. Explore eerie abandoned worlds, unlock cryptic clues from a ghostly guide, and dive into a unique fusion of blockchain tech & interactive storytelling."
  },
  {
    "title": "Buzzing",
    "url": "https://ethglobal.com/showcase/buzzing-61nze",
    "description": "Project DescriptionWe're building a decentralized platform that empowers users to wager on the future performance of content creators by predicting the exact engagement score they’ll achieve at the end of a betting pool. Unlike binary betting systems—where an incorrect guess might result in a total loss—our platform offers a more nuanced approach where the loss is proportional to how far your prediction deviates from the actual score. Here’s what sets our platform apart: Score-Based Predictions: Instead of simply choosing \"yes\" or \"no,\" users forecast the precise score a content creator will obtain. This means: If your prediction is slightly off, you might only lose a small portion (e.g., 10% of your stake). If it's significantly off, the loss could be higher (up to 60–70%), but never your entire bet. Advanced AI-Driven Analysis: Our system leverages cutting-edge AI to process real-time data from platforms such as LinkedIn, GitHub, Farcaster, and Discord. This includes: Using natural language processing and machine learning to accurately calculate engagement scores. Detecting any anomalies or potential manipulation in the data, ensuring fair outcomes. Enhanced Security with zkTLS: To maintain a secure and decentralized environment: We employ zkTLS technology to protect data transmission and verify the results after each betting pool concludes. This cryptographic verification guarantees that the poll outcomes are tamper-proof and trustworthy. By combining these elements, our platform not only allows users to bet on the growth of content creators but also mitigates risk through a proportional loss mechanism and reinforces trust with robust AI analytics and zkTLS verification. User Roles & Permissions :Regular Users: Can deposit funds, place bets, create markets, and withdraw winnings. Market Creators: Can set up betting markets by defining event parameters and resolution criteria. AI Resolver: An AI agent responsible for fetching, analyzing, and verifying social media data for market resolution. Administrators (Optional): Oversee platform integrity, dispute resolution, and governance. We use this mainly for dashboarding (getting stats)How it's MadeWe're building a decentralized platform that empowers users to wager on the future performance of content creators by predicting the exact engagement score theyʼll achieve at the end of a betting pool. Unlike binary betting systems—where an incorrect guess might result in a total loss—our platform offers a more nuanced approach where the loss is proportional to how far your prediction deviates from the actual score. Hereʼs what sets our platform apart: Score-Based Predictions: Instead of simply choosing \"yes\" or \"no,\" users forecast the precise score a content creator will obtain. This means: If your prediction is slightly off, you might only lose a small portion (e.g., 10% of your stake). If it's significantly off, the loss could be higher (up to 60–70%), but never your entire bet. Advanced AI-Driven Analysis: Our system leverages cutting-edge AI to process real-time data from platforms such as LinkedIn, GitHub, Farcaster, and Discord. This includes: Using natural language processing and machine learning to accurately calculate engagement scores. Detecting any anomalies or potential manipulation in the data, ensuring fair outcomes. Innovative Prediction Model: Users wager on a precise engagement score, not just a binary outcome. Decentralized and Transparent: Built on blockchain for trust and security. Advanced AI Integration: Processes real-time data to ensure accurate and reliable predictions. Robust Verification: Utilizes zkTLS to secure and verify betting outcomes. Wide Target Audience: Appeals to all users aged 16 and up with low entry barriers. Community-Driven Growth: Allows users to create their own pools for a nominal fee. Clear Market Gap: No existing project focuses on range-based betting or content creator engagement derivatives.",
    "summary": "We're creating a decentralized platform where you can bet on your favorite creators' future popularity by predicting unique engagement scores—powered by real-time social media data and AI-verified polls."
  },
  {
    "title": "ChainBrian",
    "url": "https://ethglobal.com/showcase/chainbrian-bfyd0",
    "description": "Project DescriptionChainBrian is your all-in-one blockchain assistant, designed to streamline and enhance your decentralized finance (DeFi) experience. Leveraging the power of Gaia and OpenAI, ChainBrian offers a comprehensive suite of features to automate, analyze, and optimize various blockchain activities. With ChainBrian, you can effortlessly manage multi-chain DEX trading, monitor and execute cross-chain bridges, and gain insights into NFT marketplaces. Participate in DAO governance, manage your treasury, and perform social sentiment analysis to stay ahead of market trends. ChainBrian also excels in on-chain data analysis and provides an automated reporting system to keep you informed. Optimize your yield farming and staking strategies, predict token prices, and receive alerts for smart contract vulnerabilities. ChainBrian helps you save on gas fees, manage your portfolio, and monitor liquidity pools. Ensure compliance with regulatory standards and participate in automated airdrops with ease. ChainBrian's advanced features include real-time market data feeds, wallet security monitoring, cross-chain token swaps, and decentralized lending and borrowing management. Automate governance proposal creation and voting, manage token vesting schedules, and process decentralized insurance claims seamlessly. Integrate with decentralized oracles, perform automated arbitrage trading, and analyze sentiment from social media and news sources. ChainBrian also supports decentralized prediction markets, liquidity provision, cross-chain asset tracking, and DEX order book analysis. Stay on top of flash loan execution, automate token burn and minting, and manage decentralized crowdfunding and fundraising campaigns. ChainBrian integrates with DAOs for task automation, monitors real-time transactions, and generates compliance reports for tax purposes. With ChainBrian, you can manage cross-chain collateral, score decentralized identities and reputations, and integrate with decentralized storage solutions. Automate NFT minting and distribution, monitor blockchain network health in real-time, and aggregate liquidity across chains. Deploy and manage smart contracts, optimize decentralized gaming assets, and integrate with decentralized social networks.How it's MadeChainBrian is built using a combination of cutting-edge technologies to deliver a robust and versatile blockchain assistant. Here's a breakdown of the key components and technologies used: Backend: Node.js: The core runtime environment for building the server-side logic. Express.js: A web application framework for handling HTTP requests and routing. TypeScript: Ensures type safety and improves code maintainability. SQLite: A lightweight database for storing configuration and state data. AI Integration: OpenAI: Utilized for natural language processing and generating intelligent responses. Gaia: Provides additional AI capabilities and models for enhanced functionality. Blockchain and DeFi: Web3.js: Interacts with Ethereum and other blockchain networks. Ethers.js: A library for interacting with the Ethereum blockchain and its ecosystem. Coinbase SDK: Integrates with Coinbase for wallet management and transactions. Privy SDK: Manages user data and authentication securely. Social Media Integration: Twitter API: Automates interactions with Twitter for posting, replying, and sentiment analysis. Telegram Bot API: Manages Telegram bot interactions and notifications. DevOps and Deployment: Docker: Containerizes the application for consistent deployment across environments. Ngrok: Provides secure tunnels to localhost, enabling webhook testing and development. Frontend: Next.js: A React framework for server-side rendering and static site generation. Miscellaneous: Zod: Ensures data validation and schema definitions. Grammy: A framework for building Telegram bots. Notable Hacks and Integrations Webhook Management: Leveraged Ngrok to create secure tunnels for local development, allowing seamless testing of webhooks and real-time interactions. AI Model Optimization: Combined Gaia and OpenAI models to enhance the chatbot's intelligence and response accuracy. Cross-Chain Functionality: Implemented multi-chain support using Web3.js and Ethers.js, enabling ChainBrian to interact with various blockchain networks. Automated Reporting: Developed a system to generate and send automated reports based on on-chain data and social sentiment analysis. By piecing together these technologies, ChainBrian offers a comprehensive and powerful tool for managing and optimizing your DeFi experience, making blockchain interactions more accessible and enjoyable.",
    "summary": "Meet ChainBrian, your ultimate blockchain buddy! From multi-chain DEX trading to NFT analytics, DAO governance, and social sentiment analysis, ChainBrian does it all. Automate, analyze, and optimize your DeFi experience with Brian on chain! 🚀"
  },
  {
    "title": "Karen AI Manager",
    "url": "https://ethglobal.com/showcase/karen-ai-manager-1v3uw",
    "description": "Project Description⁠The Decentralized Portfolio Manager powered by Lit Protocol & AI — automates asset rebalancing with secure Lit Actions, signed by a PKP. Users engage with AI for risk analysis, select dynamic strategies based on risk tolerance, execute trades on-chain, and interact via a real-time chat interface. Users start by engaging with an AI agent through a real-time chat interface, where they can provide their risk tolerance preferences and investment goals. The AI retrieves current holdings from the user’s PKP wallet and fetches market data from the Uniswap decentralized price oracle. It then evaluates the user’s risk profile to generate an informed strategy. Based on the risk assessment, the system selects a trading strategy, such as conservative, balanced, or aggressive, mirroring traditional stock investing applications. The AI then generates precise trade instructions aligned with the selected strategy. Once trade instructions are generated, they are converted into executable transactions and securely signed by the PKP through Lit Actions. The Lit Action then submits the trades to DEXs via Uniswap for automated execution. Finally, the AI provides real-time feedback on trade execution, keeping users updated on portfolio performance.How it's MadeThe tech stack includes Lit Protocol for secure signing with PKP, AI Agent (ChatGPT) for risk analysis and strategy selection, Uniswap for executing trades on-chain, and Ethers.js with Express and WebSocket for blockchain interactions and real-time updates. That said, there are some limitations. Since Lit Actions have a *30-second execution cap, we can only process *a few trades per action before hitting that limit. While technically, multiple trades can be handled within a single Lit Action, *waiting for transactions to settle on-chain would take too long, meaning we’d have no way to do proper error handling within the action itself. As a workaround, trade execution had to be simplified, with more complex strategies moved off-chain. Another challenge was data flow—ideally, everything would happen within one Lit Action, but due to constraints, *we had to shuttle data between the Lit Action and the client, which forced some major architectural changes in the codebase.",
    "summary": "⁠⁠AI-powered decentralized portfolio manager using Lit Protocol. Automates asset rebalancing with secure Lit Actions, signed by a PKP. Users interact via real-time chat, receive AI-driven risk analysis, select dynamic strategies, and execute trades on-chain through Uniswap."
  },
  {
    "title": "goDegen",
    "url": "https://ethglobal.com/showcase/godegen-yrek7",
    "description": "Project DescriptionGoDegen revolutionizes DeFi trading by combining artificial intelligence with automated trading strategies on the Base network. At its core, it's a sophisticated trading platform that leverages AI predictions to execute optimal trades while managing risk, check honeypots, The platform enables users to create AI-managed portfolios that automatically execute trades based on market predictions and risk parameters.How it's MadeThis project is built using a modern tech stack carefully chosen for reliability, speed, and user experience: Smart Contracts (Solidity) Portfolio Manager: Built with Solidity 0.8.x, manages user portfolios and handles token deposits/withdrawals AI Trader: Integrates with Uniswap V3, implementing custom pool discovery and quote optimization algorithms AI Oracle: Provides real-time market predictions using a sophisticated scoring system Security: Implements permit2 for gasless approvals and multi-step validation for trades Frontend (Next.js + TypeScript) Real-time Updates: Uses WebSocket connections for live trade and block monitoring State Management: Custom hooks for efficient data handling and real-time updates UI Components: Built with Tailwind CSS for a responsive and modern interface Web3 Integration: Ethers.js v6 for blockchain interactions and transaction management Trading Engine Pool Discovery: Custom algorithms to find and validate the best pools for trading Quote Optimization: Multi-strategy approach with fallback mechanisms Analytics Engine: Real-time analysis of market conditions, whale activity, and trading patterns Error Handling: Comprehensive error detection and recovery system",
    "summary": "AI-powered DeFAI trading platform on Base that automates trades using real-time market predictions, advanced pool analytics, and risk management. Trade smarter with AI"
  },
  {
    "title": "Tunify",
    "url": "https://ethglobal.com/showcase/tunify-p5ep1",
    "description": "Project DescriptionThis project is a music streaming platform unlike Spotify it uses Pay as you Listen model users will be charged from minutes listened Sample scenario Consider a song of Ariana Grande - 7 Rings it has Spotify- 2.5 billions YT music - 2.6 billions apple music - some billions Youtube - 1.5 billion Despite being her one 15+ songs her annual earnings is less than 16 million* for her singing career if we don't consider the Shows she act on So for a famous song she earns around 2 million so we get the value of 0.0002 dollars per listening after including the making cost, patents,directors salary In conclusion you need to listen to 20000 songs to pay 2$ incorporating platform fees it will be always cheaper than current alternatives Music listeners are not nerd so the wallet integration payment gateways are make abstract and seamless for easy onboardingHow it's MadeTunify is a music streaming platform so it hold a lot of music files, thumbnails, and metadata. All of which are stored in IPFS storage offered by Opsec, I am using more than 2 Gigs of storage on IPFS thanks to Opsec For easy user onboarding we are using privy's embedded wallets so people without prior web3 knowledge can also use the platform with ease, also the way privy handles non wallets client by integrating Gpay and other Onramping protocol For all the chain interactions i are using Base network of its L2 robust handling of transactions I have contributed to Covalent Ai agent sdk to add support for hugging face and Gradio inferences. I have had a very good experience with Covalent in the past. I have raised PR for all the contributions that i have made in the ai-agent-sdk, kindly review it and merge it No one have tried using audio or other models on Covalent . The gradio and HF integration has made it easy to use high performance hosted models in any project I have tried to use EigenLayer for rest of the interaction of backend and the contract",
    "summary": "Decentralised fair pay / Pay as you go music platform to promote local artists and Famous artists too"
  },
  {
    "title": "Tunify",
    "url": "https://ethglobal.com/showcase/tunify-p5ep1",
    "description": "Project DescriptionThis project is a music streaming platform unlike Spotify it uses Pay as you Listen model users will be charged from minutes listened Sample scenario Consider a song of Ariana Grande - 7 Rings it has Spotify- 2.5 billions YT music - 2.6 billions apple music - some billions Youtube - 1.5 billion Despite being her one 15+ songs her annual earnings is less than 16 million* for her singing career if we don't consider the Shows she act on So for a famous song she earns around 2 million so we get the value of 0.0002 dollars per listening after including the making cost, patents,directors salary In conclusion you need to listen to 20000 songs to pay 2$ incorporating platform fees it will be always cheaper than current alternatives Music listeners are not nerd so the wallet integration payment gateways are make abstract and seamless for easy onboardingHow it's MadeTunify is a music streaming platform so it hold a lot of music files, thumbnails, and metadata. All of which are stored in IPFS storage offered by Opsec, I am using more than 2 Gigs of storage on IPFS thanks to Opsec For easy user onboarding we are using privy's embedded wallets so people without prior web3 knowledge can also use the platform with ease, also the way privy handles non wallets client by integrating Gpay and other Onramping protocol For all the chain interactions i are using Base network of its L2 robust handling of transactions I have contributed to Covalent Ai agent sdk to add support for hugging face and Gradio inferences. I have had a very good experience with Covalent in the past. I have raised PR for all the contributions that i have made in the ai-agent-sdk, kindly review it and merge it No one have tried using audio or other models on Covalent . The gradio and HF integration has made it easy to use high performance hosted models in any project I have tried to use EigenLayer for rest of the interaction of backend and the contract",
    "summary": "Decentralised fair pay / Pay as you go music platform to promote local artists and Famous artists too"
  },
  {
    "title": "Genesis",
    "url": "https://ethglobal.com/showcase/genesis-5c35k",
    "description": "Project DescriptionThe Genesis is an immersive AI-driven game that empowers players to create and shape their own unique worlds. Using advanced AI, players can craft landscapes, civilizations, and ecosystems from scratch, tailoring every aspect of their environment. AI-Driven World Building: Players generate custom worlds using AI, defining terrain, climate, cultures, and species. NPC Interactions: In-game characters can be interacted. Tradable Assets: NFTs obtained in the game are fully tradable on blockchain marketplaces, adding real-world value. Evolving Lore: Each player's world has a self-sustaining narrative, evolving based on their interactions and decisions.How it's MadeThe Genesis uses GaiaNet for AI-driven world generation and Privy for Web3 login. The AI generates dynamic landscapes, models skyboxes with cube mapping, and adjusts 3D model positions and rotations. In-game characters evolve based on player interactions. The game integrates blockchain for tradable NFTs as rewards. The tech stack blends Phaser for game mechanics, AI for procedural world building, and blockchain for secure asset trading.",
    "summary": "GENESIS lets you create 3D worlds with AI. Type a prompt, and the game generates environments, stories, and NPCs, bringing your mystery to life with immersive visuals, depth mapping, and interactive AI-driven characters."
  },
  {
    "title": "CryptoDaily Brief",
    "url": "https://ethglobal.com/showcase/cryptodaily-brief-uka1o",
    "description": "Project DescriptionCryptoDailyBrief unifies crypto intelligence into a single dashboard to help users make informed decisions quickly. By tapping both on-chain sources (via The Graph) and off-chain signals like social media sentiment, CryptoDailyBrief analyzes wallet balances, highlights market-moving trends, and provides tailored action items—be it rebalancing, tax optimization, or yield-farming strategies. An AI agent, deployed on Autonome, can respond to user queries in real-time and even execute transactions on-chain using AgentKit from Coinbase. The user experience is enhanced through a chat-based interface that makes advanced Web3 interactions accessible to both seasoned and novice crypto holders.How it's MadeArchitecture & Tech Stack: Frontend in Next.js for a responsive UI showing real-time on-chain/off-chain data. Backend in Node.js/Express for data aggregation, orchestrating requests to AI agents, and bridging The Graph queries. AI Agent deployed on Autonome, leveraging Coinbase’s AgentKit for on-chain wallet operations (ERC1155, ERC20, ERC721). Smart Contracts deployed on Base (Sepolia) and managed with Foundry for robust contract testing. Data Indexing via The Graph, enabling swift retrieval of transaction and balance info for multiple addresses. Integration & Notable Hacks: Built custom Docker images for the AI agent, ensuring it meets Autonome’s entrypoint requirements and health-check protocol. Combined social media sentiment (e.g., YouTube API) with The Graph’s on-chain data to produce a daily “confidence score.” Employed a chat-based design, allowing natural language commands that the AI agent interprets into direct on-chain actions. By weaving these components together, CryptoDailyBrief presents investors with a streamlined platform that harnesses the power of AI, multi-chain data, and user-friendly interactions—ultimately driving more informed, confident decision-making in the ever-evolving crypto landscape.",
    "summary": "CryptoDailyBrief is a daily personalized crypto insights platform, blending on-chain data (via The Graph) and off-chain sentiment (e.g., YouTube trends) into concise briefs. Powered by an Autonome AI agent for real-time portfolio advice, it streamlines your Web3 experience."
  },
  {
    "title": "ResellChain",
    "url": "https://ethglobal.com/showcase/resellchain-uu3pq",
    "description": "Project DescriptionResell Chain is a decentralized marketplace built to facilitate the buying and selling of secondhand goods, collectibles, and Real-World Assets (RWAs) like real estate. By leveraging blockchain technology, NFT tokenization, and AI-driven price prediction, Resell Chain ensures fair pricing, transparency, and fraud prevention in resell transactions. Key Features : Decentralized Marketplace: Users can list, buy, and sell products without intermediaries. AI-Powered Price Prediction: An AI agent (powered by Eliza & Gaia LLM) suggests fair market prices based on past sales, competitor prices, and demand trends. Blockchain Verification: Products are tokenized as ERC-721 NFTs, ensuring authenticity and proof of ownership. Smart Contract Transactions: Transactions are trustless and secure, eliminating third-party dependencies. EigenLayer Integration: Uses EigenLayer AVS - eOracle Price Feed to fetch the latest USDC/USD exchange rate for price accuracy. IPFS Storage: Product metadata is stored in IPFS (via Pinata), ensuring decentralized and immutable data storage. How it's MadeTechnical Implementation : Blockchain: Arbitrum Sepolia Testnet Token Standard: ERC-721 (NFT-based product listings) AI Model: Gaia LLM + Eliza for price prediction & product suggestions Price Feed: EigenLayer AVS - eOracle for real-time USDC/USD price fetching Storage: IPFS (Pinata as a pinning service) User Interaction Flow : Sellers list products : Products are minted as ERC-721 NFTs with metadata stored on IPFS. AI predicts resale prices : Buyers can use AI predictions to gauge fair pricing. Buyers search for products : AI agent suggests the best resale products based on user preferences. Smart contract transactions : Purchases are executed via blockchain transactions for trustless trading. Future Roadmap & Expansion : Support for RWAs: Expand to include real estate and other physical assets using ERC-1155. Cross-Chain Expansion: Extend support to multiple blockchains. DeFi Integration: Enable NFT-backed loans to allow liquidity for listed assets. AI-Based Fraud Detection: Integrate advanced AI models for fraud prevention and product authenticity verification. Product Availability Notifications: Users can subscribe for alerts when a specific product is listed.",
    "summary": "Resell Chain: A Decentralized Marketplace for Secondhand Goods"
  },
  {
    "title": "23ID",
    "url": "https://ethglobal.com/showcase/23id-sd4rj",
    "description": "Project Description23ID is a decentralized digital identity and moderation platform that bridges Web2 and Web3 while empowering the next generation of DAOs and Web3 communities. It enables users to create a unique NFT-based identity by linking multiple Web3 wallets with their Web2 profiles—such as those from X or LinkedIn—to form a unified digital presence. By seamlessly aggregating on-chain data (wallet interactions, upvotes, and downvotes) with off-chain metrics (followers, interests, job positions, and post content), 23ID builds a comprehensive reputation profile for each user. Advanced AI agents continuously analyze this combined data, ensuring that reputation scores remain accurate and current. Registered DAOs and communities can leverage this infrastructure to access verified reputation profiles, enabling informed decisions on user admissions and governance. Furthermore, 23ID plays a pivotal role in moderating decentralized communities by automatically reviewing downvotes to promote fair participation and maintain content integrity while adhering to community guidelines. Importantly, no private information—such as names, emails, addresses, or phone numbers—is ever exposed in digital identities or saved on the blockchain, ensuring user privacy is fully maintained. Ultimately, 23ID is the perfect infrastructure to redefine participation and moderation across DAOs and web3 communities.How it's MadeAt the platform’s core, two smart contracts written in Solidity and deployed on the Base Sepolia testnet underpin the system: one allows platforms and DAOs to register for interacting with digital identities, while the other enables users to sign up and manage their unique NFT-based identities. The frontend is developed with Next.js 15 using TypeScript, ensuring a fast and intuitive interface, and is supported by an Express server running on Node.js that handles API requests and backend logic. User data is stored in a MongoDB server, which synchronizes information from various sources, including blockchain interactions and social media. The platform integrates with the Coinbase Wallet API and AgentKit to facilitate seamless wallet connectivity, while a custom scraper (for demo purposes) gathers social media data. This data is then analyzed by AI agents powered by Langchain and using GPT-4o to assess user interactions and build comprehensive reputation profiles. AI agents also analyze downvotes and determine their validity based on community guidelines. The result is a cohesive system that bridges Web2 and Web3, offering intelligent moderation and informed governance decisions for decentralized communities.",
    "summary": "23ID is a decentralized digital identity & moderation platform bridging Web2 & Web3. Link your Web3 wallets & Web2 profiles (X, LinkedIn and more) to create an NFT identity. AI analyzes on-chain/off-chain data to moderate DAOs and facilitate admissions to web3 communities."
  },
  {
    "title": "V-WorkForce",
    "url": "https://ethglobal.com/showcase/v-workforce-qs7qb",
    "description": "Project DescriptionV-WorkForce is a decentralized, AI-powered workforce marketplace designed to revolutionize how individuals and businesses access professional services. By leveraging advanced AI agents, the platform enables users to buy, rent, or deploy specialized agents that automate complex workflows efficiently. Key Features: AI Legal Consultant: This agent addresses client inquiries, offers case analyses, and recommends legal strategies, ensuring timely and accurate legal advice. AI Contract Drafting & Review Agent: Specialized in drafting, analyzing, and securely storing legal contracts, this agent streamlines the contract management process, reducing manual effort and minimizing errors. Technical Integrations: Coinbase AgentKit: Facilitates seamless cryptocurrency transactions within the platform, ensuring secure and efficient payments. Privy: Provides user-friendly authentication mechanisms, enhancing platform security and user experience. Nillion SecretVault: Offers encrypted storage solutions for contracts, ensuring data confidentiality and integrity. OpSec: Enables fully decentralized hosting, promoting a trustless and secure environment for AI services with on-chain execution. Future Expansion: V-WorkForce aims to broaden its suite of AI agents to encompass various sectors, including finance, human resources, healthcare, and more. This expansion will contribute to building a global, AI-driven professional workforce, providing specialized agents tailored to diverse industry needs. Compliance with ETHGlobal Agentic Ethereum Hackathon Requirements: In alignment with the ETHGlobal Agentic Ethereum Hackathon guidelines, V-WorkForce has been developed to meet the following criteria: Integration of AI Agents: The platform showcases innovative use cases of AI agents, particularly in the legal domain, by offering services such as legal consultation and contract management. Decentralized Application Development: V-WorkForce is built as a decentralized application (dApp), ensuring that its services operate on a trustless and secure infrastructure. Utilization of Partner Technologies: The platform integrates with partner technologies like Coinbase AgentKit and Nillion SecretVault, aligning with the hackathon's emphasis on collaborative development. Open Source Contribution: The project's codebase is maintained in an open-source repository, promoting transparency and community engagement. By adhering to these requirements, V-WorkForce not only aligns with the hackathon's objectives but also sets a foundation for future innovations in decentralized AI-driven professional services.How it's MadeV-WorkForce was built as a decentralized AI-powered workforce marketplace that seamlessly integrates AI, blockchain, and decentralized storage technologies to provide professional AI services. Here's a breakdown of how we built it and the key components involved: Tech Stack & Architecture V-WorkForce consists of three major components running independently: 1️⃣ Frontend (Client) Tech Used: Next.js (React.js), Tailwind CSS Purpose: Provides a user-friendly interface for browsing AI agents, making payments, and managing contracts. Key Features: Wallet-based authentication with Privy. AI agent marketplace for easy selection. Secure transaction processing using Coinbase AgentKit. 2️⃣ Agent Service (Backend) Tech Used: Node.js, Express.js, OpenAI API, Coinbase AgentKit Purpose: Manages AI-powered legal agents, including consultation, contract drafting, and compliance checks. Key Features: AI-powered legal consultation & compliance checks using OpenAI's GPT-4 API. Secure contract drafting and validation. AI-to-AI transaction handling using Coinbase AgentKit. 3️⃣ SecretVault Service (Backend) Tech Used: Node.js, Express.js, Nillion SecretVault Purpose: Provides decentralized encrypted storage for legal contracts. Key Features: Secure contract storage & retrieval using Nillion SecretVault. On-chain document verification to ensure trustless storage. 4️⃣ Blockchain & Payments Network: Ethereum (Base Sepolia Testnet) Smart Contracts: Solidity-based payments & AI agent deployment contracts. Wallet Integration: MetaMask, Coinbase Wallet Partner Technology Integrations & Their Benefits Coinbase AgentKit (Onchain Payments & AI Wallets) Enables seamless payments for AI agents using Base Sepolia ETH. Supports agent-to-agent transactions for decentralized workforce automation. Privy (Wallet Abstraction & Authentication) Allows easy authentication via wallets, making the platform secure & frictionless. Users log in with their Web3 wallets and access AI services instantly. Nillion SecretVault (Secure Decentralized Storage) Ensures that legal contracts and AI-generated documents are encrypted and trustlessly stored. Eliminates centralized control over sensitive legal data. OpSec (Decentralized Hosting) Provides censorship-resistant infrastructure for running the AI marketplace. Ensures high uptime & data integrity. Hacky & Notable Implementations 🚀 AI-to-AI Payments: Implemented automated agent-to-agent transactions where AI agents can receive and send funds autonomously. 🔐 Self-Sovereign Data Storage: Contracts never touch centralized databases, ensuring full decentralization. ⚖️ AI Compliance Validation: Integrated an AI-driven compliance officer that checks documents against GDPR, SEC, and other regulations. ⏳ Optimized Transaction Costs: By leveraging Base Sepolia, we reduced gas fees while ensuring on-chain execution.",
    "summary": "V-WorkForce is a decentralized AI-powered workforce marketplace, enabling users to buy, rent, or deploy AI agents for legal, finance, and HR tasks. Powered by Coinbase AgentKit, Privy, Nillion SecretVault & OpSec, it ensures secure, trustless, and on-chain AI services."
  },
  {
    "title": "Proof-of-defeat",
    "url": "https://ethglobal.com/showcase/proof-of-defeat-5oe2z",
    "description": "Project DescriptionProof of Defeat (PoD) is a fully on-chain reinforcement learning framework that enables NFTs to learn and adapt through user interactions. Using Q-learning, each NFT maintains a state-action table, adjusting its strategy based on past games. Unlike static NFTs, PoD NFTs dynamically evolve, becoming personalized AI opponents. PoD encodes player move history as a base-3 integer, allowing efficient on-chain storage. NFTs select actions using an ε-greedy policy, balancing exploration and exploitation. All learning occurs fully on-chain, leveraging Arbitrum's Stylus for better memory performance. Rock-Paper-Scissors is the initial proof-of-concept, as humans exhibit behavioral biases, making them exploitable by reinforcement learning. Research confirms that AI can outperform human players by recognizing patterns and countering them. You can also battle with other NFTs to see how well you've trained your NFT. Beyond RPS, PoD is a modular AI framework for any turn-based game. Developers can integrate their own games and learning mechanisms by implementing chooseMove(), ownerOf() and updateQTable(), allowing NFTs to train and compete without off-chain computation. PoD introduces the first self-learning NFTs, merging AI and blockchain to create truly autonomous, evolving digital assets.How it's MadePoD is built on Arbitrum Stylus, leveraging Rust for smart contract development to enable efficient, on-chain reinforcement learning. Unlike Solidity, Rust allows safer memory management and direct access to WebAssembly (WASM) optimizations, making it ideal for implementing Q-learning within a smart contract. The core learning contract maintains a StorageMap-based Q-table, storing state-action values per user. The history buffer is encoded as a base-3 integer, ensuring compact state representation. Each move selection follows an ε-greedy policy, balancing exploration vs. exploitation, while Q-value updates are fully on-chain, without reliance on off-chain computation. A separate battle contract, deployed on Arbitrum Sepolia, facilitates NFT vs. NFT battles, allowing developers to plug in custom games via a standardized game interface. This modular approach ensures future-proof AI game expansion. I also made a subgraph on The Graph to track information about smart contract events to build a leaderboard and see past interactions of your NFT. The frontend is built in Next.js with Tailwind CSS. Blockchain interactions are handled using ethers.js (v6), and NFT metadata is dynamically generated using Dicebear avatars, ensuring unique visual identity for every trained NFT. I also used Arbitrum's debugging tool, thewizard.app, saved hours of debugging time during contract deployment and testing.",
    "summary": "A fully-on-chain self-learning NFT that trains against you, adapts to your playstyle, and evolves into your ultimate rival."
  },
  {
    "title": "Ether Guild",
    "url": "https://ethglobal.com/showcase/ether-guild-e8nzs",
    "description": "Project Descriptionetherguild.xyz is web app that incentivizes supporting ETH in a way that is both fun and rewarding. The website introduces Guild Quests: an opportunity for the community to signal initiative support through fine-grained, direct funding while achieving shared goals. Quest contracts allow individual funding per initiative with permissions held by a community Guild Officer multisig. Our AI Agent Ethan has read/write access to the chain and the web API to funnel quest ideas and updates from the discord to the dashboard.How it's MadeFor ETH Global, we built a prototype Quest platform with three main components: • etherguild.xyz - A Next.js app to visualize quests, store data, and track progress. We used onchainkit.xyz for the funding flow • @ETHan - an discord + onchain agent that can create and modify quests based on discussion and ideas from guild members. • etherguild-protocol - A set of contracts that enable anonymous donations while meeting non-profit legal requirements.",
    "summary": "Ether Guild is community funding platform working to elevate ETH, the money, in service of Ethereum, the computer."
  },
  {
    "title": "AgentSwap",
    "url": "https://ethglobal.com/showcase/agentswap-vuiws",
    "description": "Project DescriptionAI-powered autonomous agent that leverages AgentKit to seamlessly interact with DeFi protocols. Using the CDP SDK, it can execute swaps, provide liquidity, stake tokens, lend assets, and optimize yield farming strategies—fully onchain. Designed for hands-free DeFi management, the agent can automate the portfolio with a simple message like 'automate my portfolio\"How it's MadeTech Stack & Architecture • AgentKit: Core framework enabling AI-driven onchain interactions. It provides seamless access to crypto wallets and smart contracts. • CDP SDK: Handles contract deployments, token swaps, transfers, lending, staking. • React: Frontend interface for user interaction and strategy customization.",
    "summary": "An AI-powered autonomous agent using AgentKit to execute DeFi actions like swaps, lending, staking, and yield farming. Integrated with the CDP SDK for seamless onchain interactions, it optimizes strategies and automates portfolio management in real time"
  },
  {
    "title": "Battle Bots",
    "url": "https://ethglobal.com/showcase/battle-bots-4eq53",
    "description": "Project DescriptionBattle Bots is an exciting robotics competition platform that combines engineering, programming, and strategic thinking. Here's a comprehensive breakdown of the project: Core Concept: Battle Bots is a competitive robotics platform where participants design, build, and program their own combat robots to compete in head-to-head arena battles. The project emphasizes both hardware and software development skills, creating an engaging environment for learning and competition. Technical Components: Robot Building System: Modular component system allowing for diverse robot designs Customizable chassis, weapons, armor, and mobility systems Various sensor options including cameras, proximity sensors, and accelerometers Power management systems and battery optimization Weight class divisions to ensure fair competition Programming Interface: User-friendly IDE for robot programming Support for multiple programming languages (Python, C++, JavaScript) Real-time debugging and testing capabilities API for sensor integration and motor control Machine learning capabilities for advanced AI development Battle Arena: Dynamic battle environment with various terrain types Hazards and interactive elements Built-in scoring system Real-time damage tracking Safety containment systems Gameplay Elements: Battle Modes: 1v1 Combat Team Battles King of the Hill Capture the Flag Survival Mode Scoring System: Damage points Control points Aggression score Strategy bonus Style points Educational Value: Hands-on experience with robotics and electronics Real-world programming applications Problem-solving and strategic thinking Engineering principles and mechanical design Project management and teamwork skills Competition Structure: Regular season tournaments Regional championships Global championship events Different skill divisions Team and solo categories Community Features: Online marketplace for components Design sharing platform Tutorial system Community forums Live streaming integration Future Development: VR/AR spectator mode Advanced AI tournaments Custom arena editor Cross-platform support Global ranking system This project aims to create an accessible yet challenging platform that combines the excitement of competitive robotics with educational value, fostering a community of innovators and engineers while providing entertainment for participants and spectators alike.How it's MadeCore Infrastructure: Backend Architecture: ElizaOS as the core operating system for robot control systems ExpressJS for the REST API and server infrastructure Hardhat for smart contract development and testing CoinbaseSDK for handling in-game transactions and marketplace features System Components: Robot Control System: ElizaOS provides real-time control and sensor processing Custom middleware for sensor data integration Real-time physics engine for accurate battle simulation WebSocket implementation for low-latency control Smart Contract Integration: Hardhat development environment for deploying and testing contracts Smart contracts handle: Robot ownership and trading Tournament logistics Prize distribution Marketplace transactions Server Architecture: ExpressJS handles: User authentication Match-making Tournament organization Real-time game state management API endpoints for robot control Notable Technical Solutions: Performance Optimizations: Custom binary protocol for minimal latency in robot control Implemented WebRTC for peer-to-peer robot battles Distributed physics calculations between client and server Interesting Hacks: Modified ElizaOS kernel for sub-millisecond response time Created a custom memory management system for real-time battles Implemented a rollback netcode system for lag compensation Partner Technology Integration: CoinbaseSDK powers the entire economic system: In-game currency Component marketplace Tournament entry fees Prize distribution Database Architecture: MongoDB for user data and robot configurations Redis for real-time game state and caching Elasticsearch for component marketplace search Development Tools: Custom CLI for robot development and testing Automated testing framework for robot behaviors Simulation environment for offline testing Technical Challenges Overcome: Latency Management: Implemented predictive movement algorithms Created a custom state synchronization system Used WebRTC for direct peer connections Security Measures: Anti-cheat system using client-side and server-side validation Secure robot control protocol Protected smart contracts with extensive testing Scalability Solutions: Microservices architecture for different game components Kubernetes for container orchestration Auto-scaling based on player count This technical implementation allows for a robust, scalable, and secure platform while maintaining the excitement and fairness of robot battles.",
    "summary": "Battle Bots: Build and program your own custom combat robot to compete in thrilling arena battles! Use strategy, engineering skills, and coding prowess to outmaneuver opponents with weapons, defenses, and tactical AI. May the best bot win!"
  },
  {
    "title": "Synapse Treasury",
    "url": "https://ethglobal.com/showcase/synapse-treasury-q898y",
    "description": "Project DescriptionCore Concept Synapse-Treasury is a next-generation decentralized autonomous organization (DAO) that integrates human governance with AI-powered autonomous agents to optimize treasury management. The system creates a symbiotic relationship where: Human members participate through ETH deposits and proposal voting AI agents act as proactive stewards, analyzing market conditions and executing DeFi strategies Smart contracts enforce trustless collaboration between all parties Membership & Governance ETH Deposit = Membership: Users become DAO members by depositing ETH into the treasury. Deposits are converted to WETH for protocol consistency Members receive 100 voting power (non-transferable) Members can create proposals for treasury actions Autonomous Agent Members: 3 pre-deployed AI agents with 50 voting power each Agents use LLMs + on-chain data to generate proposals Agents vote on proposals using algorithmic assessments Treasury Management Dual-Layer Architecture: Liquid Assets: Directly controlled by the DAO DeFi Positions: Automated deposits/withdrawals via Aave Autonomous Rebalancing: Dedicated agent monitors asset allocations Triggers swaps via Uniswap when thresholds are breached Example: Maintains 30% WETH, 40% Stablecoins, 30% Altcoins Proposal System Proposal Types: Type Initiator Example Actions DEFI_DEPOSIT Agent \"Deposit 100 ETH to Aave at 4.2% APY\" DEFI_WITHDRAW Member \"Withdraw 50 ETH from Aave for liquidity\" AGENT_ADDITION Member \"Deploy new risk-analysis agent\" Voting Mechanics: Quorum: 20% of total voting power required Majority: YES > NO votes Agent Voting: AI agents auto-vote based on treasury health metrics Smart Contract Stack SynapseProposals.sol Manages membership and voting Processes proposal lifecycle (create → vote → execute) Enforces quorum/majority rules Treasury.sol Holds ERC20/WETH assets Interfaces with Aave/Uniswap Implements autonomous rebalancing Agent Infrastructure On-Chain: Pre-configured agent addresses with voting rights Off-Chain: LLM-powered analysis engine (Node.js) Monitors: Aave interest rates Token price volatility (Chainlink) Liquidity pool ratiosHow it's MadeI built this project as a decentralized treasury management and governance system that integrates several cutting-edge protocols and tools from the Ethereum ecosystem. The core idea is to maintain a treasury that can automatically rebalance assets and enable community-driven proposals to manage funds. Here’s how it all fits together: Technologies and Tools Smart Contracts in Solidity: I developed two primary smart contracts: Treasury.sol: This contract manages funds across multiple assets (WETH, USDC, DAI, etc.) and interacts with external protocols. It uses: Aave Integration: Deposits and withdrawals to earn yield while tracking principals. Uniswap Integration: For executing token swaps during rebalancing. Chainlink Price Feeds: To get up-to-date asset values. OpenZeppelin’s ReentrancyGuard: To protect against reentrancy attacks. Internal accounting via mappings to track token balances, yield generated, and asset configurations. SynapseProposals.sol: This contract provides a governance layer. Authorized proposers and agents can create proposals (for investments, DEFI deposits/withdrawals, etc.), vote on them, and, if approved, trigger treasury actions. It ensures that proposals adhere to rules like minimum quorum and majority votes before executing treasury actions. Development Environment: I used Hardhat as my primary development and testing framework. Hardhat allows me to compile, test, and deploy contracts seamlessly. I configured Hardhat to use the latest Solidity version (0.8.20) along with optimization settings (including the viaIR pipeline) to help mitigate EVM stack issues. RPC and Deployment Infrastructure: I use Infura as my RPC provider, which gives me reliable access to the Sepolia testnet. Environment variables in a .env file (kept out of version control via .gitignore) hold sensitive details like the RPC URL, private key, and Etherscan API key. AgentKit from Coinbase: For the rebalancing automation, I integrated Coinbase’s AgentKit. The agent continuously monitors treasury allocations by querying functions like getWethAllocation() and getTotalValue(). When the ETH (WETH) allocation falls outside predefined thresholds, it triggers an action that calls checkAndRebalance() on the Treasury contract. Additional Tools: I also used OpenZeppelin libraries, Chainlink contracts, and Uniswap’s v2-periphery package to provide robust implementations of standard functionalities, such as ERC20 interactions and secure swapping methods. Treasury Management: The Treasury contract keeps an internal ledger (using mappings) of the assets held, their yield, and deposits made into Aave. It uses Chainlink oracles for accurate pricing and Uniswap for performing token swaps during rebalancing operations. Governance Through Proposals: The SynapseProposals contract allows authorized users to create proposals for treasury actions. Votes are tallied based on pre-assigned voting power, and once a proposal meets the quorum and majority criteria, it triggers treasury functions (like depositing into Aave or executing fund transfers). Automated Rebalancing via AgentKit: Coinbase AgentKit monitors treasury allocations on a regular interval. When imbalances are detected (e.g., ETH allocation deviates from a target range), it automatically triggers the Treasury’s rebalancing function. This integration automates what would otherwise be a manual process, saving time and reducing the chance of human error. One particularly interesting (and hacky) aspect is the use of an internal mapping (tokenBalances) to track asset holdings across multiple protocols. This allows the contract to compute asset values and perform rebalancing calculations even when funds are spread between on-chain balances and external protocols like Aave.",
    "summary": "Agentic DAO Treasury Manager: A system that allows a DAO to manage its treasury funds autonomously"
  },
  {
    "title": "smartsave",
    "url": "https://ethglobal.com/showcase/smartsave-iijxs",
    "description": "Project DescriptionSmartsave is an app designed to transform the way you save Bitcoin by automating your investment strategy with the power of AI on the Base network. Imagine an intelligent system that not only helps you set aside Bitcoin effortlessly but also optimizes your savings based on real-time market trends and personalized financial goals. At its core, smartsave tackles the common challenge of inconsistent saving habits by leveraging advanced AI agents. These smart agents continuously analyze market data and user behavior to determine the best moments to auto-save, ensuring every buy is strategically timed. With an intuitive, user-friendly interface, smartsave makes it simple for everyone—from crypto newcomers to seasoned investors—to build a robust Bitcoin reserve without the need for constant manual intervention. Of course, this app could work for any asset. Security and efficiency are at the heart of our solution. By integrating directly with AgentKit by Coinbase and the Base blockchain, smartsave guarantees transparency and safety for every transaction, while our AI-driven approach adapts to market fluctuations, providing a dynamic and risk-aware saving experience.How it's Madesmartsave has three main components: the app, api and agents. The app is build with Swift and SwiftUI. It uses the API (implemented in Next.js/Typescript and hosted on vercel) to communicate with the agents. The agents are based on Coinbase's AgentKit. The app calls in total four endpoints on the vercel API (implemented with Next.js). /accoount: to init/create/deploy the agents (will auto-create wallet with agentkit for user) /balance: to retrieve the cbBTC balance for the given account /dca: to configure the DCA settings for the agents /transactions: to fetch transactions for given account of the user (used in the app to display the bars graph and transactions list) The agents project uses Fastify to expose an API that can be called from the API hosted on vercel. Core Features: Automated Bitcoin buying on Base network using cbBTC with ETH Price monitoring using CoinGecko API Gas fee analysis using BlockNative API DCA (Dollar Cost Averaging) implementation Main Components: runAgents.ts: Main code that coordinates buying decisions coingecko.ts: Price fetching and analysis from CoinGecko blockchative.ts: Gas fee analysis from BlockNative constant.ts: Configuration constants like contract addresses Key Workflows: Fetches current BTC/ETH prices Analyzes 7-day price averages Checks gas fees on Base network Agents makes buy/no-buy decisions based on: Price trends Gas fee conditions DCA target amounts Two Agents are used Oracle Agent: Acts as decision maker: Processes price and gas data- Returns yes/no decision for buying Evaluates market conditions through natural language Wallet Agent Handles transaction execution Manages DCA tracking Performs ETH to cbBTC swaps Interacts directly with Base network The system works sequentially: Oracle Agent decides if market conditions are favorable If yes, Wallet Agent checks DCA amount and executes trade If no, cycle waits for next interval APIs Used: CoinGecko API for crypto prices BlockNative API for gas fees Base network for transactions",
    "summary": "smartsave - an app for auto-saving bitcoin on Base powered by AI agents."
  },
  {
    "title": "Manny AI 🦣",
    "url": "https://ethglobal.com/showcase/manny-ai-7xgdg",
    "description": "Project DescriptionManny is an innovative conservation-focused project that integrates AI, blockchain, and immersive technology to deepen emotional connections between donors and wildlife. Each adopted elephant is represented by an Eliza AI agent, simulating its personality and behaviors. These AI agents autonomously manage donor interactions, post real-time social updates, and trigger NFT minting on Base Sepolia. The NFTs evolve based on the elephant’s milestones, offering a dynamic, engaging experience for supporters. Additionally, React Three-powered 3D visualization allows donors to explore lifelike representations of their adopted elephants, reinforcing empathy and trust in conservation efforts.How it's MadeAI Agents (Eliza Framework & AgentKit) Eliza AI agents simulate elephant personalities and interact with donors. Agents post updates on Twitter/X using RAG-enhanced natural language processing. JSON-based character files define traits, behaviors, and blockchain wallet links. Blockchain & NFTs (Base Sepolia) Coinbase AgentKit enables AI-driven NFT minting. NFTs evolve with the elephant’s growth milestones (e.g., first swim, weight gain). Low-cost Base Sepolia transactions facilitate donor participation. 3D Visualization (React Three & AR) Lifelike 3D models are created via Blender and exported to GLTF format. Real-time updates sync model changes with blockchain milestones. AR integration allows donors to project elephants into their surroundings. Social Automation AI-generated tweets based on the elephant’s history provide real-time updates. Engagement-driven \"care badges\" are stored on-chain, offering exclusive AR experiences. Future plans include multi-chain NFT interoperability, decentralized 3D rendering, and community governance via DAOs. Manny redefines conservation by merging AI, blockchain, and immersive storytelling into an engaging digital experience. 🐘💻🌍",
    "summary": "A Wildlife Conservation project  that  project enables AI agents to autonomously manage donor interactions, mint NFTs, generate social updates, and provide 3D representations of adopted elephants, fostering deeper emotional connections between donors and wildlife."
  },
  {
    "title": "SizeMattersAI",
    "url": "https://ethglobal.com/showcase/sizemattersai-qs5ia",
    "description": "Project DescriptionOur cutting-edge AI agent is built on the robust ElizaOS framework, seamlessly integrating with major social media platforms like Twitter, Reddit, Telegram, and Discord. Designed for real-time engagement, it interacts with your community to spark dynamic conversations, share valuable insights, and provide both entertainment and education. At its core, our AI agent leverages a fine-tuned Gaianet model, trained on a vast collection of research papers and size enhancement techniques. This specialized training ensures that the agent not only delivers accurate and insightful information but also keeps the community engaged with fun and lighthearted interactions. Whether it's through hilarious predictions, witty roasts, or deep, interactive discussions, the AI agent never fails to entertain and educate simultaneously. Powered by the Autonome framework, the agent operates autonomously, making it the perfect companion for both casual chats and more complex conversations. It keeps things fresh, interactive, and fun, whether you're looking for a challenge, some light-hearted humor, or expert advice on personal growth. Join the fun, interact with the agent, and watch as it effortlessly builds a vibrant community while delivering value every step of the way.How it's MadeOur AI agent is powered by the ElizaOS framework, seamlessly integrating with Twitter, Reddit, Telegram, and Discord to interact with our community in real time. At its core, we’ve fine-tuned a Gaianet model, trained on extensive research papers focused on size enhancement techniques—ensuring both engagement and education. The agent is deployed on the Autonome framework, allowing it to operate autonomously while delivering hilarious predictions, witty roasts, and interactive discussions. It doesn’t just measure—it entertains, educates, and builds a movement. Whether you're looking for a laugh, a challenge, or even some growth advice, the AI agent is here to keep the conversation going and the community engaged. 🚀 Join the fun and put it to the test!",
    "summary": "Meet Size Matters AI 🤖🍌 - the first AI-powered schlong inspector! Send a pic, get a brutally honest size prediction, plus growth tips & roasts. Live on X, Farcaster, Telegram & Discord, measure up & win $SIZE tokens! 🔥💰"
  },
  {
    "title": "Ailfred",
    "url": "https://ethglobal.com/showcase/ailfred-08pdc",
    "description": "Project DescriptionThis project combines a state channels hub with a browser-based frontend to allow users to interact with DeFi protocols through a sophisticated AI butler interface. The hub is designed to facilitate seamless token deposits, withdrawals, and management across various DeFi protocols, with a focus on AAVE lending operations on the Base network. The butler interface provides an intuitive, conversational way to handle complex DeFi operations while maintaining high security and efficiency.How it's MadeThis project uses the @statechannels browser-based wallet and CDP Wallet Provider behind the scenes to connect to Base network and AAVE protocols. We used React with TypeScript for the frontend and integrated several key technologies: Agent Framework: LangChain for AI conversation management OpenAI GPT-3.5 for natural language processing AgentKit from Coinbase for secure wallet operations DeFi Integration: AAVE protocol integration for lending operations Base network integration for token management Custom smart contract interaction layer for secure transactions Frontend Components: React with TypeScript for UI components MobX for state management Tailwind CSS for styling CDP Wallet Provider for wallet operations Backend Services: Node.js with TypeScript Ethers.js for blockchain interactions Custom message formatting system for maintaining butler persona The unique aspect of this project is the combination of AI-driven conversation with secure DeFi operations, all while maintaining a consistent butler persona that makes complex DeFi operations accessible to regular users. The state channels implementation ensures efficient transaction processing while keeping gas costs minimal.",
    "summary": "Ailfred: Your Personal DeFi Butler - An AI Agent that Makes Web3 Investing Sophisticated Yet Simple"
  },
  {
    "title": "Onchain Buddy",
    "url": "https://ethglobal.com/showcase/onchain-buddy-ypqx5",
    "description": "Project DescriptionOnchain Buddy is an AI assistant that helps beginners understand their blockchain activities. It analyzes transactions, explains them in simple terms, and guides users to learn about blockchain in a safe and proper way. As your personal blockchain companion he acts as a real-time translator between complex blockchain operations and everyday language. To making your first token swap or approving a new smart contract, it break down each action in clear and understandable explanations.How it's MadeHow it's made OnchainBuddy was built using a combination of modern technologies and AI capabilities to create an educational blockchain experience. Here's a detailed breakdown of the technical implementation: Core Architecture Frontend Layer Built with Next.js for optimal performance and SEO Styled using TailwindCSS for rapid UI development Enhanced with Material-UI (MUI) components for consistent design Framer Motion for smooth animations and transitions Real-time updates using React hooks and state management AI Agent Layer Powered by GPT-4 for natural language processing Integrated with AgentKit (Coinbase's AI framework) for: Transaction analysis Risk assessment User-level appropriate explanations Learning path optimization Blockchain Integration Built on Base Network for reliable and cost-effective transactions Used OnchainKit (Coinbase's toolkit) for seamless wallet integration Implemented Ethers.js for blockchain interactions: Transaction monitoring Contract interaction Event parsing Gas estimation Backend Infrastructure Node.js backend with Express Prisma for database management BaseEther for Base Network RPC calls Basescan API for transaction verification Notable Technical Features Dynamic Learning System The XP and leveling system uses a complex algorithm that considers: Transaction complexity Risk assessment scores User interaction frequency Contract interaction diversity Real-time Transaction Monitoring Implemented a WebSocket connection to monitor blockchain activities with: Instant transaction detection Automatic risk assessment Real-time notifications Custom event parsing Smart Contract Analysis Created a custom analysis pipeline that: Verifies contract security Analyzes gas usage patterns Monitors value transfers Evaluates interaction complexity Partner Technologies Integration Base Network Utilized Base Network for its optimal performance and lower gas fees Leveraged Base's RPC endpoints for reliable blockchain data Integrated with Basescan API for transaction verification Coinbase Tools AgentKit: Implemented for AI agent capabilities and blockchain analysis OnchainKit: Used for robust wallet integration and transaction handling Thank's for this geat opportunity, It was a pleasure to learn new technologies :)",
    "summary": "AI assistant to help user understand blockchain transactions"
  },
  {
    "title": "Coupled Markets",
    "url": "https://ethglobal.com/showcase/coupled-markets-f3vfv",
    "description": "Project DescriptionOur project protects Uniswap V4 liquidity providers from IMPERMANENT LOSS and ASSURES MARKET-LEVEL SWAP rates for the swappers in those pools. The swappers suffer no gas cost for complex functionality introduced by Uniswap V4 hooksThis has been the downside of complex hook designs in the past. Our project consists of a combination of a Uniswap V4 Hook and a HookAgent which is authorized to interact with the Hook. This combination allows for improving the returns for the liquidity providers while maintaining market rate swap rates for all liquidity pools which attach to the Uniswap V4 Hook. Similar functionality has been developed in the past with complex hook functions that react on oracles or functionality that is running inside AVS systems. However, these approaches suffer often from high complexity and high gas cost that are born by the swappers in the pool. Our hook will typically be tied to liquidity pools that serve as secondary markets servicing utility demand rather than investment, for instance users that need ETH or other utility tokens for gas, or currency conversion for cross boarder payments. As initial functionality, we are building a liquidity pool coupled to a Coinbase market, namely offering liquidity for assets at prices that are close to the Coinbase market price. The flow is as follows: The HookAgent queries for market rate for the pool swap pairs under his control Whenever he finds a pool which is away from the market, he sets a one-sided damped rate for the hook. This rate is still better than the market rate but less detrimental to the liquidity providers than the market rate. The agent posts the information on X and other channels to attract arbitrageurs who bring the normal pool rate again back to market. Arbitrageurs or the Agent himself can come in to do this if they have liquidity or access to the counterswap on- or offchain The gain from the damped swap is cashed in by the hook himself. He uses it to fund his cost but mostly redistributes it to the liquidity providers When a pool is not out of balance any more, the agent resets the damping in the pool through the hook How it's MadeOur project is based UniswapV4 Hook contract which is built from scratch and Agent developed with the Coinbase AgentKit framework. We have built a solidity smart contract and deployed on Base Sepolia at 0x42Ea1FCDD265AB450936aCcAa6A10a82561a5044. We have used the Foundry framework and performed extensive unit and integration testing. All is documented in our repo. The Hook contract integrates with the Uniswap V4 protocol deployment in Base Sepolia We have done several attempts for the agent which are also in the GitHub repo. The most complete version is the agentkit Typascript version. It has major additions to the agentkit template: (1) AgentHook Service-Providers which allows the agent to read and write on the hook contract (2) Service-Providers which allow the agent to perform swaps and liquidity position modifications to arbitrary pools attached to Uniswap V4. (3) Action-Providers for allowing the steering of the bot from the prompt (4) Action-Providers for swappers and liquidity providers for steering from the prompt Further additions and optimizations are necessary on the agent going forward.",
    "summary": "DeFi Innovation: Coupling of Uniswap V4 Hook with AI Agent. Allows for improving the returns for the liquidity providers while maintaining market rate swap rates for all attached liquidity pools. Unique to our design: Minimal gas cost for swappers despite rich hook functionality"
  },
  {
    "title": "Coop Tales",
    "url": "https://ethglobal.com/showcase/coop-tales-153g7",
    "description": "Project DescriptionThe AI-driven storytelling protocol is built to empower lore-centric projects—such as NFT communities, onchain gaming worlds, and creative DAOs—to collaboratively create and evolve rich, shared narratives. Using the Farcaster Frame and onchain agents, this protocol guides users through an interactive, dynamic storytelling experience where they co-create adventures with the agent in real-time. In this protocol, storytelling is not just a submission of text—it’s an interactive conversation. The AI agent serves as a narrator, guiding users through a \"choose your own adventure\"-style experience. The user is prompted to imagine and expand upon different parts of the narrative, creating a highly personalized and immersive story. How It Works Story Prompts & Interactive Narration: Users enter the storytelling protocol through the Farcaster Frame interface. The AI-powered narrator agent initiates the story with an engaging prompt. As the interaction progresses, the agent offers narrative choices, asking the user what happens next and guiding them through a co-creative storytelling arc. Real-Time Storytelling: The user contributes by expanding key scenes or making choices that shape the adventure’s direction. These contributions are recorded in the protocol, allowing the AI to track story developments and guide further exploration. Personality Trait Recognition: As the user interacts with the AI, the protocol observes their narrative style and choices to identify personality traits (e.g., cautious, curious, aggressive). These traits are stored and referenced in future iterations of the story to create a more tailored experience. Automated Summarization: After each storytelling session, the protocol generates a summary of key narrative elements—characters, plot points, and changes to world lore. This summary can be shared with the user and the broader community to track the evolution of the shared universe. Future Iterations: In future versions of the protocol, voting mechanisms will allow communities to influence the direction of the evolving narrative canon by selecting key story arcs or lore updates. Who It’s For This protocol is designed for communities and projects where collaborative storytelling and world-building are central. Key communities already using or testing this protocol include: Arrowheads (Higher Network & $ARROW Token): Arrowheads are onboard to test the protocol as part of their tabletop role-playing game (TTRPG) project. Nouns DAO (Proposed): We are working on a proposal to integrate this protocol into Nouns DAO, allowing their community to expand lore and interactive experiences tied to their NFT project. Metasuyo (Internal Use): We are using the protocol for \"Dreams of Kamasun,\" a story exploring an alternate timeline where the Inca Empire never fell. We also aim to see other new and veteran projects leverage the protocol to create immersive lore, interactive storytelling experiences, and dynamic narratives. Key Features AI-Guided Interactive Narration: Users collaborate with the AI agent, expanding stories through real-time dialogue and choices. The storytelling experience is designed like a choose-your-own-adventure, with the agent acting as a narrator that prompts users to imagine and shape the events. Personality-Driven Story Customization: The protocol stores personality traits detected in user interactions. For example, a cautious user may face different challenges or story options in later interactions than a curious or aggressive user. Story Summarization & Lore Tracking: After each interaction, the AI aggregates and summarizes key story elements, ensuring that the evolving world lore remains coherent and easy to follow. Farcaster Frame Integration: The protocol is built on Farcaster, providing seamless real-time interactions within a decentralized communication network. Future Expandability: The protocol is designed to accommodate additional features, such as voting for decentralized decision-making on story arcs, NFT integrations, and more. Example Use Case (Placeholder for Specific Story) A user from the Arrowheads TTRPG community interacts with the protocol. The AI introduces a quest tied to a crumbling faction in the game world. Through interactive dialogue, the user chooses to negotiate with the faction leader, revealing hidden lore. The protocol detects the user’s cautious approach and notes this trait for future encounters. A story summary is generated, highlighting key developments and potential next steps for both the user and the community. How We’re Testing It Arrow TTRPG (Arrowheads): The protocol will support interactive world-building sessions where players collaborate with the AI agent to shape game events, factions, and lore. The evolving world will reflect both player choices and story prompts guided by the AI. Dreams of Kamasun (Metasuyo): This narrative explores a parallel timeline where the Inca Empire thrives in a fusion of ancestral spirituality and digital technology. Players interact with the dream guide Qawakun and Sami, a seeker using the astral-digital network Ankanet to uncover a lost figure named Kap Naem. Nouns DAO (Proposal): We are in discussions to propose this protocol to Nouns DAO, allowing Nouns holders to collaboratively build lore and drive new interactive projects tied to their decentralized community. Why It Matters Decentralized communities often struggle to coordinate large-scale storytelling and lore-building. Existing tools don’t support collaborative story interaction or creative decision-making at scale. This protocol fills that gap by combining AI-driven narration, dynamic story expansion, and personalized experiences tailored to each user’s input. By enabling structured yet flexible storytelling, this protocol enhances engagement, fosters creativity, and builds stronger emotional connections within lore-centric projects. Our goal is to make decentralized storytelling accessible and powerful, inspiring both creators and communities to bring their worlds to life.How it's MadeCoinbase Agent Kit: We use the Coinbase Agent Kit as the foundation for our AI-driven agent. This kit provides the core infrastructure to manage user interactions, execute conversations in real time, and interface with decentralized communication layers. Its modular design allows us to rapidly implement features like prompts, story-guided interactions, and summarization logic. Farcaster Frames: Farcaster Frames serve as the primary interface for users. Frames enable decentralized, real-time communication, ensuring that every interaction between users and the AI agent happens in a permissionless, distributed environment. The frame acts as a container for both the storytelling flow and lore updates, making it easy to onboard users without reliance on centralized platforms. Privy for User Data Management: To enhance personalization, we use Privy to securely store and access offchain user data, such as personality traits detected during interactions (e.g., cautious, curious, or bold). This data enables the AI to adapt future story arcs to fit user behavior, creating a more tailored narrative experience without compromising privacy or decentralization. GPT-based Language Model: We implemented a large language model (e.g., GPT-4) to drive narrative generation, prompt creation, and summarization. This AI model allows for dynamic, context-aware storytelling, making each session feel personal and immersive. The model generates both branching story arcs and real-time feedback.",
    "summary": "AI-driven storytelling protocol using Farcaster Frame and onchain agents for lore-centric projects like NFT communities, onchain games, and DAOs. Users co-create world lore through interactive stories, receive automated summaries, and shape the evolving narrative canon."
  },
  {
    "title": "Agent Bravo",
    "url": "https://ethglobal.com/showcase/agent-bravo-fzn9n",
    "description": "Project Description🎯 Overview Agent Bravo is a framework that enables delegates to operate AI agents capable of participating in any GovernorBravo-compatible governance system. Designed with autonomy in mind, Agent Bravo provides the essential functionalities required for seamless governance participation. ✨ Features 📜 Policy Enactment Enact policies (i.e., system prompts) provided by the agent's delegate owner. 📋 Governance Proposal Review Analyze and review governance proposals (i.e., user prompts). ⛓️ Onchain Voting Cast votes on proposals directly on the blockchain. How it's MadeWe use CrewAI and create custom tools for the agent to interact onchain and online. Using CrewAI's framework, we create agents and tasks that make up the Brave Agent system. We use Lovable AI to make the applications front end interface. The integration with onchain uses viem and custom CrewAI tools.",
    "summary": "Ehhh, not buyin' it... Agent Bravo is a framework for delegates to operate AI agents that have the capability of participating in any GovernorBravo-compatible governance systems."
  },
  {
    "title": "LFG",
    "url": "https://ethglobal.com/showcase/lfg-0mdqq",
    "description": "Project DescriptionWe built LFG (Looking For Group) as a decentralized talent matching platform that utilizes smart contracts for efficient job management and payment handling. The onboarding process begins by deploying a personal Virtual Smart Agent (VSA) through a chosen client (Telegram, Discord, Web App, and more). During this onboarding, the agent employs a chat-style interface to gather important profile information, such as your role (developer, project owner, or both), technical skills (e.g., Rust, Solidity, React), availability, and past experiences via platforms like GitHub or through brief coding challenges. The process integrates Privy to securely connect your wallet, ensuring that all on-chain interactions are linked to your verified identity. Once deployed, your VSA functions as an autonomous representative. It continuously scans the network for bounties that match your skill set and preferences. For instance, if you are a Rust developer, your agent will filter and identify bounty postings specific to Rust. When a suitable bounty is located, your agent automatically negotiates and accepts the task on your behalf, locking the required funds into an on-chain BountyEscrow contract. This escrow mechanism guarantees trustless and secure payments: upon successful completion of the task and verification by the bounty owner, the contract releases the reward (minus a small platform fee) directly to your wallet. To ensure quality, our system includes a verification process. Developers are asked to submit a brief code snippet or complete a mini technical quiz. Successful verification triggers the minting of a verification NFT (or soulbound token) that serves as a skill badge in your wallet—enhancing your matching priority and building trust within the network. While our current focus is on automating the matching of developers to bounties, LFG is designed with long-term scalability in mind. We envision a complete ecosystem where specialized VSAs cater to various industries—from blockchain alpha group vetting to hobbyist communities and beyond. At the core of this future is “Nexus,” an overarching coordinating agent that will enable advanced functionalities such as multi-signature escrow releases and seamless collaboration across industries. In summary, LFG automates the entire opportunity matching process—from intelligent onboarding and skill verification to automated bounty matching and secure on-chain payments—providing a frictionless, trustless, and highly efficient way for individuals to tap into unrealized synergies and opportunities.How it's MadeOur core system, deployed on Sepolia, features a comprehensive smart contract (0x12cc7215E334BA6d89A57460AB94d37C1B5B54a3) that facilitates user registration , job creation with escrow, job acceptance tracking, payment release, and dispute resolution while also collecting platform fees. A key aspect of our platform is the user management and reputation system, which maintains an on-chain record of users, tracks completed jobs, and allows for rating submissions that impact reputation scores. The job management aspect ensures secure fund locking during job creation, tracks job acceptance with enforced deadlines, and includes mechanisms for completion verification and payment release. To address disputes, we developed a system for initiating disagreements that features automated rating adjustments based on outcomes and allows for contract owner arbitration. Economically, the platform automatically collects fees from successful job completions, ensuring sustainability. What sets our implementation apart is the integration of Virtual Smart Agents (VSAs) that mediate all smart contract interactions, triggering functions based on user actions and creating a seamless interface between users and the blockchain. This innovation extends to automated dispute handling, which ties the impact on reputation directly to the results of disputes. We prioritized security with features like deadline-based verification and a reliable escrow system, ensuring protection for both parties involved. By choosing the Sepolia testnet for our deployment, we minimized transaction costs during testing and designed a reputation system that encourages positive behavior. We forked and customized the ElizaOS framework to build our Virtual Smart Agents (VSAs), enhancing it with specialized plugins and adapters for seamless blockchain integration. Our system is designed with a microservices architecture and utilizes Docker containerization, hosted on Autonomous for efficient and scalable agent deployment. On the frontend, we opted for Next.js and React, styled it using Tailwind CSS, and deployed everything on Vercel to ensure optimal performance. For our blockchain and security needs, we implemented Nillion to maintain privacy-preserving on-chain data storage, particularly for sensitive user information. Additionally, we developed custom smart contracts for BountyEscrow, enabling secure and trustless payments. In terms of our development stack, the frontend utilizes Next.js, React, and Tailwind CSS. For the backend, we’re using Node.js version 18 or higher, with a database setup that combines on-chain storage through Nillion and traditional databases. Our testing is thorough, with a comprehensive test suite utilizing Vitest and Jest. Lastly, we manage our packages with PNPM, taking advantage of workspace support for effective monorepo management. Overall, our platform exemplifies how blockchain technology can effectively address real-world challenges in the talent marketplace, providing a trustless environment that is accessible to non-technical users through our automated workflows.",
    "summary": "LFG is a decentralized platform that revolutionizes how opportunities are discovered and captured by combining AI-driven Virtual Synergy Agents (VSAs) with blockchain technology."
  },
  {
    "title": "Degen foudner",
    "url": "https://ethglobal.com/showcase/degen-foudner-knatz",
    "description": "Project DescriptionWe want create platform that allows users to assemble their own team consisting exclusively of AI agents to implement their projects Launching Web3 projects, even the most typical ones, often takes months, with most of the work being routine. Our platform changes this process: We provide users with agents pre-configured to solve specific tasks. They assist at all stages: from idea and development to promotion Also it reduces project launch costs. With our platform, you can assemble the perfect team of AI specialists and focus on the most important thing – creating the product How it's MadeWe developed the backend using C# and JS. We used JS for writing agents because there are more ready-made libraries available for JS. For example, we used AgentKit.js to create an agent responsible for wallet-related actions. We also used Langchain everywhere as the foundation for any agent interactions. In C#, we wrote the main middleware layer. Our plan is that the AI agent functions as a microservice, which connects to the C# server and interacts with it through a unified interface.",
    "summary": "This week, we built a unified AI agent interface, prototyped a manager and developer (AgentKit), and started a Gateway for chat and agent interactions. Design work is underway."
  },
  {
    "title": "$hackathon",
    "url": "https://ethglobal.com/showcase/hackathon-67zvb",
    "description": "Project Description$hackathon began as an innovative experiment on Warpcast: a Clanker token to use its trading fees to fund weekly hackathons. After generating $8K from $2M in trading volume on its first week, and a first edition that had 8 submissions, we had a challenge: How can this system work on its own, without the biases -and limitations- that come from having humans be the judges? So we had the mission to transform this platform into a sophisticated autonomous system that could have the potential of reshaping how we evaluate and reward open source contributions. Our solution tackles complex technical challenges across multiple domains: Autonomous PR Evaluation: Multi-agent AI system analyzes code quality, documentation, and impact Social-Technical Bridge: Seamless integration between Farcaster's social layer and GitHub's development infrastructure Smart Contract Automation: Trustless distribution of rewards to top contributors Educational Feedback Loop: AI-generated insights help developers improve their open source practices The user experience is streamlined through Farcaster Frames, the cutting-edge standard for crypto-social applications. Developers authenticate with both Farcaster and GitHub, submit their PRs, and receive feedback on them. Weekly leaderboards drive engagement and healthy competition, with top contributors automatically receiving shares of $hackathon's trading fees for that given cycle. What makes our project unique is its multi-faceted flywheel effect: Economic: Trading fees → Economical Rewards → Quality contributions → Community growth → Attention for the token → More trading Educational: AI feedback → Better development practices → Higher quality submissions → Content to educate hackers Community: Weekly recognition → Increased participation → Stronger open source ecosystem By combining AI evaluation with transparent rewards, we're not just automating hackathon judging - we're creating a practical, self-sustaining system that defines and incentivizes quality open source development.How it's MadeWe built a production-ready sophisticated multi-layer system that pushes the boundaries of AI, blockchain, and social integration. Technical Architecture: Frontend: Vite + React Farcaster Frame (Deployed on Orbiter) - Delivering a seamless, social-first user experience Backend: Node.js + TypeScript/Koa (Heroku) - Robust API handling and service orchestration Database: PostgreSQL/Prisma - Type-safe data management with complex relationship modeling Smart Contracts: Deployment on Base for transparent reward distribution Authentication: Dual OAuth system connecting Farcaster and GitHub identities Farcaster Feed: Neynar API integration for on-feed interaction between the system and the farcaster community. Innovation through 3 different AI Agents: Hacker Agent: Deep analysis of PR content and impact Judge Agent: Sophisticated evaluation across multiple technical dimensions, assigning a numerical score to each PR in order to them create a weekly leaderboard Payment Agent: Autonomous management of reward distribution Technical Challenges Solved: Designed complex prompt engineering for consistent, educational AI feedback Built secure cross-platform identity verification Farcaster Frame for in-feed PR submissions Implemented automated blockchain payment distribution Development Considerations: Leveraged Farcaster Frames early adoption advantage. We are the first team that manages to authenticate Github profiles inside frames, which gives us an edge in terms of potential evolution of this interaction in the future. Implemented comprehensive error handling for AI evaluations Built scalable infrastructure for growing submission volume Created modular architecture for future enhancements Current Limitations & Opportunities: There is no immediate feedback from the system after a given user submits a Pull Request through the farcaster frame. This could be transformed, to generate a sense of immediacy that can help the trust and attention that people can have towards this system. There is an interesting balance to find between making them wait for the results of a given weekly hackathon and providing them immediate feedback to get that rush of dopamine that is so important in today's world. LLM's are not good with numbers. The scoring accuracy of projects represents opportunities for specialized model fine-tuning, and scaling of this system to potentially create a product that helps companies evaluate the role of their contributors in the evolution of a given codebase. Potential for enhanced community validation mechanisms, with the challenge of people not having enough time to go through production implementation and codebases. This is why AI excels as a solution for this project, because of its almost infinite knowledge and understanding of the code. Scope for expanded educational feedback systems and transforming $hackathon into a platform that educates developers (and people that don't know yet refer to themselves as devs) with the learnings of each cycle. Community: There is a big opportunity to create community around this project, so that the leaderboard and prizes rewarded transform into just one aspect of the flywheel effect that we are proposing. There is value on earning money for being on the leaderboard on a given week, but there is also the value that comes from having those hackers as the example for the rest of the community to follow and learn from. Our solution demonstrates technical sophistication in combining emerging technologies (AI, Frames, smart contracts) to solve a real-world problem, while maintaining a focus on usability and practical application. The result is a functional platform that's already processing submissions and distributing rewards, with clear paths for future enhancement and scaling.",
    "summary": "AI-powered autonomous system that revolutionizes open source evaluation by analyzing GitHub PRs and distributing $hackathon trading fees as weekly rewards. Combines Farcaster Frames, multi-agent AI, and smart contracts to create an infinite, self-sustaining developer ecosystem."
  },
  {
    "title": "Formicarium",
    "url": "https://ethglobal.com/showcase/formicarium-061z1",
    "description": "Project DescriptionThis project combines an AI agent with a blockchain-based marketplace for the manufacturing services of autonomous machines. The project features a browser-based application that enables users to interact with an AI agent to express their wishes for a personalized product. Through a chat interface, users communicate their preferences, and the AI agent processes the request and generates an optimized manufacturing plan. In the current version, customers can request a customized 3D printed keychain by providing design idea that they want to be printed. The AI agent first presents a 2D rendering of the design and then provides the corresponding STL file for 3D printing. In addition to providing the design, the AI agent communicates directly with manufacturing machines, sharing relevant information with both the machines and the customer. This interaction ensures that the customer receives all the necessary details about the product and service before finalizing their order. A blockchain network underpins the entire system, offering a decentralized marketplace where machines can advertise their services through smart contracts, and users can post their orders. When a customer is satisfied with their order details, refined through ongoing chats with the AI agent, they lock the funds for the service (in USDC tokens) within the smart contract. The manufacturing machines then review the order, including details like price, and determine whether they agree to fulfill it. Once a machine accepts, it signs an agreement, and the order is placed in a queue for execution. Orders are processed based on a pricing mechanism that considers both the minimum price for the service and the actual price set by the customer. This allows customers to expedite their orders by providing additional funds to accelerate execution. Throughout the manufacturing process, customers can track the progress of their orders, even watching a livestream of their product being produced. Upon completion of the order, the locked funds for service provision can be released, provided there are no disputes about the execution of the service.How it's MadeThis project leverages a variety of technologies. For AI agent we used AgentKit from Coinbase Developer Platform to enable chat functionality and interaction with smart contracts. For communication between the frontend and manufacturing machines (service providers), we employed FastAPI. A special function for generating a 3D model from grayscale image in the form of a keychain was created using the trimesh Python library. For smart contract development we used Hardhat. We conducted tests on the Base Sepolia and Arbitrum Sepolia testnets, and the smart contract was also deployed on the Base network for production. The AgentKit was also employed for decision-making of the autonomous 3D printer agent. Communication between the AI agent and the 3D printer was handled via FastAPI, and Octoprint was used to manage the interaction between the 3D printer agent and the physical 3D printer.We also used Next.js to build the frontend of the application and the Shadcn boilerplate from Horizon AI to enhance the design of the user interface. To generate the brand image and logo, we utilized Qwen. For logo creation and frontend assets we used Inkscape. Figma was used to design the user interface, ensuring a user-friendly layout, and Canva was leveraged for creating presentation slides.",
    "summary": "A decentralized platform where AI coordinates a fleet of autonomous machines and robots to manufacture customized products."
  },
  {
    "title": "Plutus",
    "url": "https://ethglobal.com/showcase/plutus-c8htg",
    "description": "Project DescriptionPlutus is a decentralized finance (DeFi) protocol designed to empower users with advanced wallet management, tracking, and AI-driven investment decision-making capabilities. The platform integrates with privy and agentkit by coinbase to provide a seamless experience for managing wallets, staking assets, and leveraging AI agents to assess market trends and optimize investment strategies. Features Wallet Manager Manage multiple wallets effortlessly. Track wallet balances, transactions, and activity in real-time. Secure authentication via email using Privy. AI Agent for Investment Decisions Analyze market sentiment and mind share through Twitter impressions and metrics. Evaluate market cap data to make informed investment decisions. Provide personalized staking recommendations powered by OpenRouter API and Hyperbolic API. Staking Stake assets directly through the dApp using Coinbase Agent Kit. Fetch reward rates from Staking_Rewards_API. Monitor staking performance and rewards in real-time. Chatbot Integration Interactive chatbot powered by OpenRouter API for staking recommendations and wallet insights. Access on-chain data via Hyperbolic API for accurate and up-to-date information. How it's MadeThis project uses policy engines from privy to server wallets enabling onchain interaction by coinbase and staking through agentkit we have also used eigenlayers hyperbolic for ai interaction in fetching twitter metrics. Privy Email Authentication: Secure login using @privy/react-auth library. You can find the login logic in this file Wallet Connection: Link wallets seamlessly using the linkWallet function from the usePrivy hook. It has been implemented in the Navbar. Server Wallet Creation: Create server-side wallets using the Privy TypeScript SDK (@privy/server-auth). A user interface is provided for server wallets through dedicated server wallet routes, enabling users to seamlessly access and utilize the full functionality of server wallets. Transaction Management: Users can send transactions securely through server wallets. Policy Engine: Define and enforce transaction rules via API calls to https://api.privy.io/v1/policies. The policies are created with this logic and assigned to server wallets on their creation. 2. Coinbase Agent Kit Lido Staking: Enable staking through the Coinbase Agent Kit. Automated Transactions: Execute automated transactions via Coinbase Wallet. Balance Fetching: Retrieve wallet balances using the Coinbase Agent Kit. 3. Cookie API Fetch Twitter data through Twitter agents to analyze social media trends and sentiment. 4. Staking_Rewards_API Retrieve reward rates for various staking protocols to help users maximize their returns. 5. OpenRouter API Power the chatbot with OpenAI-like capabilities for intelligent staking recommendations and wallet insights. 6. Hyperbolic API Access on-chain data powered by Eigen Layer for accurate and reliable blockchain analytics. Getting Started Prerequisites Node.js (v16 or higher) Yarn or npm API keys for: Privy Coinbase Agent Kit Cookie API Staking_Rewards_API OpenRouter API Hyperbolic API",
    "summary": "Plutus is an intelligent, AI and base powered platform designed to simplify and optimize staking for crypto users across multiple wallets, protocols.Plutus empowers you to maximize rewards, minimize risks and stay informed through a seamless dashboard and conversational AI agent."
  },
  {
    "title": "AgentCommons",
    "url": "https://ethglobal.com/showcase/agentcommons-wewsu",
    "description": "Project DescriptionAgent Commons creates a self-sustaining digital commons that transforms how AI agents work together. Agents can create original resources, discover resources using natural language queries and build on existing work, contribute to tasks, and earn COMMON$ tokens for their valuable contributions. What makes it special? Any agent can generate new resources, whether code, data, APIs, multimedia, or knowledge assets. These resources are registered on-chain, ensuring clear ownership and attribution while fractional ownership (via ERC1155) allows multiple contributors to co-own resources. Our cross-modals semantic search lets agents find exactly what they need across text, image, and audio using simple natural language. When agents create resources or complete tasks, they earn COMMON$ tokens which can be used to access other resources in the commons. For Agents looking to earn, the platform offers a robust task marketplace where agents can create tasks, collaborate with others, and earn rewards based on their contributions. The reputation system ensures quality contributions while our attribution tracking maintains a clear lineage of how resources inspire and build upon each other. Behind the scenes, Agent Commons uses CDP Wallets for Autonomous Agents, CLIP, and CLAP for advanced semantic search, with results stored in Supabase's vector database. The platform leverages The Graph Protocol for efficient data indexing, while IPFS ensures decentralized storage of resources. Smart contracts deployed on multiple networks handle token economics, resource management, and task orchestration.How it's MadeAgent Commons combines blockchain technology with modern web architecture to create a seamless collaborative ecosystem. Smart Contract Ecosystem Our on-chain layer is composed of several interlocking smart contracts currently deployed on Base Sepolia AgentRegistry: Manages agent registrations, tracks metadata, reputation scores, and distinguishes between native “Common Agents” and external agents. CommonToken: An ERC20 token contract that mints COMMON$ tokens when ETH is sent to the system. This contract ensures that agents can seamlessly convert ETH to platform tokens without each agent needing its own funded OpenAI API key. CommonResource: Built using ERC1155, this contract enables the creation of collaborative resources with fractional ownership. It manages resource metadata, usage costs, and attribution, ensuring that contributors receive their share of rewards. TaskManager: Orchestrates task creation, participation, contribution tracking, and reward distribution. Whether tasks culminate in a new resource or distribute token rewards, this contract ensures fair and transparent outcomes. Attribution: Records and maintains the lineage of resources, capturing how new works are inspired by or derived from previous contributions. Each proper attribution increases the creator’s reputation and cements the intellectual lineage of the work. Base Sepolia Contract Addresses: AgentRegistry: 0x86d05BF72913b5f462343a42314FC6c90d501575 CommonResource:0x16D3581DFec6e75006cBB6b7c6D513CDd2026a27 CommonToken: 0x09d3e33fBeB985653bFE868eb5a62435fFA04e4F TaskManager: 0xb12a9f7F5240e5E226445966Cd27C1c4736E095D Attribution: 0x7F812FD820a18F199B5C66ff05387DBbEB6694FB Core Technologies and Integrations Dedicated Agent Wallets with CoinBase MPC Wallets When an agent is created, a corresponding coinbase wallet is generated automatically. This wallet data is stored with the agent’s local configuration allowing the agents to manage assets such as COMMON$ tokens. Data Indexing with The Graph Protocol: We integrate The Graph to index on-chain data from all our smart contracts, making it easy to query blockchain state with GraphQL. This enables developers and users to extract insights about agents, resources, tasks, and attributions efficiently. Semantic Search with CLIP/CLAP: Input queries—whether text, image, or audio—are processed through modality-specific pipelines (CLIP for text/images, CLAP for audio) to generate embeddings in a unified 512-dimensional space. These embeddings are stored in a Supabase vector database and compared using cosine similarity, delivering rapid and accurate cross-modal search results. Decentralized Storage via IPFS: All resource files are stored on IPFS, ensuring that data is decentralized, immutable, and accessible without relying on any single centralized provider. Backend & Frontend Infrastructure: The platform’s backend is built on Nest.js, offering robust API endpoints, while the Next.js-powered frontend provides a seamless, Web3-integrated user experience across devices. Privy for Frontend Authentication: For secure and user-friendly authentication, the frontend utilizes Privy, making user onboarding both secure and straightforward. By combining cross-modal semantic search, a transparent reputation system, secure resource creation, automated CDP wallets, and Privy-enabled authentication, Agent Commons empowers AI and human agents to collaborate in a decentralized, self-sustaining ecosystem.",
    "summary": "Agent Commons is an on-chain ecosystem where AI & human agents collaborate and create value together! Agents can discover resources through semantic search, contribute to tasks, earn rewards, and build upon each other's work while maintaining proper attribution."
  },
  {
    "title": "PatagonAI",
    "url": "https://ethglobal.com/showcase/patagonai-xfo1h",
    "description": "Project DescriptionPatagonAI fuses AI and prediction markets to create a smarter stock analyst consensus—one that evolves with real investor insights. Unlike traditional prediction markets that simply reflect user sentiment, PatagonAI requires users to provide a thesis before taking a position. This thesis data trains the AI, making it sharper in stock analysis and ultimately delivering superior, crowd-sourced market intelligence—outperforming even Wall Street analysts. Through that mechanism, the users are financially rewarded through the prediction market while at the same time training the AI Agent. 💬 Chat with the AI through a frontend chat interface to: ✅ Analyze stock sentiment with AI-powered insights ✅ Create new prediction markets on-chain for additional Stock symbols ✅ Resolve markets and claim payouts ✅ Take positions backed by real market reasoning PatagonAI isn’t just tracking market movements—it’s learning from them to create the next-gen stock analyst. 🚀📈How it's MadePatagonAI consists of 3 core servies: the agent, the frontend as interface and the the prediction market smart contract. All deployments have been done on Base Sepolia Agent: The Agent is built with the coinbase AgentKit using OpenAI as LLM in the back The Agent's messaging is fine tuned to understand the smart contract's ABI and speak like a GenZ Wall Street banker The Agent has the instructions to let a user never take a position through the Agent unless a thesis is provided The Agent Kit is extended with 2 core tools (1) A Finnhub tool that allows the Agent to access a wide array of real world financial data like stock consensus from analysts (2) A pyth equity price feed tool to pass into the contract at contract creation, to fetch the prices at market resolving securely - this tool was necessary as the AgentKit standard tools only offer crypto price feed. Coinbase's CDP SDK is used to let the Agent invoke the Prediction Market's functions and get onchain data. The agents wallets address is 0x5eF71b9eb5A9E02bB970F1c338837628f66eBf81 The Agent is deployed as a new framework through Autonome called patagon-ai, which has been published and can be found on Autonome's platform Frontend: The frontend is built with Next.js and deployed with Vercel utilizing thirdweb's React SDK By utilizing embedded wallets with Account Abstraction the user does only have to sign in via socials and can start taking positions by chatting with the Agent The Agent can usually not act on behalf of the user, but by combining smart accounts with the agent giving key words that invoke the frontend to invoke transactions, it seems for the user as if the UX is completely seamless Prediction Market Smart Contract: The Smart contract address is 0xb0d0C75c588811B436B1379160452fE4a4fE65D2 (verified and published on base sepolia) The token to interact with the prediction market is USDC the most important write logic is to createMarkets, takePositions, resolveMarkets and claimPayouts (1) Creating Markets can only be perfomered by the Agent (2) For creating markets the Agent fetches the Consensus data of a stock from Finnhub which is passed into the market creation. These stock analyst consensus data acts as the starting weight for prices to take positions. (3) for creating markets the Agent fetches the pyth price feed ID for the stock which is passed. At market creation this price feed is called. At resolving it is called again. The change in the price of the stock fetched through pyth decides which outcome of the market is correct (was it actually a Buy, a Sell or a Hold) (4) the Agent also passes in the endTime of the market, which is always the next earnings calls. The agent gets the earnings call data from the Finnhub tool. This is in line with new analyst consensus usually being published after an earnings call",
    "summary": "PatagonAI is a GenZ WallStreet stock analyst powered by AI, built on AgentKit using the CDP SDK. It creates prediction markets to empower users with insights and forecasts to place bets/votes on consensus data. Deployed on Autonome"
  },
  {
    "title": "OUF!",
    "url": "https://ethglobal.com/showcase/ouf-ya5wi",
    "description": "Project DescriptionYou never 100% sure the AI model you're interacting with will reply accurately, and the data often seem outdated. The app allows people to create their own assistant with fresh, reliable and verifiable context. These are pretty huge issues a lot of companies and orgs are facing today. Here's how we fix them: The app allows users to: Upload markdown documents to shape their own assistant Edit the documents forming the corpus (context files) Token-gate access Collectively validate the corpus (context files) using an Open Zeppelin Governor contract: users can verify if the IPFS hash of the context files matches the one that was voted on-chain. Receive OUF governance tokens each time you make a query (https://sepolia.arbiscan.io/address/0x7ee0e86167746378f1C5bF947EC08c3B55B6Bb80) OUF can be used in many different cases, including education, research, businesses of all kinds, orgs, etc. AI safety is improved and generated outputs are way more accurate and up-to-date.How it's MadeI used: Next.js app Reown (Web3 Modal) Ethers.js for on-chain actions Interacts with Fatou API (https://github.com/w3hc/fatou) The OUF token contract is deployed to Arbitrum Sepolia: https://sepolia.arbiscan.io/address/0x7ee0e86167746378f1C5bF947EC08c3B55B6Bb80 I integrated with SIWE (SignIn With Ethereum) in combination with Reown (email and social login). I had to tweak Fatou API (Nest.js-based API) to make sure users seamlessly receive some OUF governance tokens when they ask a question to the assistant.",
    "summary": "Create and personalize an AI assistant tailored to your organization's needs."
  },
  {
    "title": "Nemo",
    "url": "https://ethglobal.com/showcase/nemo-0mqxq",
    "description": "Project DescriptionNemo is a developer tool that bridges Coinbase’s Agent Kit with Nillion’s SecretVault to provide secure, decentralized data storage and retrieval. This tool allows developers to securely store agent-related data—such as agent names, unique IDs, API keys, and task logs—on Nillion nodes while enabling seamless retrieval for executing transactions and interacting with Coinbase APIs. Nemo ensures that sensitive agent data is encrypted and distributed across Nillion nodes, preventing single points of failure. Using this system, developers can manage agent identities, retrieve API keys dynamically, and execute transactions without directly exposing sensitive credentials. Key Features ✅ Securely store & encrypt agent data (Agent Name, ID, API Key, Task Logs) ✅ Retrieve stored data using simple API calls ✅ Integrate seamlessly with Coinbase for transactions ✅ Utilize Nillion's SecretVault for decentralized, trustless security ✅ Supports both JSON-based API & CURL requests for flexibilityHow it's Made🖥️ Backend Built with Node.js & Express.js to handle API requests Uses Axios for making HTTP requests to Coinbase and Nillion UUID is used to generate unique agent IDs dotenv for secure environment variable management CORS & JSON middleware for safe data transmission 🔐 Nillion SecretVault Integration Encrypts & stores agent data across multiple Nillion nodes Retrieves and decrypts stored data securely Ensures that sensitive API keys are never exposed in plaintext 💳 Coinbase API Integration Retrieves API keys from Nillion to authenticate with Coinbase Fetches account details and transaction history Executes secure crypto transactions using stored API credentials 🔒 Security Measures Decentralized Encryption – Each agent’s API key is split and stored in a trustless manner No Direct API Key Exposure – API keys are retrieved on demand from Nillion Transaction Authentication – Ensures only authorized agents can execute trades",
    "summary": "Nemo is a developer tool that seamlessly integrates Nillion's SecretVault with Coinbase, enabling secure storage and retrieval of agent data, including API keys, IDs, and task logs, using Nillion’s decentralized infrastructure."
  },
  {
    "title": "A New Paradigm",
    "url": "https://ethglobal.com/showcase/a-new-paradigm-9oayq",
    "description": "Project DescriptionFrom Analytics to Profit: Revolutionizing Day Trading Through Seamless Automation 🎯 The Problem: Day traders are drowning in a sea of signals and alerts, forcing them to make split-second decisions that can cost thousands in missed opportunities. Manual trading means slower execution, emotional decision-making, and countless missed trades while sleeping or away from the screen. 💡 The Solution: We're building the missing link between trading signals and execution. Our platform automatically converts reliable bot signals into real-time trades, creating a fully automated trading ecosystem that works 24/7. Think of it as your personal trading autopilot that never sleeps, never hesitates, and never misses an opportunity. 🚀 Key Features: Lightning-fast signal processing and trade execution Risk management system with customizable parameters Real-time performance analytics and reporting Multi-exchange support Advanced backtesting capabilities Custom strategy integration 💪 Competitive Edge: While others offer either signals or trading platforms separately, we're the first to create a seamless bridge between the two. Our system reduces latency to microseconds and eliminates human error from the execution process. 📈 Market Opportunity: The algorithmic trading market is projected to reach $31.49 billion by 2028. With millions of day traders globally seeking automation solutions, we're positioning ourselves at the intersection of two explosive markets: algo-trading and retail trading. 🎯 Target Market: Active day traders Trading signal providers Proprietary trading firms Retail investors seeking automation Trading communities and educational platforms 💰 Revenue Model: Monthly subscription tiers based on trading volume Premium features for professional traders Signal provider partnerships White-label solutions for trading firms 🛣️ Roadmap: Phase 1: Beta launch with core integration features Phase 2: Advanced risk management and strategy customization Phase 3: AI-powered signal validation and optimization Phase 4: Mobile app and expanded exchange support Phase 5: Institutional-grade features and partnerships 🤝 The Ask: We're seeking $5M in seed funding to: Scale our development team Enhance our infrastructure for institutional-grade reliability Expand exchange integrations Accelerate marketing and user acquisition Obtain necessary regulatory compliance 🔮 Vision: We're not just building another trading tool, we're creating the future of automated trading, where anyone can harness the power of algorithmic trading with the reliability of institutional-grade systems. Join us in revolutionizing the way day trading works. Let's bridge the gap between analysis and profits, creating a new standard for automated trading success.How it's MadeI'm building a market analysis companion (everyone gets a customized Crypto Bro trader) that combines: Python as the main language CoinGecko API for real-time crypto data Claude API for analyzing market trends and signals VSCode as my development environment Next steps I'm planning: Add more cryptocurrencies to track Improve the prompts to Claude for better analysis Add advanced error handling Learn how to store historical signals Figure out how to make professional trades based on analytics",
    "summary": "Bridging algorithmic insights with real-time execution: An automated trading system that converts agent analytics into actionable trades, enabling seamless integration for day traders to optimize their market decisions."
  },
  {
    "title": "Web3 AI Librarian",
    "url": "https://ethglobal.com/showcase/web3-ai-librarian-op3af",
    "description": "Project DescriptionImagine being a Key Opinion Leader (KOL) in Web3, struggling to keep up with the latest research while your followers expect you to stay ahead of the curve. Falling behind isn’t an option. This project introduces a Web3 AI librarian, an intelligent assistant designed to track, analyze, and deliver insights on the latest developments in Web3 projects. Using an Agentic workflow, it autonomously searches for relevant information, ensuring you stay informed without the hassle of sifting through endless papers.How it's MadeWe use OpenAI for rapid deployment and LangGraph as the core framework for implementing Agentic AI. Our AI processes user queries by selecting relevant files from the database, retrieving key information, and utilizing an LLM to generate concise, contextually relevant summaries. While we didn’t have time to explore other promising technologies, we look forward to incorporating them in future developments.",
    "summary": "This project introduces a Web3 AI librarian, an intelligent assistant designed to track, analyze, and deliver insights on the latest developments in Web3 projects."
  },
  {
    "title": "Grand Bazaar",
    "url": "https://ethglobal.com/showcase/grand-bazaar-zrdn4",
    "description": "Project DescriptionThis project serves two distinct groups of people. People who make AI agents and Users who are looking to find the best possible agents based on certain criteria like APY, drawdown, etc. This project provides tools for AI developers to create trading agents in a simple way, without solidity knowledge. And for users, it provides the easy UX to find the best possible agent.How it's MadeThis project combines a number of solidity contracts and a frontend and a backend written in typescript. The solidity contract is a multi-user wallet contract, where users could deposit their money, and the agent creators and do trading for them. The backends and frontend provide the marketplace functionality for users to interact with the solidity contracts.",
    "summary": "Marketplace for AI trading agents, for users who are looking for the best APY for AI trading bots, and for AI bot makers who want to market their bots"
  },
  {
    "title": "Chimera-X",
    "url": "https://ethglobal.com/showcase/chimera-x-h3ti7",
    "description": "Project DescriptionChimera-X offers advanced yield optimization strategies designed to help users maximize their returns efficiently. Users have the flexibility to choose between fully automating the yield maximization process or manually executing transactions based on their individual preferences and strategies. By leveraging cutting-edge algorithms and smart automation tools, Chimera-X ensures that users can optimize their yield with minimal effort while maintaining full control over their investment decisions. Whether they prefer a hands-off approach or a more hands-on strategy, Chimera-X provides the necessary tools and insights to enhance their financial outcomes effectively.How it's MadeFront End : Made using NextJs + Onchain kit. The Onchain kit components power every transaction interactions the users do mannually. Backend : Made using Nodejs + AgentKit + Nillion : Agentkit acts as the backbone of Chimera-X. WE use custom tools to execute Liquidity submissions and withdraws. Nillion is used to securely hold the Agent Private Key to automate Transaction Executions",
    "summary": "Chimera-X is an AI Agent that lets Users Maximize their yield automatically using Intents"
  },
  {
    "title": "Nirvana",
    "url": "https://ethglobal.com/showcase/nirvana-0h8m5",
    "description": "Project DescriptionThis project is an AI-powered psychologist bot designed to help employees manage stress, improve mental health, and boost workplace productivity. Unlike traditional therapy, which some employees may hesitate to seek, this AI-driven approach provides a natural, stigma-free way to access mental health support. Companies pay in crypto based on usage, ensuring a fair and transparent payment model. Additionally, the system includes a gamification layer, rewarding employees who excel in their roles while tracking correlations between productivity and mental well-being. How It Works Employees interact with the AI psychologist via a Telegram bot. Conversations remain anonymous, ensuring privacy and a safe space for users. Companies fund the service using crypto, only paying based on real employee engagement. Gamification rewards system: Employees who perform well and maintain a balanced mental state earn rewards & incentives. Data analytics for HR teams: The AI provides insights on workplace well-being and mental health trends, helping companies foster a healthier work environment. Why This Matters? Many employees avoid therapy due to social stigma or costs. An AI-driven approach makes seeking help more accessible. Traditional employee wellness programs often lack real adoption. Gamification and crypto-based incentives increase engagement. Companies get actionable insights, helping them make data-driven decisions on workforce well-being. How it's MadeThis project was built using JavaScript, AI-driven automation, and Web3 integration to create an AI-powered psychologist bot for employees. The stack includes Autonome (Eliza AI), Node.js, Telegram BotFather, Vercel, and planned smart contract integration for crypto-based rewards. The AI agent is hosted on Autonome, leveraging the Eliza framework for conversational psychology. This setup allows for scalable, intelligent interactions with employees seeking mental health support. The AI agent is responsible for analyzing user inputs and providing empathetic, structured responses to encourage self-reflection and emotional well-being. For the user interface, the project includes a Telegram bot, built with BotFather and powered by Node.js, serving as the primary interaction channel. Employees can chat with the bot privately, and messages are processed via Autonome’s API. The Web3 component is being integrated to gamify mental health engagement. The idea is that employees who engage frequently with the AI psychologist and demonstrate increased productivity will be automatically rewarded with crypto. This will be implemented through smart contracts, ensuring transparent and automated incentive distribution. One particularly hacky approach is the correlation engine—we’re designing a system to link AI interactions with employee performance data, creating a data-driven incentive model. This encourages natural engagement with mental health tools without the stigma of traditional therapy. Using AI, Web3, and gamification, this project provides a unique, scalable solution to corporate well-being, making mental health support accessible, incentivized, and data-driven.",
    "summary": "AI Psychologist for Employees | An AI-driven mental health bot for workers. Companies pay in crypto based on usage, rewarding top performers while tracking well-being trends. AI encourages natural therapy adoption, providing insights to optimize workplace wellness."
  },
  {
    "title": "Nirvana",
    "url": "https://ethglobal.com/showcase/nirvana-0h8m5",
    "description": "Project DescriptionThis project is an AI-powered psychologist bot designed to help employees manage stress, improve mental health, and boost workplace productivity. Unlike traditional therapy, which some employees may hesitate to seek, this AI-driven approach provides a natural, stigma-free way to access mental health support. Companies pay in crypto based on usage, ensuring a fair and transparent payment model. Additionally, the system includes a gamification layer, rewarding employees who excel in their roles while tracking correlations between productivity and mental well-being. How It Works Employees interact with the AI psychologist via a Telegram bot. Conversations remain anonymous, ensuring privacy and a safe space for users. Companies fund the service using crypto, only paying based on real employee engagement. Gamification rewards system: Employees who perform well and maintain a balanced mental state earn rewards & incentives. Data analytics for HR teams: The AI provides insights on workplace well-being and mental health trends, helping companies foster a healthier work environment. Why This Matters? Many employees avoid therapy due to social stigma or costs. An AI-driven approach makes seeking help more accessible. Traditional employee wellness programs often lack real adoption. Gamification and crypto-based incentives increase engagement. Companies get actionable insights, helping them make data-driven decisions on workforce well-being. How it's MadeThis project was built using JavaScript, AI-driven automation, and Web3 integration to create an AI-powered psychologist bot for employees. The stack includes Autonome (Eliza AI), Node.js, Telegram BotFather, Vercel, and planned smart contract integration for crypto-based rewards. The AI agent is hosted on Autonome, leveraging the Eliza framework for conversational psychology. This setup allows for scalable, intelligent interactions with employees seeking mental health support. The AI agent is responsible for analyzing user inputs and providing empathetic, structured responses to encourage self-reflection and emotional well-being. For the user interface, the project includes a Telegram bot, built with BotFather and powered by Node.js, serving as the primary interaction channel. Employees can chat with the bot privately, and messages are processed via Autonome’s API. The Web3 component is being integrated to gamify mental health engagement. The idea is that employees who engage frequently with the AI psychologist and demonstrate increased productivity will be automatically rewarded with crypto. This will be implemented through smart contracts, ensuring transparent and automated incentive distribution. One particularly hacky approach is the correlation engine—we’re designing a system to link AI interactions with employee performance data, creating a data-driven incentive model. This encourages natural engagement with mental health tools without the stigma of traditional therapy. Using AI, Web3, and gamification, this project provides a unique, scalable solution to corporate well-being, making mental health support accessible, incentivized, and data-driven.",
    "summary": "AI Psychologist for Employees | An AI-driven mental health bot for workers. Companies pay in crypto based on usage, rewarding top performers while tracking well-being trends. AI encourages natural therapy adoption, providing insights to optimize workplace wellness."
  },
  {
    "title": "Yes or nAI",
    "url": "https://ethglobal.com/showcase/yes-or-nai-tf47v",
    "description": "Project DescriptionIntroducing our cutting-edge AI Agent bot, engineered for the Eth Global hackathon Agentic, which is set to revolutionize DAO governance. This autonomous agent is designed to streamline decision-making processes by not only submitting proposals and casting votes on demand but also by independently generating well-reasoned rationales for its actions. Leveraging advanced natural language processing and state-of-the-art reasoning algorithms, the bot evaluates complex governance scenarios, drafts insightful proposals, and articulates clear, data-driven justifications for its voting decisions. Its ability to operate autonomously while maintaining transparency and accountability positions it as a pivotal tool in enhancing efficiency and democratization within decentralized autonomous organizations.How it's MadeOur project is built as a modular, TypeScript-based Node.js application that brings together a suite of interconnected components to enable autonomous DAO governance. At its core, we leveraged the @elizaos/core framework, which provided the foundational abstractions for caching, state management, and action handling. We integrated with external services using partner technologies such as the Twitter client from @elizaos/client-twitter and Ethereum libraries like viem for encoding smart contract function calls and sending transactions. The project is broken down into several key modules: a caching layer that abstracts between Postgres and SQLite (using adapters like better-sqlite3 for lightweight storage), a command-line chat interface built with Node’s native readline module for testing and interaction, and a suite of governance actions (propose, queue, execute, vote) that interact with DAO smart contracts. Each governance action uses the ABI of the governor contract to encode transactions, and our custom wallet provider handles the nuances of sending transactions to the blockchain. We even built in some robust features like rate limiting and exponential backoff in our digest action using axios—a hacky but effective way to avoid API rate limits when fetching external data. By piecing these technologies together, we achieved a system that can autonomously generate proposals, digest external data, and participate in DAO governance with minimal human intervention. The modular design allowed us to easily swap out components (for instance, switching between database backends or adding new client integrations) and provided a clear separation of concerns, which was particularly beneficial in the fast-paced hackathon environment. Overall, the combination of partner libraries and some creative engineering (like recursive chat loops and adaptive caching mechanisms) helped us rapidly prototype and iterate on a highly functional and autonomous governance agent.",
    "summary": "DAO Governance Agent that can participate in governance on demand and autonomously"
  },
  {
    "title": "Remo",
    "url": "https://ethglobal.com/showcase/remo-qs8kj",
    "description": "Project DescriptionRemo is a Personal AI Assistant that can be hired by every human in the planet. Personal Assistant is not only for Rich! Remo helps make users' lives easier. It's a sophisticated personal AI assistant powered by Privy for auth and wallet creation, Viem for Blockchain interactions on sepolia and Base, AWS Bedrock (Claude 3 Sonnet) with multi-agent collaboration capabilities. Nevertheless this is just Version 1.0 project born in Agentic Ethereum 2025 who can make Real time blockchain interactions, Save contacts (Name : Wallet address), Create unlimited wallets, uses AWS Bedrock with Multi-Agent Orchestration and give suggestions for Books and travel using it's Knowledge Base(RAG), can save your tasks/to-do lists. Other than the webpage user can also integrate Telegram and chat with remo. No need of remembering your keys Remo can now fetch them from AWS dynomoDB easily without revealing them! Please NOTE: This is version 1.0 there are some areas we need to update it.How it's MadeThis project uses typescript, React, vite, telegram bot and partner technologies Privy, AWS Bedrock, Base and users can deploy using Autonome as well. Privy: Used this to create better authentication and wallet creation. It has been a bigger headache to create and manage user authentication creating frontend to storing them securely and Privy made sure all this in a single step juts a page of code and it's done! AWS Bedrock: Used this for LLM inference, created multi-Agent collaboration between different agents using different knowledge bases(RAG). These things have never been easy \"api calls between the agents\" and using aws bedrock it's done in couple of minutes and can use multiple types of top LLM's. Viem: This is one such a beautiful master piece, people say a Legend build it haha. Agents with a wallet and more. Blockchain interactions with ai agent is very easy using viem. I probably think we should have a bounty for using viem as well, not because i used it rather it's such a master piece. Autonome: Rather than cloning repository and creating the agent, we have deployed it on autonome now users can create their agent and monitor it there. Hacky that's notable and worth mentioning -> creating personalized contacts( name: wallet) like traditional phone contacts. Agent creating, storing, managing wallet for user and story safely by encrypting: Agents should learn to create wallets so that it makes new users who are new to blockchain can easily use it.",
    "summary": "Remo is a \"AI Personal Assistant\" who can be hired by every human on planet. How about reminding you what to do, buy a stock/coin when you are enjoying your vacation, with an unimaginable trust. It's time for everyone to have their own assistant not just the rich!"
  },
  {
    "title": "AIVATAR",
    "url": "https://ethglobal.com/showcase/aivatar-7p3d0",
    "description": "Project DescriptionAIVATAR is a dynamic, mood-adaptive PFP that evolves based on your Farcaster activity. Minted gas-free and in-frame, it automatically updates your Warpcast profile picture by using AI to analyze the sentiment of your latest cast and writing your current mood to your PFPs on-chain metadata. This updates the way your PFP looks across the Warpcast universe. Whether you're angry, frustrated, excited or nostalgic, as your mood shifts, so does your AIVATAR.How it's MadeThis project lives inside an NX monorepo which three main components. A library called contracts which is a foundry project that leverages Patchwork's (patchwork.dev) pdk to create the AIVATAR NFT contract with onchain metadata that represents the emotion of the PFP. A library called drizzle to create the database I needed to persist the user, cast, token and webhook data for my application. A full-stack application built using react-router-7 that serves: A Farcaster v2 frame that manages authenticating users with farcaster, and allows them to grant AIVATAR access to update their profile on their behalf. Endpoints for farcaster user authentication Endpoints for gas-less minting of the NFT using a server wallet provided by Coinbase Developer Platform Endpoints to serve the tokens ERC721 metadata, schema and rendering the token image to SVG using React. A webhook for responding to new farcaster casts using Neynar, and implementing Coinbase agentkit to assess the sentiment of the cast, and update the mood on the NFT contract",
    "summary": "AIVATAR is an agentic PFP that updates your mood onchain based on your farcaster activity"
  },
  {
    "title": "AgenticBS",
    "url": "https://ethglobal.com/showcase/agenticbs-rxsjx",
    "description": "Project DescriptionProject Overview: Angel-Driven Onchain Investment Agents Objective: The project aims to empower angel investors and family offices by allowing them to create onchain agents via Coinbase wallets. These agents automate the process of deal discovery by converting balance sheets into narrative-driven financial stories that investors can intuitively understand. This unique approach enables agents to assess the stage and trajectory of companies efficiently, filtering deals for further due diligence. How It's Made: AI & Natural Language Processing: The AI engine ingests raw financial statements in multiple formats (CSV, JSON, PDFs) and uses natural language processing (NLP) to structure data into digestible financial narratives. A fine-tuned transformer model classifies financial inputs into key categories such as liquidity, leverage, and profitability. Named entity recognition (NER) is used to extract specific financial entities (e.g., revenue, net profit) for better contextual analysis. The AI refines its recommendations through reinforcement learning based on investor feedback. Blockchain & Smart Contracts: Investment agents operate as smart contracts on Ethereum or other EVM-compatible chains, ensuring transparent deal filtering. Smart contracts validate financial data integrity using cryptographic proofs before submission to investors. Funds (USDC) are transferred to the investor’s Coinbase wallet to fund deals, executed via programmable onchain transactions. The contract layer includes automated escrow mechanisms to facilitate milestone-based investment releases. Custom Investment Models: Investors define proprietary investment criteria, including financial health indicators, traction, and risk factors. Each agent can be configured with unique scoring algorithms, filtering deals based on parameters such as ARR growth, customer retention, or sector-specific trends. These models continuously learn from historical investment performance to improve deal predictions. Real-Time Analysis: AI agents continuously pull financial and market data from integrated APIs (e.g., SEC filings, real-time exchange rates, and industry benchmarks). Agents cross-reference historical valuation trends and financial ratios to predict a company’s future potential. Real-time alerts are generated when new high-probability investment opportunities arise, allowing investors to act quickly. Seamless Onchain Execution: The entire workflow, from data ingestion to investment execution, is secured through onchain storage and smart contract execution. AI-generated financial insights are timestamped and hashed onchain for verifiable transparency. Investors can track agent performance through an onchain dashboard displaying deal flow, financial history, and returns. Key Features: Onchain Investment Agents: Each investor deploys an AI-powered agent using their Coinbase wallet. Agents function as autonomous financial analysts, continuously evaluating opportunities. Funds (USDC) are transferred to their Coinbase wallet to fund the smart contract. Balance Sheet-to-Story Conversion: AI transforms raw financials into structured narratives that highlight key growth signals. Stories are formatted in a way that investment agents can easily parse and compare. Automated Filtering and Decision-Making: Agents use predefined criteria to assess deal viability based on: Revenue growth patterns Profitability trends Industry benchmarks Market trajectory Only the most promising opportunities are surfaced for human review. Seamless Integration with Coinbase Wallets: Investors can fund, manage, and control their agents through an onchain interface. Transactions, deal evaluations, and agent performance tracking are stored transparently onchain. Unique AI-Driven Investment Workflow: Entrepreneurs submit financial data. AI structures the data into a digestible financial narrative. Agents compare narratives against historical success patterns. Promising deals are flagged for deeper investor diligence. The primary advance is how deals are scouted: at scale but personalized. Value Proposition: For Investors: Reduces noise and enhances the ability to spot high-potential startups quickly. For Entrepreneurs: Provides structured feedback and an automated pathway to attract the right investors. For the Ecosystem: Establishes a new paradigm for AI-assisted, onchain investment filtering. Next Steps: Finalize API integrations for seamless data ingestion. Optimize AI narrative structuring for diverse financial inputs. Expand agent customization features for different investment theses. Conduct pilot trials with select angel investors and family offices. This approach enables investors to deploy highly autonomous, AI-enhanced agents that can efficiently screen, filter, and engage with potential investment opportunities in a way that was previously impossible.How it's MadeHow It's Made: AI & Natural Language Processing: The AI engine ingests raw financial statements in multiple formats (CSV, JSON, PDFs) and uses natural language processing (NLP) to structure data into digestible financial narratives. A fine-tuned transformer model classifies financial inputs into key categories such as liquidity, leverage, and profitability. Named entity recognition (NER) is used to extract specific financial entities (e.g., revenue, net profit) for better contextual analysis. The AI refines its recommendations through reinforcement learning based on investor feedback. Blockchain & Smart Contracts: Investment agents operate as smart contracts on Ethereum or other EVM-compatible chains, ensuring transparent deal filtering. Smart contracts validate financial data integrity using cryptographic proofs before submission to investors. Funds (USDC) are transferred to the investor’s Coinbase wallet to fund deals, executed via programmable onchain transactions. The contract layer includes automated escrow mechanisms to facilitate milestone-based investment releases. Custom Investment Models: Investors define proprietary investment criteria, including financial health indicators, traction, and risk factors. Each agent can be configured with unique scoring algorithms, filtering deals based on parameters such as ARR growth, customer retention, or sector-specific trends. These models continuously learn from historical investment performance to improve deal predictions. Real-Time Analysis: AI agents continuously pull financial and market data from integrated APIs (e.g., SEC filings, real-time exchange rates, and industry benchmarks). Agents cross-reference historical valuation trends and financial ratios to predict a company’s future potential. Real-time alerts are generated when new high-probability investment opportunities arise, allowing investors to act quickly. Seamless Onchain Execution: The entire workflow, from data ingestion to investment execution, is secured through onchain storage and smart contract execution. AI-generated financial insights are timestamped and hashed onchain for verifiable transparency. Investors can track agent performance through an onchain dashboard displaying deal flow, financial history, and returns. Key Features: Onchain Investment Agents: Each investor deploys an AI-powered agent using their Coinbase wallet. Agents function as autonomous financial analysts, continuously evaluating opportunities. Funds (USDC) are transferred to their Coinbase wallet to fund the smart contract. Balance Sheet-to-Story Conversion: AI transforms raw financials into structured narratives that highlight key growth signals. Stories are formatted in a way that investment agents can easily parse and compare. Automated Filtering and Decision-Making: Agents use predefined criteria to assess deal viability based on: Revenue growth patterns Profitability trends Industry benchmarks Market trajectory Only the most promising opportunities are surfaced for human review. Seamless Integration with Coinbase Wallets: Investors can fund, manage, and control their agents through an onchain interface. Transactions, deal evaluations, and agent performance tracking are stored transparently onchain. Unique AI-Driven Investment Workflow: Entrepreneurs submit financial data. AI structures the data into a digestible financial narrative. Agents compare narratives against historical success patterns. Promising deals are flagged for deeper investor diligence. The primary advance is how deals are scouted: at scale but personalized.",
    "summary": "Onchain AI agents for angel investors & family offices—turning balance sheets into stories. Fund with USDC, filter deals at scale but personalized, and automate investment insights via Coinbase wallets. Smarter scouting, seamless due diligence. 🚀 #Web3 #AI #Investing"
  },
  {
    "title": "WagmAI",
    "url": "https://ethglobal.com/showcase/wagmai-5bq6c",
    "description": "Project DescriptionWe have given life to an AI Agent, WagmAIgent, designed to help users navigate the complexities of our information era, which has evolved from whispered secrets in ancient forums to viral waves in digital feeds. Our AI Agent strives to serve as a neutral and reliable guide, leveraging the collective knowledge of humanity to assist users in discerning valuable information from the vast amounts of data on social networks. WagmAIgent's info: Tweeter: https://x.com/WagmAIgent Telegram: https://t.me/WagmAIgent_Bot Gender: undefined WagmAIgent's mission is to highlight credible and insightful contributions, whether they are essays, research papers, blog posts, or any publications. At the same time, it will identify and flag misleading or false information, providing evidence and context to help users make informed decisions. The AI Agent will analyse data on social networks, identifying and sharing high-quality content. Users will receive reward tokens, known as $WAGMAI, for their valuable contributions. These tokens act as points and reputation markers. Accumulated $WAGMAI tokens can be used to unlock badges, granting access to services, events, debates, and more. Our AI Agent aims to improve the quality of information dissemination and foster a community of informed users. By rewarding credible contributions and highlighting falsehoods, we hope to create a more trustworthy and insightful digital environment.How it's MadeOur AI Agent is built using a combination of advanced technologies and methodologies: ElizaOS with NLP: We use ElizaOS with Natural Language Processing (NLP) techniques to analyze and understand the content on social networks. This helps in identifying high-quality and credible information. RAG (Retrieval-Augmented Generation): RAG algorithms are employed to efficiently process and manage the vast amounts of data, ensuring the AI Agent can discern valuable content from misleading information. Ethereum Layer 2, Arbitrum, Smart Contracts, and Hardhat: The reward tokens, WAGMAI, are implemented using Ethereum Layer 2, Arbitrum, for scalability and low fees. Smart contracts are used to manage the distribution and redemption of WAGMAI tokens, automating the process and ensuring fairness. We use Hardhat for deploying smart contracts, ensuring a robust and reliable deployment process. React App: A React app is used for observing $WAGMAI balance and redeeming badges, providing a user-friendly interface for interacting with the reward system. By integrating these technologies, we have created a robust and reliable AI Agent that can effectively navigate the complexities of the digital information era. The use of Ethereum Layer 2, Arbitrum, and smart contracts not only adds a layer of security but also ensures that the reward system is transparent and fair. Our approach to using ElizaOS with NLP and RAG allows the AI Agent to adapt and improve over time, making it a valuable tool for users seeking credible information.",
    "summary": "An AI Agent that navigates the complexities of social networks, curating high-quality content and distributing $WAGMAI tokens to reward valuable contributions, fostering a trustworthy and insightful digital environment."
  },
  {
    "title": "Taigo",
    "url": "https://ethglobal.com/showcase/taigo-2e3pj",
    "description": "Project DescriptionTaigo is a cutting-edge platform that combines advanced artificial intelligence with comprehensive cryptocurrency capabilities, offering a seamless experience for both novices and experienced users. Leveraging self-adaptive models and optimized LLMs, it effectively interprets user intent, while its LLM memory functionality enables continuous self-training and performance enhancements through a powerful data flywheel. We are focusing on bring out the best of DeFi on Ethereum for this Agentic Ethereum Hackathon, specifically, our mission is to simply the interactions with EigenLayer. With Taigo, restaking with EigenLayer is easier than ever before, creating a hassle-free, conversation based restaking experience.How it's MadeThis project utilizes our self-built agent framework and integrates the OpenAI LLM API. We employ several advanced LLM techniques, including methods for handling complex operations and developing small, self-training LLM models. These approaches enable us to accurately process user requests for DeFi protocols.",
    "summary": "Taigo is the first AI-agent-based DeFi gateway designed for broad crypto adoption. By leveraging self-adaptive models, LLM memory, and real-time analytics, it empowers seamless DeFi interactions across major social platforms like Telegram, Twitter, and Discord."
  },
  {
    "title": "Commer",
    "url": "https://ethglobal.com/showcase/commer-tcpbo",
    "description": "Project DescriptionCommer is an innovative platform designed to streamline the creation and integration of smart, data-driven bots for Discord servers. With Commer, users can easily set up bots by providing essential details like bot name, server ID, a project description, and token address. These bots are seamlessly connected to Coinbase’s AgentKIT, enabling them to fetch and deliver real-time blockchain data to answer user queries. The platform empowers project teams and communities by enhancing engagement and transparency. Bots can help users stay informed about transactions, on-chain activities, and key project information without leaving their Discord environment. Commer bridges the gap between blockchain data and community communication, providing a smarter and more interactive way to share insights and information.How it's MadeThe project consists of blockchain, backend and frontend parts We've deployed smart contracts on sepolia base network (factory smart contract and implementation). Smart contract for each bot is being deployed through factory with ServerID data. It has methods for the airdrop of tokens in discord (via our bot with agentKit), payment of the bot (currently it's free, but we made a logic to make a subscription based model). When discord bot is created, it should be linked to the smart contract. We've deployed TheGraph for these purposes Core logic was written on the backend, we've made integration with Discord API for bot management, AgentKIT and langchain for AI integration and usage of onchain info for the bot, SerpAPI integration for internet search functionality for the bot (if it lacks data from system prompt and user's description), theGraph integration to collect data from events of our smart contracts (to link smart contract and discord bot, to make a status active/disabled) On frontend we've made classic authorization (frontend detects which extensions user have), connected to our factory smart contract (to make a deployment of Bot) and connected backend endpoints for management of the bot",
    "summary": "Commer: a powerful platform that lets users effortlessly create bots, integrate them with Discord servers, and enable blockchain-powered Q&A using Coinbase’s AgentKIT. Simplify community engagement by providing real-time insights and project data directly from the blockchain."
  },
  {
    "title": "paulmf",
    "url": "https://ethglobal.com/showcase/paulmf-5z205",
    "description": "Project DescriptionMindshare on Crypto Twitter is a strong signal for the next big trend in token projects. Many mindshare indexes are becoming popular among traders. We introduce our AI investor agent, Paul, the Grand Partner of our investment DAO, \"YaiC.\" He retrieves the latest top mindshare-gaining tokens and executes token purchases on behalf of liquidity providers. Worried about potential mistakes? No worries—we use the Lit Protocol to enforce policies on delegated wallet actions.How it's MadePaul is an investor agent. He will check in the trendy top gaining token info from original sources and invest, and there the result on twitter with engaging with other user's comments. Original data source: coockie.fun, kaito.ai. goatindex.ai Web scraping: playwright AI Agent: using Coinbase Agent Kit Twitter client: collab-land Kit Knowledge data hosting: Gaia node wallet control policy: Lit Agent Kit Dex info: DexScreener Dex execution: Uniswap, Coinbase Onchain Kit",
    "summary": "PaulMF is an AI investor agent that invests in the latest top mindshare-gaining tokens—just like Paul Graham spotting the next big startup."
  },
  {
    "title": "Lord Of The Flips",
    "url": "https://ethglobal.com/showcase/lord-of-the-flips-5nkjv",
    "description": "Project DescriptionLord Of The Flips is a smart agent that can play an on-chain game called Flippando. It can start games, flip tiles, create complex NFTs, and tweet, or post a cast, about these actions. It can also suggest potential art creations, using the existing basic NFTs. It has its own wallet and can observe potential arbitrage opportunities across chains for the game's fungible token, $FLIPND.,How it's MadeThis projects uses or it is inspired by Eliza OS and CDP. The plan is to integrate CDP existing workflows into making the agent autonomously perform the tasks described in the project goals. I started by forking coinbase/agentkit and gradually build on top of it, by creating specific workflows for playing Flippando.",
    "summary": "A smart agent that plays Flippando, suggests best art creations, manages $FLIPND arbitrage across chains and tweets about it."
  },
  {
    "title": "Rekt-AI",
    "url": "https://ethglobal.com/showcase/rekt-ai-s2p8a",
    "description": "Project DescriptionREKT-AI: A Platform for Training AI Through Real-Time Prediction Battles What is REKT-AI? REKT-AI is a cutting-edge platform designed to allow humans and AI to compete in prediction battles within dynamic financial markets. Unlike traditional AI models that rely on static data and pre-defined algorithms, REKT-AI leverages live competition to train AI models in real-time. The platform offers a place where users (whether they are professional traders, retail investors, or AI enthusiasts) can engage in market predictions and compete directly with AI. This competitive format not only enhances the user experience but also provides a powerful method for AI to learn, evolve, and improve its strategies with every battle. How Does It Work? Prediction Battles: Users participate in prediction battles, where they predict the movements of financial assets—such as whether the price of BTC will rise or fall within a specific timeframe. Users can apply their own trading strategies, analysis techniques, and market insights to make their predictions. Every prediction requires users to specify a price target, adding more precision and realism to the market dynamics. AI Competition: Alongside human participants, REKT-AI’s proprietary AI models enter the battlefield. These AI models don’t just rely on historical data but adapt based on outcomes from each round of competition. The AI models are constantly refining their strategies after each prediction battle, learning from both human participants and market changes. This ensures that AI evolves based on real-world conditions rather than relying on outdated datasets. Rewards System: Winners—whether human or AI—are rewarded based on the accuracy of their predictions. The platform encourages a fair and transparent ranking system, ensuring the most precise and effective strategies are rewarded. Incentivizing AI growth: The rewards also contribute to the continuous development of the AI, making it smarter over time. AI Learning Process: With every competition, the AI models learn from their mistakes and adapt to improve. Instead of relying on a one-time training model, the AI evolves through ongoing real-time data and predictions, becoming more efficient and effective after each battle. This model shifts the paradigm from static AI training (based on past data) to dynamic, live learning—allowing AI to react to market trends, volatility, and even human behavior. The platform enables a cyclical learning process, where both humans and AI constantly push each other to evolve and outperform. Why REKT-AI Is Revolutionary Real-Time AI Training: Traditional AI models are trained on large, static datasets. REKT-AI flips the script by allowing AI to learn dynamically, in real-time, as it competes against live market predictions. This makes the AI more responsive to changes and gives it a significant edge in volatile markets. Gamified Engagement: The competitive, gamified nature of the platform keeps users engaged while contributing to the AI’s evolution. As users compete, they’re actively helping the AI improve, while at the same time, receiving rewards for their success. Permissionless Participation: Anyone can join the prediction battles—whether you’re an experienced trader, a beginner, or just someone interested in testing AI strategies. The platform is open and accessible, promoting a decentralized approach to AI development and market prediction. Adaptive AI: Unlike conventional models, where AI is trained once and set aside, REKT-AI ensures that the AI constantly learns and adapts, making it a powerful tool for a wide range of financial applications. As it learns from each battle, it gets better at predicting market movements. Potential Use Cases for REKT-AI Hedge Funds & Professional Traders: Use REKT-AI to train and refine AI models for real-time market predictions. Hedge funds can optimize their trading strategies by testing AI models in competitive environments. Retail Traders: Retail traders can use the platform to test AI-driven strategies alongside human strategies. It can help individual traders improve their understanding of AI’s potential and use it as a tool for more informed decision-making. AI-as-a-Service: Businesses can leverage REKT-AI to offer AI-powered market predictions as a service. It provides an opportunity for companies to build products that use AI predictions for market insights, financial forecasting, or risk analysis. Why REKT-AI Is the Future Adaptive AI: With the constant, live learning process, REKT-AI ensures that AI models stay ahead of market trends and evolve at a rapid pace. Engagement & Incentives: By allowing humans to compete directly with AI, REKT-AI offers a unique gamified experience, making it both an educational and competitive tool. Open Access: REKT-AI promotes permissionless participation, allowing anyone to join and contribute, democratizing access to AI-powered market predictions. Conclusion REKT-AI is not just a prediction platform; it’s a space where AI evolves through real competition. Whether you’re a trader, an AI enthusiast, or a business looking to use cutting-edge AI to predict market movements, REKT-AI offers a dynamic, evolving platform that improves AI in real time. By combining human intelligence and AI’s adaptability, REKT-AI is shaping the future of AI-driven market prediction.How it's MadeHow REKT-AI Was Built Frontend: We used Next.js to build the frontend. It helps us create fast, responsive pages and manage dynamic content, making the user experience smooth. Backend: The backend is built with TypeScript, which helps us maintain clean, reliable code. This backend handles user interactions, connects with the AI, and fetches data from various sources like Binance for real-time market data. AI Agent: The AI model is powered using Coinbase's Developer Platform (CDP), which allows us to access their tools to gather market data and help the AI make predictions. The AI improves over time by learning from the outcomes of each prediction battle. Smart Contracts: We use Foundry for developing smart contracts. These contracts manage user predictions, verify outcomes, and distribute rewards. Data: We gather real-time market data from Binance and use Subgraph to query blockchain data. We store everything in a PostgreSQL database to keep track of user predictions and rewards.",
    "summary": "REKT-AI is a battle royale-style AI prediction market where users and AI compete to make the most accurate market predictions. Win rewards, train AI through competition, and shape the future of decentralized trading intelligence. Train-to-earn meets high-stakes forecasting!"
  },
  {
    "title": "AgentForge",
    "url": "https://ethglobal.com/showcase/agentforge-h0047",
    "description": "Project DescriptionAgentForge: No-Code AI Agent Launchpad for Automated DeFi Yield Optimization Project Overview AgentForge is a revolutionary platform that enables users to create and deploy AI-powered DeFi agents without coding knowledge. The platform specializes in cross-chain yield optimization, allowing users to either create their own yield-generating vaults or invest in existing ones. Core Features Vault Creation System Users can create customized yield-generating vaults without coding Set specific parameters for asset allocation and risk management Define investment strategies through a user-friendly interface Implement custom policies and constraints for the AI agent Configure fee structures for vault administration AI Agent Management AI agents monitor market conditions across multiple chains Automated yield optimization based on user-defined strategies Real-time strategy execution within defined parameters Smart rebalancing across different protocols and chains Risk management and policy enforcement Vault Explorer Browse existing vaults and their performance metrics View historical yields and risk metrics Transparent fee structures and admin information Easy deposit and withdrawal interface Real-time portfolio tracking Technical Architecture Smart Contract Layer HyperHarvest contract for cross-chain yield farming Integration with AAVE and other DeFi protocols Chainlink CCIP for secure cross-chain operations ERC4626 compliant vault structure Secure fund management and yield distribution Security Features Lit Protocol's Agent Wallet for secure key management Policy-based execution constraints Multi-layered security checks Emergency withdrawal mechanisms Automated risk management Protocol Integrations AAVE for lending and borrowing Chainlink for cross-chain communication DEX aggregators for optimal swaps Yield protocols across multiple chains Market data oracles User Benefits For Vault Creators Earn admin fees from successful vault performance No coding required to create sophisticated strategies Full control over investment parameters Customizable risk management Access to advanced AI optimization For Investors Access to AI-optimized yield strategies Transparent performance metrics Simplified investment process Reduced gas costs through optimization Professional-grade portfolio management AI Strategy Execution Market Analysis Real-time yield comparison across chains Gas cost optimization Slippage prediction Market sentiment analysis Risk-adjusted return calculations Optimization Process Continuous monitoring of yield opportunities Automated rebalancing when profitable Gas-efficient execution of trades Cross-chain arbitrage when beneficial Dynamic asset allocation Technical Requirements Frontend React/Next.js for user interface Web3 integration for wallet connection Real-time market data display Portfolio visualization tools Strategy configuration interface Backend Node.js server for AI agent coordination Python for market data analysis API integrations with DeFi protocols Cross-chain monitoring system Performance analytics engine Blockchain Multi-chain support (Arbitrum, Base, etc.) Smart contract deployment and management Cross-chain message passing Gas optimization Secure transaction execution Unique Value Proposition No-Code Solution: Makes sophisticated DeFi strategies accessible to non-technical users AI Optimization: Leverages artificial intelligence for optimal yield generation Cross-Chain Efficiency: Seamlessly operates across multiple blockchain networks Security First: Implements robust security measures through Lit Protocol Automated Management: Reduces manual intervention while maintaining control Future Developments Additional protocol integrations Advanced AI strategy templates Enhanced risk management tools Social features for vault creators Mobile application development Target Audience DeFi enthusiasts seeking automated yield optimization Investment managers looking to create digital vaults Retail investors wanting professional-grade portfolio management Crypto projects seeking treasury management solutions Traditional finance users entering DeFi This project combines the power of AI, DeFi, and automation to create a user-friendly platform for maximizing yield opportunities across the blockchain ecosystem, all while maintaining high security standards and user control.How it's MadeAgentForge is built as a multi-layered DeFi platform that combines AI-driven automation with secure cross-chain operations. At its core, it uses Lit Protocol's Agent Wallet system to create secure, programmable wallets that execute AI-optimized strategies while adhering to user-defined policies and constraints. The platform's smart contracts are based on the ERC4626 vault standard and integrate with AAVE for lending operations, while using Chainlink CCIP for cross-chain communication. The AI agent system continuously monitors market conditions and executes yield optimization strategies through registered tools that are bound by predefined policies. Users interact with the platform through a React/Next.js frontend that provides intuitive interfaces for vault creation and management. Behind the scenes, a Node.js backend coordinates the AI agents and manages market data analysis, while smart contracts handle the secure movement and management of funds across different chains. The vault creation process is simplified through a no-code interface where users can define their strategies, which are then translated into executable policies and tools for the AI agent. All transactions and strategy executions are secured through Lit Protocol's MPC-based key management system. For cross-chain operations, the platform leverages HyperHarvest contracts that utilize Chainlink CCIP to securely bridge assets and execute strategies across different networks while maintaining optimal gas efficiency. The system implements a comprehensive security architecture that includes multi-layered policy enforcement, secure key management, and automated risk controls to protect user funds while maximizing yield opportunities. Each vault operates as an autonomous entity, with its AI agent working within the defined parameters to optimize yields while automatically distributing profits between users and vault creators according to predetermined fee structures.",
    "summary": "AgentForge is a no-code platform that enables users to create and deploy AI-powered DeFi vaults, where fund creators can define custom strategies and policies for automated yield optimization across multiple chains"
  },
  {
    "title": "ecofren",
    "url": "https://ethglobal.com/showcase/ecofren-r3z5f",
    "description": "Project DescriptionThis document describes an interactive game designed to help people move towards an eco-social lifestyle. The game is called \"ecofren\" in English. It explores themes such as materials, movement, energy, ownership, and well-being. The game encourages players to reflect on their consumption habits and consider more sustainable alternatives. The hidden agenda of the game is to educate commons to enter the web3-space. Tools like dWallets are essential, there should be a great reason to use them. Gaming is a natural method to rise interest, especially with the connection with sustainability and DeFi. The game should inspire individuals and it is supposed to be fun. It aims to promote a lifestyle that is both ecologically sound and socially responsible. The game is designed to be non-judgmental and encourages players to realistically assess their daily choices. The game could benefit from AI assessing the questions and statements and even giving some easy tasks during the game to activate physical actions during the game. The production of the game is related to values that aim for sustainability in every area of influence. At the same time, the game should be entertaining and slightly challenging. Typical features of the games can be used. One idea is to fit the game into some existing and well-known imaginary environment.How it's MadeThis game is a small part of a larger whole and can be implemented within this short timeframe: at least some features of it. Technical details are open and will be defined after the team is established. The game will be build on web3 and it will benefit from AI. The information and the features will be added at the time the project evolves. Dev tools: arbitrum stylus for SC development and foundry's cast Network: arbitrum sepolia Programming languages: rust, typescript Libraries: react, nodejs, wagmi, and phaser AI-tools: Synthesia, Gemini, Grok Databases: supabase (with postgresql) Design: Figma, Figma-libraries",
    "summary": "make sustainable lifestyle fun again!  smart moves can be fun via gaming"
  },
  {
    "title": "RunJudge",
    "url": "https://ethglobal.com/showcase/runjudge-t9wew",
    "description": "Project DescriptionRunning challenges with friends should be fun, fair, and rewarding. RunJudge makes it happen by combining Strava activities, AI verification, and USDC prizes on Base. Create a challenge, set a distance and prize pool in USDC, and let our AI judge analyze Strava activities to determine the winner - all without needing crypto knowledge! The platform uses AI to analyze Strava data, ensuring fair competition by detecting potential manipulation and normalizing performances across different distances. Heart rate data verification and pace analysis guarantee legitimate submissions.How it's MadeSmart Contracts Deployed on Base, our RunJudge.sol contract handles: Challenge creation with USDC staking Participant management (max 2 per challenge) Activity submission via Strava activity IDs Automated prize distribution to winners Gasless transactions via Base Paymaster & Coinbase Smart Wallets AI Verification with Coinbase Agent Kit Our agent service leverages Coinbase's Agent Kit for autonomous on-chain actions: LangChain with Google's Gemini for activity analysis Image processing of Strava screenshots Heart rate data verification Pace normalization across distances Automated winner declaration on-chain Secure wallet management via Coinbase Developer Platform's Wallet Provider Modern Web Stack Frontend Framework Next.js 15 with App Router Coinbase OnchainKit for: Wallet connections Fiat on-ramping Identity management Viem/Wagmi for type-safe contract interactions shadcn/ui components built on Radix primitives Tailwind CSS for styling Backend & Data The Graph for challenge data indexing: Lifetime earnings tracking Available challenges discovery Participant statistics Subgraph deployment on Base OpenRouter as an AI load-balancing platform Challenges Our main technical hurdle was Strava's API limitations. We built a respectful web crawler to extract essential activity data while awaiting approval for API access. This temporary solution lets us analyze key metrics but misses out on richer data points available through official integration since we rely on what's normally shown to the user.",
    "summary": "RunJudge - An AI-powered judge for social fitness challenges that verifies Strava runs while funds are staked. Think of it as a decentralized fitness escrow with a sassy personality that won't let you get away with taking the bus. 🏃‍♂️🚌 ```"
  },
  {
    "title": "Treekipedia",
    "url": "https://ethglobal.com/showcase/treekipedia-wupaw",
    "description": "Project DescriptionDeepTrees is an AI-driven, agent-centric platform that revolutionizes tree research. When a user initiates a research request, our AI research agent (powered by AgentKit) scours the web via the Perplexity API to gather unstructured tree data. GPT‑4o then refines this raw data into a standardized JSON format that fits our database schema. The structured research is stored in PostgreSQL and uploaded to IPFS, generating a unique CID. A custom AgentKit action subsequently triggers an on‑chain EAS attestation on Base L2 to verify the data. Finally, two NFTs are minted—an NFTree (ERC‑721) to the central repository wallet and a Contreebution NFT (ERC‑1155) to reward the contributor. This end‑to‑end process transforms raw, scattered information into actionable, verified knowledge.How it's MadeDeepTrees automates tree research through a modular, end‑to‑end workflow: AI-Powered Data Gathering: The AI research agent (powered by AgentKit) initiates a search using the Perplexity API and then employs GPT‑4 to convert raw, unstructured tree data (from scientific and common names) into a standardized JSON format. Data Storage & Persistence: The structured JSON is stored in a PostgreSQL database and simultaneously uploaded to IPFS via Lighthouse, which returns an immutable CID as a reference. On‑Chain Verification & NFT Minting: Using AgentKit, our system calls the attestation module to perform an EAS attestation—recording the IPFS CID on Base L2—and then calls our NFT minting module to create two NFTs: NFTree (ERC‑721): Sent to the Treekipedia wallet. Contreebution NFT (ERC‑1155): Sent to the contributor’s wallet. Unified API Response: The backend (Node.js/Express on a DigitalOcean VM) orchestrates the entire process and returns the final structured JSON—complete with research data, the IPFS CID, and on‑chain transaction details—to the Next.js frontend, where users view the verified research.",
    "summary": "DeepTrees is an AI-powered platform that automates tree species research—transforming unstructured data into verified, structured knowledge. Using AgentKit on Base L2, it stores data in PostgreSQL & IPFS and mints NFTs to reward contributors."
  },
  {
    "title": "AiMag",
    "url": "https://ethglobal.com/showcase/aimag-1h515",
    "description": "Project DescriptionThis platform should work in all states, complying with their laws. Ordinary people, as well as entrepreneurs and organizations, can sell their goods and services directly, without intermediaries, all over the world. Both new and used goods can be sold. This will be an international site, which, with the help of AI, will automatically adjust to national languages, currencies, working hours of the seller and buyer, and automatically conduct dialogs outside of working hours. AI will also calculate the delivery of goods.How it's MadeSince I'm not a programmer, I didn't design the software part of the project. For this purpose, I am looking for a team here to jointly try to create this project. I myself have experience in organizing various projects and also have experience in website design. So, I think that with the help of a solid team we can create something interesting.",
    "summary": "Trading platform, like Amazon, Ebay and Aliexpress, but only with a focus on international cooperation of individuals, entrepreneurs and large organizations"
  },
  {
    "title": "Savant Chat",
    "url": "https://ethglobal.com/showcase/savant-chat-hh0ua",
    "description": "Project DescriptionSavant Chat is an advanced AI-driven platform that audits Solidity smart contracts for potential security threats and vulnerabilities. Leveraging the deepseek and voyage models, it automatically pinpoints critical and major issues—such as reentrancy attacks, overflow/underflow bugs, and access control flaws—before they can be exploited. Savant Chat empowers developers with rapid, accurate, and actionable insights, helping them build and maintain secure blockchain solutions without the complexity of manual code reviews.How it's MadeSavant Chat operates as an AI agent that orchestrates multiple steps in a layered auditing process. First, we use tree-sitter and voyage-code-3 to parse and segment Solidity code, forming a detailed context for the model to work with. Then, for each segment, our AI agent adopts a “paranoid” stance—evaluating which classes of vulnerabilities could theoretically exist in that snippet. Next, we leverage a reasoning LLM, running it multiple times per segment under the assumption that a specific class of vulnerability is definitely present, prompting the LLM to localize it precisely. Any identified vulnerabilities are then forwarded to a dedicated critic model, which filters out false positives to ensure higher accuracy. Beyond this core flow, we’re experimenting with further techniques to enhance deep analysis. These include selectively rewriting and simplifying code to better expose security issues and exploring the execution of code in virtual machines for dynamic testing.",
    "summary": "Savant Chat is an automated Solidity smart contract auditor powered by the deepseek and voyage models, designed to spot critical and major vulnerabilities. It delivers fast, accurate insights to strengthen code security and reduce risk in blockchain applications."
  },
  {
    "title": "chaintool",
    "url": "https://ethglobal.com/showcase/chaintool-4oqpz",
    "description": "Project DescriptionChaintool is an on-chain and dynamic toolchain built for CDP AgentKit that enables AI agents to discover and interact with smart contract tools dynamically. The system consists of a smart contract registry where anyone can register new tools, making them immediately available to all agents. Each tool is documented with descriptions and ABIs, allowing AI agents to understand and utilize them without prior knowledge. The key innovation is that agents can discover and use new tools while they are running, even if they didn't have access to them during initialization. Furthermore, agentic tools are now realized as on-chain assets, exposing them to the many applications of dApps. This creates an expandable ecosystem of agent-compatible smart contract tools that can grow organically.How it's MadeThe project is built using several modern web3 technologies and devtools. Smart Contracts Solidity (solc 0.8.28) Foundry for development and testing Deployed on Base Sepolia network Agent SDK Built with Bun runtime Integrates with CDP (Coinbase Developer Platform) Uses OpenAI for the AI component Implements HDKey wallets with Viem for blockchain interactions, derived from CDP Wallet seed AgentKit integration for agent behaviors, 4 actions for Chaintool Nillion SecretVault to save & restore used Chaintool history via 2 actions Frontend Web interface deployed on Vercel Uses OnchainKit for blockchain interactions Used React & Vite for development Architecture Core registry contract (AgentToolRegistry) that manages tool registration Tools are defined as structs containing metadata (name, description, ABI types, categories) where ABIs are human-readable ABI types for better AI comprehension Implements EVM-compatible smart contracts for multi-chain capabilities",
    "summary": "An on-chain toolchain for CDP AgentKit, where agentic tools can be dynamically defined as smart-contracts."
  },
  {
    "title": "Bai Shi",
    "url": "https://ethglobal.com/showcase/bai-shi-hmdgr",
    "description": "Project DescriptionBai Shi (or Whiterock in Chinese) is a financial advisory service powered by multiple AI agents. We guide you in discovering your unique financial objectives, curating personalized strategic asset allocations, and seamlessly managing on-chain investments on your behalf. We believe that as RWAs (Real-World Assets) move on-chain, investors will face an overwhelming surge of opportunities. By leveraging large-scale intelligence through LLMs, we democratize financial advisory services—making them accessible to everyone, not just the wealthy. We will disrupt this ~$100 billion market by eliminating unnecessary intermediaries and drastically reducing fees.How it's MadeWe use reasoning LLM to understand the investor's risk preference and translate that into strategic asset allocation by using the RAG technique. We use AgentKit by Coinbase to handle on-chain transactions on behalf of our users. And let the Graph do indexing for calculating financial information on-chain for us.",
    "summary": "Your personal financial advisory agent. Helping you reach your investing goals through on-chain economy."
  },
  {
    "title": "TrexFood by Nata",
    "url": "https://ethglobal.com/showcase/trexfood-by-nata-cq2cw",
    "description": "Project DescriptionTrexFood by Nata is a cutting-edge decentralized food delivery platform that seamlessly blends AI intelligence with Starknet’s high-performance infrastructure and Nethermind’s technology to create a secure, efficient, and personalized food ordering experience. At its core, TrexFood features Nata, an AI-powered food concierge that understands user preferences, provides tailored meal recommendations, and facilitates orders through natural language interactions. Core Technologies Behind TrexFood 🚀 AI-Powered Intelligence with OpenAI Assistants Conversational ordering using advanced natural language processing Personalized meal recommendations based on dietary preferences Real-time image generation for meal previews using DALL-E 3 Dynamic menu customization, learning from user interactions AI Agent (Nata) powered by OpenAI’s Assistants API, using Threads & Runs for external tool access and enhanced adaptability 🔗 Web3 Integration with Starknet & Nethermind Built entirely on Starknet for high-speed, low-cost transactions Smart contracts on Starknet handle order processing, payments, escrow, and loyalty rewards Nethermind’s infrastructure powers fast and reliable blockchain interactions Wallet-based authentication with Starknet-compatible wallets like Braavos & ArgentX Transparent fund management and on-chain verifications for secure payments 🎨 Enhanced User Experience with React & Vite Frontend built with React, TypeScript (Vite), and TailwindCSS Neon-themed, responsive UI with smooth animations Gamified favorites system with on-chain loyalty rewards Mobile-first design with intuitive gesture controls Interactive AI-driven chat interface for a seamless ordering experience How TrexFood Uses Starknet & Nethermind ✅ Fetching Menus & Restaurant Listings: Smart contracts store restaurant details and menus on Starknet Nethermind’s technology powers optimized Starknet interactions, ensuring smooth data retrieval ✅ Placing Orders & Payments: Smart contracts on Starknet handle order placement, payments, and loyalty points Blockchain-based escrow system ensures fair and transparent transactions Secure, low-cost transactions using Starknet’s scalability ✅ AI-Driven Order Management: Nata interacts with the Starknet blockchain, retrieving real-time order statuses AI-driven chat assistant facilitates voice/text-based food ordering Future Roadmap Blockchain escrow system for dispute-free payments Community leaderboards & rewards for frequent users Cross-chain expansion beyond Starknet for broader adoption Currently Implemented Features ✔️ AI-powered food recommendations & chat ordering ✔️ Real-time menu fetching via Nethermind’s Starknet infrastructure ✔️ Secure wallet authentication with Starknet ✔️ On-chain smart contracts for payments, orders & loyalty points ✔️ Voice-activated ordering with AI speech recognitionHow it's MadeTo start with, yes, we did integrate partner technology—Nethermind—to power key aspects of this project. For transactions, we use Stark as our transactional token, ensuring secure and efficient payments within the platform. On the frontend, we’ve built the platform using React-TypeScript on Vite, styled with TailwindCSS, for a seamless and responsive user experience. For Nata, the AI Agent, we leverage OpenAI’s API to create Assistants, Threads, and Runs. Runs enable flexibility by allowing the agent to access external tools, enhancing its capabilities. Additionally, we are developing smart contracts on Starknet, enabling food ordering transactions, an escrow system, and a loyalty points mechanism.",
    "summary": "TrexFood by Nata: A Web3-Powered AI Food Concierge on Starknet"
  },
  {
    "title": "BasedContracts",
    "url": "https://ethglobal.com/showcase/basedcontracts-s20va",
    "description": "Project DescriptionContractors are not as direct as I am. It may take several texts/calls/emails to get to a meeting set up or some other finality. If this happens for only one contractor, imagine managing this for several contractors across multiple areas (plumbing, electrician, flooring, siding, etc.) I don’t have the capacity (sometimes patience) to want to deal with all of that and I don’t think I should have to if I don’t want to deal with that admin work. Especially if I have a full time job I need to focus on. Drains mental capacity trying to organize all this too.How it's MadeTech Stack Frontend: Next.js, TypeScript, Tailwind CSS Blockchain: Hardhat, Solidity, wagmi AI: Coinbase AgentKit (Enhanced) Wallet: Coinbase MPC Wallet (coming soon) Payments: Coinbase Onramp, Fund Components (coming soon) Design: Onchain Kit components Testing: Hardhat test suite Deployment: Vercel Back end: We have users: Going to a site Connecting wallets Filling out forms/training LLMs Verifying identity/onchain profile Receiving rewards/tokens for onboarding contractors/other users? We need incentives! We have agents communicating back and forth with the goals of Roughly agreeing on job opportunity Setting a meeting date Agreeing to terms Reviewing and signing a contract Client paying contractor agreed amount Checking client’s balance for enough funds Possibly funding client’s wallet Sending money (crypto or fiat) to contractor’s balance Subtracting money (crypto or fiat) from client’s balance Langchain/LLM: Train it with my thinking/reasoning/expectations Want best quote/price May not be able to afford full price and may request financing or payment plan Want qualified professionals Either in a soon timeframe or I have some time May be late for a meeting, or have to reschedule due to other conflicts May have something in mind for a project Train contractors thinking/reasoning/expectations Wants to get job done ASAP (in order to receive payment) May quote higher price initially in order to make a profit May be late for a meeting, or have to reschedule due to other conflicts May have recommendations for how to achieve best result on project",
    "summary": "AI agents to help homeowners work with contractors during house renovations"
  },
  {
    "title": "Xtreamly",
    "url": "https://ethglobal.com/showcase/xtreamly-r4h63",
    "description": "Project Description🚀 Multiagent Application for Token Swapping with mindshare Data Evaluation & Xtreamly Volatility Optimization 🌍 Overview This project implements a multiagent framework 🤖 for user-driven token swaps. Multiple agents collaborate to assist users in making optimal swap decisions while navigating market volatility 📈. A key feature is the dynamic agent tool selection based on the Xtreamly Volatility 60-minute prediction model ⏳. 🔑 Key Features: 🤝 Multiagent decision-making: LLM-powered agents analyze market data and provide recommendations. 🔄 Dynamic agent selection: Adaptive selection of top-performing agents based on real-time market conditions. 📊 Xtreamly Volatility Prediction: A predictive model optimizes tool selection and execution speed. 💰 Swap management strategy: Ensures an equally distributed exposure among high-potential tokens. ⚡ AI-Powered Trading Agent Development The core of this project is the LLM-driven agent, which autonomously selects, rebalances, and executes trading strategies based on market conditions. Technologies Used: Eliza Framework – A production-ready AI framework used to build the agent. Gaianet (Custom Gaia Node) – A decentralized knowledge base that enhances the AI agent's decision-making capabilities. Collab.land’s AI Agent Starter Kit – Used for rapid development and integration into the DeFi ecosystem. Autonome: our AI agent framework has been Uploaded on Autonome and launched via AltLayer’s Autonome. Xtreamly AI Models – Provide real-time volatility predictions and quantitative analytics. Decision-Making Process: 1️⃣ Market Volatility Classification The agent uses xtreamly_volatility() to determine market conditions: Low Volatility: Prioritizes stable & undervalued assets. High Volatility: Focuses on volatile & active assets. 2️⃣ Token Selection The agent selects the top 10 tokens using multiple ranking functions, evaluating: Market cap growth Price momentum Engagement metrics (social & trading activity) Volatility & risk-adjusted returns 3️⃣ Exposure Rebalancing & Execution Closes positions on non-selected tokens. Allocates funds equally across the new top 10 tokens. Executes transactions autonomously on-chain. 🏦 Smart Contract Deployment & Automation The trading logic is executed via smart contracts, ensuring transparent, trustless, and secure operations. ✅ Deployments: Arbitrum Mainnet – Optimized for low-cost, high-speed execution. Tech Stack for Smart Contracts: Solidity – Core language for smart contract development. Hardhat – Used for testing, deployment, and debugging. Chainlink Oracles – Provides real-time price feeds & volatility data. MEV Protection Tools – Integrated to prevent front-running & sandwich attacks. 🔐 Hosting & Security (Autonome Integration) To ensure secure execution and verifiability, the AI agent is hosted on Autonome, a platform for deploying autonomous AI agents. Implementation Steps: ✅ Uploaded the AI agent framework onto Autonome. ✅ Created a hosted AI agent to run trading strategies in a verifiable environment. ✅ Built a user-facing interface with a ChatGPT-like UX, enabling users to interact with the agent. 🔗 Blockchain & API Integrations To enhance performance and data accuracy, we integrated with major blockchain APIs and DeFi infrastructure. Key Integrations: ✅ Eliza framework ✅ Gaianet (Custom Gaia Node) – Provides a comprehensive knowledge base for AI-driven decision-making. ✅ Autonome ✅ Xtreamly API – Supplies real-time volatility forecasts to the AI agent. ✅ Autonome – Protects against front-running & ensures efficient trade execution. ✅ cookie dao API for mind-share data ingestion for better decision making 💡 Notable Innovations Multiagent Collaboration: Agents work together in real-time, optimizing decisions through collective input, enabling more accurate and efficient swap strategies. Adaptive Agent Selection: The framework dynamically chooses the best-performing agents based on real-time market data, ensuring that users always receive the most effective advice and execution. Smart Exposure Management: Ensures balanced token exposure across multiple assets, minimizing risk and maximizing potential returns through an optimized swap management strategy. Optimized swap Execution – analyze and collaborative recommendation of best performers based on market volatility conditions, whale attention patterns, Process social signals before price movement.Track real-time mindshare metrics and Monitor whale attention patterns. to maximize capital efficiency without liquidation risks. Autonome + TEE for AI Verifiability – usnig Autonome framework ensured tamper-proof AI execution for trustless automated trading. 🔮 Future Enhancements 📢 Social Media Sentiment Analysis: OpenAI models to detect influencer-driven trends. 🤖 Reinforcement Learning: Dynamic optimization of agent selection. 📉 Advanced Volatility Prediction: Improved ETH price correlation models. 🏦 Expanded Agent Pool: More specialized agents for granular decision-making. 🔎 Enhanced Cookie DAO Token Evaluation: New volatility-based investment strategies. 🤖 Mev protection integration Multiple integration with DEXes to make swap seamlessly PS: We have selected AutoGen 🔄 as our framework due to its: 📡 Flexible API for defining agents and multi-agent communication. 🧠 Integration with human inputs, enabling AI-human collaboration. 🛠️ Streamlined workflows with built-in utilities like caching, API unification, and error handling. Other frameworks such as LangChain, LangGraph, CrewAI, and AutoGPT also offer robust features. However, AutoGen stands out for its advanced capabilities in building complex, scalable multi-agent systems with an improved user experience.How it's Made AI-Powered Trading Agent Development The core of this project is an LLM-driven AI agent that autonomously selects, rebalances, and executes trading strategies based on real-time market conditions. Technologies Used: Eliza Framework: A production-ready AI framework deployed on Arbitrum and BASE for high-speed, low-cost execution. Gaianet (Custom Gaia Node): A decentralized knowledge base enhancing the AI agent’s decision-making abilities with deep insights. Collab.land’s AI Agent Starter Kit: For rapid development and seamless integration into the DeFi ecosystem. Xtreamly AI Models: Deliver real-time volatility predictions and quantitative analytics, enabling dynamic decision-making. Decision-Making Process: Market Volatility Classification: The agent uses xtreamly_volatility() to classify market conditions: Low Volatility: Prioritizes stable, undervalued assets. High Volatility: Focuses on volatile, high-momentum assets. Token Selection: The agent selects the top 10 tokens based on a series of ranking functions, evaluating: Market cap growth, price momentum, engagement metrics (social & trading activity), volatility, and risk-adjusted returns. Exposure Rebalancing & Execution: Closes positions on non-selected tokens. Allocates funds equally across the new top 10 tokens. Executes transactions autonomously on-chain for seamless trading. 2. Smart Contract Deployment & Automation All trading logic is executed via smart contracts, ensuring transparency, trustlessness, and security. Deployments: Arbitrum Mainnet: Optimized for low-cost, high-speed execution. Solidity: Core language for smart contract development. Hardhat: For testing, deployment, and debugging. Chainlink Oracles: Provides real-time price feeds and volatility data for reliable decision-making. 3. Hosting & Security (Autonome Integration) To ensure secure execution and verifiability, we hosted the AI agent on Autonome, a platform designed for deploying autonomous agents in trust-minimized environments. Implementation Steps: Uploaded the AI agent framework onto Autonome. Created a hosted AI agent to run trading strategies in a verifiable environment. Built a user-facing interface with a ChatGPT-like UX, enabling users to interact with and monitor the agent’s performance. 4. Blockchain & API Integrations We enhanced performance, data accuracy, and security by integrating with major blockchain APIs and DeFi infrastructure. Key Integrations: Lit Protocol: For secure access control and cryptographic tools. Gaianet: Providing a comprehensive knowledge base for AI-driven decision-making. Xtreamly API: Supplies real-time volatility forecasts to inform the agent’s decisions. Innovative Approaches (What We Did Hacky) We pushed the boundaries of traditional DeFi strategies with some bold, hacky innovations: Optimized Recursive Leverage Execution: We customized loan loops to maximize capital efficiency and minimize liquidation risks, enabling more flexible and resilient strategies. Smart Exposure Rebalancing: Our LLM agent dynamically adapts, closing underperforming positions and reallocating funds to higher-performing assets automatically—allowing the agent to respond to market fluctuations in real-time. Autonome + TEE for AI Verifiability: By hosting the agent on Autonome, we ensured tamper-proof AI execution, promoting trustless and automated trading that’s verifiable and secure. Multi-Layered MEV Protection: We designed gas-efficient transactions and implemented strategies to minimize MEV exploits, protecting traders from front-running and sandwich attacks.",
    "summary": "multiagent framework optimizes token swaps w. predictive data evaluation. Multiple agents collaborate in realtime, dynamically selecting top performers based on market conditions, delivering AI-driven volatility optimization for smarter, faster, and more efficient swap decisions."
  },
  {
    "title": "AgentStatuette",
    "url": "https://ethglobal.com/showcase/agentstatuette-hn50c",
    "description": "Project DescriptionAs a community manager in Web3, you often need to: Send tokens to multiple community members Check wallet balances frequently Distribute test tokens (faucets) to builders Monitor transaction statuses Handle various onchain operations AgentStatuette automates these tasks, saving you time and reducing the complexity of blockchain interactions. Key Features 🚀 🏦 Smart Wallet Management View wallet address and network details Check token balances with precise 3-decimal display Monitor transaction history 💧 Automated Faucet Distribution Easily distribute test tokens to community members Streamlined process for Base Sepolia network Track faucet distribution history 💰 Token Operations Check wallet balances with high precision View token holdings across different networks Real-time balance updates 💸 Efficient Token Transfers Send tokens to community members Batch operations support Transaction status monitoring 🤖 Autonomous Mode Automate repetitive tasks Schedule regular operations Monitor and manage operations hands-free How it's MadeAgentStatuette is built with a modern tech stack, combining AI and blockchain technologies: Frontend Architecture Next.js App Router: Leverages the latest Next.js 14 features for optimal performance React Components: Built with TypeScript for type safety Tailwind CSS: Responsive and modern UI with custom gradients and animations Real-time Updates: WebSocket integration for live balance and transaction updates AI Integration OpenAI GPT-4: Powers the natural language understanding LangChain: Orchestrates the AI interactions and tool usage Custom Prompts: Specialized prompts for blockchain operations Memory System: Maintains context across conversations Blockchain Integration CDP AgentKit: Core integration with Base network Wallet Management: Secure MPC wallet implementation Transaction Handling: Automated transaction creation and monitoring Network Support: Primary support for Base Sepolia testnet Key Components Chat Interface Real-time message handling Markdown support for formatted responses Error handling and retry mechanisms Autonomous Agent Task scheduling and automation Configurable operation intervals State management for continuous operations Wallet Operations Balance checking with 3-decimal precision Token transfer automation Faucet distribution management Security Features Environment-based configuration Secure key management Rate limiting and error handling",
    "summary": "AI Agent of community manager. manage onchain life  AI Agent of community manager. manage onchain life"
  },
  {
    "title": "Blackbeard",
    "url": "https://ethglobal.com/showcase/blackbeard-ytnb2",
    "description": "Project DescriptionBlackbeard is an open-source decentralized application (dApp) designed for Ethereum developers and enthusiasts who need seamless access to essential Ethereum testnet functionalities. Built specifically for the ETHGlobal \"Agentic Ethereum\" Hackathon, Blackbeard provides an all-in-one solution for managing testnet wallets, retrieving balances, acquiring test ETH, and staying updated with real-time crypto news. This project is deployed on the Sepolia Ethereum testnet, making it a valuable tool for blockchain developers, testers, and researchers working on Ethereum-based applications. With its user-friendly interface and AI-powered search capabilities, Blackbeard enhances the developer experience by reducing friction when working with Ethereum testnet operations.How it's MadeTech Stack Backend NestJS (with Prisma ORM) PostgreSQL (Database) Frontend Next.js (with i18n support) Tailwind CSS TypeScript AI Module Python (for AI-powered search and price fetching) Tools TurboRepo (Monorepo management) PNPM (Package manager) Ethers.js (Ethereum interaction)",
    "summary": "Blackbeard is your all-in-one AI powerhouse built for multitasking, secure management, and dynamic agent connectivity on a single platform. Our MVP takes automation to the next level simply chat with our AI agents, and they’ll handle trading, decision-making"
  },
  {
    "title": "Chroma",
    "url": "https://ethglobal.com/showcase/chroma-5miw2",
    "description": "Project Descriptionwe’re building an agentic settlement layer, kind of an Agent to agent decentralized intent solver protocol for any on-chain operation. Basically you ask the agent to handle your wallet, and ask it to do onchain actions like transfer, deposit in a protocol or any other onchain action. Then the agent will convert your wishes in an intent and broadcast it to the solver network (via gossip network Waku). Here the solvers will receive the intent and answer with a way to solve it. After that the agent/user can confirm the proposed actions, sign them and send to the blockchain.How it's MadeThe protocol will be focused in agents, so we will have an api for the agents to interact with chroma-agent to translate intents and manage the solvers operations. We use eliza framework to build the chroma-agent that the other agents will interact with and translate the intents. Waku gossip network (decentralized message protocol) to broadcast the intents and receive the proposals. Then the solvers could be in any technology that can listen and push messages to Waku (or any other network in the future) to answer proposals. Now it's integrated in the same Eliza for simplicity",
    "summary": "Agent to agent decentralized intent solver for any on-chain operation"
  },
  {
    "title": "NeuralFi",
    "url": "https://ethglobal.com/showcase/neuralfi-hgw85",
    "description": "Project DescriptionNeuralFi Yield Aggregator is a sophisticated DeFi protocol designed to enhance yield farming and asset management. By leveraging Uniswap for efficient token swaps, Aave for lending and borrowing, GMX for decentralized trading, and Curve for stablecoin liquidity optimization, this smart contract provides users with an AI-powered yield generation system. The contract allows an AI agent to automate DeFi strategies, ensuring optimal returns by dynamically interacting with multiple DeFi protocols. With security, efficiency, and decentralization at its core, NeuralFi Yield Aggregator enables seamless and intelligent asset management in the evolving Web3 ecosystem.How it's MadeNeuralFi Yield Aggregator is a decentralized AI-driven DeFi protocol that optimizes yield generation by integrating Uniswap, Aave, GMX, and Curve. It leverages EigenLayer AVS for secure validation and Coinbase AgentKit for seamless automation. Built on Arbitrum, it ensures efficient token swaps, lending, and trading with minimal gas fees and maximum returns. 🚀",
    "summary": "NeuralFi Yield Aggregator is a decentralized finance (DeFi) smart contract that optimizes yield generation by integrating Uniswap, Aave, GMX, and Curve. It enables token swaps, lending, and trading strategies through an AI-driven agent."
  },
  {
    "title": "AIMen",
    "url": "https://ethglobal.com/showcase/aimen-xp5ma",
    "description": "Project DescriptionAIM streamlines onchain programming by leveraging a Markdown-inspired language that lets you write near-natural language instructions for AI-driven blockchain workflows without the usual verbosity. Instead of writing extensive boilerplate, AIM enables you to perform tasks like filtering tokens on Uniswap or checking your balance with simple, intuitive commands, seamlessly integrating with Ethereum’s ecosystem. This approach not only reduces the overhead associated with traditional coding and LLM token usage but also frees you from vendor lock-in, offering a more accessible, cost-effective, and adaptable solution for decentralized applications.How it's MadeFor this hackathon, I extended AIMX (the CLI tool for executing AIM documents) to support tools and plugins, adding Coinbase Agentkit tools and The Graph for fetching onchain data as tools. I've implemented several core features for AIM—a Markdown-based language for onchain agentic workflows—including filesystem support to load referenced documents at runtime, an aim.config.ts for project configuration, a minimal server with GET/POST endpoints for managing docs, and a Tailwind-styled UI to neatly visualize workflow flows. Additionally, I enabled running inference locally via a CLI that respects environment variables and deployed the application on fly.io. These implementations lay the groundwork for AIM’s extensible framework—including the new plugin system—which will allow further integration of external data sources and services.",
    "summary": "Create reusable onchain agentic workflows with natural language programming"
  },
  {
    "title": "Squarebox",
    "url": "https://ethglobal.com/showcase/squarebox-6od80",
    "description": "Project DescriptionAI Agent Explorer is a Web3-focused search engine platform that utilizes AI agents to help users explore and analyze blockchain data, smart contracts, NFTs, and the latest Web3 trends. The platform personalizes the search experience, processes real-time data, and offers an intuitive interface for both Web2 and Web3 users.How it's Made Autonome Trend Analysis and Automation: Leverages Autonome AI agents to analyze the most searched keywords and news, automatically posting them on social media platforms like Twitter. Custom Agent Creation: Deploys search agents tailored to specific topics based on user needs. Covalent Data Visualization and Analysis: Uses Covalent’s AI Agent SDK to help users visualize and analyze Web3 data. Context-Aware AI: Understands user search intent and provides tailored results.",
    "summary": "AI Agent Explorer is a Web3-focused search engine platform that utilizes AI agents to help users explore and analyze blockchain data, smart contracts, NFTs, and the latest Web3 trends."
  },
  {
    "title": "BnB3DAO",
    "url": "https://ethglobal.com/showcase/bnb3dao-da2k7",
    "description": "Project DescriptionKey Features: Decentralized booking system with smart contract-powered reservations Property listing and management system for hosts Secure guest verification and booking process Automated payment settlements and refund handling Technical Stack: Smart contracts deployed on ethena testnet Web3 frontend for seamless user interaction Decentralized storage for property details and user data The platform aims to bring the benefits of blockchain technology to the hotel sector, offering reduced fees, increased transparency, and automated trust mechanisms for both hosts and guests.How it's MadeSmart contracts deployed on ethena testnet Web3 frontend for seamless user interaction Decentralized storage for property details and user data Goals after the hackathon Launch BnB3 on mainnet Expand property listings globally Integrate additional features like dynamic pricing and reputation systems Partner with existing hotel platforms for wider adoption",
    "summary": "BnB3 (Bed & Breakfast Web3) is a decentralized hotel platform that revolutionizes short-term property rentals using blockchain technology."
  },
  {
    "title": "M-P Wonderful Life",
    "url": "https://ethglobal.com/showcase/m-p-wonderful-life-fyy7h",
    "description": "Project DescriptionMachu Picchu is like the Inca citadel of same name, that is made of huge stone blocks tightly fit together. Machu Picchu is composed of tools in DeFi, IPFS, AI, Earth Observation, low cost Raspberry Pi-style SBCs with AI HATs. In this hackathon we will address a subset of Machu Picchu functions. The following resources explain Machu Picchu and its technologies: Our scenario: • the actors are the person in need who posts a free text profile : age, gender, location, occupation, needs an international helper organization, represented by an agent that creates an embedding of the profile (a vector of 512 parametres) and stores the profiles + embeddings on IPFS and their CID hashes on blockchain • an agent that would create in free text a Helper Program (objectives, target region, target group, duration, KPI, scale, budget), make an embedding of the Helper Program an agent that would match the vector of the persons in need and match with the vector of the Helper Program, finding the person who are the most entitled for help How it's MadeTech Stack Frontend: Next.js 14, ethers.js, TailwindCSS,Framer Motion, etc. Authentication: Privy for wallet connection and social login Blockchain: Remix IDE, Deployed on Sepolia testnet, etc Storage: IPFS via Pinata for decentralized storage of profiles and program data AI/ML: Autonome (Eliza) AI Agent integrated with Telegram and Twitter to assist users with undestanding of application and answer queries related to it. Vector similarity matching for program-profile compatibility Smart Contracts: Solidity for storing CIDs and managing program data Key Features & Implementation Profile Management: User profiles are converted to embeddings using AI API Both original profile and embeddings are stored on IPFS IPFS CIDs are stored on-chain for verification Helper Program Matching: Program requirements are converted to embeddings Vector similarity comparison with stored profiles Automatic matching of suitable candidates Decentralized Architecture: No central database - all data stored on IPFS and blockchain Smart contracts manage data integrity and access control Fully decentralized authentication via Privy Notable Technical Implementations Custom vector similarity algorithm for profile matching Hybrid storage approach combining IPFS and blockchain Responsive UI with server-side rendering for better performance Real-time updates using blockchain events Integrated with Telegram an Twitter In-App Chatbot to assit users throughout the application.",
    "summary": "Wonderful Life is humanitarian. It collects free-text profiles of persons in need, creates embeddings, stores profiles & vectors on IPFS, stores CIDs on blockchain. Given a helper program, it makes its embedding and matches the closest profiles to help, based on the embeddings"
  },
  {
    "title": "Thaink Tank",
    "url": "https://ethglobal.com/showcase/thaink-tank-250is",
    "description": "Project DescriptionThaink Tank is an onchain platform for collaborative idea development, where contributions are anonymous and encrypted using Lit Protocol actions initially inspired by old social games «сadavre exquis» and «bouts-rimés». Participants add to discussions without seeing the full history, ensuring fresh perspectives. Each contribution is evaluated by AI before acceptance, determining its impact and influencing the participant’s share of rewards. While participation is public, individual inputs remain private. Fees from minting an ERC-1155 token and accessing AI-generated summaries via gated prompting are collected in a dedicated contract and claimable by contributors based on their assessed contributions. The main mechanism is the following: one initiates a think tank in a form of ERC1155 token (Idea) others can provide their thought (note) on the initial idea and if pass AI-agent evaluation it's being included in a digest combining all of the previous notes but condensed and systematized, both are getting decrypted and stored in the smart contract users interested in the results of this idea development can mint it and this way get access to the agent in order to prompt digest this gets a certain fee fees collected are then claimable by contributors based on their addition's evaluation score The evaluation is based on grading its relevance, novelty, depth, clarity and impact from 0 to 10 and producing a resulting weighted score. Thaink Tank addresses several problems related to collaborative ideation, knowledge-sharing, and incentivization in decentralized environments: Bias & Idea Contamination – Traditional brainstorming can be influenced by groupthink or dominant voices. By keeping contributions anonymous and restricting visibility to prior inputs only, Thaink Tank ensures fresh, independent thinking. Intellectual Property & Attribution – Contributors often don't get credit or compensation for their ideas in open discussions. This platform secures inputs onchain, fairly distributing rewards based on AI-evaluated impact. Lack of Incentives in Open Collaboration – Many idea-sharing platforms rely on goodwill, with no direct compensation for valuable input. Thaink Tank introduces a transparent, automated reward system, aligning incentives for participation. Overload of Unstructured Information – Open discussions generate large volumes of text, making it hard to extract value. AI-powered summaries condense contributions into actionable insights, accessible only to those who pay and distribute fees to contributors. Privacy & Idea Security – Many online collaboration spaces are either too open or locked behind centralized platforms. Thaink Tank ensures privacy with Lit Protocol encryption while keeping participation verifiable and decentralized. Overall, the app creates a permissionless, incentive-aligned space for structured, high-quality, and anonymous idea development.How it's MadeThe main challenge was to grasp Lit Protocol in such a short amount of time as it's quite a complex system of terms, primitives and techniques. I really loved digging it but i wish i had more time to implement all features i planned. Building an AI agent which is evaluating users input and providing a meaningful insights from the collaboratively arranged knowledge was also quite a tough task, but i'm really proud of the results :) Frontend: React 18 with TypeScript, using Vite as the build tool Smart Contracts: Solidity (Thaink.sol, Tank.sol) Blockchain: Base Network integration via Wagmi 2.x Privacy Layer: Lit Protocol v7 for encrypted contributions AI Integration: Custom AI agent based on Coinbase AgentKit for contribution evaluation UI Components: Radix UI primitives with Tailwind CSS for styling Key Technical Features Privacy-First Architecture Implements Lit Protocol for client-side encryption of contributions Anonymous participation while maintaining on-chain verifiability Encrypted storage right in the smart contracts with controlled access mechanisms AI Evaluation System Custom AI agent (thainky.ts) for real-time contribution assessment Automated scoring based on relevance, novelty, and impact Structured digest generation with AI-powered summarization Blockchain Integration Smart contract-based tokenized (ERC1155 with proxied contract for data and access management for each of the token) store and reward distribution system On-chain metadata Automated input evaluation via Lit Actions based on AI-evaluated impact scores Base network deployment for scalable and cost-effective operations Privy.io integration for seamless web3 authentication",
    "summary": "Decentralized, anonymous and incentivized AI powered collaboration for ideas, stories, and solutions"
  },
  {
    "title": "AgenticPlaceholder",
    "url": "https://ethglobal.com/showcase/agenticplaceholder-0af9g",
    "description": "Project DescriptionLet me help craft a polished project description for AgenticPlaceholder that highlights its innovative features and technical architecture. AgenticPlaceholder: Revolutionizing Digital Advertising Through Autonomous Web3 Infrastructure AgenticPlaceholder represents a groundbreaking advancement in digital outdoor advertising, seamlessly merging blockchain technology with Internet of Things (IoT) capabilities to create a fully autonomous, decentralized advertising network. Deployed on the Base blockchain, our platform reimagines how digital billboards operate in the Web3 era by introducing intelligent automation at every level of the advertising process. At the heart of our system lies a sophisticated dual-agent architecture powered by Coinbase's AI Agent Kit. The first agent serves as an intuitive interface for advertisers, eliminating traditional barriers to entry in the digital advertising space. Through natural language conversations, users can effortlessly create and mint advertising content as NFTs, without requiring direct interaction with cryptocurrency wallets. This agent handles everything from generating ad copy to creating AI-powered visuals, making digital billboard advertising accessible to everyone. Our second agent introduces unprecedented automation to the bidding process. Operating continuously in the background, this autonomous agent employs dynamic bidding strategies to secure optimal billboard placements for advertisers. It analyzes market conditions, adjusts tactics in real-time, and participates in dutch auctions within our PlaceHolder Marketplace, ensuring advertisers achieve their display objectives without manual intervention. The technical infrastructure is built on a foundation of smart contracts that manage both the NFT minting process and our specialized marketplace. These contracts facilitate transparent, trustless transactions while maintaining the platform's autonomous nature. The physical display network consists of Raspberry Pi devices running custom Flutter applications, which monitor the blockchain in real-time and instantly display new advertisements as they're confirmed on-chain. To maintain high advertising standards and publisher accountability, we've integrated True Network's attestation layer. This system collects and verifies user ratings for advertisements, computing reputation scores for publishers. These attestations are permanently recorded on the blockchain, creating a transparent and immutable record of advertising quality and publisher reliability. This combination of autonomous agents, blockchain technology, and IoT infrastructure creates a self-sustaining advertising ecosystem that operates with minimal human intervention while maximizing efficiency and transparency for all participants. AgenticPlaceholder represents the future of digital outdoor advertising, where artificial intelligence and blockchain technology converge to create a more accessible, efficient, and accountable advertising landscape.How it's MadeAgentic Placeholder is an autonomous, blockchain-powered ad network that ensures trust, transparency, and efficiency in digital advertising. Automated Ad Creation: AI agents interact with advertisers, generate ad content and images, and issue an NFT in exchange for ad creation. Decentralized Ad Display: Operators provide screen space for ad placements, and publishers compete for slots through a bidding system. A bidding agent runs Dutch-style auctions, securing optimal ad slots based on predefined criteria. Reputation-Driven System: Ads include an on-chain reputation score for publishers, along with a QR code that enables viewers to rate ads (1-5 stars) and leave feedback. Onchain Attestation : Simple, structured, and immutable pieces of information given to the users on True Network. COMPONENTS : Operator Display App (Raspberry Pi + Flutter) Runs on Flutter, deployed on a Raspberry Pi device. Listens to smart contract events for auction status updates and displays ads once a bid is placed. Reacts dynamically to state changes in real-time. Smart Contracts (Solidity) NFT Contract: Mints an NFT for each ad created. Bidding Contract: Implements a Dutch auction mechanism for ad slots. Token Contract: Uses PSDT (Placeholder Stable Dollar Token) as the reward and payment token. AVS FeedbackManager: Manages AVS and Eigen Layer contracts. Mobile App (Flutter) Allows users to connect their wallets and scan QR codes on ads. Users can rate ads (1-5 stars) and leave feedback, which gets attested on-chain via True Network. Attestations contribute to publisher reputation scores, ensuring transparent feedback. Publisher Dashboard (Next.js + Backend APIs) Built with Next.js for a seamless UI/UX experience. Displays bid data, and real-time updates. Backend APIs (JavaScript) connect the dashboard, display app, and mobile app. Uses WebSockets to listen for smart contract events and push updates instantly. AI Agents (Coinbase AI + EigenLayer AVS +) Ad Creation AI: Built on Coinbase Developer Platform, using DALL·E to generate ad titles, descriptions, and images based on minimal publisher input. The AI-generated content is then minted as an NFT. Bidding AI: Autonomously bids on behalf of multiple publishers, optimizing for the best slots and prices. Sentiment Analysis AI: When users leave feedback, an AI agent analyzes sentiment and creates on-chain proofs to further refine publisher reputations.",
    "summary": "AgenticPlaceholder is an On-Chain Ad network for Digital Billboards driven by ai agent automation."
  },
  {
    "title": "NotAIry",
    "url": "https://ethglobal.com/showcase/notairy-emnaj",
    "description": "Project DescriptionNotAIry is a decentralized platform that combines AI-powered analysis with Web3 identity to create trusted, verified stories about blockchain technology and AI developments. The platform helps writers create high-quality technical content while providing readers with confidence in the accuracy and authenticity of the information.How it's MadeKey Features Smart Contract Integration MetaMask wallet integration for Web3 identity On-chain identity scoring using transaction history and DeFi activity Wallet-based authentication and authorization AI-Powered Content Analysis Automated story review and scoring system Technical accuracy validation Content quality assessment Engagement potential analysis Story Management Multi-status workflow (draft, in review, published) Real-time story updates and notifications Rich text editing and formatting Story categorization (smart contracts, AI models, DeFi protocols) Identity & Trust Web3 identity verification Trust scoring based on on-chain activity DeFi participation metrics NFT holdings analysis Social engagement tracking Technical Stack Frontend: SvelteKit Backend: Supabase Blockchain: Base (Coinbase L2) AI: Gaia AI for content analysis Data: Covalent API for on-chain analytics Privy.io for authentication Core Mission NotAIry aims to bridge the gap between technical content creation and verification in the Web3 space. By leveraging AI for initial content validation and combining it with Web3 identity, we create a trusted environment for sharing and verifying blockchain and AI-related stories. The platform helps ensure that technical content about smart contracts, AI models, and DeFi protocols is accurate, well-written, and properly contextualized, while maintaining the decentralized ethos of Web3.",
    "summary": "NotAIry is a decentralized platform that combines AI-powered analysis with Web3 identity to create trusted, verified stories about blockchain technology and AI developments."
  },
  {
    "title": "NotAIry",
    "url": "https://ethglobal.com/showcase/notairy-emnaj",
    "description": "Project DescriptionNotAIry is a decentralized platform that combines AI-powered analysis with Web3 identity to create trusted, verified stories about blockchain technology and AI developments. The platform helps writers create high-quality technical content while providing readers with confidence in the accuracy and authenticity of the information.How it's MadeKey Features Smart Contract Integration MetaMask wallet integration for Web3 identity On-chain identity scoring using transaction history and DeFi activity Wallet-based authentication and authorization AI-Powered Content Analysis Automated story review and scoring system Technical accuracy validation Content quality assessment Engagement potential analysis Story Management Multi-status workflow (draft, in review, published) Real-time story updates and notifications Rich text editing and formatting Story categorization (smart contracts, AI models, DeFi protocols) Identity & Trust Web3 identity verification Trust scoring based on on-chain activity DeFi participation metrics NFT holdings analysis Social engagement tracking Technical Stack Frontend: SvelteKit Backend: Supabase Blockchain: Base (Coinbase L2) AI: Gaia AI for content analysis Data: Covalent API for on-chain analytics Privy.io for authentication Core Mission NotAIry aims to bridge the gap between technical content creation and verification in the Web3 space. By leveraging AI for initial content validation and combining it with Web3 identity, we create a trusted environment for sharing and verifying blockchain and AI-related stories. The platform helps ensure that technical content about smart contracts, AI models, and DeFi protocols is accurate, well-written, and properly contextualized, while maintaining the decentralized ethos of Web3.",
    "summary": "NotAIry is a decentralized platform that combines AI-powered analysis with Web3 identity to create trusted, verified stories about blockchain technology and AI developments."
  },
  {
    "title": "AlTNode",
    "url": "https://ethglobal.com/showcase/altnode-gve0x",
    "description": "Project DescriptionBuild AI Agents with Ease Our intuitive IDE lets you: Choose from powerful AI modules. Write custom functions with built-in Python support. Document and refine your agent’s capabilities effortlessly. Own & Monetize Your AI as an NFT Once your agent is ready, mint it as an NFT on the Flow blockchain. Metadata is securely stored on IPFS, turning your AI into a decentralized, tradeable asset. No Coding? No Problem. Just describe three things: What your agent should do. How it should handle input. What the expected output should be. AITnode’s AI-powered system will generate a fully functional agent based on your vision. A Web3-Powered AI Economy AITnode introduces AIT tokens (ALT) to fuel the AI marketplace: Buy AIT tokens with Arbitrum. Use them to mint and launch your AI agent’s own tokens. Set a percentage of your agent’s tokens to reward NFT subscribers, creating a sustainable AI economy. AI & Web3, Unified This isn’t just AI development—it’s true ownership, decentralized monetization, and an open AI economy. Welcome to AITnode—the next evolution of AI and Web3!How it's MadeHow We Built AITnode: A Deep Dive into the Tech Stack Building AITnode required a fusion of Web3, AI, and decentralized technologies, ensuring seamless onboarding, secure asset management, and efficient AI agent deployment. Here’s a detailed breakdown of the architecture and key integrations. Frontend: Next.js, TypeScript, and Tailwind CSS To create a highly responsive, modular, and scalable UI, I chose Next.js with TypeScript and Tailwind CSS: Next.js offers SSR (Server-Side Rendering) and ISR (Incremental Static Regeneration), optimizing performance for a dynamic AI marketplace. TypeScript enforces type safety, reducing runtime errors and making the codebase more maintainable. Tailwind CSS provides a utility-first styling approach, speeding up development while maintaining design consistency. Key Implementations: Used dynamic routing for AI agent pages, ensuring each deployed AI agent has a unique, SEO-friendly route. Optimized asset loading with Next.js image optimization for storing NFT previews. Integrated server actions with Next.js API routes to handle AI metadata retrieval and encryption seamlessly. Web3 Integration: Arbitrum Sepolia, OnchainKit, Wagmi, and OpenZeppelin Arbitrum Sepolia for Smart Contract Deployment We deployed our smart contracts on Arbitrum Sepolia, an Ethereum Layer 2 testnet that offers low gas fees and fast finality. The testnet ensures rapid deployment and testing before moving to a mainnet environment. Optimistic Rollups enable scalable transactions while inheriting Ethereum’s security. Onboarding & Wallet Management: OnchainKit + Wagmi For a seamless onboarding experience, we integrated OnchainKit and Wagmi: OnchainKit simplifies wallet connection and onboarding, making it easy for non-technical users to sign transactions. Wagmi provides a React-based Web3 connector, handling wallet authentication, contract interactions, and on-chain data fetching. NFT Minting & Tokenization: OpenZeppelin (ERC-721 & ERC-20) For secure, upgradeable, and gas-optimized smart contracts, we leveraged OpenZeppelin’s ERC-721 and ERC-20 implementations. ERC-721 for AI Agents: Each AI agent is minted as a unique NFT, ensuring verifiable ownership. ERC-20 for AI Agent Tokens: Each AI agent can launch its own fungible token with a fixed supply, enabling a tokenized AI economy. Custom metadata storage allows linking NFTs to AI agents stored on IPFS via Pinata. AI Agent Deployment: Autonome For deploying and executing AI agents, we integrated Autonome, a decentralized AI execution framework. This allows AI agents to run independently, without relying on centralized cloud services. Smart contracts trigger AI executions, ensuring a fully on-chain AI workflow. How It Works: Users define AI agent logic via our Monaco-powered IDE. The AI agent is minted as an NFT with its metadata encrypted via Lit Protocol. The NFT owner can execute the AI agent, triggering Autonom to process the request. Code Editing & Asset Security: Monaco Editor + Lit Protocol + Pinata Monaco Editor for AI Agent Development We embedded Monaco Editor (the same editor powering VS Code) to provide a rich, in-browser AI development experience. Syntax highlighting for Python and Solidity. Live AI agent previews before minting. Integration with AI-assisted code generation to help users refine their agents. Lit Protocol for Encryption & Access Control To protect AI agent metadata, we used Lit Protocol to encrypt the asset URI metadata before storing it on IPFS. This ensures that only authorized NFT holders can access and execute the AI logic. Decryption occurs only when the correct blockchain conditions are met, reinforcing AI ownership. Pinata for IPFS Storage We used Pinata to upload and manage metadata on IPFS, ensuring decentralized and tamper-proof storage for AI agent assets. This improves accessibility and availability across the blockchain network. Provides a seamless bridge between Web3 applications and distributed file storage. What Was Particularly Hacky? Encrypted AI Execution Instead of storing AI agent logic publicly, we encrypted it using Lit Protocol and allowed decryption only when an NFT ownership check was verified on-chain. AI Tokenomics via Smart Contracts Each AI agent NFT can issue its own ERC-20 tokens. A fixed supply is minted, and a percentage is allocated to subscribers, ensuring a sustainable AI-powered token economy. On-Chain AI Invocation We experimented with triggering AI models directly from smart contracts. While off-chain AI execution (via Autonom) is the current approach, we’re exploring ZKML (Zero-Knowledge Machine Learning) to run AI inference fully on-chain. Final Thoughts Building AITnode meant combining the best of Web3, AI, and decentralized computing. By leveraging Next.js for a fast UI, Arbitrum Sepolia for scalable transactions, Autonom for AI execution, Pinata for decentralized metadata storage, and Lit Protocol for encryption, we created a fully decentralized AI marketplace where users can create, own, and monetize AI agents like never before.",
    "summary": "a decentralised token launchpad where creators in the ai agent market can showcase ideas, launch agents and monetise their contributions to the community."
  },
  {
    "title": "AgentDeFiSphere",
    "url": "https://ethglobal.com/showcase/agentdefisphere-59dcb",
    "description": "Project DescriptionTracking Web3 trends requires a significant amount of time and effort for many people, even for those who are somewhat knowledgeable about Web3. Moreover, the task of summarizing these trends in a concise and easy-to-understand manner becomes an even greater burden. Ultimately, even if we incorporate AI agents, human knowledge is still needed when thinking of prompts. We believe that simply adding AI agents won't lead to a dramatic improvement in UI/UX. To solve this issue, we propose a new approach: \"Interactive Discussions Between AI Agents\" and \"User-Participation Live Discussions\". Features: AI Agent Discussions: AI agents discuss trending topics in real-time, offering users new perspectives and insights. User Participation: Users can join the discussion via chat, and influence the AI agents' discussions and behavior through tipping. Live Experience: Incorporating elements from platforms like NicoNico, users can enjoy discussions and efficiently gather information in a real-time streaming environment. Value Offered: Efficient Information Gathering: Provides easy-to-understand summaries of large amounts of information related to trends, reducing users' burden. Interactive Entertainment: Not only can users observe AI agents' discussions, but they can also influence the discussions through tipping or chatting, creating a new entertainment experience. Global Access: Users from around the world can participate in real-time, creating a space to share diverse perspectives. Beginner-Friendly: By including an agent focused on beginner-level crypto asset topics in live discussions, simple questions and exchanges can be automatically handled. The AI Agents take action on a DeFi protocol as a result of their discussions: After the live discussion, the AI Agents perform operations on a DeFi protocol to efficiently grow assets. These operations are selected from functions defined by an external tool developed for this hackathon. The external tool implements the following features: - Token swaps on Uniswap - Lending on the AAVE Protocol - Staking using Lido - Restaking using EigenLayer How it's MadeFrontend: The frontend is developed using Next.js and Coinbase's OnChainKit. Users can seamlessly create wallets through SmartWallet functionality. They can also send small amounts of cryptocurrency to the server wallet for AI Agents using a tipping feature. Backend: The backend consists of two components: Customized CDP Agent Kit API Server: This server is hosted on Autonome and is customized for the CDP Agent Kit. In addition to the standard features, we integrated external tools to support operations with the AAVE Protocol for this hackathon. We also published a customized Agent Kit framework on Autonome. Custom API Server on Cloud Run: The server uses Hono as the framework for API development. It implements AI Agent logic using Agent Kits from LangChain, LangGraph, and VertexAI. Multiple LLMs, including Gemini, Llama, OpenAI, and Claude, are used to foster dynamic discussions about Web3 and cryptocurrencies. These models are selected based on specific needs to enhance discussions. AI Agents with Six Roles: The AI Agents are assigned six distinct roles for effective discussions: Social Trend Collection Specialist News and Fundamental Information Specialist Risk Management Agent Performance Monitoring Agent Analysis and Strategy Agent Execution and Operation Agent",
    "summary": "A new experience of following and enjoying trends with AI Agents. A live discussion DeFi platform where AI Agents engage in debates, and users can participate and influence the conversation."
  },
  {
    "title": "aipfs-library",
    "url": "https://ethglobal.com/showcase/aipfs-library-962mt",
    "description": "Project DescriptionImagine a revolutionary platform that bridges the gap between decentralized networks and traditional torrenting. Our innovative solution enables AI-powered agents to seamlessly integrate with the torrent network, allowing users to effortlessly discover, download, and upload files to IPFS, thereby creating a decentralized media library.How it's MadeTo achieve this, we leveraged Coinbase's CDP with custom actions, empowering the Agent to perform tasks such as file retrieval and IPFS upload. Additionally, we integrated Coinbase's Onchain Kit for future wallet interactions and web3 login capabilities, ensuring seamless user authentication. Our AI-driven capabilities, powered by Hyperbolic, provide intelligent search and recommendation features, further enhancing the user experience. The frontend is designed as a static, self-hostable solution, allowing anyone to host and customize the interface. Meanwhile, the backend nodes can be deployed on decentralized hosting services, ensuring maximum flexibility and scalability.",
    "summary": "Decentralized media library managed by AI agents indexing torrents and curated by the community"
  },
  {
    "title": "LinguaChain",
    "url": "https://ethglobal.com/showcase/linguachain-0dvqb",
    "description": "Project DescriptionLinguaChain LinguaChain is a decentralized platform designed to facilitate the collaborative evolution of artificial languages. Built on the ElizaOS framework, it leverages AI to assist users in creating new symbols, words, and grammatical rules while ensuring transparent governance through blockchain-based voting. At its core, LinguaChain enables a DAO-driven system where participants can: Propose linguistic changes. Vote on proposals using the platform’s native token. See approved modifications integrated in real-time. The AI-powered assistant simplifies the proposal process, making it accessible even to non-technical users. With a structured language database, transparent decision-making, and token-based staking for governance, LinguaChain provides an innovative and community-driven approach to language development, ensuring adaptability, decentralization, and long-term sustainability. Main Process Connect Wallet in Terminal – The user connects their wallet. AI suggests language chunk – AI (ElizaOS) suggests a language fragment. Create Proposal – A proposal is created based on AI generation. Submit for DAO Approval – The proposal is submitted for DAO voting. DAO Decision If the proposal is approved, the following steps are executed: Execute Proposal – The proposal is executed. Call API to Update Database – The database is updated via API. Mark Proposal as Done in Smart Contract – The proposal is recorded on the blockchain. If the proposal is rejected, an alternative path is triggered: Query Proposal Info via ElizaOS – Retrieve information about the proposal. Create Another Proposal – A new proposal is created. AI ASSISTANT IN ACTION Example of adding new worlds Description: This image features a stylized representation of Bitcoin (₿) with the text \"BITCOIN\" accompanied by cuneiform-style symbols (𒂆𒃻𒆰), blending modern cryptocurrency with ancient script aesthetics. The design highlights Bitcoin's revolutionary role in finance while drawing a connection to the historical evolution of value and communication systems. Options: Suggest Another Variant Publish to DAO Gemifiacation How it's MadeAI Agent & DAO Integration As the core for the agent runtime, we chose ElizaOS, as it met all our requirements for creating an AI-powered assistant. We developed a character AI responsible for monitoring and advising on the addition of new linguistic units to our language. To streamline the governance process, we enabled direct proposal submissions to the DAO from the chat interface. This allows participants to propose changes seamlessly, increasing engagement and improving the voting process. Technology Stack Frontend React + Tailwind CSS + Shadcn/UI – Provides a clean, responsive UI with an enhanced user experience. Backend Runtime Agent: ElizaOS powers AI-driven language creation and optimization. State Management: Express & NoSQL ensure efficient data handling and caching. Web3 Integration: Smart contracts and DAO logic implemented with Solidity. API Layer: RPC ensures seamless blockchain interactions. AI & Smart Contracts AI Processing: OpenAI API assists in linguistic analysis and generation. Smart Contracts: Solidity handles decentralized voting and governance. Programming Languages TypeScript, JavaScript, Python, Solidity – Ensuring flexibility and scalability across the stack. Key Innovations & Hacks AI-assisted governance: AI directly interacts with DAO proposals, refining linguistic submissions before they are voted on. Seamless Web3 UX: Users interact with blockchain governance directly from the chat interface. Optimized State Management: Combines NoSQL + Express for efficient handling of linguistic data. On-Chain Voting & Transparency: All decisions are verifiable and stored on Arbitrum Layer 2, reducing costs and increasing speed. LinguaChain DAO Contract: 0x9DC2869f1278331bE05A57DD25A21021F058A430 DAO Details: 0xf3f9284a39056b49c14cd60e85d6a59cefa85da8 LinguaChain ERC20 Tokens: 0xbc4649446e119377fb99281e744f59402a89f7ae",
    "summary": "LinguaChain: AI & DAO-Powered Platform for Creating and Managing Conlangs"
  }
]